
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002030  08002030  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002030  08002030  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002030  08002030  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002034  08002034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000003c  08002074  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002074  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006268  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013fa  00000000  00000000  00026310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000540  00000000  00000000  00027df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f58  00000000  00000000  00028330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d74  00000000  00000000  0003e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e4c9  00000000  00000000  00046ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b10  00000000  00000000  000c54c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c6fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f74 	.word	0x08001f74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08001f74 	.word	0x08001f74

0800014c <lcd_send_cmd>:
};

#endif

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f000 ff6b 	bl	8001074 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000058 	.word	0x20000058

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f000 ff3b 	bl	8001074 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000058 	.word	0x20000058

0800020c <lcd_init>:

void lcd_init (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f000 fb27 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fb21 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fb1b 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fb15 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 fb0f 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f000 fb09 	bl	8000870 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000296:	2001      	movs	r0, #1
 8000298:	f7ff ff58 	bl	800014c <lcd_send_cmd>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	switch(row){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b04      	cmp	r3, #4
 80002ae:	d01d      	beq.n	80002ec <lcd_goto_XY+0x4c>
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	dc24      	bgt.n	8000300 <lcd_goto_XY+0x60>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	d003      	beq.n	80002c4 <lcd_goto_XY+0x24>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d00a      	beq.n	80002d8 <lcd_goto_XY+0x38>
 80002c2:	e01d      	b.n	8000300 <lcd_goto_XY+0x60>
		case 2:
			pos_Addr = 0x80 | (0x40 + col);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	3340      	adds	r3, #64	; 0x40
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	73fb      	strb	r3, [r7, #15]
			break;
 80002d6:	e01c      	b.n	8000312 <lcd_goto_XY+0x72>
		case 3:
			pos_Addr = 0x80 | (0x14 + col);
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	3314      	adds	r3, #20
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	b25b      	sxtb	r3, r3
 80002e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002e6:	b25b      	sxtb	r3, r3
 80002e8:	73fb      	strb	r3, [r7, #15]
			break;
 80002ea:	e012      	b.n	8000312 <lcd_goto_XY+0x72>
		case 4:
			pos_Addr = 0x80 | (0x54 + col);
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	3354      	adds	r3, #84	; 0x54
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	b25b      	sxtb	r3, r3
 80002f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	73fb      	strb	r3, [r7, #15]
			break;
 80002fe:	e008      	b.n	8000312 <lcd_goto_XY+0x72>
		default:
			pos_Addr = 0x80 + row - 1 + col;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	b2da      	uxtb	r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4413      	add	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	337f      	adds	r3, #127	; 0x7f
 800030e:	73fb      	strb	r3, [r7, #15]
			break;
 8000310:	bf00      	nop
	}
	lcd_send_cmd(pos_Addr);
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ff19 	bl	800014c <lcd_send_cmd>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <lcd_createChar>:


void lcd_createChar(uint8_t location, uint8_t charmap[]) {
 8000322:	b580      	push	{r7, lr}
 8000324:	b084      	sub	sp, #16
 8000326:	af00      	add	r7, sp, #0
 8000328:	4603      	mov	r3, r0
 800032a:	6039      	str	r1, [r7, #0]
 800032c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0307 	and.w	r3, r3, #7
 8000334:	71fb      	strb	r3, [r7, #7]
  lcd_send_cmd(LCD_SETCGRAMADDR | (location << 3));
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	b25b      	sxtb	r3, r3
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	b25b      	sxtb	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff01 	bl	800014c <lcd_send_cmd>
  for (int i=0; i<8; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e009      	b.n	8000364 <lcd_createChar+0x42>
	  lcd_send_data(charmap[i]);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	683a      	ldr	r2, [r7, #0]
 8000354:	4413      	add	r3, r2
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff27 	bl	80001ac <lcd_send_data>
  for (int i=0; i<8; i++) {
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b07      	cmp	r3, #7
 8000368:	ddf2      	ble.n	8000350 <lcd_createChar+0x2e>
  }
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fa18 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f890 	bl	80004a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f8fe 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000384:	f000 f8ce 	bl	8000524 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 fa70 	bl	8000870 <HAL_Delay>
  lcd_init();
 8000390:	f7ff ff3c 	bl	800020c <lcd_init>
  lcd_goto_XY(1, 0);
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ff82 	bl	80002a0 <lcd_goto_XY>
  lcd_send_string("Toi Tuan Cui xin the");
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <main+0xf0>)
 800039e:	f7ff ff63 	bl	8000268 <lcd_send_string>
  HAL_Delay(50);
 80003a2:	2032      	movs	r0, #50	; 0x32
 80003a4:	f000 fa64 	bl	8000870 <HAL_Delay>
  lcd_goto_XY(2, 0);
 80003a8:	2100      	movs	r1, #0
 80003aa:	2002      	movs	r0, #2
 80003ac:	f7ff ff78 	bl	80002a0 <lcd_goto_XY>
  lcd_send_string("   Trung voi Dang   ");
 80003b0:	482d      	ldr	r0, [pc, #180]	; (8000468 <main+0xf4>)
 80003b2:	f7ff ff59 	bl	8000268 <lcd_send_string>
  HAL_Delay(50);
 80003b6:	2032      	movs	r0, #50	; 0x32
 80003b8:	f000 fa5a 	bl	8000870 <HAL_Delay>
  lcd_goto_XY(3, 0);
 80003bc:	2100      	movs	r1, #0
 80003be:	2003      	movs	r0, #3
 80003c0:	f7ff ff6e 	bl	80002a0 <lcd_goto_XY>
  lcd_send_string("    Hieu voi Dan    ");
 80003c4:	4829      	ldr	r0, [pc, #164]	; (800046c <main+0xf8>)
 80003c6:	f7ff ff4f 	bl	8000268 <lcd_send_string>
  HAL_Delay(50);
 80003ca:	2032      	movs	r0, #50	; 0x32
 80003cc:	f000 fa50 	bl	8000870 <HAL_Delay>
  lcd_goto_XY(4, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2004      	movs	r0, #4
 80003d4:	f7ff ff64 	bl	80002a0 <lcd_goto_XY>
  lcd_send_string("  San sang di NVQS  ");
 80003d8:	4825      	ldr	r0, [pc, #148]	; (8000470 <main+0xfc>)
 80003da:	f7ff ff45 	bl	8000268 <lcd_send_string>
  HAL_Delay(200);
 80003de:	20c8      	movs	r0, #200	; 0xc8
 80003e0:	f000 fa46 	bl	8000870 <HAL_Delay>
  lcd_clear_display();
 80003e4:	f7ff ff55 	bl	8000292 <lcd_clear_display>

  lcd_createChar(0, armsDown);
 80003e8:	4922      	ldr	r1, [pc, #136]	; (8000474 <main+0x100>)
 80003ea:	2000      	movs	r0, #0
 80003ec:	f7ff ff99 	bl	8000322 <lcd_createChar>
  // create a new character
  lcd_createChar(1, smiley);
 80003f0:	4921      	ldr	r1, [pc, #132]	; (8000478 <main+0x104>)
 80003f2:	2001      	movs	r0, #1
 80003f4:	f7ff ff95 	bl	8000322 <lcd_createChar>
  // create a new character
  lcd_createChar(2, frownie);
 80003f8:	4920      	ldr	r1, [pc, #128]	; (800047c <main+0x108>)
 80003fa:	2002      	movs	r0, #2
 80003fc:	f7ff ff91 	bl	8000322 <lcd_createChar>
  // create a new character
  lcd_createChar(3, heart);
 8000400:	491f      	ldr	r1, [pc, #124]	; (8000480 <main+0x10c>)
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff8d 	bl	8000322 <lcd_createChar>
  // create a new character
  lcd_createChar(4, armsUp);
 8000408:	491e      	ldr	r1, [pc, #120]	; (8000484 <main+0x110>)
 800040a:	2004      	movs	r0, #4
 800040c:	f7ff ff89 	bl	8000322 <lcd_createChar>
  lcd_createChar(5, Tuan);
 8000410:	491d      	ldr	r1, [pc, #116]	; (8000488 <main+0x114>)
 8000412:	2005      	movs	r0, #5
 8000414:	f7ff ff85 	bl	8000322 <lcd_createChar>

  // set the cursor to the top left
  lcd_goto_XY(1, 0);
 8000418:	2100      	movs	r1, #0
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ff40 	bl	80002a0 <lcd_goto_XY>

  // Print a message to the lcd.
  lcd_send_string("I ");
 8000420:	481a      	ldr	r0, [pc, #104]	; (800048c <main+0x118>)
 8000422:	f7ff ff21 	bl	8000268 <lcd_send_string>
  lcd_send_data('a');
 8000426:	2061      	movs	r0, #97	; 0x61
 8000428:	f7ff fec0 	bl	80001ac <lcd_send_data>
  lcd_send_string(" Arduino! ");
 800042c:	4818      	ldr	r0, [pc, #96]	; (8000490 <main+0x11c>)
 800042e:	f7ff ff1b 	bl	8000268 <lcd_send_string>
  lcd_send_data(0x01);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff feba 	bl	80001ac <lcd_send_data>

  lcd_goto_XY(2, 4);
 8000438:	2104      	movs	r1, #4
 800043a:	2002      	movs	r0, #2
 800043c:	f7ff ff30 	bl	80002a0 <lcd_goto_XY>
  lcd_send_string("Tu");
 8000440:	4814      	ldr	r0, [pc, #80]	; (8000494 <main+0x120>)
 8000442:	f7ff ff11 	bl	8000268 <lcd_send_string>
  lcd_send_data(0x05);
 8000446:	2005      	movs	r0, #5
 8000448:	f7ff feb0 	bl	80001ac <lcd_send_data>
  lcd_send_string("n");
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <main+0x124>)
 800044e:	f7ff ff0b 	bl	8000268 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <main+0x128>)
 8000458:	f000 fcae 	bl	8000db8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800045c:	20c8      	movs	r0, #200	; 0xc8
 800045e:	f000 fa07 	bl	8000870 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000462:	e7f6      	b.n	8000452 <main+0xde>
 8000464:	08001f8c 	.word	0x08001f8c
 8000468:	08001fa4 	.word	0x08001fa4
 800046c:	08001fbc 	.word	0x08001fbc
 8000470:	08001fd4 	.word	0x08001fd4
 8000474:	20000018 	.word	0x20000018
 8000478:	20000008 	.word	0x20000008
 800047c:	20000010 	.word	0x20000010
 8000480:	20000000 	.word	0x20000000
 8000484:	20000020 	.word	0x20000020
 8000488:	20000028 	.word	0x20000028
 800048c:	08001fec 	.word	0x08001fec
 8000490:	08001ff0 	.word	0x08001ff0
 8000494:	08001ffc 	.word	0x08001ffc
 8000498:	08002000 	.word	0x08002000
 800049c:	40011000 	.word	0x40011000

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	2228      	movs	r2, #40	; 0x28
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fd34 	bl	8001f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c6:	2301      	movs	r3, #1
 80004c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	2310      	movs	r3, #16
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004d2:	2300      	movs	r3, #0
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	f107 0318 	add.w	r3, r7, #24
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 f91f 	bl	8001724 <HAL_RCC_OscConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ec:	f000 f894 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	230f      	movs	r3, #15
 80004f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f4:	2302      	movs	r3, #2
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2102      	movs	r1, #2
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fb8c 	bl	8001c28 <HAL_RCC_ClockConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000516:	f000 f87f 	bl	8000618 <Error_Handler>
  }
}
 800051a:	bf00      	nop
 800051c:	3740      	adds	r7, #64	; 0x40
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_I2C1_Init+0x50>)
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <MX_I2C1_Init+0x54>)
 800052c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_I2C1_Init+0x50>)
 8000530:	4a12      	ldr	r2, [pc, #72]	; (800057c <MX_I2C1_Init+0x58>)
 8000532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_I2C1_Init+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_I2C1_Init+0x50>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_I2C1_Init+0x50>)
 8000542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_I2C1_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_I2C1_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_I2C1_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_I2C1_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_I2C1_Init+0x50>)
 8000562:	f000 fc43 	bl	8000dec <HAL_I2C_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800056c:	f000 f854 	bl	8000618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000058 	.word	0x20000058
 8000578:	40005400 	.word	0x40005400
 800057c:	000186a0 	.word	0x000186a0

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_GPIO_Init+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <MX_GPIO_Init+0x90>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_GPIO_Init+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_GPIO_Init+0x90>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_GPIO_Init+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a11      	ldr	r2, [pc, #68]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_GPIO_Init+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_GPIO_Init+0x94>)
 80005e4:	f000 fbd0 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0x94>)
 8000602:	f000 fa3d 	bl	8000a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40011000 	.word	0x40011000

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	e7fe      	b.n	8000620 <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <HAL_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_MspInit+0x5c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_MspInit+0x60>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_MspInit+0x60>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <HAL_I2C_MspInit+0x70>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d123      	bne.n	80006f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006c0:	23c0      	movs	r3, #192	; 0xc0
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c4:	2312      	movs	r3, #18
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <HAL_I2C_MspInit+0x78>)
 80006d4:	f000 f9d4 	bl	8000a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e2:	61d3      	str	r3, [r2, #28]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_I2C_MspInit+0x74>)
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010c00 	.word	0x40010c00

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074a:	f000 f875 	bl	8000838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}

08000752 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff fff7 	bl	8000752 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <LoopFillZerobss+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800077c:	4c09      	ldr	r4, [pc, #36]	; (80007a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f001 fbcf 	bl	8001f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fdf1 	bl	8000374 <main>
  bx lr
 8000792:	4770      	bx	lr
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800079c:	08002038 	.word	0x08002038
  ldr r2, =_sbss
 80007a0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80007a4:	200000b0 	.word	0x200000b0

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f92b 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	200f      	movs	r0, #15
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff ff2c 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f935 	bl	8000a66 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f000 f90b 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000030 	.word	0x20000030
 8000830:	20000038 	.word	0x20000038
 8000834:	20000034 	.word	0x20000034

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000038 	.word	0x20000038
 8000858:	200000ac 	.word	0x200000ac

0800085c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	200000ac 	.word	0x200000ac

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fff0 	bl	800085c <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_Delay+0x44>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffe0 	bl	800085c <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000038 	.word	0x20000038

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f7ff ff90 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff49 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff5e 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff90 	bl	8000970 <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5f 	bl	800091c <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ffb0 	bl	80009d4 <SysTick_Config>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	e169      	b.n	8000d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a94:	2201      	movs	r2, #1
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f040 8158 	bne.w	8000d62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	4a9a      	ldr	r2, [pc, #616]	; (8000d20 <HAL_GPIO_Init+0x2a0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d05e      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000abc:	4a98      	ldr	r2, [pc, #608]	; (8000d20 <HAL_GPIO_Init+0x2a0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d875      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ac2:	4a98      	ldr	r2, [pc, #608]	; (8000d24 <HAL_GPIO_Init+0x2a4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d058      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ac8:	4a96      	ldr	r2, [pc, #600]	; (8000d24 <HAL_GPIO_Init+0x2a4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d86f      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ace:	4a96      	ldr	r2, [pc, #600]	; (8000d28 <HAL_GPIO_Init+0x2a8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d052      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ad4:	4a94      	ldr	r2, [pc, #592]	; (8000d28 <HAL_GPIO_Init+0x2a8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d869      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ada:	4a94      	ldr	r2, [pc, #592]	; (8000d2c <HAL_GPIO_Init+0x2ac>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d04c      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000ae0:	4a92      	ldr	r2, [pc, #584]	; (8000d2c <HAL_GPIO_Init+0x2ac>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d863      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000ae6:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d046      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
 8000aec:	4a90      	ldr	r2, [pc, #576]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d85d      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000af2:	2b12      	cmp	r3, #18
 8000af4:	d82a      	bhi.n	8000b4c <HAL_GPIO_Init+0xcc>
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d859      	bhi.n	8000bae <HAL_GPIO_Init+0x12e>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <HAL_GPIO_Init+0x80>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b7b 	.word	0x08000b7b
 8000b04:	08000b55 	.word	0x08000b55
 8000b08:	08000b67 	.word	0x08000b67
 8000b0c:	08000ba9 	.word	0x08000ba9
 8000b10:	08000baf 	.word	0x08000baf
 8000b14:	08000baf 	.word	0x08000baf
 8000b18:	08000baf 	.word	0x08000baf
 8000b1c:	08000baf 	.word	0x08000baf
 8000b20:	08000baf 	.word	0x08000baf
 8000b24:	08000baf 	.word	0x08000baf
 8000b28:	08000baf 	.word	0x08000baf
 8000b2c:	08000baf 	.word	0x08000baf
 8000b30:	08000baf 	.word	0x08000baf
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000baf 	.word	0x08000baf
 8000b3c:	08000baf 	.word	0x08000baf
 8000b40:	08000baf 	.word	0x08000baf
 8000b44:	08000b5d 	.word	0x08000b5d
 8000b48:	08000b71 	.word	0x08000b71
 8000b4c:	4a79      	ldr	r2, [pc, #484]	; (8000d34 <HAL_GPIO_Init+0x2b4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d013      	beq.n	8000b7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b52:	e02c      	b.n	8000bae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e029      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	3304      	adds	r3, #4
 8000b62:	623b      	str	r3, [r7, #32]
          break;
 8000b64:	e024      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e01f      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	330c      	adds	r3, #12
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	e01a      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b82:	2304      	movs	r3, #4
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e013      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d105      	bne.n	8000b9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	611a      	str	r2, [r3, #16]
          break;
 8000b9a:	e009      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	615a      	str	r2, [r3, #20]
          break;
 8000ba6:	e003      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e000      	b.n	8000bb0 <HAL_GPIO_Init+0x130>
          break;
 8000bae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2bff      	cmp	r3, #255	; 0xff
 8000bb4:	d801      	bhi.n	8000bba <HAL_GPIO_Init+0x13a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	e001      	b.n	8000bbe <HAL_GPIO_Init+0x13e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2bff      	cmp	r3, #255	; 0xff
 8000bc4:	d802      	bhi.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x152>
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3b08      	subs	r3, #8
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	210f      	movs	r1, #15
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	6a39      	ldr	r1, [r7, #32]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	431a      	orrs	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 80b1 	beq.w	8000d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c00:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a4c      	ldr	r2, [pc, #304]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <HAL_GPIO_Init+0x2bc>)
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <HAL_GPIO_Init+0x2c0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d013      	beq.n	8000c6c <HAL_GPIO_Init+0x1ec>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3f      	ldr	r2, [pc, #252]	; (8000d44 <HAL_GPIO_Init+0x2c4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00d      	beq.n	8000c68 <HAL_GPIO_Init+0x1e8>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <HAL_GPIO_Init+0x2c8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x1e4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <HAL_GPIO_Init+0x2cc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d101      	bne.n	8000c60 <HAL_GPIO_Init+0x1e0>
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c60:	2304      	movs	r3, #4
 8000c62:	e004      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c64:	2302      	movs	r3, #2
 8000c66:	e002      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <HAL_GPIO_Init+0x1ee>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c70:	f002 0203 	and.w	r2, r2, #3
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	4093      	lsls	r3, r2
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c7e:	492f      	ldr	r1, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2bc>)
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	492c      	ldr	r1, [pc, #176]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4928      	ldr	r1, [pc, #160]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	4922      	ldr	r1, [pc, #136]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60cb      	str	r3, [r1, #12]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4914      	ldr	r1, [pc, #80]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d021      	beq.n	8000d54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <HAL_GPIO_Init+0x2d0>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	600b      	str	r3, [r1, #0]
 8000d1c:	e021      	b.n	8000d62 <HAL_GPIO_Init+0x2e2>
 8000d1e:	bf00      	nop
 8000d20:	10320000 	.word	0x10320000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10220000 	.word	0x10220000
 8000d2c:	10210000 	.word	0x10210000
 8000d30:	10120000 	.word	0x10120000
 8000d34:	10110000 	.word	0x10110000
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40011400 	.word	0x40011400
 8000d50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_GPIO_Init+0x304>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4909      	ldr	r1, [pc, #36]	; (8000d84 <HAL_GPIO_Init+0x304>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f47f ae8e 	bne.w	8000a94 <HAL_GPIO_Init+0x14>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	372c      	adds	r7, #44	; 0x2c
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000da4:	e003      	b.n	8000dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	041a      	lsls	r2, r3, #16
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43d9      	mvns	r1, r3
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	400b      	ands	r3, r1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	611a      	str	r2, [r3, #16]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e12b      	b.n	8001056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d106      	bne.n	8000e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fc38 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2224      	movs	r2, #36	; 0x24
 8000e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e50:	f001 f832 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a81      	ldr	r2, [pc, #516]	; (8001060 <HAL_I2C_Init+0x274>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d807      	bhi.n	8000e70 <HAL_I2C_Init+0x84>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a80      	ldr	r2, [pc, #512]	; (8001064 <HAL_I2C_Init+0x278>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	bf94      	ite	ls
 8000e68:	2301      	movls	r3, #1
 8000e6a:	2300      	movhi	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	e006      	b.n	8000e7e <HAL_I2C_Init+0x92>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4a7d      	ldr	r2, [pc, #500]	; (8001068 <HAL_I2C_Init+0x27c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bf94      	ite	ls
 8000e78:	2301      	movls	r3, #1
 8000e7a:	2300      	movhi	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0e7      	b.n	8001056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4a78      	ldr	r2, [pc, #480]	; (800106c <HAL_I2C_Init+0x280>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
 8000e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a6a      	ldr	r2, [pc, #424]	; (8001060 <HAL_I2C_Init+0x274>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_I2C_Init+0xd4>
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	e009      	b.n	8000ed4 <HAL_I2C_Init+0xe8>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4a69      	ldr	r2, [pc, #420]	; (8001070 <HAL_I2C_Init+0x284>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	099b      	lsrs	r3, r3, #6
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	495c      	ldr	r1, [pc, #368]	; (8001060 <HAL_I2C_Init+0x274>)
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d819      	bhi.n	8000f28 <HAL_I2C_Init+0x13c>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e59      	subs	r1, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f02:	1c59      	adds	r1, r3, #1
 8000f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00a      	beq.n	8000f24 <HAL_I2C_Init+0x138>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1e59      	subs	r1, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f22:	e051      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e04f      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d111      	bne.n	8000f54 <HAL_I2C_Init+0x168>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1e58      	subs	r0, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	440b      	add	r3, r1
 8000f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	e012      	b.n	8000f7a <HAL_I2C_Init+0x18e>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	0099      	lsls	r1, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_I2C_Init+0x196>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e022      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10e      	bne.n	8000fa8 <HAL_I2C_Init+0x1bc>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1e58      	subs	r0, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6859      	ldr	r1, [r3, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	440b      	add	r3, r1
 8000f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa6:	e00f      	b.n	8000fc8 <HAL_I2C_Init+0x1dc>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1e58      	subs	r0, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	0099      	lsls	r1, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	6809      	ldr	r1, [r1, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69da      	ldr	r2, [r3, #28]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6911      	ldr	r1, [r2, #16]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	4311      	orrs	r1, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	430b      	orrs	r3, r1
 800100a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2220      	movs	r2, #32
 8001042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	000186a0 	.word	0x000186a0
 8001064:	001e847f 	.word	0x001e847f
 8001068:	003d08ff 	.word	0x003d08ff
 800106c:	431bde83 	.word	0x431bde83
 8001070:	10624dd3 	.word	0x10624dd3

08001074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	461a      	mov	r2, r3
 8001080:	460b      	mov	r3, r1
 8001082:	817b      	strh	r3, [r7, #10]
 8001084:	4613      	mov	r3, r2
 8001086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff fbe8 	bl	800085c <HAL_GetTick>
 800108c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b20      	cmp	r3, #32
 8001098:	f040 80e0 	bne.w	800125c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2319      	movs	r3, #25
 80010a2:	2201      	movs	r2, #1
 80010a4:	4970      	ldr	r1, [pc, #448]	; (8001268 <HAL_I2C_Master_Transmit+0x1f4>)
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f964 	bl	8001374 <I2C_WaitOnFlagUntilTimeout>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010b2:	2302      	movs	r3, #2
 80010b4:	e0d3      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_I2C_Master_Transmit+0x50>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e0cc      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d007      	beq.n	80010ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0201 	orr.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2221      	movs	r2, #33	; 0x21
 80010fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2210      	movs	r2, #16
 8001106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	893a      	ldrh	r2, [r7, #8]
 800111a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001120:	b29a      	uxth	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4a50      	ldr	r2, [pc, #320]	; (800126c <HAL_I2C_Master_Transmit+0x1f8>)
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	6a3a      	ldr	r2, [r7, #32]
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f89c 	bl	8001270 <I2C_MasterRequestWrite>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e08d      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001158:	e066      	b.n	8001228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	6a39      	ldr	r1, [r7, #32]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 fa22 	bl	80015a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00d      	beq.n	8001186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b04      	cmp	r3, #4
 8001170:	d107      	bne.n	8001182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e06b      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ae:	3b01      	subs	r3, #1
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d11b      	bne.n	80011fc <HAL_I2C_Master_Transmit+0x188>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d017      	beq.n	80011fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f4:	3b01      	subs	r3, #1
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	6a39      	ldr	r1, [r7, #32]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 fa19 	bl	8001638 <I2C_WaitOnBTFFlagUntilTimeout>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00d      	beq.n	8001228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2b04      	cmp	r3, #4
 8001212:	d107      	bne.n	8001224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e01a      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d194      	bne.n	800115a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800123e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2220      	movs	r2, #32
 8001244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	e000      	b.n	800125e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800125c:	2302      	movs	r3, #2
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	00100002 	.word	0x00100002
 800126c:	ffff0000 	.word	0xffff0000

08001270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	460b      	mov	r3, r1
 800127e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d006      	beq.n	800129a <I2C_MasterRequestWrite+0x2a>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d003      	beq.n	800129a <I2C_MasterRequestWrite+0x2a>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001298:	d108      	bne.n	80012ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e00b      	b.n	80012c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d107      	bne.n	80012c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f84f 	bl	8001374 <I2C_WaitOnFlagUntilTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00d      	beq.n	80012f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ea:	d103      	bne.n	80012f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e035      	b.n	8001364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001300:	d108      	bne.n	8001314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	e01b      	b.n	800134c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001314:	897b      	ldrh	r3, [r7, #10]
 8001316:	11db      	asrs	r3, r3, #7
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0306 	and.w	r3, r3, #6
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f063 030f 	orn	r3, r3, #15
 8001324:	b2da      	uxtb	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <I2C_MasterRequestWrite+0xfc>)
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f898 	bl	8001468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e010      	b.n	8001364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001342:	897b      	ldrh	r3, [r7, #10]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <I2C_MasterRequestWrite+0x100>)
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f888 	bl	8001468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	00010008 	.word	0x00010008
 8001370:	00010002 	.word	0x00010002

08001374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001384:	e048      	b.n	8001418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d044      	beq.n	8001418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138e:	f7ff fa65 	bl	800085c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d302      	bcc.n	80013a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d139      	bne.n	8001418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10d      	bne.n	80013ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4013      	ands	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	e00c      	b.n	80013e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	43da      	mvns	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	4013      	ands	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d116      	bne.n	8001418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 0220 	orr.w	r2, r3, #32
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e023      	b.n	8001460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10d      	bne.n	800143e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	43da      	mvns	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4013      	ands	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	e00c      	b.n	8001458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	43da      	mvns	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4013      	ands	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	429a      	cmp	r2, r3
 800145c:	d093      	beq.n	8001386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001476:	e071      	b.n	800155c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001486:	d123      	bne.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2220      	movs	r2, #32
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e067      	b.n	80015a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d6:	d041      	beq.n	800155c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d8:	f7ff f9c0 	bl	800085c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d302      	bcc.n	80014ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d136      	bne.n	800155c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d10c      	bne.n	8001512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4013      	ands	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf14      	ite	ne
 800150a:	2301      	movne	r3, #1
 800150c:	2300      	moveq	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	e00b      	b.n	800152a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	43da      	mvns	r2, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4013      	ands	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e021      	b.n	80015a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0c1b      	lsrs	r3, r3, #16
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10c      	bne.n	8001580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	43da      	mvns	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4013      	ands	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	e00b      	b.n	8001598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4013      	ands	r3, r2
 800158c:	b29b      	uxth	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	f47f af6d 	bne.w	8001478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015b4:	e034      	b.n	8001620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f886 	bl	80016c8 <I2C_IsAcknowledgeFailed>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e034      	b.n	8001630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d028      	beq.n	8001620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ce:	f7ff f945 	bl	800085c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d302      	bcc.n	80015e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11d      	bne.n	8001620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	2b80      	cmp	r3, #128	; 0x80
 80015f0:	d016      	beq.n	8001620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f043 0220 	orr.w	r2, r3, #32
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e007      	b.n	8001630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b80      	cmp	r3, #128	; 0x80
 800162c:	d1c3      	bne.n	80015b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001644:	e034      	b.n	80016b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f83e 	bl	80016c8 <I2C_IsAcknowledgeFailed>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e034      	b.n	80016c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d028      	beq.n	80016b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165e:	f7ff f8fd 	bl	800085c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	d302      	bcc.n	8001674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11d      	bne.n	80016b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b04      	cmp	r3, #4
 8001680:	d016      	beq.n	80016b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e007      	b.n	80016c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d1c3      	bne.n	8001646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016de:	d11b      	bne.n	8001718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f043 0204 	orr.w	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e272      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8087 	beq.w	8001852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001744:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	d00c      	beq.n	800176a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d112      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
 800175c:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d10b      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d06c      	beq.n	8001850 <HAL_RCC_OscConfig+0x12c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d168      	bne.n	8001850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e24c      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x76>
 800178c:	4b80      	ldr	r3, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e02e      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0xbc>
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a71      	ldr	r2, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017e0:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a6a      	ldr	r2, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f82c 	bl	800085c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f828 	bl	800085c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e200      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xe4>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f818 	bl	800085c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff f814 	bl	800085c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1ec      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x10c>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1c0      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4939      	ldr	r1, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ffcd 	bl	800085c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7fe ffc9 	bl	800085c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1a1      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7fe ffac 	bl	800085c <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7fe ffa8 	bl	800085c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e180      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03a      	beq.n	80019a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7fe ff8c 	bl	800085c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7fe ff88 	bl	800085c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e160      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 faba 	bl	8001ee0 <RCC_Delay>
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7fe ff72 	bl	800085c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	e00f      	b.n	800199c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7fe ff6e 	bl	800085c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d908      	bls.n	800199c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e146      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	42420000 	.word	0x42420000
 8001998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e9      	bne.n	800197c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a6 	beq.w	8001b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b8b      	ldr	r3, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10d      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a87      	ldr	r2, [pc, #540]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7e      	ldr	r2, [pc, #504]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff2f 	bl	800085c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7fe ff2b 	bl	800085c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e103      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b75      	ldr	r3, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x312>
 8001a28:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e02d      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a69      	ldr	r2, [pc, #420]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	e01c      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x356>
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a60      	ldr	r2, [pc, #384]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a5d      	ldr	r2, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e00b      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fedf 	bl	800085c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7fe fedb 	bl	800085c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0b1      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ee      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x37e>
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7fe fec9 	bl	800085c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7fe fec5 	bl	800085c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e09b      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a3b      	ldr	r2, [pc, #236]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8087 	beq.w	8001c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d061      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d146      	bne.n	8001bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7fe fe99 	bl	800085c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7fe fe95 	bl	800085c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e06d      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4921      	ldr	r1, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a19      	ldr	r1, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	491b      	ldr	r1, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7fe fe69 	bl	800085c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7fe fe65 	bl	800085c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e03d      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x46a>
 8001bac:	e035      	b.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fe52 	bl	800085c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7fe fe4e 	bl	800085c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e026      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x498>
 8001bda:	e01e      	b.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e019      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x500>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0d0      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4965      	ldr	r1, [pc, #404]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b8      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	494d      	ldr	r1, [pc, #308]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d040      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e073      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06b      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4936      	ldr	r1, [pc, #216]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d18:	f7fe fda0 	bl	800085c <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7fe fd9c 	bl	800085c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e053      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d210      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4922      	ldr	r1, [pc, #136]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e032      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4916      	ldr	r1, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f000 f821 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	5ccb      	ldrb	r3, [r1, r3]
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fcfe 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08002004 	.word	0x08002004
 8001df4:	20000030 	.word	0x20000030
 8001df8:	20000034 	.word	0x20000034

08001dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x30>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x36>
 8001e2a:	e027      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2e:	613b      	str	r3, [r7, #16]
      break;
 8001e30:	e027      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0c5b      	lsrs	r3, r3, #17
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	fb03 f202 	mul.w	r2, r3, r2
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e004      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	613b      	str	r3, [r7, #16]
      break;
 8001e7a:	e002      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	613b      	str	r3, [r7, #16]
      break;
 8001e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e82:	693b      	ldr	r3, [r7, #16]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	007a1200 	.word	0x007a1200
 8001e98:	0800201c 	.word	0x0800201c
 8001e9c:	0800202c 	.word	0x0800202c
 8001ea0:	003d0900 	.word	0x003d0900

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000030 	.word	0x20000030

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff2 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08002014 	.word	0x08002014

08001ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RCC_Delay+0x34>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <RCC_Delay+0x38>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001efc:	bf00      	nop
  }
  while (Delay --);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f9      	bne.n	8001efc <RCC_Delay+0x1c>
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000030 	.word	0x20000030
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <memset>:
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4402      	add	r2, r0
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d100      	bne.n	8001f26 <memset+0xa>
 8001f24:	4770      	bx	lr
 8001f26:	f803 1b01 	strb.w	r1, [r3], #1
 8001f2a:	e7f9      	b.n	8001f20 <memset+0x4>

08001f2c <__libc_init_array>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	2600      	movs	r6, #0
 8001f30:	4d0c      	ldr	r5, [pc, #48]	; (8001f64 <__libc_init_array+0x38>)
 8001f32:	4c0d      	ldr	r4, [pc, #52]	; (8001f68 <__libc_init_array+0x3c>)
 8001f34:	1b64      	subs	r4, r4, r5
 8001f36:	10a4      	asrs	r4, r4, #2
 8001f38:	42a6      	cmp	r6, r4
 8001f3a:	d109      	bne.n	8001f50 <__libc_init_array+0x24>
 8001f3c:	f000 f81a 	bl	8001f74 <_init>
 8001f40:	2600      	movs	r6, #0
 8001f42:	4d0a      	ldr	r5, [pc, #40]	; (8001f6c <__libc_init_array+0x40>)
 8001f44:	4c0a      	ldr	r4, [pc, #40]	; (8001f70 <__libc_init_array+0x44>)
 8001f46:	1b64      	subs	r4, r4, r5
 8001f48:	10a4      	asrs	r4, r4, #2
 8001f4a:	42a6      	cmp	r6, r4
 8001f4c:	d105      	bne.n	8001f5a <__libc_init_array+0x2e>
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f54:	4798      	blx	r3
 8001f56:	3601      	adds	r6, #1
 8001f58:	e7ee      	b.n	8001f38 <__libc_init_array+0xc>
 8001f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f5e:	4798      	blx	r3
 8001f60:	3601      	adds	r6, #1
 8001f62:	e7f2      	b.n	8001f4a <__libc_init_array+0x1e>
 8001f64:	08002030 	.word	0x08002030
 8001f68:	08002030 	.word	0x08002030
 8001f6c:	08002030 	.word	0x08002030
 8001f70:	08002034 	.word	0x08002034

08001f74 <_init>:
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f76:	bf00      	nop
 8001f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7a:	bc08      	pop	{r3}
 8001f7c:	469e      	mov	lr, r3
 8001f7e:	4770      	bx	lr

08001f80 <_fini>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr
