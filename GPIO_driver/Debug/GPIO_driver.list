
GPIO_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000668  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000660  08000660  00010668  2**0
                  CONTENTS
  4 .ARM          00000000  08000660  08000660  00010668  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000660  08000668  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000668  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000668  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010691  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000709  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000236  00000000  00000000  00010ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00011018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  000110c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014a5  00000000  00000000  00011132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c0d  00000000  00000000  000125d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004b9e  00000000  00000000  000131e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001d0  00000000  00000000  00017d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00017f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000648 	.word	0x08000648

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000648 	.word	0x08000648

08000170 <delay>:

#include <stdint.h>
#include <stm32f1.h>
#include <stm32_gpio.h>

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i< 500000;i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0007a11f 	.word	0x0007a11f

0800019c <main>:

int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLedC13;
	GpioLedC13.pGPIOx = GPIOC;
 80001a2:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <main+0x4c>)
 80001a4:	607b      	str	r3, [r7, #4]
	GpioLedC13.GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_All ;
 80001a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001aa:	813b      	strh	r3, [r7, #8]
	GpioLedC13.GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_OUT_50M;
 80001ac:	2303      	movs	r3, #3
 80001ae:	72bb      	strb	r3, [r7, #10]
	GpioLedC13.GPIO_pinConfig.GPIO_PinType = GPIO_MODE_OUTPUT_PP;
 80001b0:	2300      	movs	r3, #0
 80001b2:	72fb      	strb	r3, [r7, #11]
	GpioLedC13.GPIO_pinConfig.GPIO_Pull = GPIO_NOPULL;
 80001b4:	2300      	movs	r3, #0
 80001b6:	733b      	strb	r3, [r7, #12]
    /* Loop forever */

	GPIO_Init(&GpioLedC13);
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f890 	bl	80002e0 <GPIO_Init>
	GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4808      	ldr	r0, [pc, #32]	; (80001e8 <main+0x4c>)
 80001c8:	f000 f9ea 	bl	80005a0 <GPIO_WritePin>
	GPIO_DeInit(GPIOC, GPIO_PIN_13|GPIO_PIN_2);
 80001cc:	f242 0104 	movw	r1, #8196	; 0x2004
 80001d0:	4805      	ldr	r0, [pc, #20]	; (80001e8 <main+0x4c>)
 80001d2:	f000 f957 	bl	8000484 <GPIO_DeInit>
	while(1){
		GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <main+0x4c>)
 80001dc:	f000 f9f7 	bl	80005ce <GPIO_TogglePin>
		delay();
 80001e0:	f7ff ffc6 	bl	8000170 <delay>
		GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001e4:	e7f7      	b.n	80001d6 <main+0x3a>
 80001e6:	bf00      	nop
 80001e8:	40011000 	.word	0x40011000

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f9f1 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ffbd 	bl	800019c <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>
	...

08000240 <GPIO_PeriClockControl>:


#include "stm32_gpio.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800024c:	78fb      	ldrb	r3, [r7, #3]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d135      	bne.n	80002be <GPIO_PeriClockControl+0x7e>
		if(pGPIOx == GPIOA ){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <GPIO_PeriClockControl+0x88>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800025a:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6193      	str	r3, [r2, #24]
		}
	}
	else{
		//
	}
}
 8000266:	e02a      	b.n	80002be <GPIO_PeriClockControl+0x7e>
		else if(pGPIOx == GPIOB){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <GPIO_PeriClockControl+0x90>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a15      	ldr	r2, [pc, #84]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6193      	str	r3, [r2, #24]
}
 800027c:	e01f      	b.n	80002be <GPIO_PeriClockControl+0x7e>
		else if(pGPIOx == GPIOC){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <GPIO_PeriClockControl+0x94>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a10      	ldr	r2, [pc, #64]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6193      	str	r3, [r2, #24]
}
 8000292:	e014      	b.n	80002be <GPIO_PeriClockControl+0x7e>
		else if(pGPIOx == GPIOD){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <GPIO_PeriClockControl+0x98>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6193      	str	r3, [r2, #24]
}
 80002a8:	e009      	b.n	80002be <GPIO_PeriClockControl+0x7e>
		else if(pGPIOx == GPIOE){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <GPIO_PeriClockControl+0x9c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <GPIO_PeriClockControl+0x7e>
			GPIOE_PCLK_EN();
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a05      	ldr	r2, [pc, #20]	; (80002cc <GPIO_PeriClockControl+0x8c>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6193      	str	r3, [r2, #24]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40011000 	.word	0x40011000
 80002d8:	40011400 	.word	0x40011400
 80002dc:	40011800 	.word	0x40011800

080002e0 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  //enable the peripheral clock
  GPIO_PeriClockControl(pGPIOHandle ->pGPIOx, ENABLE);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2101      	movs	r1, #1
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ffa6 	bl	8000240 <GPIO_PeriClockControl>

  uint32_t currentmode = 0x0000UL, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61fb      	str	r3, [r7, #28]
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
/*---------------------------- GPIO Mode Configuration -----------------------*/
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	//1. Config output type or input type
  currentmode = (uint32_t)pGPIOHandle->GPIO_pinConfig.GPIO_PinType;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	79db      	ldrb	r3, [r3, #7]
 8000310:	61fb      	str	r3, [r7, #28]
  if (pGPIOHandle->GPIO_pinConfig.GPIO_PinMode != 0x00)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	799b      	ldrb	r3, [r3, #6]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <GPIO_Init+0x46>
  {
	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	//2. Config mode and speed
    /* Output mode */
    currentmode |= pGPIOHandle->GPIO_pinConfig.GPIO_PinMode;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	461a      	mov	r2, r3
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	4313      	orrs	r3, r2
 8000324:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber & ((uint32_t)0x00FF)) != 0x00)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	889b      	ldrh	r3, [r3, #4]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d04d      	beq.n	80003cc <GPIO_Init+0xec>
  {
    tmpreg = pGPIOHandle -> pGPIOx -> CRL;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	617b      	str	r3, [r7, #20]
    while (((pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) >> pinpos) != 0x00u)
 8000338:	e03c      	b.n	80003b4 <GPIO_Init+0xd4>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800033a:	2201      	movs	r2, #1
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) & pos;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4013      	ands	r3, r2
 800034e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	d12a      	bne.n	80003ae <GPIO_Init+0xce>
      {
        pos = pinpos << 2;
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800035e:	220f      	movs	r2, #15
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	43db      	mvns	r3, r3
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	4013      	ands	r3, r2
 8000370:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000372:	69fa      	ldr	r2, [r7, #28]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	4313      	orrs	r3, r2
 800037e:	617b      	str	r3, [r7, #20]
        																	//3. Config PUPD setting
        /* Reset the corresponding ODR bit */
        if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_PULLDOWN)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	7a1b      	ldrb	r3, [r3, #8]
 8000384:	2b02      	cmp	r3, #2
 8000386:	d107      	bne.n	8000398 <GPIO_Init+0xb8>
        {
          pGPIOHandle -> pGPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2101      	movs	r1, #1
 800038e:	69ba      	ldr	r2, [r7, #24]
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	e00a      	b.n	80003ae <GPIO_Init+0xce>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_PULLUP)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7a1b      	ldrb	r3, [r3, #8]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d106      	bne.n	80003ae <GPIO_Init+0xce>
          {
            pGPIOHandle -> pGPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2101      	movs	r1, #1
 80003a6:	69ba      	ldr	r2, [r7, #24]
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	611a      	str	r2, [r3, #16]
          }
        }
      }
	  pinpos++;
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	3301      	adds	r3, #1
 80003b2:	61bb      	str	r3, [r7, #24]
    while (((pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) >> pinpos) != 0x00u)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	889b      	ldrh	r3, [r3, #4]
 80003b8:	461a      	mov	r2, r3
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	fa42 f303 	asr.w	r3, r2, r3
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1ba      	bne.n	800033a <GPIO_Init+0x5a>
    }
    pGPIOHandle -> pGPIOx->CRL = tmpreg;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */

  if (pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber > 0x00FF)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	889b      	ldrh	r3, [r3, #4]
 80003d0:	2bff      	cmp	r3, #255	; 0xff
 80003d2:	d953      	bls.n	800047c <GPIO_Init+0x19c>
  {
	pinpos = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
    tmpreg = pGPIOHandle -> pGPIOx -> CRH;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	617b      	str	r3, [r7, #20]
    while (((pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) >> pinpos) != 0x00u)
 80003e0:	e040      	b.n	8000464 <GPIO_Init+0x184>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	3308      	adds	r3, #8
 80003e6:	2201      	movs	r2, #1
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) & pos);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	889b      	ldrh	r3, [r3, #4]
 80003f2:	461a      	mov	r2, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4013      	ands	r3, r2
 80003f8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d12d      	bne.n	800045e <GPIO_Init+0x17e>
      {
        pos = pinpos << 2;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000408:	220f      	movs	r2, #15
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	43db      	mvns	r3, r3
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	4013      	ands	r3, r2
 800041a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800041c:	69fa      	ldr	r2, [r7, #28]
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	4313      	orrs	r3, r2
 8000428:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_PULLDOWN)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7a1b      	ldrb	r3, [r3, #8]
 800042e:	2b02      	cmp	r3, #2
 8000430:	d108      	bne.n	8000444 <GPIO_Init+0x164>
        {
          pGPIOHandle -> pGPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	f103 0208 	add.w	r2, r3, #8
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2101      	movs	r1, #1
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_PULLUP)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	7a1b      	ldrb	r3, [r3, #8]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d108      	bne.n	800045e <GPIO_Init+0x17e>
        {
          pGPIOHandle -> pGPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	f103 0208 	add.w	r2, r3, #8
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	611a      	str	r2, [r3, #16]
        }
      }
	  pinpos++;
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	3301      	adds	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
    while (((pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber) >> pinpos) != 0x00u)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	889b      	ldrh	r3, [r3, #4]
 8000468:	461a      	mov	r2, r3
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	fa42 f303 	asr.w	r3, r2, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1b6      	bne.n	80003e2 <GPIO_Init+0x102>
    }
    pGPIOHandle -> pGPIOx->CRH = tmpreg;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	605a      	str	r2, [r3, #4]
  }
}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <GPIO_DeInit>:
//  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
//  tmpreg |= GPIO_PinSource;
//  AFIO->EVCR = tmpreg;
//}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx, uint32_t PinNumber){
 8000484:	b480      	push	{r7}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
  uint32_t currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if ((PinNumber & ((uint32_t)0x00FF)) != 0x00)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d037      	beq.n	800051a <GPIO_DeInit+0x96>
  {
	tmpreg = pGPIOx -> CRL;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	61bb      	str	r3, [r7, #24]
	while ((PinNumber >> pinpos) != 0x00u)
 80004b0:	e02a      	b.n	8000508 <GPIO_DeInit+0x84>
	{
	  pos = ((uint32_t)0x01) << pinpos;
 80004b2:	2201      	movs	r2, #1
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	613b      	str	r3, [r7, #16]
	  /* Get the port pins position */
	  currentpin = PinNumber & pos;
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	617b      	str	r3, [r7, #20]
	  if (currentpin == pos)
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d11a      	bne.n	8000502 <GPIO_DeInit+0x7e>
	  {
		pos = pinpos << 2;
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	613b      	str	r3, [r7, #16]
		/* Clear the corresponding low control register bits */
		pinmask = ((uint32_t)0x0F) << pos;
 80004d2:	220f      	movs	r2, #15
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	60fb      	str	r3, [r7, #12]
		tmpreg &= ~pinmask;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	43db      	mvns	r3, r3
 80004e0:	69ba      	ldr	r2, [r7, #24]
 80004e2:	4013      	ands	r3, r2
 80004e4:	61bb      	str	r3, [r7, #24]
		/* Write Reset value 0x4 */
		tmpreg |= ((uint32_t)0x4) << pos;
 80004e6:	2204      	movs	r2, #4
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	69ba      	ldr	r2, [r7, #24]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	61bb      	str	r3, [r7, #24]
		/* ODR default value is 0 */
		CLEAR_BIT(pGPIOx->ODR, currentpin);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	43db      	mvns	r3, r3
 80004fc:	401a      	ands	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60da      	str	r2, [r3, #12]
	  }
	  pinpos++;
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3301      	adds	r3, #1
 8000506:	61fb      	str	r3, [r7, #28]
	while ((PinNumber >> pinpos) != 0x00u)
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	fa22 f303 	lsr.w	r3, r2, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1ce      	bne.n	80004b2 <GPIO_DeInit+0x2e>
	}
	pGPIOx->CRL = tmpreg;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (PinNumber > 0x00FF)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2bff      	cmp	r3, #255	; 0xff
 800051e:	d93a      	bls.n	8000596 <GPIO_DeInit+0x112>
  {
	tmpreg = pGPIOx -> CRH;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	61bb      	str	r3, [r7, #24]
	pinpos = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
	while ((PinNumber >> pinpos) != 0x00u)
 800052a:	e02b      	b.n	8000584 <GPIO_DeInit+0x100>
	{
	  pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3308      	adds	r3, #8
 8000530:	2201      	movs	r2, #1
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	613b      	str	r3, [r7, #16]
	  /* Get the port pins position */
	  currentpin = (PinNumber & pos);
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4013      	ands	r3, r2
 800053e:	617b      	str	r3, [r7, #20]
	  if (currentpin == pos)
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d11a      	bne.n	800057e <GPIO_DeInit+0xfa>
	  {
		pos = pinpos << 2;
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	613b      	str	r3, [r7, #16]
		/* Clear the corresponding high control register bits */
		pinmask = ((uint32_t)0x0F) << pos;
 800054e:	220f      	movs	r2, #15
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	60fb      	str	r3, [r7, #12]
		tmpreg &= ~pinmask;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	43db      	mvns	r3, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4013      	ands	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
		/* Write Reset value 0x4 */
		tmpreg |= ((uint32_t)0x4) << pos;
 8000562:	2204      	movs	r2, #4
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	69ba      	ldr	r2, [r7, #24]
 800056c:	4313      	orrs	r3, r2
 800056e:	61bb      	str	r3, [r7, #24]
		/* ODR default value is 0 */
		CLEAR_BIT(pGPIOx->ODR, currentpin);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60da      	str	r2, [r3, #12]
	  }
	  pinpos++;
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3301      	adds	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
	while ((PinNumber >> pinpos) != 0x00u)
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	fa22 f303 	lsr.w	r3, r2, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1cd      	bne.n	800052c <GPIO_DeInit+0xa8>
	}
	pGPIOx->CRH = tmpreg;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	605a      	str	r2, [r3, #4]
  }
}
 8000596:	bf00      	nop
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <GPIO_WritePin>:
	uint16_t value;
	value = (uint16_t)(pGPIOx -> IDR);
	return value;
}

void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint16_t PinNumber, uint8_t Value){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
 80005ac:	4613      	mov	r3, r2
 80005ae:	707b      	strb	r3, [r7, #1]
	if(Value){
 80005b0:	787b      	ldrb	r3, [r7, #1]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <GPIO_WritePin+0x1e>
		pGPIOx ->BSRR = PinNumber;
 80005b6:	887a      	ldrh	r2, [r7, #2]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	611a      	str	r2, [r3, #16]
	}
	else{
		pGPIOx ->BRR = PinNumber;
	}
}
 80005bc:	e002      	b.n	80005c4 <GPIO_WritePin+0x24>
		pGPIOx ->BRR = PinNumber;
 80005be:	887a      	ldrh	r2, [r7, #2]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	615a      	str	r2, [r3, #20]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <GPIO_TogglePin>:
void GPIO_WritePort(GPIO_RegDef_t *pGPIOx, uint16_t Value){
	pGPIOx ->ODR = Value;
}
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint16_t PinNumber){
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
	  uint32_t odr;
	  /* get current Output Data Register value */
	  odr = pGPIOx ->ODR;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	60fb      	str	r3, [r7, #12]

	  /* Set selected pins that were at low level, and reset ones that were high */
	  pGPIOx ->BSRR = ((odr & PinNumber) << 16U) | (~odr & PinNumber);
 80005e0:	887a      	ldrh	r2, [r7, #2]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4013      	ands	r3, r2
 80005e6:	041a      	lsls	r2, r3, #16
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	400b      	ands	r3, r1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	611a      	str	r2, [r3, #16]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	; (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	f000 f81a 	bl	8000648 <_init>
 8000614:	2600      	movs	r6, #0
 8000616:	4d0a      	ldr	r5, [pc, #40]	; (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
