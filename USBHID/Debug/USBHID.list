
USBHID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f88  08006f88  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  08006f88  08006f88  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f88  08006f88  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08006f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000160  080070f0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000990  080070f0  00020990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9c5  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002591  00000000  00000000  0002ab91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000739  00000000  00000000  0002db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d92  00000000  00000000  0002e251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d78c  00000000  00000000  00046fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084168  00000000  00000000  0005476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025e8  00000000  00000000  000d88d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000daec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	08006efc 	.word	0x08006efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	08006efc 	.word	0x08006efc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f91a 	bl	8000388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f85e 	bl	8000218 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 faba 	bl	80066d4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	b094      	sub	sp, #80	; 0x50
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f006 fe97 	bl	8006ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	f107 0314 	add.w	r3, r7, #20
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 ffab 	bl	8002114 <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c4:	f000 f84a 	bl	800025c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c8:	230f      	movs	r3, #15
 80001ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 fa17 	bl	8002618 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f0:	f000 f834 	bl	800025c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f4:	2310      	movs	r3, #16
 80001f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001f8:	2300      	movs	r3, #0
 80001fa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fb66 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0xac>
  {
    Error_Handler();
 800020a:	f000 f827 	bl	800025c <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3750      	adds	r7, #80	; 0x50
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_GPIO_Init+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <MX_GPIO_Init+0x40>)
 8000224:	f043 0320 	orr.w	r3, r3, #32
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <MX_GPIO_Init+0x40>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0304 	and.w	r3, r3, #4
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000

0800025c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000264:	e7fe      	b.n	8000264 <Error_Handler+0x8>
	...

08000268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <HAL_MspInit+0x5c>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <HAL_MspInit+0x5c>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <HAL_MspInit+0x5c>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <HAL_MspInit+0x5c>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <HAL_MspInit+0x5c>)
 800028c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000290:	61d3      	str	r3, [r2, #28]
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <HAL_MspInit+0x5c>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <HAL_MspInit+0x60>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_MspInit+0x60>)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <NMI_Handler+0x4>

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000312:	f000 f87f 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000322:	f000 fac5 	bl	80008b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000648 	.word	0x20000648

08000330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800033c:	f7ff fff8 	bl	8000330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000342:	490c      	ldr	r1, [pc, #48]	; (8000374 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a09      	ldr	r2, [pc, #36]	; (800037c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000358:	4c09      	ldr	r4, [pc, #36]	; (8000380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000366:	f006 fda5 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff feef 	bl	800014c <main>
  bx lr
 800036e:	4770      	bx	lr
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000378:	08006f90 	.word	0x08006f90
  ldr r2, =_sbss
 800037c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000380:	20000990 	.word	0x20000990

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f923 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	200f      	movs	r0, #15
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff60 	bl	8000268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f93b 	bl	800064e <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f000 f903 	bl	80005fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x1c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_IncTick+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <HAL_IncTick+0x20>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000008 	.word	0x20000008
 8000434:	2000017c 	.word	0x2000017c

08000438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return uwTick;
 800043c:	4b02      	ldr	r3, [pc, #8]	; (8000448 <HAL_GetTick+0x10>)
 800043e:	681b      	ldr	r3, [r3, #0]
}
 8000440:	4618      	mov	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	2000017c 	.word	0x2000017c

0800044c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000468:	4013      	ands	r3, r2
 800046a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <__NVIC_GetPriorityGrouping+0x18>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	f003 0307 	and.w	r3, r3, #7
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	db0b      	blt.n	80004da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f003 021f 	and.w	r2, r3, #31
 80004c8:	4906      	ldr	r1, [pc, #24]	; (80004e4 <__NVIC_EnableIRQ+0x34>)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	095b      	lsrs	r3, r3, #5
 80004d0:	2001      	movs	r0, #1
 80004d2:	fa00 f202 	lsl.w	r2, r0, r2
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db0a      	blt.n	8000512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	490c      	ldr	r1, [pc, #48]	; (8000534 <__NVIC_SetPriority+0x4c>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	0112      	lsls	r2, r2, #4
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	440b      	add	r3, r1
 800050c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000510:	e00a      	b.n	8000528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4908      	ldr	r1, [pc, #32]	; (8000538 <__NVIC_SetPriority+0x50>)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	3b04      	subs	r3, #4
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	440b      	add	r3, r1
 8000526:	761a      	strb	r2, [r3, #24]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000e100 	.word	0xe000e100
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	f1c3 0307 	rsb	r3, r3, #7
 8000556:	2b04      	cmp	r3, #4
 8000558:	bf28      	it	cs
 800055a:	2304      	movcs	r3, #4
 800055c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3304      	adds	r3, #4
 8000562:	2b06      	cmp	r3, #6
 8000564:	d902      	bls.n	800056c <NVIC_EncodePriority+0x30>
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3b03      	subs	r3, #3
 800056a:	e000      	b.n	800056e <NVIC_EncodePriority+0x32>
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000584:	f04f 31ff 	mov.w	r1, #4294967295
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43d9      	mvns	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	4313      	orrs	r3, r2
         );
}
 8000596:	4618      	mov	r0, r3
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005b0:	d301      	bcc.n	80005b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005b2:	2301      	movs	r3, #1
 80005b4:	e00f      	b.n	80005d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <SysTick_Config+0x40>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005be:	210f      	movs	r1, #15
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f7ff ff90 	bl	80004e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <SysTick_Config+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <SysTick_Config+0x40>)
 80005d0:	2207      	movs	r2, #7
 80005d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010

080005e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff2d 	bl	800044c <__NVIC_SetPriorityGrouping>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800060c:	f7ff ff42 	bl	8000494 <__NVIC_GetPriorityGrouping>
 8000610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	6978      	ldr	r0, [r7, #20]
 8000618:	f7ff ff90 	bl	800053c <NVIC_EncodePriority>
 800061c:	4602      	mov	r2, r0
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff5f 	bl	80004e8 <__NVIC_SetPriority>
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff35 	bl	80004b0 <__NVIC_EnableIRQ>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffa2 	bl	80005a0 <SysTick_Config>
 800065c:	4603      	mov	r3, r0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000668:	b08b      	sub	sp, #44	; 0x2c
 800066a:	af06      	add	r7, sp, #24
 800066c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e0f1      	b.n	800085c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f006 f97b 	bl	8006988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2203      	movs	r2, #3
 8000696:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f9f2 	bl	8002a88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	687e      	ldr	r6, [r7, #4]
 80006ac:	466d      	mov	r5, sp
 80006ae:	f106 0410 	add.w	r4, r6, #16
 80006b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	602b      	str	r3, [r5, #0]
 80006ba:	1d33      	adds	r3, r6, #4
 80006bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006be:	6838      	ldr	r0, [r7, #0]
 80006c0:	f002 f9bc 	bl	8002a3c <USB_CoreInit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d005      	beq.n	80006d6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2202      	movs	r2, #2
 80006ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e0c2      	b.n	800085c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f9ed 	bl	8002abc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e040      	b.n	800076a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3301      	adds	r3, #1
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	3303      	adds	r3, #3
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	3338      	adds	r3, #56	; 0x38
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	333c      	adds	r3, #60	; 0x3c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	440b      	add	r3, r1
 800075e:	3340      	adds	r3, #64	; 0x40
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	3301      	adds	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	7bfa      	ldrb	r2, [r7, #15]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	d3b9      	bcc.n	80006e8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e044      	b.n	8000804 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	f203 1369 	addw	r3, r3, #361	; 0x169
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	440b      	add	r3, r1
 80007e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3301      	adds	r3, #1
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3b5      	bcc.n	800077a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	687e      	ldr	r6, [r7, #4]
 8000816:	466d      	mov	r5, sp
 8000818:	f106 0410 	add.w	r4, r6, #16
 800081c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800081e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	602b      	str	r3, [r5, #0]
 8000824:	1d33      	adds	r3, r6, #4
 8000826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000828:	6838      	ldr	r0, [r7, #0]
 800082a:	f002 f953 	bl	8002ad4 <USB_DevInit>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d005      	beq.n	8000840 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2202      	movs	r2, #2
 8000838:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e00d      	b.n	800085c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f004 fbd4 	bl	8005002 <USB_DevDisconnect>

  return HAL_OK;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000864 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <HAL_PCD_Start+0x16>
 8000876:	2302      	movs	r3, #2
 8000878:	e016      	b.n	80008a8 <HAL_PCD_Start+0x44>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2201      	movs	r2, #1
 800087e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f8e8 	bl	8002a5c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800088c:	2101      	movs	r1, #1
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f006 fad1 	bl	8006e36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f004 fba8 	bl	8004fee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f004 fbaa 	bl	8005016 <USB_ReadInterrupts>
 80008c2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 fb04 	bl	8000edc <PCD_EP_ISR_Handler>

    return;
 80008d4:	e119      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d013      	beq.n	8000908 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008f2:	b292      	uxth	r2, r2
 80008f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f006 f8c0 	bl	8006a7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008fe:	2100      	movs	r1, #0
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 f905 	bl	8000b10 <HAL_PCD_SetAddress>

    return;
 8000906:	e100      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d00c      	beq.n	800092c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800091a:	b29a      	uxth	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000924:	b292      	uxth	r2, r2
 8000926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800092a:	e0ee      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00c      	beq.n	8000950 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800093e:	b29a      	uxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000948:	b292      	uxth	r2, r2
 800094a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800094e:	e0dc      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d027      	beq.n	80009aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0204 	bic.w	r2, r2, #4
 800096c:	b292      	uxth	r2, r2
 800096e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 0208 	bic.w	r2, r2, #8
 8000984:	b292      	uxth	r2, r2
 8000986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f006 f8b0 	bl	8006af0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000998:	b29a      	uxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009a2:	b292      	uxth	r2, r2
 80009a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009a8:	e0af      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 8083 	beq.w	8000abc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	77fb      	strb	r3, [r7, #31]
 80009ba:	e010      	b.n	80009de <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	7ffb      	ldrb	r3, [r7, #31]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	441a      	add	r2, r3
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	8812      	ldrh	r2, [r2, #0]
 80009cc:	b292      	uxth	r2, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	3320      	adds	r3, #32
 80009d2:	443b      	add	r3, r7
 80009d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80009d8:	7ffb      	ldrb	r3, [r7, #31]
 80009da:	3301      	adds	r3, #1
 80009dc:	77fb      	strb	r3, [r7, #31]
 80009de:	7ffb      	ldrb	r3, [r7, #31]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d9eb      	bls.n	80009bc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	b292      	uxth	r2, r2
 80009f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a14:	bf00      	nop
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f6      	beq.n	8000a16 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	77fb      	strb	r3, [r7, #31]
 8000a44:	e00f      	b.n	8000a66 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	7ffa      	ldrb	r2, [r7, #31]
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	440a      	add	r2, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	3320      	adds	r3, #32
 8000a58:	443b      	add	r3, r7
 8000a5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000a60:	7ffb      	ldrb	r3, [r7, #31]
 8000a62:	3301      	adds	r3, #1
 8000a64:	77fb      	strb	r3, [r7, #31]
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d9ec      	bls.n	8000a46 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 0208 	orr.w	r2, r2, #8
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a96:	b292      	uxth	r2, r2
 8000a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0204 	orr.w	r2, r2, #4
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f006 f801 	bl	8006abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000aba:	e026      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00f      	beq.n	8000ae6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad8:	b292      	uxth	r2, r2
 8000ada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f005 ffbf 	bl	8006a62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ae4:	e011      	b.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00c      	beq.n	8000b0a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b02:	b292      	uxth	r2, r2
 8000b04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b08:	bf00      	nop
  }
}
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d101      	bne.n	8000b2a <HAL_PCD_SetAddress+0x1a>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e013      	b.n	8000b52 <HAL_PCD_SetAddress+0x42>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	78fa      	ldrb	r2, [r7, #3]
 8000b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	78fa      	ldrb	r2, [r7, #3]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fa40 	bl	8004fc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	4608      	mov	r0, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	461a      	mov	r2, r3
 8000b68:	4603      	mov	r3, r0
 8000b6a:	70fb      	strb	r3, [r7, #3]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	803b      	strh	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da0e      	bge.n	8000b9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	705a      	strb	r2, [r3, #1]
 8000b9c:	e00e      	b.n	8000bbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	f003 0207 	and.w	r2, r3, #7
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bc8:	883a      	ldrh	r2, [r7, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	78ba      	ldrb	r2, [r7, #2]
 8000bd2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bd4:	78bb      	ldrb	r3, [r7, #2]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d102      	bne.n	8000be0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d101      	bne.n	8000bee <HAL_PCD_EP_Open+0x94>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e00e      	b.n	8000c0c <HAL_PCD_EP_Open+0xb2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68f9      	ldr	r1, [r7, #12]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 ff89 	bl	8002b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da0e      	bge.n	8000c46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2201      	movs	r2, #1
 8000c42:	705a      	strb	r2, [r3, #1]
 8000c44:	e00e      	b.n	8000c64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	f003 0207 	and.w	r2, r3, #7
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2200      	movs	r2, #0
 8000c62:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_PCD_EP_Close+0x6a>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e00e      	b.n	8000c9c <HAL_PCD_EP_Close+0x88>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fb01 	bl	8003294 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	f003 0207 	and.w	r2, r3, #7
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6979      	ldr	r1, [r7, #20]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fcb8 	bl	800366c <USB_EPStartXfer>

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	460b      	mov	r3, r1
 8000d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d16:	7afb      	ldrb	r3, [r7, #11]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6979      	ldr	r1, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fc81 	bl	800366c <USB_EPStartXfer>

  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	f003 0207 	and.w	r2, r3, #7
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d901      	bls.n	8000d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e04c      	b.n	8000e2c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da0e      	bge.n	8000db8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2201      	movs	r2, #1
 8000db4:	705a      	strb	r2, [r3, #1]
 8000db6:	e00c      	b.n	8000dd2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <HAL_PCD_EP_SetStall+0x7e>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e01c      	b.n	8000e2c <HAL_PCD_EP_SetStall+0xb8>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 ffe4 	bl	8004dce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d108      	bne.n	8000e22 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	f004 f909 	bl	8005034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 020f 	and.w	r2, r3, #15
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d901      	bls.n	8000e52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e040      	b.n	8000ed4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da0e      	bge.n	8000e78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	705a      	strb	r2, [r3, #1]
 8000e76:	e00e      	b.n	8000e96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	f003 0207 	and.w	r2, r3, #7
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_PCD_EP_ClrStall+0x82>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e00e      	b.n	8000ed4 <HAL_PCD_EP_ClrStall+0xa0>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 ffd2 	bl	8004e6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ee4:	e3bf      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000f00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 8179 	bne.w	80011fc <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d152      	bne.n	8000fbc <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f26:	81fb      	strh	r3, [r7, #14]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3328      	adds	r3, #40	; 0x28
 8000f3e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	3302      	adds	r3, #2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	441a      	add	r2, r3
 8000f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f005 fd56 	bl	8006a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 836b 	beq.w	8001666 <PCD_EP_ISR_Handler+0x78a>
 8000f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f040 8366 	bne.w	8001666 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	b292      	uxth	r2, r2
 8000fae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000fba:	e354      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fc2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d034      	beq.n	8001044 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	3306      	adds	r3, #6
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001004:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001012:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001016:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001018:	b29b      	uxth	r3, r3
 800101a:	f004 f85b 	bl	80050d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29a      	uxth	r2, r3
 8001026:	f640 738f 	movw	r3, #3983	; 0xf8f
 800102a:	4013      	ands	r3, r2
 800102c:	823b      	strh	r3, [r7, #16]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	8a3a      	ldrh	r2, [r7, #16]
 8001034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001038:	b292      	uxth	r2, r2
 800103a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f005 fcc9 	bl	80069d4 <HAL_PCD_SetupStageCallback>
 8001042:	e310      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001044:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001048:	2b00      	cmp	r3, #0
 800104a:	f280 830c 	bge.w	8001666 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29a      	uxth	r2, r3
 8001056:	f640 738f 	movw	r3, #3983	; 0xf8f
 800105a:	4013      	ands	r3, r2
 800105c:	83fb      	strh	r3, [r7, #30]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	8bfa      	ldrh	r2, [r7, #30]
 8001064:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001068:	b292      	uxth	r2, r2
 800106a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001074:	b29b      	uxth	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	3306      	adds	r3, #6
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	4413      	add	r3, r2
 800108a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001096:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d019      	beq.n	80010d4 <PCD_EP_ISR_Handler+0x1f8>
 80010a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d015      	beq.n	80010d4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ae:	6959      	ldr	r1, [r3, #20]
 80010b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	f004 f80b 	bl	80050d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80010be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	441a      	add	r2, r3
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f005 fc92 	bl	80069f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 82bd 	bne.w	8001666 <PCD_EP_ISR_Handler+0x78a>
 80010ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80010f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80010f8:	f000 82b5 	beq.w	8001666 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4413      	add	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001126:	b29a      	uxth	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b3e      	cmp	r3, #62	; 0x3e
 8001132:	d91d      	bls.n	8001170 <PCD_EP_ISR_Handler+0x294>
 8001134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
 800113c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <PCD_EP_ISR_Handler+0x272>
 8001148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114a:	3b01      	subs	r3, #1
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b29a      	uxth	r2, r3
 8001154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001156:	b29b      	uxth	r3, r3
 8001158:	029b      	lsls	r3, r3, #10
 800115a:	b29b      	uxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001168:	b29a      	uxth	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e026      	b.n	80011be <PCD_EP_ISR_Handler+0x2e2>
 8001170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10a      	bne.n	800118e <PCD_EP_ISR_Handler+0x2b2>
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001186:	b29a      	uxth	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	801a      	strh	r2, [r3, #0]
 800118c:	e017      	b.n	80011be <PCD_EP_ISR_Handler+0x2e2>
 800118e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
 8001196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <PCD_EP_ISR_Handler+0x2cc>
 80011a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a4:	3301      	adds	r3, #1
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ce:	827b      	strh	r3, [r7, #18]
 80011d0:	8a7b      	ldrh	r3, [r7, #18]
 80011d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80011d6:	827b      	strh	r3, [r7, #18]
 80011d8:	8a7b      	ldrh	r3, [r7, #18]
 80011da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011de:	827b      	strh	r3, [r7, #18]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	8a7b      	ldrh	r3, [r7, #18]
 80011e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80011ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	8013      	strh	r3, [r2, #0]
 80011fa:	e234      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001210:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001214:	2b00      	cmp	r3, #0
 8001216:	f280 80fc 	bge.w	8001412 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29a      	uxth	r2, r3
 800122c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001230:	4013      	ands	r3, r2
 8001232:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001248:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800124c:	b292      	uxth	r2, r2
 800124e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001250:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001268:	7b1b      	ldrb	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d125      	bne.n	80012ba <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	3306      	adds	r3, #6
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	4413      	add	r3, r2
 800128c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001296:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800129a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8092 	beq.w	80013c8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	6959      	ldr	r1, [r3, #20]
 80012ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ae:	88da      	ldrh	r2, [r3, #6]
 80012b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012b4:	f003 ff0e 	bl	80050d4 <USB_ReadPMA>
 80012b8:	e086      	b.n	80013c8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d10a      	bne.n	80012d8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012c6:	461a      	mov	r2, r3
 80012c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f9d9 	bl	8001682 <HAL_PCD_EP_DB_Receive>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80012d6:	e077      	b.n	80013c8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	441a      	add	r2, r3
 8001304:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800130c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001318:	b29b      	uxth	r3, r3
 800131a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d024      	beq.n	8001380 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	3302      	adds	r3, #2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	4413      	add	r3, r2
 8001354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800135e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001362:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02e      	beq.n	80013c8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001370:	6959      	ldr	r1, [r3, #20]
 8001372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001374:	891a      	ldrh	r2, [r3, #8]
 8001376:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800137a:	f003 feab 	bl	80050d4 <USB_ReadPMA>
 800137e:	e023      	b.n	80013c8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	3306      	adds	r3, #6
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80013ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ba:	6959      	ldr	r1, [r3, #20]
 80013bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013be:	895a      	ldrh	r2, [r3, #10]
 80013c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013c4:	f003 fe86 	bl	80050d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80013c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013d0:	441a      	add	r2, r3
 80013d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013de:	441a      	add	r2, r3
 80013e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <PCD_EP_ISR_Handler+0x51c>
 80013ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d206      	bcs.n	8001406 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f005 fafa 	bl	80069f8 <HAL_PCD_DataOutStageCallback>
 8001404:	e005      	b.n	8001412 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800140c:	4618      	mov	r0, r3
 800140e:	f002 f92d 	bl	800366c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001412:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8123 	beq.w	8001666 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001420:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800144a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800144e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	441a      	add	r2, r3
 8001460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800146c:	b29b      	uxth	r3, r3
 800146e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b01      	cmp	r3, #1
 8001476:	f040 80a2 	bne.w	80015be <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800147a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001482:	7b1b      	ldrb	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8093 	beq.w	80015b0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800148a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d046      	beq.n	8001524 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d126      	bne.n	80014ec <PCD_EP_ISR_Handler+0x610>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	4413      	add	r3, r2
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	011a      	lsls	r2, r3, #4
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	4413      	add	r3, r2
 80014c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	801a      	strh	r2, [r3, #0]
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	e061      	b.n	80015b0 <PCD_EP_ISR_Handler+0x6d4>
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d15d      	bne.n	80015b0 <PCD_EP_ISR_Handler+0x6d4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001502:	b29b      	uxth	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	4413      	add	r3, r2
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	011a      	lsls	r2, r3, #4
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	4413      	add	r3, r2
 8001516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e045      	b.n	80015b0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d126      	bne.n	8001580 <PCD_EP_ISR_Handler+0x6a4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	4413      	add	r3, r2
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
 800154a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	011a      	lsls	r2, r3, #4
 8001550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001552:	4413      	add	r3, r2
 8001554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001564:	b29a      	uxth	r2, r3
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001578:	b29a      	uxth	r2, r3
 800157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	e017      	b.n	80015b0 <PCD_EP_ISR_Handler+0x6d4>
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d113      	bne.n	80015b0 <PCD_EP_ISR_Handler+0x6d4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001596:	4413      	add	r3, r2
 8001598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	011a      	lsls	r2, r3, #4
 80015a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a2:	4413      	add	r3, r2
 80015a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	2200      	movs	r2, #0
 80015ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f005 fa39 	bl	8006a2e <HAL_PCD_DataInStageCallback>
 80015bc:	e053      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d146      	bne.n	8001658 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	3302      	adds	r3, #2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80015f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015fe:	429a      	cmp	r2, r3
 8001600:	d907      	bls.n	8001612 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800160a:	1ad2      	subs	r2, r2, r3
 800160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e002      	b.n	8001618 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f005 fa01 	bl	8006a2e <HAL_PCD_DataInStageCallback>
 800162c:	e01b      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800162e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001636:	441a      	add	r2, r3
 8001638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001644:	441a      	add	r2, r3
 8001646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001648:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001650:	4618      	mov	r0, r3
 8001652:	f002 f80b 	bl	800366c <USB_EPStartXfer>
 8001656:	e006      	b.n	8001666 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001658:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800165c:	461a      	mov	r2, r3
 800165e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f91b 	bl	800189c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166e:	b29b      	uxth	r3, r3
 8001670:	b21b      	sxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f6ff ac37 	blt.w	8000ee6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3758      	adds	r7, #88	; 0x58
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b088      	sub	sp, #32
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	4613      	mov	r3, r2
 800168e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d07e      	beq.n	8001798 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3302      	adds	r3, #2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	8b7b      	ldrh	r3, [r7, #26]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d306      	bcc.n	80016dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	8b7b      	ldrh	r3, [r7, #26]
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	619a      	str	r2, [r3, #24]
 80016da:	e002      	b.n	80016e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d123      	bne.n	8001732 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001704:	833b      	strh	r3, [r7, #24]
 8001706:	8b3b      	ldrh	r3, [r7, #24]
 8001708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800170c:	833b      	strh	r3, [r7, #24]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	441a      	add	r2, r3
 800171c:	8b3b      	ldrh	r3, [r7, #24]
 800171e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172e:	b29b      	uxth	r3, r3
 8001730:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01f      	beq.n	800177c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001756:	82fb      	strh	r3, [r7, #22]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	441a      	add	r2, r3
 8001766:	8afb      	ldrh	r3, [r7, #22]
 8001768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800176c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001778:	b29b      	uxth	r3, r3
 800177a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800177c:	8b7b      	ldrh	r3, [r7, #26]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	6959      	ldr	r1, [r3, #20]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	891a      	ldrh	r2, [r3, #8]
 8001790:	8b7b      	ldrh	r3, [r7, #26]
 8001792:	f003 fc9f 	bl	80050d4 <USB_ReadPMA>
 8001796:	e07c      	b.n	8001892 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	3306      	adds	r3, #6
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	8b7b      	ldrh	r3, [r7, #26]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d306      	bcc.n	80017da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	8b7b      	ldrh	r3, [r7, #26]
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d123      	bne.n	8001830 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001802:	83fb      	strh	r3, [r7, #30]
 8001804:	8bfb      	ldrh	r3, [r7, #30]
 8001806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180a:	83fb      	strh	r3, [r7, #30]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	441a      	add	r2, r3
 800181a:	8bfb      	ldrh	r3, [r7, #30]
 800181c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	b29b      	uxth	r3, r3
 800182e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d11f      	bne.n	800187a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	441a      	add	r2, r3
 8001864:	8bbb      	ldrh	r3, [r7, #28]
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001876:	b29b      	uxth	r3, r3
 8001878:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800187a:	8b7b      	ldrh	r3, [r7, #26]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	6959      	ldr	r1, [r3, #20]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	895a      	ldrh	r2, [r3, #10]
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	f003 fc21 	bl	80050d4 <USB_ReadPMA>
    }
  }

  return count;
 8001892:	8b7b      	ldrh	r3, [r7, #26]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0a4      	sub	sp, #144	; 0x90
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 81dd 	beq.w	8001c70 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	3302      	adds	r3, #2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d907      	bls.n	80018fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	e002      	b.n	8001904 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 80b9 	bne.w	8001a80 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d126      	bne.n	8001964 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	4413      	add	r3, r2
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	011a      	lsls	r2, r3, #4
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	4413      	add	r3, r2
 8001938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001948:	b29a      	uxth	r2, r3
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800195c:	b29a      	uxth	r2, r3
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	e01a      	b.n	800199a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d116      	bne.n	800199a <HAL_PCD_EP_DB_Transmit+0xfe>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	4413      	add	r3, r2
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	011a      	lsls	r2, r3, #4
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	4413      	add	r3, r2
 800198e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d126      	bne.n	80019f6 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4413      	add	r3, r2
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	011a      	lsls	r2, r3, #4
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019da:	b29a      	uxth	r2, r3
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	801a      	strh	r2, [r3, #0]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	801a      	strh	r2, [r3, #0]
 80019f4:	e017      	b.n	8001a26 <HAL_PCD_EP_DB_Transmit+0x18a>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	785b      	ldrb	r3, [r3, #1]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d113      	bne.n	8001a26 <HAL_PCD_EP_DB_Transmit+0x18a>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	4413      	add	r3, r2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	011a      	lsls	r2, r3, #4
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	4413      	add	r3, r2
 8001a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f004 fffe 	bl	8006a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 82fc 	beq.w	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a58:	82fb      	strh	r3, [r7, #22]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	441a      	add	r2, r3
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	8013      	strh	r3, [r2, #0]
 8001a7e:	e2da      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d021      	beq.n	8001ace <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	f040 82ae 	bne.w	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001af0:	441a      	add	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d30b      	bcc.n	8001b1a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	6a1a      	ldr	r2, [r3, #32]
 8001b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	621a      	str	r2, [r3, #32]
 8001b18:	e017      	b.n	8001b4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d108      	bne.n	8001b34 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b32:	e00a      	b.n	8001b4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d165      	bne.n	8001c1e <HAL_PCD_EP_DB_Transmit+0x382>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b66:	4413      	add	r3, r2
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	011a      	lsls	r2, r3, #4
 8001b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b72:	4413      	add	r3, r2
 8001b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b90:	d91d      	bls.n	8001bce <HAL_PCD_EP_DB_Transmit+0x332>
 8001b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_PCD_EP_DB_Transmit+0x310>
 8001ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	e044      	b.n	8001c58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_PCD_EP_DB_Transmit+0x350>
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	e035      	b.n	8001c58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c02:	3301      	adds	r3, #1
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e01c      	b.n	8001c58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d118      	bne.n	8001c58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3a:	4413      	add	r3, r2
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	011a      	lsls	r2, r3, #4
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	4413      	add	r3, r2
 8001c48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6959      	ldr	r1, [r3, #20]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	891a      	ldrh	r2, [r3, #8]
 8001c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f003 f9ee 	bl	800504a <USB_WritePMA>
 8001c6e:	e1e2      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	3306      	adds	r3, #6
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d307      	bcc.n	8001cb8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	619a      	str	r2, [r3, #24]
 8001cb6:	e002      	b.n	8001cbe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 80c0 	bne.w	8001e48 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d126      	bne.n	8001d1e <HAL_PCD_EP_DB_Transmit+0x482>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ce4:	4413      	add	r3, r2
 8001ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	011a      	lsls	r2, r3, #4
 8001cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d06:	801a      	strh	r2, [r3, #0]
 8001d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e01a      	b.n	8001d54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d116      	bne.n	8001d54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d3a:	4413      	add	r3, r2
 8001d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	011a      	lsls	r2, r3, #4
 8001d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d46:	4413      	add	r3, r2
 8001d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d50:	2200      	movs	r2, #0
 8001d52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	677b      	str	r3, [r7, #116]	; 0x74
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	785b      	ldrb	r3, [r3, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12b      	bne.n	8001dba <HAL_PCD_EP_DB_Transmit+0x51e>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d76:	4413      	add	r3, r2
 8001d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	011a      	lsls	r2, r3, #4
 8001d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d82:	4413      	add	r3, r2
 8001d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	e017      	b.n	8001dea <HAL_PCD_EP_DB_Transmit+0x54e>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d113      	bne.n	8001dea <HAL_PCD_EP_DB_Transmit+0x54e>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd0:	4413      	add	r3, r2
 8001dd2:	677b      	str	r3, [r7, #116]	; 0x74
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	011a      	lsls	r2, r3, #4
 8001dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ddc:	4413      	add	r3, r2
 8001dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001de2:	673b      	str	r3, [r7, #112]	; 0x70
 8001de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f004 fe1c 	bl	8006a2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 811a 	bne.w	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	8013      	strh	r3, [r2, #0]
 8001e46:	e0f6      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	f040 80ca 	bne.w	8002036 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001eaa:	441a      	add	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001eb8:	441a      	add	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d30b      	bcc.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	621a      	str	r2, [r3, #32]
 8001ee0:	e017      	b.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001eea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001efa:	e00a      	b.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	657b      	str	r3, [r7, #84]	; 0x54
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d165      	bne.n	8001fec <HAL_PCD_EP_DB_Transmit+0x750>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	4413      	add	r3, r2
 8001f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	011a      	lsls	r2, r3, #4
 8001f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f40:	4413      	add	r3, r2
 8001f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8001f5e:	d91d      	bls.n	8001f9c <HAL_PCD_EP_DB_Transmit+0x700>
 8001f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x6de>
 8001f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f76:	3b01      	subs	r3, #1
 8001f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f98:	801a      	strh	r2, [r3, #0]
 8001f9a:	e041      	b.n	8002020 <HAL_PCD_EP_DB_Transmit+0x784>
 8001f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0x71e>
 8001fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	e032      	b.n	8002020 <HAL_PCD_EP_DB_Transmit+0x784>
 8001fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_PCD_EP_DB_Transmit+0x738>
 8001fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	e019      	b.n	8002020 <HAL_PCD_EP_DB_Transmit+0x784>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d115      	bne.n	8002020 <HAL_PCD_EP_DB_Transmit+0x784>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002002:	4413      	add	r3, r2
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	011a      	lsls	r2, r3, #4
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	4413      	add	r3, r2
 8002010:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
 8002016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201a:	b29a      	uxth	r2, r3
 800201c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6959      	ldr	r1, [r3, #20]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	895a      	ldrh	r2, [r3, #10]
 800202c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002030:	b29b      	uxth	r3, r3
 8002032:	f003 f80a 	bl	800504a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002050:	82bb      	strh	r3, [r7, #20]
 8002052:	8abb      	ldrh	r3, [r7, #20]
 8002054:	f083 0310 	eor.w	r3, r3, #16
 8002058:	82bb      	strh	r3, [r7, #20]
 800205a:	8abb      	ldrh	r3, [r7, #20]
 800205c:	f083 0320 	eor.w	r3, r3, #32
 8002060:	82bb      	strh	r3, [r7, #20]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	441a      	add	r2, r3
 8002070:	8abb      	ldrh	r3, [r7, #20]
 8002072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002082:	b29b      	uxth	r3, r3
 8002084:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3790      	adds	r7, #144	; 0x90
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	817b      	strh	r3, [r7, #10]
 800209e:	4613      	mov	r3, r2
 80020a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e009      	b.n	80020da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020c6:	897a      	ldrh	r2, [r7, #10]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020da:	893b      	ldrh	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2200      	movs	r2, #0
 80020e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	80da      	strh	r2, [r3, #6]
 80020ee:	e00b      	b.n	8002108 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2201      	movs	r2, #1
 80020f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	b29a      	uxth	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e272      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b92      	ldr	r3, [pc, #584]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002140:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e24c      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b80      	ldr	r3, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a77      	ldr	r2, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe f922 	bl	8000438 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe f91e 	bl	8000438 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e200      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe f90e 	bl	8000438 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe f90a 	bl	8000438 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1ec      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
 8002266:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c0      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe f8c3 	bl	8000438 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe f8bf 	bl	8000438 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe f8a2 	bl	8000438 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe f89e 	bl	8000438 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e180      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03a      	beq.n	8002398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe f882 	bl	8000438 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe f87e 	bl	8000438 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e160      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 fa9c 	bl	8002894 <RCC_Delay>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe f868 	bl	8000438 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7fe f864 	bl	8000438 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d908      	bls.n	800238c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e146      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000
 8002388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a6 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe f825 	bl	8000438 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe f821 	bl	8000438 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e103      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a6e      	ldr	r2, [pc, #440]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x334>
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a66      	ldr	r2, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x356>
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fd ffd5 	bl	8000438 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fd ffd1 	bl	8000438 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0b1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fd ffbf 	bl	8000438 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fd ffbb 	bl	8000438 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e09b      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fd ff8f 	bl	8000438 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fd ff8b 	bl	8000438 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e06d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4921      	ldr	r1, [pc, #132]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	430b      	orrs	r3, r1
 800256a:	491b      	ldr	r1, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fd ff5f 	bl	8000438 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7fd ff5b 	bl	8000438 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
 800259c:	e035      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fd ff48 	bl	8000438 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fd ff44 	bl	8000438 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e026      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
 80025ca:	e01e      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e019      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x500>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d0      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4965      	ldr	r1, [pc, #404]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800267e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e073      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4936      	ldr	r1, [pc, #216]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7fd fe96 	bl	8000438 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fd fe92 	bl	8000438 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e053      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1d0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fdf4 	bl	80003b4 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08006f64 	.word	0x08006f64
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e027      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e027      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0c5b      	lsrs	r3, r3, #17
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e004      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	693b      	ldr	r3, [r7, #16]
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	08006f74 	.word	0x08006f74
 800288c:	08006f84 	.word	0x08006f84
 8002890:	003d0900 	.word	0x003d0900

08002894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCC_Delay+0x34>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <RCC_Delay+0x38>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a5b      	lsrs	r3, r3, #9
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b0:	bf00      	nop
  }
  while (Delay --);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <RCC_Delay+0x1c>
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000000 	.word	0x20000000
 80028cc:	10624dd3 	.word	0x10624dd3

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d07d      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	61d3      	str	r3, [r2, #28]
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d118      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a42      	ldr	r2, [pc, #264]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002930:	f7fd fd82 	bl	8000438 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	e008      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002938:	f7fd fd7e 	bl	8000438 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e06d      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002956:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d02e      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d027      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800297e:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002984:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fd fd4d 	bl	8000438 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fd fd49 	bl	8000438 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e036      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4917      	ldr	r1, [pc, #92]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	490b      	ldr	r1, [pc, #44]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4904      	ldr	r1, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
 8002a38:	42420440 	.word	0x42420440

08002a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	f107 0014 	add.w	r0, r7, #20
 8002a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	b004      	add	sp, #16
 8002a5a:	4770      	bx	lr

08002a5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	f107 0014 	add.w	r0, r7, #20
 8002ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	b004      	add	sp, #16
 8002b12:	4770      	bx	lr

08002b14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b09d      	sub	sp, #116	; 0x74
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d81f      	bhi.n	8002b86 <USB_ActivateEndpoint+0x72>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <USB_ActivateEndpoint+0x38>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b79 	.word	0x08002b79
 8002b54:	08002b8f 	.word	0x08002b8f
 8002b58:	08002b6b 	.word	0x08002b6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b68:	e012      	b.n	8002b90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b76:	e00b      	b.n	8002b90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b84:	e004      	b.n	8002b90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002b8c:	e000      	b.n	8002b90 <USB_ActivateEndpoint+0x7c>
      break;
 8002b8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	7b1b      	ldrb	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 8178 	bne.w	8002ef2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8084 	beq.w	8002d14 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	011a      	lsls	r2, r3, #4
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	88db      	ldrh	r3, [r3, #6]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	827b      	strh	r3, [r7, #18]
 8002c4e:	8a7b      	ldrh	r3, [r7, #18]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01b      	beq.n	8002c90 <USB_ActivateEndpoint+0x17c>
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	823b      	strh	r3, [r7, #16]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	8a3b      	ldrh	r3, [r7, #16]
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	78db      	ldrb	r3, [r3, #3]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d020      	beq.n	8002cda <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cae:	81bb      	strh	r3, [r7, #12]
 8002cb0:	89bb      	ldrh	r3, [r7, #12]
 8002cb2:	f083 0320 	eor.w	r3, r3, #32
 8002cb6:	81bb      	strh	r3, [r7, #12]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	89bb      	ldrh	r3, [r7, #12]
 8002cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]
 8002cd8:	e2d5      	b.n	8003286 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf0:	81fb      	strh	r3, [r7, #14]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	441a      	add	r2, r3
 8002cfc:	89fb      	ldrh	r3, [r7, #14]
 8002cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]
 8002d12:	e2b8      	b.n	8003286 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	4413      	add	r3, r2
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	011a      	lsls	r2, r3, #4
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	88db      	ldrh	r3, [r3, #6]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	4413      	add	r3, r2
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	4413      	add	r3, r2
 8002d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b3e      	cmp	r3, #62	; 0x3e
 8002d82:	d91d      	bls.n	8002dc0 <USB_ActivateEndpoint+0x2ac>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <USB_ActivateEndpoint+0x28a>
 8002d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	e026      	b.n	8002e0e <USB_ActivateEndpoint+0x2fa>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <USB_ActivateEndpoint+0x2ca>
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	e017      	b.n	8002e0e <USB_ActivateEndpoint+0x2fa>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <USB_ActivateEndpoint+0x2e4>
 8002df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df4:	3301      	adds	r3, #1
 8002df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	029b      	lsls	r3, r3, #10
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4313      	orrs	r3, r2
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01b      	beq.n	8002e5e <USB_ActivateEndpoint+0x34a>
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	843b      	strh	r3, [r7, #32]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	8c3b      	ldrh	r3, [r7, #32]
 8002e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d124      	bne.n	8002eb0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7c:	83bb      	strh	r3, [r7, #28]
 8002e7e:	8bbb      	ldrh	r3, [r7, #28]
 8002e80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e84:	83bb      	strh	r3, [r7, #28]
 8002e86:	8bbb      	ldrh	r3, [r7, #28]
 8002e88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e8c:	83bb      	strh	r3, [r7, #28]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	8bbb      	ldrh	r3, [r7, #28]
 8002e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8013      	strh	r3, [r2, #0]
 8002eae:	e1ea      	b.n	8003286 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	83fb      	strh	r3, [r7, #30]
 8002ec8:	8bfb      	ldrh	r3, [r7, #30]
 8002eca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ece:	83fb      	strh	r3, [r7, #30]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	8bfb      	ldrh	r3, [r7, #30]
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]
 8002ef0:	e1c9      	b.n	8003286 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	78db      	ldrb	r3, [r3, #3]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d11e      	bne.n	8002f38 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	8013      	strh	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	4413      	add	r3, r2
 8002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	891b      	ldrh	r3, [r3, #8]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	657b      	str	r3, [r7, #84]	; 0x54
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	4413      	add	r3, r2
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	011a      	lsls	r2, r3, #4
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	895b      	ldrh	r3, [r3, #10]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	785b      	ldrb	r3, [r3, #1]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8093 	bne.w	800310c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01b      	beq.n	800303a <USB_ActivateEndpoint+0x526>
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003018:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	441a      	add	r2, r3
 8003024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003048:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01b      	beq.n	800308a <USB_ActivateEndpoint+0x576>
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	877b      	strh	r3, [r7, #58]	; 0x3a
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003086:	b29b      	uxth	r3, r3
 8003088:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80030a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80030aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003106:	b29b      	uxth	r3, r3
 8003108:	8013      	strh	r3, [r2, #0]
 800310a:	e0bc      	b.n	8003286 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800311c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01d      	beq.n	8003164 <USB_ActivateEndpoint+0x650>
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800315c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003160:	b29b      	uxth	r3, r3
 8003162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003174:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01d      	beq.n	80031bc <USB_ActivateEndpoint+0x6a8>
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	78db      	ldrb	r3, [r3, #3]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d024      	beq.n	800320e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031e2:	f083 0320 	eor.w	r3, r3, #32
 80031e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	b29b      	uxth	r3, r3
 800320a:	8013      	strh	r3, [r2, #0]
 800320c:	e01d      	b.n	800324a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003224:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	b29b      	uxth	r3, r3
 8003284:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800328a:	4618      	mov	r0, r3
 800328c:	3774      	adds	r7, #116	; 0x74
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003294:	b480      	push	{r7}
 8003296:	b08d      	sub	sp, #52	; 0x34
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7b1b      	ldrb	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 808e 	bne.w	80033c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d044      	beq.n	800333a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	81bb      	strh	r3, [r7, #12]
 80032be:	89bb      	ldrh	r3, [r7, #12]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <USB_DeactivateEndpoint+0x6c>
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	817b      	strh	r3, [r7, #10]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003316:	813b      	strh	r3, [r7, #8]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	893b      	ldrh	r3, [r7, #8]
 8003324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003334:	b29b      	uxth	r3, r3
 8003336:	8013      	strh	r3, [r2, #0]
 8003338:	e192      	b.n	8003660 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	827b      	strh	r3, [r7, #18]
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01b      	beq.n	800338a <USB_DeactivateEndpoint+0xf6>
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	823b      	strh	r3, [r7, #16]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	8a3b      	ldrh	r3, [r7, #16]
 8003376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003386:	b29b      	uxth	r3, r3
 8003388:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	81fb      	strh	r3, [r7, #14]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
 80033c2:	e14d      	b.n	8003660 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 80a5 	bne.w	8003518 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	843b      	strh	r3, [r7, #32]
 80033dc:	8c3b      	ldrh	r3, [r7, #32]
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01b      	beq.n	800341e <USB_DeactivateEndpoint+0x18a>
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	83fb      	strh	r3, [r7, #30]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	441a      	add	r2, r3
 8003408:	8bfb      	ldrh	r3, [r7, #30]
 800340a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341a:	b29b      	uxth	r3, r3
 800341c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	83bb      	strh	r3, [r7, #28]
 800342c:	8bbb      	ldrh	r3, [r7, #28]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01b      	beq.n	800346e <USB_DeactivateEndpoint+0x1da>
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	837b      	strh	r3, [r7, #26]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800346a:	b29b      	uxth	r3, r3
 800346c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	833b      	strh	r3, [r7, #24]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	8b3b      	ldrh	r3, [r7, #24]
 8003492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	82fb      	strh	r3, [r7, #22]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	8afb      	ldrh	r3, [r7, #22]
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f4:	82bb      	strh	r3, [r7, #20]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	8abb      	ldrh	r3, [r7, #20]
 8003502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	b29b      	uxth	r3, r3
 8003514:	8013      	strh	r3, [r2, #0]
 8003516:	e0a3      	b.n	8003660 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003526:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <USB_DeactivateEndpoint+0x2d4>
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <USB_DeactivateEndpoint+0x324>
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	853b      	strh	r3, [r7, #40]	; 0x28
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003606:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003624:	b29b      	uxth	r3, r3
 8003626:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800364c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365c:	b29b      	uxth	r3, r3
 800365e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3734      	adds	r7, #52	; 0x34
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b0c2      	sub	sp, #264	; 0x108
 8003670:	af00      	add	r7, sp, #0
 8003672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800367a:	6018      	str	r0, [r3, #0]
 800367c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003684:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800368a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b01      	cmp	r3, #1
 8003694:	f040 86b7 	bne.w	8004406 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800369c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d908      	bls.n	80036c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80036b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036c4:	e007      	b.n	80036d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80036c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80036d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	7b1b      	ldrb	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d13a      	bne.n	800375c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80036e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6959      	ldr	r1, [r3, #20]
 80036f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	88da      	ldrh	r2, [r3, #6]
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003702:	b29b      	uxth	r3, r3
 8003704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f001 fc9c 	bl	800504a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372c:	b29b      	uxth	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800373a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	011a      	lsls	r2, r3, #4
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	f000 be1f 	b.w	800439a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800375c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	2b02      	cmp	r3, #2
 800376a:	f040 8462 	bne.w	8004032 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800376e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800377e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	f240 83df 	bls.w	8003f4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800379a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80037b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80037e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f8:	1ad2      	subs	r2, r2, r3
 80037fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 81c7 	beq.w	8003bbc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800382e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 800383a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800383e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d177      	bne.n	800393a <USB_EPStartXfer+0x2ce>
 800384a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800384e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
 8003856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800385a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	4413      	add	r3, r2
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
 800386e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	011a      	lsls	r2, r3, #4
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	4413      	add	r3, r2
 8003880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003890:	b29a      	uxth	r2, r3
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389a:	2b3e      	cmp	r3, #62	; 0x3e
 800389c:	d921      	bls.n	80038e2 <USB_EPStartXfer+0x276>
 800389e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <USB_EPStartXfer+0x252>
 80038b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038b8:	3b01      	subs	r3, #1
 80038ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e050      	b.n	8003984 <USB_EPStartXfer+0x318>
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <USB_EPStartXfer+0x294>
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	e041      	b.n	8003984 <USB_EPStartXfer+0x318>
 8003900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <USB_EPStartXfer+0x2b4>
 8003916:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800391a:	3301      	adds	r3, #1
 800391c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29a      	uxth	r2, r3
 8003926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800392a:	b29b      	uxth	r3, r3
 800392c:	029b      	lsls	r3, r3, #10
 800392e:	b29b      	uxth	r3, r3
 8003930:	4313      	orrs	r3, r2
 8003932:	b29a      	uxth	r2, r3
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	e024      	b.n	8003984 <USB_EPStartXfer+0x318>
 800393a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800393e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d11c      	bne.n	8003984 <USB_EPStartXfer+0x318>
 800394a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800394e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	4413      	add	r3, r2
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
 8003962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	4413      	add	r3, r2
 8003974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	b29a      	uxth	r2, r3
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	895b      	ldrh	r3, [r3, #10]
 8003990:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6959      	ldr	r1, [r3, #20]
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80039aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80039ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80039b2:	6800      	ldr	r0, [r0, #0]
 80039b4:	f001 fb49 	bl	800504a <USB_WritePMA>
            ep->xfer_buff += len;
 80039b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c8:	441a      	add	r2, r3
 80039ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d90f      	bls.n	8003a12 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80039f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a02:	1ad2      	subs	r2, r2, r3
 8003a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	e00e      	b.n	8003a30 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d177      	bne.n	8003b30 <USB_EPStartXfer+0x4c4>
 8003a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4413      	add	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a90:	2b3e      	cmp	r3, #62	; 0x3e
 8003a92:	d921      	bls.n	8003ad8 <USB_EPStartXfer+0x46c>
 8003a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <USB_EPStartXfer+0x448>
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	e056      	b.n	8003b86 <USB_EPStartXfer+0x51a>
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <USB_EPStartXfer+0x48a>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	e047      	b.n	8003b86 <USB_EPStartXfer+0x51a>
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <USB_EPStartXfer+0x4aa>
 8003b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b10:	3301      	adds	r3, #1
 8003b12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4313      	orrs	r3, r2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e02a      	b.n	8003b86 <USB_EPStartXfer+0x51a>
 8003b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d122      	bne.n	8003b86 <USB_EPStartXfer+0x51a>
 8003b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	4413      	add	r3, r2
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	011a      	lsls	r2, r3, #4
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	891b      	ldrh	r3, [r3, #8]
 8003b92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6959      	ldr	r1, [r3, #20]
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003bac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003bb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003bb4:	6800      	ldr	r0, [r0, #0]
 8003bb6:	f001 fa48 	bl	800504a <USB_WritePMA>
 8003bba:	e3ee      	b.n	800439a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d177      	bne.n	8003cbc <USB_EPStartXfer+0x650>
 8003bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bec:	4413      	add	r3, r2
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	011a      	lsls	r2, r3, #4
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c00:	4413      	add	r3, r2
 8003c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c06:	647b      	str	r3, [r7, #68]	; 0x44
 8003c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8003c1e:	d921      	bls.n	8003c64 <USB_EPStartXfer+0x5f8>
 8003c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <USB_EPStartXfer+0x5d4>
 8003c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	029b      	lsls	r3, r3, #10
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	e056      	b.n	8003d12 <USB_EPStartXfer+0x6a6>
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <USB_EPStartXfer+0x616>
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e047      	b.n	8003d12 <USB_EPStartXfer+0x6a6>
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <USB_EPStartXfer+0x636>
 8003c98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	e02a      	b.n	8003d12 <USB_EPStartXfer+0x6a6>
 8003cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d122      	bne.n	8003d12 <USB_EPStartXfer+0x6a6>
 8003ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	4413      	add	r3, r2
 8003cee:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d00:	4413      	add	r3, r2
 8003d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	891b      	ldrh	r3, [r3, #8]
 8003d1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6959      	ldr	r1, [r3, #20]
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d40:	6800      	ldr	r0, [r0, #0]
 8003d42:	f001 f982 	bl	800504a <USB_WritePMA>
            ep->xfer_buff += len;
 8003d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d56:	441a      	add	r2, r3
 8003d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d90f      	bls.n	8003da0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d90:	1ad2      	subs	r2, r2, r3
 8003d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	621a      	str	r2, [r3, #32]
 8003d9e:	e00e      	b.n	8003dbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d177      	bne.n	8003eca <USB_EPStartXfer+0x85e>
 8003dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	4413      	add	r3, r2
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	011a      	lsls	r2, r3, #4
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	4413      	add	r3, r2
 8003e10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e2c:	d921      	bls.n	8003e72 <USB_EPStartXfer+0x806>
 8003e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d104      	bne.n	8003e4e <USB_EPStartXfer+0x7e2>
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e050      	b.n	8003f14 <USB_EPStartXfer+0x8a8>
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <USB_EPStartXfer+0x824>
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	e041      	b.n	8003f14 <USB_EPStartXfer+0x8a8>
 8003e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <USB_EPStartXfer+0x844>
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	029b      	lsls	r3, r3, #10
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	e024      	b.n	8003f14 <USB_EPStartXfer+0x8a8>
 8003eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d11c      	bne.n	8003f14 <USB_EPStartXfer+0x8a8>
 8003eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	4413      	add	r3, r2
 8003ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	011a      	lsls	r2, r3, #4
 8003f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	895b      	ldrh	r3, [r3, #10]
 8003f20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6959      	ldr	r1, [r3, #20]
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003f3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	f001 f881 	bl	800504a <USB_WritePMA>
 8003f48:	e227      	b.n	800439a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	011a      	lsls	r2, r3, #4
 8003fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	891b      	ldrh	r3, [r3, #8]
 8004008:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800400c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6959      	ldr	r1, [r3, #20]
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401c:	b29b      	uxth	r3, r3
 800401e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004022:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004026:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	f001 f80d 	bl	800504a <USB_WritePMA>
 8004030:	e1b3      	b.n	800439a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80c6 	beq.w	8004204 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800407c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
 8004084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d177      	bne.n	8004184 <USB_EPStartXfer+0xb18>
 8004094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	66bb      	str	r3, [r7, #104]	; 0x68
 80040a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b4:	4413      	add	r3, r2
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	011a      	lsls	r2, r3, #4
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ce:	667b      	str	r3, [r7, #100]	; 0x64
 80040d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e4:	2b3e      	cmp	r3, #62	; 0x3e
 80040e6:	d921      	bls.n	800412c <USB_EPStartXfer+0xac0>
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <USB_EPStartXfer+0xa9c>
 80040fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004102:	3b01      	subs	r3, #1
 8004104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29a      	uxth	r2, r3
 800410e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004112:	b29b      	uxth	r3, r3
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	b29b      	uxth	r3, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004124:	b29a      	uxth	r2, r3
 8004126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	e050      	b.n	80041ce <USB_EPStartXfer+0xb62>
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <USB_EPStartXfer+0xade>
 8004134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004142:	b29a      	uxth	r2, r3
 8004144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e041      	b.n	80041ce <USB_EPStartXfer+0xb62>
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <USB_EPStartXfer+0xafe>
 8004160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004164:	3301      	adds	r3, #1
 8004166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800416a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29a      	uxth	r2, r3
 8004170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004174:	b29b      	uxth	r3, r3
 8004176:	029b      	lsls	r3, r3, #10
 8004178:	b29b      	uxth	r3, r3
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e024      	b.n	80041ce <USB_EPStartXfer+0xb62>
 8004184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d11c      	bne.n	80041ce <USB_EPStartXfer+0xb62>
 8004194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	4413      	add	r3, r2
 80041aa:	673b      	str	r3, [r7, #112]	; 0x70
 80041ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041bc:	4413      	add	r3, r2
 80041be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80041ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	895b      	ldrh	r3, [r3, #10]
 80041da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6959      	ldr	r1, [r3, #20]
 80041ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80041f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80041f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f000 ff24 	bl	800504a <USB_WritePMA>
 8004202:	e0ca      	b.n	800439a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d177      	bne.n	8004304 <USB_EPStartXfer+0xc98>
 8004214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004234:	4413      	add	r3, r2
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800423c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	011a      	lsls	r2, r3, #4
 8004246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004248:	4413      	add	r3, r2
 800424a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800424e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425a:	b29a      	uxth	r2, r3
 800425c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004264:	2b3e      	cmp	r3, #62	; 0x3e
 8004266:	d921      	bls.n	80042ac <USB_EPStartXfer+0xc40>
 8004268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <USB_EPStartXfer+0xc1c>
 800427e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004282:	3b01      	subs	r3, #1
 8004284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004292:	b29b      	uxth	r3, r3
 8004294:	029b      	lsls	r3, r3, #10
 8004296:	b29b      	uxth	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	e05c      	b.n	8004366 <USB_EPStartXfer+0xcfa>
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <USB_EPStartXfer+0xc5e>
 80042b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	e04d      	b.n	8004366 <USB_EPStartXfer+0xcfa>
 80042ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <USB_EPStartXfer+0xc7e>
 80042e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042e4:	3301      	adds	r3, #1
 80042e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	e030      	b.n	8004366 <USB_EPStartXfer+0xcfa>
 8004304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d128      	bne.n	8004366 <USB_EPStartXfer+0xcfa>
 8004314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004338:	4413      	add	r3, r2
 800433a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800433e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	011a      	lsls	r2, r3, #4
 800434c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004350:	4413      	add	r3, r2
 8004352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800435a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800435e:	b29a      	uxth	r2, r3
 8004360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004364:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	891b      	ldrh	r3, [r3, #8]
 8004372:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6959      	ldr	r1, [r3, #20]
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004386:	b29b      	uxth	r3, r3
 8004388:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800438c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004390:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004394:	6800      	ldr	r0, [r0, #0]
 8004396:	f000 fe58 	bl	800504a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800439a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800439e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	f083 0310 	eor.w	r3, r3, #16
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	f083 0320 	eor.w	r3, r3, #32
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	897b      	ldrh	r3, [r7, #10]
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
 8004402:	f000 bcde 	b.w	8004dc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800440a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	7b1b      	ldrb	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 80bb 	bne.w	800458e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d917      	bls.n	8004464 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004454:	1ad2      	subs	r2, r2, r3
 8004456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	619a      	str	r2, [r3, #24]
 8004462:	e00e      	b.n	8004482 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449e:	b29b      	uxth	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044a6:	4413      	add	r3, r2
 80044a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044be:	4413      	add	r3, r2
 80044c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e0:	2b3e      	cmp	r3, #62	; 0x3e
 80044e2:	d924      	bls.n	800452e <USB_EPStartXfer+0xec2>
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <USB_EPStartXfer+0xe98>
 80044fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044fe:	3b01      	subs	r3, #1
 8004500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004510:	b29b      	uxth	r3, r3
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	b29b      	uxth	r3, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29a      	uxth	r2, r3
 8004524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	f000 bc10 	b.w	8004d4e <USB_EPStartXfer+0x16e2>
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <USB_EPStartXfer+0xee4>
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29a      	uxth	r2, r3
 8004548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	e3fe      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <USB_EPStartXfer+0xf04>
 8004566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800456a:	3301      	adds	r3, #1
 800456c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29a      	uxth	r2, r3
 8004578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800457c:	b29b      	uxth	r3, r3
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29b      	uxth	r3, r3
 8004582:	4313      	orrs	r3, r2
 8004584:	b29a      	uxth	r2, r3
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e3df      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	2b02      	cmp	r3, #2
 800459c:	f040 8218 	bne.w	80049d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80045a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 809d 	bne.w	80046ec <USB_EPStartXfer+0x1080>
 80045b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d6:	4413      	add	r3, r2
 80045d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	011a      	lsls	r2, r3, #4
 80045ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004604:	b29a      	uxth	r2, r3
 8004606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b3e      	cmp	r3, #62	; 0x3e
 800461a:	d92b      	bls.n	8004674 <USB_EPStartXfer+0x1008>
 800461c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800462e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <USB_EPStartXfer+0xfe0>
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004646:	3b01      	subs	r3, #1
 8004648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800464c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29a      	uxth	r2, r3
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004658:	b29b      	uxth	r3, r3
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	b29b      	uxth	r3, r3
 800465e:	4313      	orrs	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466a:	b29a      	uxth	r2, r3
 800466c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	e070      	b.n	8004756 <USB_EPStartXfer+0x10ea>
 8004674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10c      	bne.n	800469e <USB_EPStartXfer+0x1032>
 8004684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004694:	b29a      	uxth	r2, r3
 8004696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e05b      	b.n	8004756 <USB_EPStartXfer+0x10ea>
 800469e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <USB_EPStartXfer+0x1062>
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	3301      	adds	r3, #1
 80046ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4313      	orrs	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e034      	b.n	8004756 <USB_EPStartXfer+0x10ea>
 80046ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d12c      	bne.n	8004756 <USB_EPStartXfer+0x10ea>
 80046fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004720:	4413      	add	r3, r2
 8004722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800472a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	011a      	lsls	r2, r3, #4
 8004734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004738:	4413      	add	r3, r2
 800473a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800473e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	b29a      	uxth	r2, r3
 8004750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 809d 	bne.w	80048b0 <USB_EPStartXfer+0x1244>
 8004776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800479a:	4413      	add	r3, r2
 800479c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	011a      	lsls	r2, r3, #4
 80047ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b3e      	cmp	r3, #62	; 0x3e
 80047de:	d92b      	bls.n	8004838 <USB_EPStartXfer+0x11cc>
 80047e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <USB_EPStartXfer+0x11a4>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480a:	3b01      	subs	r3, #1
 800480c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29a      	uxth	r2, r3
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481c:	b29b      	uxth	r3, r3
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	b29b      	uxth	r3, r3
 8004822:	4313      	orrs	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e069      	b.n	800490c <USB_EPStartXfer+0x12a0>
 8004838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800483c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10c      	bne.n	8004862 <USB_EPStartXfer+0x11f6>
 8004848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e054      	b.n	800490c <USB_EPStartXfer+0x12a0>
 8004862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <USB_EPStartXfer+0x1226>
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488c:	3301      	adds	r3, #1
 800488e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29a      	uxth	r2, r3
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4313      	orrs	r3, r2
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e02d      	b.n	800490c <USB_EPStartXfer+0x12a0>
 80048b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d125      	bne.n	800490c <USB_EPStartXfer+0x12a0>
 80048c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048d6:	4413      	add	r3, r2
 80048d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	011a      	lsls	r2, r3, #4
 80048ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048ee:	4413      	add	r3, r2
 80048f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	b29a      	uxth	r2, r3
 8004906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800490a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8218 	beq.w	8004d4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800491e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800493e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <USB_EPStartXfer+0x12ea>
 800494a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004956:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 81f5 	bne.w	8004d4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004964:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 81ee 	bne.w	8004d4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800499c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80049ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	8013      	strh	r3, [r2, #0]
 80049ce:	e1be      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	78db      	ldrb	r3, [r3, #3]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 81b4 	bne.w	8004d4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80049e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d917      	bls.n	8004a2e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80049fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	619a      	str	r2, [r3, #24]
 8004a2c:	e00e      	b.n	8004a4c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 8085 	bne.w	8004b68 <USB_EPStartXfer+0x14fc>
 8004a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a82:	4413      	add	r3, r2
 8004a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	011a      	lsls	r2, r3, #4
 8004a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004abc:	2b3e      	cmp	r3, #62	; 0x3e
 8004abe:	d923      	bls.n	8004b08 <USB_EPStartXfer+0x149c>
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <USB_EPStartXfer+0x1474>
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ada:	3b01      	subs	r3, #1
 8004adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	029b      	lsls	r3, r3, #10
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	e060      	b.n	8004bca <USB_EPStartXfer+0x155e>
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10c      	bne.n	8004b2a <USB_EPStartXfer+0x14be>
 8004b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	e04f      	b.n	8004bca <USB_EPStartXfer+0x155e>
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <USB_EPStartXfer+0x14de>
 8004b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b44:	3301      	adds	r3, #1
 8004b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	029b      	lsls	r3, r3, #10
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b64:	801a      	strh	r2, [r3, #0]
 8004b66:	e030      	b.n	8004bca <USB_EPStartXfer+0x155e>
 8004b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d128      	bne.n	8004bca <USB_EPStartXfer+0x155e>
 8004b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	011a      	lsls	r2, r3, #4
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f040 8085 	bne.w	8004cf4 <USB_EPStartXfer+0x1688>
 8004bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c0e:	4413      	add	r3, r2
 8004c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c26:	4413      	add	r3, r2
 8004c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c48:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4a:	d923      	bls.n	8004c94 <USB_EPStartXfer+0x1628>
 8004c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <USB_EPStartXfer+0x1600>
 8004c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e05c      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
 8004c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10c      	bne.n	8004cb6 <USB_EPStartXfer+0x164a>
 8004c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	e04b      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <USB_EPStartXfer+0x166a>
 8004ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	e02c      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
 8004cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d124      	bne.n	8004d4e <USB_EPStartXfer+0x16e2>
 8004d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	011a      	lsls	r2, r3, #4
 8004d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d32:	4413      	add	r3, r2
 8004d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	e001      	b.n	8004d4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e03a      	b.n	8004dc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df6:	81bb      	strh	r3, [r7, #12]
 8004df8:	89bb      	ldrh	r3, [r7, #12]
 8004dfa:	f083 0310 	eor.w	r3, r3, #16
 8004dfe:	81bb      	strh	r3, [r7, #12]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	89bb      	ldrh	r3, [r7, #12]
 8004e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8013      	strh	r3, [r2, #0]
 8004e20:	e01f      	b.n	8004e62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e38:	81fb      	strh	r3, [r7, #14]
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e40:	81fb      	strh	r3, [r7, #14]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	89fb      	ldrh	r3, [r7, #14]
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b087      	sub	sp, #28
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	7b1b      	ldrb	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 809d 	bne.w	8004fbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04c      	beq.n	8004f24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	823b      	strh	r3, [r7, #16]
 8004e98:	8a3b      	ldrh	r3, [r7, #16]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <USB_EPClearStall+0x6c>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	81fb      	strh	r3, [r7, #14]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	89fb      	ldrh	r3, [r7, #14]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	78db      	ldrb	r3, [r3, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d06c      	beq.n	8004fbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	81bb      	strh	r3, [r7, #12]
 8004efa:	89bb      	ldrh	r3, [r7, #12]
 8004efc:	f083 0320 	eor.w	r3, r3, #32
 8004f00:	81bb      	strh	r3, [r7, #12]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	89bb      	ldrh	r3, [r7, #12]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e04b      	b.n	8004fbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	82fb      	strh	r3, [r7, #22]
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <USB_EPClearStall+0x106>
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	82bb      	strh	r3, [r7, #20]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8abb      	ldrh	r3, [r7, #20]
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	827b      	strh	r3, [r7, #18]
 8004f8c:	8a7b      	ldrh	r3, [r7, #18]
 8004f8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f92:	827b      	strh	r3, [r7, #18]
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f9a:	827b      	strh	r3, [r7, #18]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	8a7b      	ldrh	r3, [r7, #18]
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005024:	b29b      	uxth	r3, r3
 8005026:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800504a:	b480      	push	{r7}
 800504c:	b08b      	sub	sp, #44	; 0x2c
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	4611      	mov	r1, r2
 8005056:	461a      	mov	r2, r3
 8005058:	460b      	mov	r3, r1
 800505a:	80fb      	strh	r3, [r7, #6]
 800505c:	4613      	mov	r3, r2
 800505e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005060:	88bb      	ldrh	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	005a      	lsls	r2, r3, #1
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e01e      	b.n	80050c2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3301      	adds	r3, #1
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	b21a      	sxth	r2, r3
 8005094:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005098:	4313      	orrs	r3, r2
 800509a:	b21b      	sxth	r3, r3
 800509c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	8a7a      	ldrh	r2, [r7, #18]
 80050a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	3302      	adds	r3, #2
 80050a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	3302      	adds	r3, #2
 80050ae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	3b01      	subs	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1dd      	bne.n	8005084 <USB_WritePMA+0x3a>
  }
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	372c      	adds	r7, #44	; 0x2c
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b08b      	sub	sp, #44	; 0x2c
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	80fb      	strh	r3, [r7, #6]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050ea:	88bb      	ldrh	r3, [r7, #4]
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	005a      	lsls	r2, r3, #1
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005106:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	e01b      	b.n	8005146 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	3302      	adds	r3, #2
 800511a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	0a1b      	lsrs	r3, r3, #8
 800512e:	b2da      	uxtb	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	3302      	adds	r3, #2
 800513e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	3b01      	subs	r3, #1
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e0      	bne.n	800510e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800514c:	88bb      	ldrh	r3, [r7, #4]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	701a      	strb	r2, [r3, #0]
  }
}
 8005168:	bf00      	nop
 800516a:	372c      	adds	r7, #44	; 0x2c
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005182:	2340      	movs	r3, #64	; 0x40
 8005184:	2203      	movs	r2, #3
 8005186:	2181      	movs	r1, #129	; 0x81
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fd2a 	bl	8006be2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	2203      	movs	r2, #3
 8005198:	2101      	movs	r1, #1
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 fd21 	bl	8006be2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80051a8:	2054      	movs	r0, #84	; 0x54
 80051aa:	f001 fe2f 	bl	8006e0c <USBD_static_malloc>
 80051ae:	4602      	mov	r2, r0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e012      	b.n	80051ec <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051cc:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	2340      	movs	r3, #64	; 0x40
 80051e4:	2101      	movs	r1, #1
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 fdec 	bl	8006dc4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8005202:	2181      	movs	r1, #129	; 0x81
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 fd12 	bl	8006c2e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8005210:	2101      	movs	r1, #1
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fd0b 	bl	8006c2e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fdf2 	bl	8006e24 <USBD_static_free>
    pdev->pClassData = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005264:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800527e:	2b00      	cmp	r3, #0
 8005280:	d051      	beq.n	8005326 <USBD_CUSTOM_HID_Setup+0xd2>
 8005282:	2b20      	cmp	r3, #32
 8005284:	f040 80d8 	bne.w	8005438 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	3b02      	subs	r3, #2
 800528e:	2b09      	cmp	r3, #9
 8005290:	d841      	bhi.n	8005316 <USBD_CUSTOM_HID_Setup+0xc2>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <USBD_CUSTOM_HID_Setup+0x44>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052f1 	.word	0x080052f1
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	08005317 	.word	0x08005317
 80052a4:	08005317 	.word	0x08005317
 80052a8:	08005317 	.word	0x08005317
 80052ac:	08005317 	.word	0x08005317
 80052b0:	08005317 	.word	0x08005317
 80052b4:	08005301 	.word	0x08005301
 80052b8:	080052df 	.word	0x080052df
 80052bc:	080052c1 	.word	0x080052c1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	885b      	ldrh	r3, [r3, #2]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80052cc:	e02a      	b.n	8005324 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3340      	adds	r3, #64	; 0x40
 80052d2:	2201      	movs	r2, #1
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 f977 	bl	80065ca <USBD_CtlSendData>
          break;
 80052dc:	e022      	b.n	8005324 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	885b      	ldrh	r3, [r3, #2]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80052ee:	e019      	b.n	8005324 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	3344      	adds	r3, #68	; 0x44
 80052f4:	2201      	movs	r2, #1
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 f966 	bl	80065ca <USBD_CtlSendData>
          break;
 80052fe:	e011      	b.n	8005324 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2201      	movs	r2, #1
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	88db      	ldrh	r3, [r3, #6]
 800530c:	461a      	mov	r2, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 f989 	bl	8006626 <USBD_CtlPrepareRx>
          break;
 8005314:	e006      	b.n	8005324 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 f8ec 	bl	80064f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800531e:	2302      	movs	r3, #2
 8005320:	75fb      	strb	r3, [r7, #23]
          break;
 8005322:	bf00      	nop
      }
      break;
 8005324:	e08f      	b.n	8005446 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d87c      	bhi.n	8005428 <USBD_CUSTOM_HID_Setup+0x1d4>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <USBD_CUSTOM_HID_Setup+0xe0>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005365 	.word	0x08005365
 8005338:	08005429 	.word	0x08005429
 800533c:	08005429 	.word	0x08005429
 8005340:	08005429 	.word	0x08005429
 8005344:	08005429 	.word	0x08005429
 8005348:	08005429 	.word	0x08005429
 800534c:	0800538d 	.word	0x0800538d
 8005350:	08005429 	.word	0x08005429
 8005354:	08005429 	.word	0x08005429
 8005358:	08005429 	.word	0x08005429
 800535c:	080053db 	.word	0x080053db
 8005360:	08005403 	.word	0x08005403
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536a:	2b03      	cmp	r3, #3
 800536c:	d107      	bne.n	800537e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800536e:	f107 030e 	add.w	r3, r7, #14
 8005372:	2202      	movs	r2, #2
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 f927 	bl	80065ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800537c:	e05b      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 f8b8 	bl	80064f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005386:	2302      	movs	r3, #2
 8005388:	75fb      	strb	r3, [r7, #23]
          break;
 800538a:	e054      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	885b      	ldrh	r3, [r3, #2]
 8005390:	0a1b      	lsrs	r3, r3, #8
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b22      	cmp	r3, #34	; 0x22
 8005396:	d10b      	bne.n	80053b0 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	88db      	ldrh	r3, [r3, #6]
 800539c:	2b20      	cmp	r3, #32
 800539e:	bf28      	it	cs
 80053a0:	2320      	movcs	r3, #32
 80053a2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00d      	b.n	80053cc <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	885b      	ldrh	r3, [r3, #2]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b21      	cmp	r3, #33	; 0x21
 80053ba:	d107      	bne.n	80053cc <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80053bc:	4b24      	ldr	r3, [pc, #144]	; (8005450 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80053be:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	88db      	ldrh	r3, [r3, #6]
 80053c4:	2b09      	cmp	r3, #9
 80053c6:	bf28      	it	cs
 80053c8:	2309      	movcs	r3, #9
 80053ca:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80053cc:	8bfb      	ldrh	r3, [r7, #30]
 80053ce:	461a      	mov	r2, r3
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 f8f9 	bl	80065ca <USBD_CtlSendData>
          break;
 80053d8:	e02d      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d107      	bne.n	80053f4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3348      	adds	r3, #72	; 0x48
 80053e8:	2201      	movs	r2, #1
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f8ec 	bl	80065ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053f2:	e020      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 f87d 	bl	80064f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80053fc:	2302      	movs	r3, #2
 80053fe:	75fb      	strb	r3, [r7, #23]
          break;
 8005400:	e019      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005408:	2b03      	cmp	r3, #3
 800540a:	d106      	bne.n	800541a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	885b      	ldrh	r3, [r3, #2]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005418:	e00d      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 f86a 	bl	80064f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005422:	2302      	movs	r3, #2
 8005424:	75fb      	strb	r3, [r7, #23]
          break;
 8005426:	e006      	b.n	8005436 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f863 	bl	80064f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
          break;
 8005434:	bf00      	nop
      }
      break;
 8005436:	e006      	b.n	8005446 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 f85b 	bl	80064f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005440:	2302      	movs	r3, #2
 8005442:	75fb      	strb	r3, [r7, #23]
      break;
 8005444:	bf00      	nop
  }
  return ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200000c8 	.word	0x200000c8

08005454 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2229      	movs	r2, #41	; 0x29
 8005460:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8005462:	4b03      	ldr	r3, [pc, #12]	; (8005470 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000044 	.word	0x20000044

08005474 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2229      	movs	r2, #41	; 0x29
 8005480:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000070 	.word	0x20000070

08005494 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2229      	movs	r2, #41	; 0x29
 80054a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80054a2:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	2000009c 	.word	0x2000009c

080054b4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ea:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	7810      	ldrb	r0, [r2, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	7852      	ldrb	r2, [r2, #1]
 80054fc:	4611      	mov	r1, r2
 80054fe:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	2101      	movs	r1, #1
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fc5c 	bl	8006dc4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005524:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10c      	bne.n	8005548 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	7810      	ldrb	r0, [r2, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	7852      	ldrb	r2, [r2, #1]
 800553e:	4611      	mov	r1, r2
 8005540:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	220a      	movs	r2, #10
 8005560:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005562:	4b03      	ldr	r3, [pc, #12]	; (8005570 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	200000d4 	.word	0x200000d4

08005574 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800557e:	2302      	movs	r3, #2
 8005580:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	e01a      	b.n	80055ee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	79fa      	ldrb	r2, [r7, #7]
 80055e4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f001 fa90 	bl	8006b0c <USBD_LL_Init>

  return USBD_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d006      	beq.n	8005618 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e001      	b.n	800561c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005618:	2302      	movs	r3, #2
 800561a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 fabb 	bl	8006bac <USBD_LL_Start>

  return USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005660:	2302      	movs	r3, #2
 8005662:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	4611      	mov	r1, r2
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	4611      	mov	r1, r2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3

  return USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fed7 	bl	800647e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d016      	beq.n	8005722 <USBD_LL_SetupStage+0x6a>
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d81c      	bhi.n	8005732 <USBD_LL_SetupStage+0x7a>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <USBD_LL_SetupStage+0x4a>
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d008      	beq.n	8005712 <USBD_LL_SetupStage+0x5a>
 8005700:	e017      	b.n	8005732 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9ca 	bl	8005aa4 <USBD_StdDevReq>
      break;
 8005710:	e01a      	b.n	8005748 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa2c 	bl	8005b78 <USBD_StdItfReq>
      break;
 8005720:	e012      	b.n	8005748 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fa6c 	bl	8005c08 <USBD_StdEPReq>
      break;
 8005730:	e00a      	b.n	8005748 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005738:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fa93 	bl	8006c6c <USBD_LL_StallEP>
      break;
 8005746:	bf00      	nop
  }

  return USBD_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	460b      	mov	r3, r1
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005760:	7afb      	ldrb	r3, [r7, #11]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d14b      	bne.n	80057fe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800576c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005774:	2b03      	cmp	r3, #3
 8005776:	d134      	bne.n	80057e2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d919      	bls.n	80057b8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800579a:	429a      	cmp	r2, r3
 800579c:	d203      	bcs.n	80057a6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	e002      	b.n	80057ac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 ff56 	bl	8006662 <USBD_CtlContinueRx>
 80057b6:	e038      	b.n	800582a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d105      	bne.n	80057da <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 ff53 	bl	8006686 <USBD_CtlSendStatus>
 80057e0:	e023      	b.n	800582a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d11e      	bne.n	800582a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80057f4:	2100      	movs	r1, #0
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f001 fa38 	bl	8006c6c <USBD_LL_StallEP>
 80057fc:	e015      	b.n	800582a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00d      	beq.n	8005826 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005810:	2b03      	cmp	r3, #3
 8005812:	d108      	bne.n	8005826 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	7afa      	ldrb	r2, [r7, #11]
 800581e:	4611      	mov	r1, r2
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	4798      	blx	r3
 8005824:	e001      	b.n	800582a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005826:	2302      	movs	r3, #2
 8005828:	e000      	b.n	800582c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	460b      	mov	r3, r1
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005842:	7afb      	ldrb	r3, [r7, #11]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d17f      	bne.n	8005948 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3314      	adds	r3, #20
 800584c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005854:	2b02      	cmp	r3, #2
 8005856:	d15c      	bne.n	8005912 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d915      	bls.n	8005890 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	b29b      	uxth	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fec0 	bl	8006602 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005882:	2300      	movs	r3, #0
 8005884:	2200      	movs	r2, #0
 8005886:	2100      	movs	r1, #0
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f001 fa9b 	bl	8006dc4 <USBD_LL_PrepareReceive>
 800588e:	e04e      	b.n	800592e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	6912      	ldr	r2, [r2, #16]
 8005898:	fbb3 f1f2 	udiv	r1, r3, r2
 800589c:	fb01 f202 	mul.w	r2, r1, r2
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11c      	bne.n	80058e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d316      	bcc.n	80058e0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058bc:	429a      	cmp	r2, r3
 80058be:	d20f      	bcs.n	80058e0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058c0:	2200      	movs	r2, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fe9c 	bl	8006602 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058d2:	2300      	movs	r3, #0
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f001 fa73 	bl	8006dc4 <USBD_LL_PrepareReceive>
 80058de:	e026      	b.n	800592e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d105      	bne.n	8005902 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f001 f9b1 	bl	8006c6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fece 	bl	80066ac <USBD_CtlReceiveStatus>
 8005910:	e00d      	b.n	800592e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005918:	2b04      	cmp	r3, #4
 800591a:	d004      	beq.n	8005926 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f001 f99f 	bl	8006c6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005934:	2b01      	cmp	r3, #1
 8005936:	d11d      	bne.n	8005974 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fe81 	bl	8005640 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005946:	e015      	b.n	8005974 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00d      	beq.n	8005970 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800595a:	2b03      	cmp	r3, #3
 800595c:	d108      	bne.n	8005970 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	7afa      	ldrb	r2, [r7, #11]
 8005968:	4611      	mov	r1, r2
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	4798      	blx	r3
 800596e:	e001      	b.n	8005974 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005970:	2302      	movs	r3, #2
 8005972:	e000      	b.n	8005976 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f928 	bl	8006be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2240      	movs	r2, #64	; 0x40
 800599e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059a2:	2340      	movs	r3, #64	; 0x40
 80059a4:	2200      	movs	r2, #0
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f91a 	bl	8006be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2240      	movs	r2, #64	; 0x40
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6852      	ldr	r2, [r2, #4]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	4611      	mov	r1, r2
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
  }

  return USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d105      	bne.n	8005a64 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d10b      	bne.n	8005a9a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d005      	beq.n	8005aca <USBD_StdDevReq+0x26>
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d84f      	bhi.n	8005b62 <USBD_StdDevReq+0xbe>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <USBD_StdDevReq+0x36>
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d14b      	bne.n	8005b62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
      break;
 8005ad8:	e048      	b.n	8005b6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	d839      	bhi.n	8005b56 <USBD_StdDevReq+0xb2>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <USBD_StdDevReq+0x44>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b39 	.word	0x08005b39
 8005aec:	08005b4d 	.word	0x08005b4d
 8005af0:	08005b57 	.word	0x08005b57
 8005af4:	08005b43 	.word	0x08005b43
 8005af8:	08005b57 	.word	0x08005b57
 8005afc:	08005b1b 	.word	0x08005b1b
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b57 	.word	0x08005b57
 8005b08:	08005b2f 	.word	0x08005b2f
 8005b0c:	08005b25 	.word	0x08005b25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9dc 	bl	8005ed0 <USBD_GetDescriptor>
          break;
 8005b18:	e022      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fb3f 	bl	80061a0 <USBD_SetAddress>
          break;
 8005b22:	e01d      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fb7e 	bl	8006228 <USBD_SetConfig>
          break;
 8005b2c:	e018      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fc07 	bl	8006344 <USBD_GetConfig>
          break;
 8005b36:	e013      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fc37 	bl	80063ae <USBD_GetStatus>
          break;
 8005b40:	e00e      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fc65 	bl	8006414 <USBD_SetFeature>
          break;
 8005b4a:	e009      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fc74 	bl	800643c <USBD_ClrFeature>
          break;
 8005b54:	e004      	b.n	8005b60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fccc 	bl	80064f6 <USBD_CtlError>
          break;
 8005b5e:	bf00      	nop
      }
      break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fcc6 	bl	80064f6 <USBD_CtlError>
      break;
 8005b6a:	bf00      	nop
  }

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop

08005b78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d005      	beq.n	8005b9e <USBD_StdItfReq+0x26>
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d82e      	bhi.n	8005bf4 <USBD_StdItfReq+0x7c>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <USBD_StdItfReq+0x26>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d12a      	bne.n	8005bf4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d81d      	bhi.n	8005be6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	889b      	ldrh	r3, [r3, #4]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d813      	bhi.n	8005bdc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d110      	bne.n	8005bf0 <USBD_StdItfReq+0x78>
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fd56 	bl	8006686 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005bda:	e009      	b.n	8005bf0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc89 	bl	80064f6 <USBD_CtlError>
          break;
 8005be4:	e004      	b.n	8005bf0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fc84 	bl	80064f6 <USBD_CtlError>
          break;
 8005bee:	e000      	b.n	8005bf2 <USBD_StdItfReq+0x7a>
          break;
 8005bf0:	bf00      	nop
      }
      break;
 8005bf2:	e004      	b.n	8005bfe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc7d 	bl	80064f6 <USBD_CtlError>
      break;
 8005bfc:	bf00      	nop
  }

  return USBD_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	889b      	ldrh	r3, [r3, #4]
 8005c1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d007      	beq.n	8005c38 <USBD_StdEPReq+0x30>
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	f200 8146 	bhi.w	8005eba <USBD_StdEPReq+0x2b2>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <USBD_StdEPReq+0x40>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	f040 8141 	bne.w	8005eba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
      break;
 8005c46:	e13d      	b.n	8005ec4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d10a      	bne.n	8005c6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	e12d      	b.n	8005ec6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d007      	beq.n	8005c82 <USBD_StdEPReq+0x7a>
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	f300 811b 	bgt.w	8005eae <USBD_StdEPReq+0x2a6>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d072      	beq.n	8005d62 <USBD_StdEPReq+0x15a>
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d03a      	beq.n	8005cf6 <USBD_StdEPReq+0xee>
 8005c80:	e115      	b.n	8005eae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d002      	beq.n	8005c92 <USBD_StdEPReq+0x8a>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d015      	beq.n	8005cbc <USBD_StdEPReq+0xb4>
 8005c90:	e02b      	b.n	8005cea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00c      	beq.n	8005cb2 <USBD_StdEPReq+0xaa>
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d009      	beq.n	8005cb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 ffe2 	bl	8006c6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 ffde 	bl	8006c6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cb0:	e020      	b.n	8005cf4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc1e 	bl	80064f6 <USBD_CtlError>
              break;
 8005cba:	e01b      	b.n	8005cf4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	885b      	ldrh	r3, [r3, #2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <USBD_StdEPReq+0xda>
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d008      	beq.n	8005ce2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	88db      	ldrh	r3, [r3, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 ffc5 	bl	8006c6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fccf 	bl	8006686 <USBD_CtlSendStatus>

              break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc02 	bl	80064f6 <USBD_CtlError>
              break;
 8005cf2:	bf00      	nop
          }
          break;
 8005cf4:	e0e0      	b.n	8005eb8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d002      	beq.n	8005d06 <USBD_StdEPReq+0xfe>
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d015      	beq.n	8005d30 <USBD_StdEPReq+0x128>
 8005d04:	e026      	b.n	8005d54 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00c      	beq.n	8005d26 <USBD_StdEPReq+0x11e>
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	d009      	beq.n	8005d26 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005d12:	7bbb      	ldrb	r3, [r7, #14]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 ffa8 	bl	8006c6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 ffa4 	bl	8006c6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d24:	e01c      	b.n	8005d60 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fbe4 	bl	80064f6 <USBD_CtlError>
              break;
 8005d2e:	e017      	b.n	8005d60 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	885b      	ldrh	r3, [r3, #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d112      	bne.n	8005d5e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 ffaf 	bl	8006caa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fc9a 	bl	8006686 <USBD_CtlSendStatus>
              }
              break;
 8005d52:	e004      	b.n	8005d5e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fbcd 	bl	80064f6 <USBD_CtlError>
              break;
 8005d5c:	e000      	b.n	8005d60 <USBD_StdEPReq+0x158>
              break;
 8005d5e:	bf00      	nop
          }
          break;
 8005d60:	e0aa      	b.n	8005eb8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d002      	beq.n	8005d72 <USBD_StdEPReq+0x16a>
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d032      	beq.n	8005dd6 <USBD_StdEPReq+0x1ce>
 8005d70:	e097      	b.n	8005ea2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <USBD_StdEPReq+0x180>
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d004      	beq.n	8005d88 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fbb8 	bl	80064f6 <USBD_CtlError>
                break;
 8005d86:	e091      	b.n	8005eac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	da0b      	bge.n	8005da8 <USBD_StdEPReq+0x1a0>
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	3310      	adds	r3, #16
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	3304      	adds	r3, #4
 8005da6:	e00b      	b.n	8005dc0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fbfb 	bl	80065ca <USBD_CtlSendData>
              break;
 8005dd4:	e06a      	b.n	8005eac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da11      	bge.n	8005e02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3318      	adds	r3, #24
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d117      	bne.n	8005e28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fb7b 	bl	80064f6 <USBD_CtlError>
                  break;
 8005e00:	e054      	b.n	8005eac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb68 	bl	80064f6 <USBD_CtlError>
                  break;
 8005e26:	e041      	b.n	8005eac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da0b      	bge.n	8005e48 <USBD_StdEPReq+0x240>
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3310      	adds	r3, #16
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	e00b      	b.n	8005e60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3304      	adds	r3, #4
 8005e60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <USBD_StdEPReq+0x266>
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d103      	bne.n	8005e76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e00e      	b.n	8005e94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 ff34 	bl	8006ce8 <USBD_LL_IsStallEP>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e002      	b.n	8005e94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2202      	movs	r2, #2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fb95 	bl	80065ca <USBD_CtlSendData>
              break;
 8005ea0:	e004      	b.n	8005eac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb26 	bl	80064f6 <USBD_CtlError>
              break;
 8005eaa:	bf00      	nop
          }
          break;
 8005eac:	e004      	b.n	8005eb8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fb20 	bl	80064f6 <USBD_CtlError>
          break;
 8005eb6:	bf00      	nop
      }
      break;
 8005eb8:	e004      	b.n	8005ec4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb1a 	bl	80064f6 <USBD_CtlError>
      break;
 8005ec2:	bf00      	nop
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	885b      	ldrh	r3, [r3, #2]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	f200 8128 	bhi.w	8006146 <USBD_GetDescriptor+0x276>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <USBD_GetDescriptor+0x2c>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f31 	.word	0x08005f31
 8005f04:	08005f71 	.word	0x08005f71
 8005f08:	08006147 	.word	0x08006147
 8005f0c:	08006147 	.word	0x08006147
 8005f10:	080060e7 	.word	0x080060e7
 8005f14:	08006113 	.word	0x08006113
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	7c12      	ldrb	r2, [r2, #16]
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
 8005f2c:	60f8      	str	r0, [r7, #12]
      break;
 8005f2e:	e112      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10d      	bne.n	8005f54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	f107 0208 	add.w	r2, r7, #8
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
 8005f48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f52:	e100      	b.n	8006156 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f107 0208 	add.w	r2, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	701a      	strb	r2, [r3, #0]
      break;
 8005f6e:	e0f2      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	f200 80ac 	bhi.w	80060d4 <USBD_GetDescriptor+0x204>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBD_GetDescriptor+0xb4>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005f9d 	.word	0x08005f9d
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08006039 	.word	0x08006039
 8005f94:	0800606d 	.word	0x0800606d
 8005f98:	080060a1 	.word	0x080060a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	7c12      	ldrb	r2, [r2, #16]
 8005fb4:	f107 0108 	add.w	r1, r7, #8
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
 8005fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fbe:	e091      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa97 	bl	80064f6 <USBD_CtlError>
            err++;
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fce:	e089      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7c12      	ldrb	r2, [r2, #16]
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff2:	e077      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa7d 	bl	80064f6 <USBD_CtlError>
            err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
          break;
 8006002:	e06f      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	7c12      	ldrb	r2, [r2, #16]
 800601c:	f107 0108 	add.w	r1, r7, #8
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006026:	e05d      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa63 	bl	80064f6 <USBD_CtlError>
            err++;
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	3301      	adds	r3, #1
 8006034:	72fb      	strb	r3, [r7, #11]
          break;
 8006036:	e055      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	7c12      	ldrb	r2, [r2, #16]
 8006050:	f107 0108 	add.w	r1, r7, #8
 8006054:	4610      	mov	r0, r2
 8006056:	4798      	blx	r3
 8006058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800605a:	e043      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fa49 	bl	80064f6 <USBD_CtlError>
            err++;
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	3301      	adds	r3, #1
 8006068:	72fb      	strb	r3, [r7, #11]
          break;
 800606a:	e03b      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800608e:	e029      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa2f 	bl	80064f6 <USBD_CtlError>
            err++;
 8006098:	7afb      	ldrb	r3, [r7, #11]
 800609a:	3301      	adds	r3, #1
 800609c:	72fb      	strb	r3, [r7, #11]
          break;
 800609e:	e021      	b.n	80060e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	7c12      	ldrb	r2, [r2, #16]
 80060b8:	f107 0108 	add.w	r1, r7, #8
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
 80060c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060c2:	e00f      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa15 	bl	80064f6 <USBD_CtlError>
            err++;
 80060cc:	7afb      	ldrb	r3, [r7, #11]
 80060ce:	3301      	adds	r3, #1
 80060d0:	72fb      	strb	r3, [r7, #11]
          break;
 80060d2:	e007      	b.n	80060e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa0d 	bl	80064f6 <USBD_CtlError>
          err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80060e2:	e038      	b.n	8006156 <USBD_GetDescriptor+0x286>
 80060e4:	e037      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7c1b      	ldrb	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	f107 0208 	add.w	r2, r7, #8
 80060fa:	4610      	mov	r0, r2
 80060fc:	4798      	blx	r3
 80060fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006100:	e029      	b.n	8006156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9f6 	bl	80064f6 <USBD_CtlError>
        err++;
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	3301      	adds	r3, #1
 800610e:	72fb      	strb	r3, [r7, #11]
      break;
 8006110:	e021      	b.n	8006156 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7c1b      	ldrb	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	f107 0208 	add.w	r2, r7, #8
 8006126:	4610      	mov	r0, r2
 8006128:	4798      	blx	r3
 800612a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	2207      	movs	r2, #7
 8006132:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006134:	e00f      	b.n	8006156 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f9dc 	bl	80064f6 <USBD_CtlError>
        err++;
 800613e:	7afb      	ldrb	r3, [r7, #11]
 8006140:	3301      	adds	r3, #1
 8006142:	72fb      	strb	r3, [r7, #11]
      break;
 8006144:	e007      	b.n	8006156 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f9d4 	bl	80064f6 <USBD_CtlError>
      err++;
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	3301      	adds	r3, #1
 8006152:	72fb      	strb	r3, [r7, #11]
      break;
 8006154:	bf00      	nop
  }

  if (err != 0U)
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11c      	bne.n	8006196 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d011      	beq.n	8006186 <USBD_GetDescriptor+0x2b6>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	88db      	ldrh	r3, [r3, #6]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	88da      	ldrh	r2, [r3, #6]
 800616e:	893b      	ldrh	r3, [r7, #8]
 8006170:	4293      	cmp	r3, r2
 8006172:	bf28      	it	cs
 8006174:	4613      	movcs	r3, r2
 8006176:	b29b      	uxth	r3, r3
 8006178:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	461a      	mov	r2, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa22 	bl	80065ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	88db      	ldrh	r3, [r3, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa79 	bl	8006686 <USBD_CtlSendStatus>
 8006194:	e000      	b.n	8006198 <USBD_GetDescriptor+0x2c8>
    return;
 8006196:	bf00      	nop
    }
  }
}
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop

080061a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	889b      	ldrh	r3, [r3, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d130      	bne.n	8006214 <USBD_SetAddress+0x74>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d12c      	bne.n	8006214 <USBD_SetAddress+0x74>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	885b      	ldrh	r3, [r3, #2]
 80061be:	2b7f      	cmp	r3, #127	; 0x7f
 80061c0:	d828      	bhi.n	8006214 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d104      	bne.n	80061e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f98b 	bl	80064f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e0:	e01d      	b.n	800621e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fda6 	bl	8006d40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa46 	bl	8006686 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006208:	e009      	b.n	800621e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	e004      	b.n	800621e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f96d 	bl	80064f6 <USBD_CtlError>
  }
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	885b      	ldrh	r3, [r3, #2]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	4b41      	ldr	r3, [pc, #260]	; (8006340 <USBD_SetConfig+0x118>)
 800623a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800623c:	4b40      	ldr	r3, [pc, #256]	; (8006340 <USBD_SetConfig+0x118>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d904      	bls.n	800624e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f955 	bl	80064f6 <USBD_CtlError>
 800624c:	e075      	b.n	800633a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	2b02      	cmp	r3, #2
 8006256:	d002      	beq.n	800625e <USBD_SetConfig+0x36>
 8006258:	2b03      	cmp	r3, #3
 800625a:	d023      	beq.n	80062a4 <USBD_SetConfig+0x7c>
 800625c:	e062      	b.n	8006324 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800625e:	4b38      	ldr	r3, [pc, #224]	; (8006340 <USBD_SetConfig+0x118>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01a      	beq.n	800629c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006266:	4b36      	ldr	r3, [pc, #216]	; (8006340 <USBD_SetConfig+0x118>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2203      	movs	r2, #3
 8006274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006278:	4b31      	ldr	r3, [pc, #196]	; (8006340 <USBD_SetConfig+0x118>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff f9e8 	bl	8005654 <USBD_SetClassConfig>
 8006284:	4603      	mov	r3, r0
 8006286:	2b02      	cmp	r3, #2
 8006288:	d104      	bne.n	8006294 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f932 	bl	80064f6 <USBD_CtlError>
            return;
 8006292:	e052      	b.n	800633a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9f6 	bl	8006686 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800629a:	e04e      	b.n	800633a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9f2 	bl	8006686 <USBD_CtlSendStatus>
        break;
 80062a2:	e04a      	b.n	800633a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80062a4:	4b26      	ldr	r3, [pc, #152]	; (8006340 <USBD_SetConfig+0x118>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <USBD_SetConfig+0x118>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <USBD_SetConfig+0x118>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff f9e4 	bl	8005692 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9db 	bl	8006686 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80062d0:	e033      	b.n	800633a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <USBD_SetConfig+0x118>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01d      	beq.n	800631c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff f9d2 	bl	8005692 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <USBD_SetConfig+0x118>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <USBD_SetConfig+0x118>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff f9a8 	bl	8005654 <USBD_SetClassConfig>
 8006304:	4603      	mov	r3, r0
 8006306:	2b02      	cmp	r3, #2
 8006308:	d104      	bne.n	8006314 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8f2 	bl	80064f6 <USBD_CtlError>
            return;
 8006312:	e012      	b.n	800633a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f9b6 	bl	8006686 <USBD_CtlSendStatus>
        break;
 800631a:	e00e      	b.n	800633a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9b2 	bl	8006686 <USBD_CtlSendStatus>
        break;
 8006322:	e00a      	b.n	800633a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8e5 	bl	80064f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <USBD_SetConfig+0x118>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff f9ad 	bl	8005692 <USBD_ClrClassConfig>
        break;
 8006338:	bf00      	nop
    }
  }
}
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000180 	.word	0x20000180

08006344 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d004      	beq.n	8006360 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f8cc 	bl	80064f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800635e:	e022      	b.n	80063a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006366:	2b02      	cmp	r3, #2
 8006368:	dc02      	bgt.n	8006370 <USBD_GetConfig+0x2c>
 800636a:	2b00      	cmp	r3, #0
 800636c:	dc03      	bgt.n	8006376 <USBD_GetConfig+0x32>
 800636e:	e015      	b.n	800639c <USBD_GetConfig+0x58>
 8006370:	2b03      	cmp	r3, #3
 8006372:	d00b      	beq.n	800638c <USBD_GetConfig+0x48>
 8006374:	e012      	b.n	800639c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3308      	adds	r3, #8
 8006380:	2201      	movs	r2, #1
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f920 	bl	80065ca <USBD_CtlSendData>
        break;
 800638a:	e00c      	b.n	80063a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2201      	movs	r2, #1
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f918 	bl	80065ca <USBD_CtlSendData>
        break;
 800639a:	e004      	b.n	80063a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8a9 	bl	80064f6 <USBD_CtlError>
        break;
 80063a4:	bf00      	nop
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	3b01      	subs	r3, #1
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d81e      	bhi.n	8006402 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	88db      	ldrh	r3, [r3, #6]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d004      	beq.n	80063d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f891 	bl	80064f6 <USBD_CtlError>
        break;
 80063d4:	e01a      	b.n	800640c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	330c      	adds	r3, #12
 80063f6:	2202      	movs	r2, #2
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f8e5 	bl	80065ca <USBD_CtlSendData>
      break;
 8006400:	e004      	b.n	800640c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f876 	bl	80064f6 <USBD_CtlError>
      break;
 800640a:	bf00      	nop
  }
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d106      	bne.n	8006434 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f929 	bl	8006686 <USBD_CtlSendStatus>
  }
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644c:	3b01      	subs	r3, #1
 800644e:	2b02      	cmp	r3, #2
 8006450:	d80b      	bhi.n	800646a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	885b      	ldrh	r3, [r3, #2]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d10c      	bne.n	8006474 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f90f 	bl	8006686 <USBD_CtlSendStatus>
      }
      break;
 8006468:	e004      	b.n	8006474 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f842 	bl	80064f6 <USBD_CtlError>
      break;
 8006472:	e000      	b.n	8006476 <USBD_ClrFeature+0x3a>
      break;
 8006474:	bf00      	nop
  }
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785a      	ldrb	r2, [r3, #1]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	3302      	adds	r3, #2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	3303      	adds	r3, #3
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	3304      	adds	r3, #4
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	3305      	adds	r3, #5
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	3306      	adds	r3, #6
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	3307      	adds	r3, #7
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	80da      	strh	r2, [r3, #6]

}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fbb2 	bl	8006c6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fbae 	bl	8006c6c <USBD_LL_StallEP>
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d032      	beq.n	8006594 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f834 	bl	800659c <USBD_GetLen>
 8006534:	4603      	mov	r3, r0
 8006536:	3301      	adds	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	75fa      	strb	r2, [r7, #23]
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	75fa      	strb	r2, [r7, #23]
 800655a:	461a      	mov	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4413      	add	r3, r2
 8006560:	2203      	movs	r2, #3
 8006562:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006564:	e012      	b.n	800658c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	60fa      	str	r2, [r7, #12]
 800656c:	7dfa      	ldrb	r2, [r7, #23]
 800656e:	1c51      	adds	r1, r2, #1
 8006570:	75f9      	strb	r1, [r7, #23]
 8006572:	4611      	mov	r1, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	440a      	add	r2, r1
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	75fa      	strb	r2, [r7, #23]
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4413      	add	r3, r2
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e8      	bne.n	8006566 <USBD_GetString+0x4e>
    }
  }
}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80065a8:	e005      	b.n	80065b6 <USBD_GetLen+0x1a>
  {
    len++;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	3301      	adds	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f5      	bne.n	80065aa <USBD_GetLen+0xe>
  }

  return len;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2202      	movs	r2, #2
 80065dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	2100      	movs	r1, #0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fbc3 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	4613      	mov	r3, r2
 800660e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fbb1 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	4613      	mov	r3, r2
 8006632:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2203      	movs	r2, #3
 8006638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800664c:	88fb      	ldrh	r3, [r7, #6]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fbb6 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	4613      	mov	r3, r2
 800666e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	2100      	movs	r1, #0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fba4 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006696:	2300      	movs	r3, #0
 8006698:	2200      	movs	r2, #0
 800669a:	2100      	movs	r1, #0
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fb6e 	bl	8006d7e <USBD_LL_Transmit>

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2205      	movs	r2, #5
 80066b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066bc:	2300      	movs	r3, #0
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fb7e 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066d8:	2200      	movs	r2, #0
 80066da:	4912      	ldr	r1, [pc, #72]	; (8006724 <MX_USB_DEVICE_Init+0x50>)
 80066dc:	4812      	ldr	r0, [pc, #72]	; (8006728 <MX_USB_DEVICE_Init+0x54>)
 80066de:	f7fe ff5f 	bl	80055a0 <USBD_Init>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066e8:	f7f9 fdb8 	bl	800025c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80066ec:	490f      	ldr	r1, [pc, #60]	; (800672c <MX_USB_DEVICE_Init+0x58>)
 80066ee:	480e      	ldr	r0, [pc, #56]	; (8006728 <MX_USB_DEVICE_Init+0x54>)
 80066f0:	f7fe ff81 	bl	80055f6 <USBD_RegisterClass>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066fa:	f7f9 fdaf 	bl	800025c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80066fe:	490c      	ldr	r1, [pc, #48]	; (8006730 <MX_USB_DEVICE_Init+0x5c>)
 8006700:	4809      	ldr	r0, [pc, #36]	; (8006728 <MX_USB_DEVICE_Init+0x54>)
 8006702:	f7fe ff37 	bl	8005574 <USBD_CUSTOM_HID_RegisterInterface>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800670c:	f7f9 fda6 	bl	800025c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006710:	4805      	ldr	r0, [pc, #20]	; (8006728 <MX_USB_DEVICE_Init+0x54>)
 8006712:	f7fe ff89 	bl	8005628 <USBD_Start>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800671c:	f7f9 fd9e 	bl	800025c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006720:	bf00      	nop
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000110 	.word	0x20000110
 8006728:	20000184 	.word	0x20000184
 800672c:	2000000c 	.word	0x2000000c
 8006730:	20000100 	.word	0x20000100

08006734 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800673a:	4618      	mov	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006746:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	460a      	mov	r2, r1
 800675a:	71fb      	strb	r3, [r7, #7]
 800675c:	4613      	mov	r3, r2
 800675e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8006760:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	6039      	str	r1, [r7, #0]
 8006776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2212      	movs	r2, #18
 800677c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800677e:	4b03      	ldr	r3, [pc, #12]	; (800678c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000012c 	.word	0x2000012c

08006790 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2204      	movs	r2, #4
 80067a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000140 	.word	0x20000140

080067b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4907      	ldr	r1, [pc, #28]	; (80067e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80067ca:	4808      	ldr	r0, [pc, #32]	; (80067ec <USBD_FS_ProductStrDescriptor+0x38>)
 80067cc:	f7ff fea4 	bl	8006518 <USBD_GetString>
 80067d0:	e004      	b.n	80067dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	4904      	ldr	r1, [pc, #16]	; (80067e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80067d6:	4805      	ldr	r0, [pc, #20]	; (80067ec <USBD_FS_ProductStrDescriptor+0x38>)
 80067d8:	f7ff fe9e 	bl	8006518 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000448 	.word	0x20000448
 80067ec:	08006f14 	.word	0x08006f14

080067f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	4904      	ldr	r1, [pc, #16]	; (8006810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006800:	4804      	ldr	r0, [pc, #16]	; (8006814 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006802:	f7ff fe89 	bl	8006518 <USBD_GetString>
  return USBD_StrDesc;
 8006806:	4b02      	ldr	r3, [pc, #8]	; (8006810 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000448 	.word	0x20000448
 8006814:	08006f24 	.word	0x08006f24

08006818 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	221a      	movs	r2, #26
 8006828:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800682a:	f000 f843 	bl	80068b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800682e:	4b02      	ldr	r3, [pc, #8]	; (8006838 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000144 	.word	0x20000144

0800683c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4907      	ldr	r1, [pc, #28]	; (8006870 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006852:	4808      	ldr	r0, [pc, #32]	; (8006874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006854:	f7ff fe60 	bl	8006518 <USBD_GetString>
 8006858:	e004      	b.n	8006864 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	4904      	ldr	r1, [pc, #16]	; (8006870 <USBD_FS_ConfigStrDescriptor+0x34>)
 800685e:	4805      	ldr	r0, [pc, #20]	; (8006874 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006860:	f7ff fe5a 	bl	8006518 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000448 	.word	0x20000448
 8006874:	08006f38 	.word	0x08006f38

08006878 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800688e:	4808      	ldr	r0, [pc, #32]	; (80068b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006890:	f7ff fe42 	bl	8006518 <USBD_GetString>
 8006894:	e004      	b.n	80068a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4904      	ldr	r1, [pc, #16]	; (80068ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800689a:	4805      	ldr	r0, [pc, #20]	; (80068b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800689c:	f7ff fe3c 	bl	8006518 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000448 	.word	0x20000448
 80068b0:	08006f4c 	.word	0x08006f4c

080068b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <Get_SerialNum+0x44>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <Get_SerialNum+0x48>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068c6:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <Get_SerialNum+0x4c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068da:	2208      	movs	r2, #8
 80068dc:	4909      	ldr	r1, [pc, #36]	; (8006904 <Get_SerialNum+0x50>)
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f814 	bl	800690c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068e4:	2204      	movs	r2, #4
 80068e6:	4908      	ldr	r1, [pc, #32]	; (8006908 <Get_SerialNum+0x54>)
 80068e8:	68b8      	ldr	r0, [r7, #8]
 80068ea:	f000 f80f 	bl	800690c <IntToUnicode>
  }
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	1ffff7e8 	.word	0x1ffff7e8
 80068fc:	1ffff7ec 	.word	0x1ffff7ec
 8006900:	1ffff7f0 	.word	0x1ffff7f0
 8006904:	20000146 	.word	0x20000146
 8006908:	20000156 	.word	0x20000156

0800690c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]
 8006922:	e027      	b.n	8006974 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	0f1b      	lsrs	r3, r3, #28
 8006928:	2b09      	cmp	r3, #9
 800692a:	d80b      	bhi.n	8006944 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	0f1b      	lsrs	r3, r3, #28
 8006930:	b2da      	uxtb	r2, r3
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	4619      	mov	r1, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	440b      	add	r3, r1
 800693c:	3230      	adds	r2, #48	; 0x30
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e00a      	b.n	800695a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	0f1b      	lsrs	r3, r3, #28
 8006948:	b2da      	uxtb	r2, r3
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4619      	mov	r1, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	440b      	add	r3, r1
 8006954:	3237      	adds	r2, #55	; 0x37
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	3301      	adds	r3, #1
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	3301      	adds	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
 8006974:	7dfa      	ldrb	r2, [r7, #23]
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d3d3      	bcc.n	8006924 <IntToUnicode+0x18>
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0d      	ldr	r2, [pc, #52]	; (80069cc <HAL_PCD_MspInit+0x44>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <HAL_PCD_MspInit+0x48>)
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <HAL_PCD_MspInit+0x48>)
 80069a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069a4:	61d3      	str	r3, [r2, #28]
 80069a6:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <HAL_PCD_MspInit+0x48>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	2014      	movs	r0, #20
 80069b8:	f7f9 fe1f 	bl	80005fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80069bc:	2014      	movs	r0, #20
 80069be:	f7f9 fe38 	bl	8000632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40005c00 	.word	0x40005c00
 80069d0:	40021000 	.word	0x40021000

080069d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7fe fe64 	bl	80056b8 <USBD_LL_SetupStage>
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	440b      	add	r3, r1
 8006a18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	4619      	mov	r1, r3
 8006a22:	f7fe fe96 	bl	8005752 <USBD_LL_DataOutStage>
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	333c      	adds	r3, #60	; 0x3c
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	4619      	mov	r1, r3
 8006a56:	f7fe feed 	bl	8005834 <USBD_LL_DataInStage>
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fffd 	bl	8005a70 <USBD_LL_SOF>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d001      	beq.n	8006a96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a92:	f7f9 fbe3 	bl	800025c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006a9c:	7bfa      	ldrb	r2, [r7, #15]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fe ffad 	bl	8005a00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe ff66 	bl	800597e <USBD_LL_Reset>
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe ffa7 	bl	8005a1e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_PCD_SuspendCallback+0x30>)
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	4a03      	ldr	r2, [pc, #12]	; (8006aec <HAL_PCD_SuspendCallback+0x30>)
 8006ade:	f043 0306 	orr.w	r3, r3, #6
 8006ae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe ffa1 	bl	8005a46 <USBD_LL_Resume>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006b14:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006b24:	4b1f      	ldr	r3, [pc, #124]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b26:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <USBD_LL_Init+0x9c>)
 8006b28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006b2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006b30:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b32:	2202      	movs	r2, #2
 8006b34:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006b48:	4816      	ldr	r0, [pc, #88]	; (8006ba4 <USBD_LL_Init+0x98>)
 8006b4a:	f7f9 fd8c 	bl	8000666 <HAL_PCD_Init>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006b54:	f7f9 fb82 	bl	800025c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b5e:	2318      	movs	r3, #24
 8006b60:	2200      	movs	r2, #0
 8006b62:	2100      	movs	r1, #0
 8006b64:	f7fb fa94 	bl	8002090 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b6e:	2358      	movs	r3, #88	; 0x58
 8006b70:	2200      	movs	r2, #0
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	f7fb fa8c 	bl	8002090 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b7e:	2398      	movs	r3, #152	; 0x98
 8006b80:	2200      	movs	r2, #0
 8006b82:	2181      	movs	r1, #129	; 0x81
 8006b84:	f7fb fa84 	bl	8002090 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006b8e:	23d8      	movs	r3, #216	; 0xd8
 8006b90:	2200      	movs	r2, #0
 8006b92:	2101      	movs	r1, #1
 8006b94:	f7fb fa7c 	bl	8002090 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000648 	.word	0x20000648
 8006ba8:	40005c00 	.word	0x40005c00

08006bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7f9 fe4e 	bl	8000864 <HAL_PCD_Start>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f93c 	bl	8006e4c <USBD_Get_USB_Status>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	70fb      	strb	r3, [r7, #3]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70bb      	strb	r3, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c0a:	78bb      	ldrb	r3, [r7, #2]
 8006c0c:	883a      	ldrh	r2, [r7, #0]
 8006c0e:	78f9      	ldrb	r1, [r7, #3]
 8006c10:	f7f9 ffa3 	bl	8000b5a <HAL_PCD_EP_Open>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f916 	bl	8006e4c <USBD_Get_USB_Status>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 ffe1 	bl	8000c14 <HAL_PCD_EP_Close>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f8f7 	bl	8006e4c <USBD_Get_USB_Status>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fa f872 	bl	8000d74 <HAL_PCD_EP_SetStall>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f8d8 	bl	8006e4c <USBD_Get_USB_Status>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fa f8b3 	bl	8000e34 <HAL_PCD_EP_ClrStall>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f8b9 	bl	8006e4c <USBD_Get_USB_Status>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da0c      	bge.n	8006d1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	440b      	add	r3, r1
 8006d18:	3302      	adds	r3, #2
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	e00b      	b.n	8006d36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d24:	68f9      	ldr	r1, [r7, #12]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	440b      	add	r3, r1
 8006d30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006d34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7f9 fed6 	bl	8000b10 <HAL_PCD_SetAddress>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f86e 	bl	8006e4c <USBD_Get_USB_Status>
 8006d70:	4603      	mov	r3, r0
 8006d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	72fb      	strb	r3, [r7, #11]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006da0:	893b      	ldrh	r3, [r7, #8]
 8006da2:	7af9      	ldrb	r1, [r7, #11]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	f7f9 ffae 	bl	8000d06 <HAL_PCD_EP_Transmit>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f84b 	bl	8006e4c <USBD_Get_USB_Status>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	72fb      	strb	r3, [r7, #11]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006de6:	893b      	ldrh	r3, [r7, #8]
 8006de8:	7af9      	ldrb	r1, [r7, #11]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	f7f9 ff5a 	bl	8000ca4 <HAL_PCD_EP_Receive>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f828 	bl	8006e4c <USBD_Get_USB_Status>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e00:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006e14:	4b02      	ldr	r3, [pc, #8]	; (8006e20 <USBD_static_malloc+0x14>)
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr
 8006e20:	20000938 	.word	0x20000938

08006e24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr

08006e36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d817      	bhi.n	8006e90 <USBD_Get_USB_Status+0x44>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_Get_USB_Status+0x1c>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e7f 	.word	0x08006e7f
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006e8b 	.word	0x08006e8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7c:	e00b      	b.n	8006e96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	73fb      	strb	r3, [r7, #15]
    break;
 8006e82:	e008      	b.n	8006e96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
    break;
 8006e88:	e005      	b.n	8006e96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8e:	e002      	b.n	8006e96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e90:	2302      	movs	r3, #2
 8006e92:	73fb      	strb	r3, [r7, #15]
    break;
 8006e94:	bf00      	nop
  }
  return usb_status;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <memset>:
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4402      	add	r2, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d100      	bne.n	8006eae <memset+0xa>
 8006eac:	4770      	bx	lr
 8006eae:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb2:	e7f9      	b.n	8006ea8 <memset+0x4>

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	4d0c      	ldr	r5, [pc, #48]	; (8006eec <__libc_init_array+0x38>)
 8006eba:	4c0d      	ldr	r4, [pc, #52]	; (8006ef0 <__libc_init_array+0x3c>)
 8006ebc:	1b64      	subs	r4, r4, r5
 8006ebe:	10a4      	asrs	r4, r4, #2
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	f000 f81a 	bl	8006efc <_init>
 8006ec8:	2600      	movs	r6, #0
 8006eca:	4d0a      	ldr	r5, [pc, #40]	; (8006ef4 <__libc_init_array+0x40>)
 8006ecc:	4c0a      	ldr	r4, [pc, #40]	; (8006ef8 <__libc_init_array+0x44>)
 8006ece:	1b64      	subs	r4, r4, r5
 8006ed0:	10a4      	asrs	r4, r4, #2
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	08006f88 	.word	0x08006f88
 8006ef0:	08006f88 	.word	0x08006f88
 8006ef4:	08006f88 	.word	0x08006f88
 8006ef8:	08006f8c 	.word	0x08006f8c

08006efc <_init>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr

08006f08 <_fini>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr
