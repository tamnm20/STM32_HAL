/*
 * stm32_gpio.c
 *
 *  Created on: Jan 22, 2024
 *      Author: TAMRD
 */


#include "stm32_gpio.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE){
		if(pGPIOx == GPIOA ){
			GPIOA_PCLK_EN();
		}
		else if(pGPIOx == GPIOB){
			GPIOB_PCLK_EN();
		}
		else if(pGPIOx == GPIOC){
			GPIOC_PCLK_EN();
		}
		else if(pGPIOx == GPIOD){
			GPIOD_PCLK_EN();
		}
		else if(pGPIOx == GPIOE){
			GPIOE_PCLK_EN();
		}
	}
	else{
		//
	}
}


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
	//enable the peripheral clock

	uint32_t temp =0; //temp. register

		if(pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber < 8){ //pin 0 - 7 CRL
			//1. Config mode and speed
			pGPIOHandle -> pGPIOx -> CRL &= ~(0xFF << (4* pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber)); //clear bit
			temp = (pGPIOHandle->GPIO_pinConfig.GPIO_PinMode << (4* pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber));
			//2. Config output type or input type
			temp |= (pGPIOHandle->GPIO_pinConfig.GPIO_PinType << ((4* pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber)+2));
			pGPIOHandle -> pGPIOx -> CRL |= temp;
		}
		else{ //pin 8 - 15 CRH
			//1. Config mode and speed
			pGPIOHandle -> pGPIOx -> CRH &= ~(0xFF << (4* (pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber - 8))); //clear bit
			temp = (pGPIOHandle->GPIO_pinConfig.GPIO_PinMode << (4* pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber- 8));
			//2. Config output type or input type
			temp |= (pGPIOHandle->GPIO_pinConfig.GPIO_PinType << ((4* pGPIOHandle-> GPIO_pinConfig.GPIO_PinNumber - 8)+2));
			pGPIOHandle -> pGPIOx -> CRH |= temp;
		}

	//4. Config PUPD

        if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_NOPULL)
        {
        }
        else if (pGPIOHandle-> GPIO_pinConfig.GPIO_Pull == GPIO_PULLUP)
        {
//          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
//
//          /* Set the corresponding ODR bit */
//          GPIOx->BSRR = ioposition;
        }
        else /* GPIO_PULLDOWN */
        {
//          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
//
//          /* Reset the corresponding ODR bit */
//          GPIOx->BRR = ioposition;
        }

	//3. Config Alt Functionality

}
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx);
uint8_t GPIO_ReadPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber);
uint16_t GPIO_ReadPort(GPIO_RegDef_t *pGPIOx);
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value);
void GPIO_WritePort(GPIO_RegDef_t *pGPIOx, uint16_t Value);
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber);

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority);
void GPIO_IRQHandling(uint8_t PinNumber);
