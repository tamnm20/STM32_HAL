/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "UartRingbuffer.h"
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int8_t data;
uint8_t direction = 0;

uint8_t t = 100;
extern ring_buffer *_rx_buffer;
unsigned char test[16] = {0x2E,0x44,0x10,0x81,0x23,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,'\r','\n'};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
CAN_TxHeaderTypeDef   TxHeader;
CAN_RxHeaderTypeDef   RxHeader;
CAN_FilterTypeDef  		sFilterConfig;

unsigned char ADD_F[8] 			= {0x04, 0x2E, 0xB0, 0x06, 0x01, 0x00, 0x00, 0x00};
unsigned char LED_F[8] 			= {0x04, 0x2E, 0xB0, 0x06, 0x01, 0x00, 0x00, 0x00};
unsigned char EX[8]    			= {0x02, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char IOCBI[8] 			= {0x04, 0x2F, 0xF0, 0x53, 0x03, 0x00, 0x00, 0x00};	//IOCBI enroll coverage
unsigned char FPM_Enroll[8] 	= {0x03, 0x22, 0xB0, 0x0C, 0x00, 0x00, 0x00, 0x00}; // fpm enroll
unsigned char Flow[8] 			= {0x30, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00};	// flow control
unsigned char LED_Red[8]        = {0xFF, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00};
unsigned char LED_Gre[8]        = {0x00, 0xFE, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00};
unsigned char LED_Blu[8]        = {0x00, 0x00, 0xFC, 0x13, 0x00, 0x00, 0x00, 0x00};
unsigned char LED_Whi[8]        = {0xFF, 0xFE, 0xFD, 0x13, 0x00, 0x00, 0x00, 0x00};
unsigned char LED_Off[8]        = {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00};
uint8_t TxData[8];
uint8_t RxData[8];
uint8_t state_machine = 0x00;
uint8_t hex_buffer[50];
uint8_t RxApp[16];

uint32_t TxMailbox;

void CanTx_Init(void){
	//================can tx===================//
	TxHeader.StdId = 0x7a2;//dia chi cua can
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.DLC = 8;	//so byte truyen di
	TxHeader.TransmitGlobalTime = DISABLE;
	HAL_CAN_Start(&hcan);
}
void CanRx_Init_Mask()
{
	//=================can filter==============//
	/* -------------------------------id 0X103 ----------------------------------*/
	sFilterConfig.FilterBank = 0;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterIdHigh = 0x00;
	sFilterConfig.FilterIdLow = 0;
	sFilterConfig.FilterMaskIdHigh = 0x00;
	sFilterConfig.FilterMaskIdLow = 0;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
	//==================cho phep can hoat dong=================//
	HAL_CAN_Start(&hcan);
	//==================kich hoat ngat can=====================//
	HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
}



 		void CanRx_Init_List()
		{
			//=================can filter==============//
			/* -------------------------------id 0X103 ----------------------------------*/
			sFilterConfig.FilterBank = 0;
			sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
			sFilterConfig.FilterIdHigh = 0x19F<<5;  // chỉ nhận dữ liệu từ node 0x104
			sFilterConfig.FilterIdLow = 0;
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
			sFilterConfig.FilterActivation = ENABLE;
			HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
			//==================cho phep can hoat dong=================//
			HAL_CAN_Start(&hcan);
			//==================kich hoat ngat can=====================//
			HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
		}

 		void CanRx_Init_List1()
		{
			//=================can filter==============//
			/* -------------------------------id 0X103 ----------------------------------*/
			sFilterConfig.FilterBank = 1;
			sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
			sFilterConfig.FilterIdHigh = 0x7AA<<5;  // chỉ nhận dữ liệu từ node 0x446
			sFilterConfig.FilterIdLow = 0;
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
			sFilterConfig.FilterActivation = ENABLE;
			HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
			//==================cho phep can hoat dong=================//
			HAL_CAN_Start(&hcan);
			//==================kich hoat ngat can=====================//
			HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
		}

///////
void Send_Buffer(unsigned char *data){
   unsigned char TxData[8];
   TxData[0] = data[0];
   TxData[1] = data[1];
   TxData[2] = data[2];
   TxData[3] = data[3];
   TxData[4] = data[4];
   TxData[5] = data[5];
   TxData[6] = data[6];
   TxData[7] = data[7];
   HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
}

int check = 0;
void Send_App(){
	if(!t){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
		Uart_sendstring(test);
		TxHeader.StdId = 0x2df;
		HAL_CAN_Start(&hcan);
		Send_Buffer(LED_Red);
		t=100;
	}
}
void Uart_sendHex(unsigned char *data, uint32_t id){
	if(direction == 0){
		sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"TX ");
	}
	else{
		sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"RX ");
		direction = 0;
	}
	sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"ID ");
	sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"%lx",id);
	sprintf((char*)hex_buffer+strlen((char*)hex_buffer),": ");
	for(int i=0;i<8;i++){
		if(data[i]<10  && data[i] >0){
			sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"0");
			sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"%x",data[i]);
		}
		else if(data[i]==0){
			sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"00");
		}
		else{
			sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"%x",data[i]);
		}
		sprintf((char*)hex_buffer+strlen((char*)hex_buffer)," ");
	}
	sprintf((char*)hex_buffer+strlen((char*)hex_buffer),"\n");
	HAL_UART_Transmit(&huart1,hex_buffer,strlen((char*)hex_buffer) , 100);
	memset(hex_buffer, 0, sizeof(hex_buffer));
	huart1.pRxBuffPtr = &hex_buffer[0];
}

void Send_CAN(int data){
	    //unsigned int data = Uart_read();
		switch (data){
			case '1':

				TxHeader.StdId = 0x7A2;
				HAL_CAN_Start(&hcan);
				if(state_machine == 0x00)
				{
					Uart_sendstring("Test dang ky\n");
					Send_Buffer(ADD_F);
				    //Uart_sendBuffer(ADD_F);
					Uart_sendHex(ADD_F, TxHeader.StdId);
					HAL_Delay(200);
					state_machine ++;
				}
				else if(state_machine == 0x02)
				{
					state_machine = 0x03;
					HAL_Delay(1500);
					Send_Buffer(EX);
					Uart_sendBuffer(EX);
					HAL_Delay(200);
					Send_Buffer(IOCBI);
				    HAL_Delay(200);
				    Send_Buffer(FPM_Enroll);
				   	HAL_Delay(200);

				}
				else if(state_machine == 0x04){
					Send_Buffer(Flow);
					Uart_sendBuffer(Flow);
					state_machine = 0x05;
				}
				break;
			default:
				break;
		}

}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  CanTx_Init();
  //CanRx_Init_Mask();
  CanRx_Init_List();
  CanRx_Init_List1();
  Ringbuf_init();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
    /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Send_CAN(data);
	int8_t data = Uart_read();
//	if(!t){
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
//		Uart_sendstring(test);
//		t=100;
//	}
	Send_App();
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{

  /* USER CODE BEGIN CAN_Init 0 */

  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 4;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : dang_ky_A0_Pin scan_A1_Pin delete_A2_Pin led_red_A3_Pin
                           led_green_A4_Pin led_blue_A5_Pin led_white_A6_Pin led_off_A7_Pin */
  GPIO_InitStruct.Pin = dang_ky_A0_Pin|scan_A1_Pin|delete_A2_Pin|led_red_A3_Pin
                          |led_green_A4_Pin|led_blue_A5_Pin|led_white_A6_Pin|led_off_A7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
