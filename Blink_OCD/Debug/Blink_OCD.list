
Blink_OCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000230c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a8  080024a8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080024a8  080024a8  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024a8  080024a8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080024b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000d4  08002584  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08002584  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024d1  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d6e  00000000  00000000  00022611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00023380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000029e  00000000  00000000  00023730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165c0  00000000  00000000  000239ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000466f  00000000  00000000  00039f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f423  00000000  00000000  0003e5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001880  00000000  00000000  000bda20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000bf2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002400 	.word	0x08002400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08002400 	.word	0x08002400

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <leds_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void leds_init()
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
	//set PB12 in output push-pull
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000162:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <leds_init+0x74>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a1a      	ldr	r2, [pc, #104]	; (80001d0 <leds_init+0x74>)
 8000168:	f043 0308 	orr.w	r3, r3, #8
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <leds_init+0x74>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0308 	and.w	r3, r3, #8
 8000176:	60bb      	str	r3, [r7, #8]
 8000178:	68bb      	ldr	r3, [r7, #8]
	uint32_t * GPIOB_CRH = (uint32_t *) (GPIOB_BASE_ARR + 0x04);
 800017a:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <leds_init+0x78>)
 800017c:	60fb      	str	r3, [r7, #12]
	*GPIOB_CRH |= (0b11 << 16);// set PB12 in OUTPUT mode speed 50MHz
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	601a      	str	r2, [r3, #0]

	*GPIOB_CRH &= ~(0b11 << 18); //set PB12 output push-pull
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	601a      	str	r2, [r3, #0]

	//set PC13 in output push-pull
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <leds_init+0x74>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <leds_init+0x74>)
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6193      	str	r3, [r2, #24]
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <leds_init+0x74>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f003 0310 	and.w	r3, r3, #16
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]

	GPIOC->CRH &= ~(0xF<<20);  // Clear Bits 23:22:21:20
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <leds_init+0x7c>)
 80001b0:	685b      	ldr	r3, [r3, #4]
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <leds_init+0x7c>)
 80001b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001b8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1<<20);  // PC13 Output mode 10 MHz, push pull
 80001ba:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <leds_init+0x7c>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <leds_init+0x7c>)
 80001c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c4:	6053      	str	r3, [r2, #4]
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010c04 	.word	0x40010c04
 80001d8:	40011000 	.word	0x40011000

080001dc <led_toggle>:
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}

void led_toggle(){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
	uint32_t * GPIOB_ODR = (uint32_t *) (GPIOB_BASE_ARR + 0x0C);
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <led_toggle+0x3c>)
 80001e4:	607b      	str	r3, [r7, #4]

	if(((* GPIOB_ODR >> 12)&1)==0)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d106      	bne.n	8000200 <led_toggle+0x24>
	{

		*GPIOB_ODR |= (1<<12);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}
 80001fe:	e005      	b.n	800020c <led_toggle+0x30>
		*GPIOB_ODR &= ~(1<<12);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40010c0c 	.word	0x40010c0c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000220:	f001 f89c 	bl	800135c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f932 	bl	800048c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81c 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f856 	bl	80002dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  leds_init();
 8000230:	f7ff ff94 	bl	800015c <leds_init>
  printf("Hello, World!\n");
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <main+0x3c>)
 8000236:	f001 fa3d 	bl	80016b4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Enter string:\n");
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <main+0x40>)
 800023c:	f001 fa3a 	bl	80016b4 <puts>
	  //fgets(buff, sizeof(buff), stdin);
	  printf(buff);
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <main+0x44>)
 8000242:	f001 f9c9 	bl	80015d8 <iprintf>
	  printf("\n");
 8000246:	200a      	movs	r0, #10
 8000248:	f001 f9d8 	bl	80015fc <putchar>
	  led_toggle();
 800024c:	f7ff ffc6 	bl	80001dc <led_toggle>
	  HAL_Delay(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f000 f97d 	bl	8000550 <HAL_Delay>
	  printf("Enter string:\n");
 8000256:	e7f0      	b.n	800023a <main+0x1e>
 8000258:	08002418 	.word	0x08002418
 800025c:	08002428 	.word	0x08002428
 8000260:	20000000 	.word	0x20000000

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fafe 	bl	8001874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fa60 	bl	8000760 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002a6:	f000 f82f 	bl	8000308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fcce 	bl	8000c64 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 f81b 	bl	8000308 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_GPIO_Init+0x28>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <MX_GPIO_Init+0x28>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <MX_GPIO_Init+0x28>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0304 	and.w	r3, r3, #4
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000310:	e7fe      	b.n	8000310 <Error_Handler+0x8>
	...

08000314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <HAL_MspInit+0x5c>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <HAL_MspInit+0x5c>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <HAL_MspInit+0x5c>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_MspInit+0x5c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <HAL_MspInit+0x5c>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033c:	61d3      	str	r3, [r2, #28]
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <HAL_MspInit+0x5c>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <HAL_MspInit+0x60>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <HAL_MspInit+0x60>)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000
 8000374:	40010000 	.word	0x40010000

08000378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800037c:	e7fe      	b.n	800037c <NMI_Handler+0x4>

0800037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <HardFault_Handler+0x4>

08000384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <MemManage_Handler+0x4>

0800038a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <BusFault_Handler+0x4>

08000390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <UsageFault_Handler+0x4>

08000396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr

080003ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003be:	f000 f8ab 	bl	8000518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d0:	4a14      	ldr	r2, [pc, #80]	; (8000424 <_sbrk+0x5c>)
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <_sbrk+0x60>)
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d102      	bne.n	80003ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <_sbrk+0x64>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <_sbrk+0x68>)
 80003e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <_sbrk+0x64>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	693a      	ldr	r2, [r7, #16]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d207      	bcs.n	8000408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f8:	f001 fa8a 	bl	8001910 <__errno>
 80003fc:	4603      	mov	r3, r0
 80003fe:	220c      	movs	r2, #12
 8000400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	e009      	b.n	800041c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <_sbrk+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <_sbrk+0x64>)
 8000418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20005000 	.word	0x20005000
 8000428:	00000400 	.word	0x00000400
 800042c:	200000f0 	.word	0x200000f0
 8000430:	200002f0 	.word	0x200002f0

08000434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000440:	f7ff fff8 	bl	8000434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000446:	490c      	ldr	r1, [pc, #48]	; (8000478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000448:	4a0c      	ldr	r2, [pc, #48]	; (800047c <LoopFillZerobss+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800045c:	4c09      	ldr	r4, [pc, #36]	; (8000484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046a:	f001 fa57 	bl	800191c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046e:	f7ff fed5 	bl	800021c <main>
  bx lr
 8000472:	4770      	bx	lr
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800047c:	080024b0 	.word	0x080024b0
  ldr r2, =_sbss
 8000480:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000484:	200002f0 	.word	0x200002f0

08000488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC1_2_IRQHandler>
	...

0800048c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_Init+0x28>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HAL_Init+0x28>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800049c:	2003      	movs	r0, #3
 800049e:	f000 f92b 	bl	80006f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a2:	200f      	movs	r0, #15
 80004a4:	f000 f808 	bl	80004b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004a8:	f7ff ff34 	bl	8000314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40022000 	.word	0x40022000

080004b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_InitTick+0x54>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_InitTick+0x58>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80004d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f935 	bl	8000746 <HAL_SYSTICK_Config>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
 80004e4:	e00e      	b.n	8000504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d80a      	bhi.n	8000502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f90b 	bl	800070e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <HAL_InitTick+0x5c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	e000      	b.n	8000504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000502:	2301      	movs	r3, #1
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000064 	.word	0x20000064
 8000510:	2000006c 	.word	0x2000006c
 8000514:	20000068 	.word	0x20000068

08000518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_IncTick+0x1c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_IncTick+0x20>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4413      	add	r3, r2
 8000528:	4a03      	ldr	r2, [pc, #12]	; (8000538 <HAL_IncTick+0x20>)
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	2000006c 	.word	0x2000006c
 8000538:	200000f4 	.word	0x200000f4

0800053c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <HAL_GetTick+0x10>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	200000f4 	.word	0x200000f4

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff fff0 	bl	800053c <HAL_GetTick>
 800055c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d005      	beq.n	8000576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_Delay+0x44>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000576:	bf00      	nop
 8000578:	f7ff ffe0 	bl	800053c <HAL_GetTick>
 800057c:	4602      	mov	r2, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f7      	bhi.n	8000578 <HAL_Delay+0x28>
  {
  }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000006c 	.word	0x2000006c

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	; 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c4:	d301      	bcc.n	80006ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00f      	b.n	80006ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <SysTick_Config+0x40>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d2:	210f      	movs	r1, #15
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f7ff ff90 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SysTick_Config+0x40>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SysTick_Config+0x40>)
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff49 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000720:	f7ff ff5e 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 8000724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	6978      	ldr	r0, [r7, #20]
 800072c:	f7ff ff90 	bl	8000650 <NVIC_EncodePriority>
 8000730:	4602      	mov	r2, r0
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff5f 	bl	80005fc <__NVIC_SetPriority>
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffb0 	bl	80006b4 <SysTick_Config>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e272      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	f000 8087 	beq.w	800088e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000780:	4b92      	ldr	r3, [pc, #584]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	2b04      	cmp	r3, #4
 800078a:	d00c      	beq.n	80007a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800078c:	4b8f      	ldr	r3, [pc, #572]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	2b08      	cmp	r3, #8
 8000796:	d112      	bne.n	80007be <HAL_RCC_OscConfig+0x5e>
 8000798:	4b8c      	ldr	r3, [pc, #560]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a4:	d10b      	bne.n	80007be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007a6:	4b89      	ldr	r3, [pc, #548]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d06c      	beq.n	800088c <HAL_RCC_OscConfig+0x12c>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d168      	bne.n	800088c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e24c      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c6:	d106      	bne.n	80007d6 <HAL_RCC_OscConfig+0x76>
 80007c8:	4b80      	ldr	r3, [pc, #512]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a7f      	ldr	r2, [pc, #508]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	e02e      	b.n	8000834 <HAL_RCC_OscConfig+0xd4>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10c      	bne.n	80007f8 <HAL_RCC_OscConfig+0x98>
 80007de:	4b7b      	ldr	r3, [pc, #492]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a7a      	ldr	r2, [pc, #488]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	4b78      	ldr	r3, [pc, #480]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a77      	ldr	r2, [pc, #476]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80007f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e01d      	b.n	8000834 <HAL_RCC_OscConfig+0xd4>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0xbc>
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a71      	ldr	r2, [pc, #452]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a6e      	ldr	r2, [pc, #440]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e00b      	b.n	8000834 <HAL_RCC_OscConfig+0xd4>
 800081c:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a6a      	ldr	r2, [pc, #424]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b68      	ldr	r3, [pc, #416]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a67      	ldr	r2, [pc, #412]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800082e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d013      	beq.n	8000864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800083c:	f7ff fe7e 	bl	800053c <HAL_GetTick>
 8000840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000842:	e008      	b.n	8000856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000844:	f7ff fe7a 	bl	800053c <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b64      	cmp	r3, #100	; 0x64
 8000850:	d901      	bls.n	8000856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000852:	2303      	movs	r3, #3
 8000854:	e200      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f0      	beq.n	8000844 <HAL_RCC_OscConfig+0xe4>
 8000862:	e014      	b.n	800088e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000864:	f7ff fe6a 	bl	800053c <HAL_GetTick>
 8000868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fe66 	bl	800053c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e1ec      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f0      	bne.n	800086c <HAL_RCC_OscConfig+0x10c>
 800088a:	e000      	b.n	800088e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800088c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d063      	beq.n	8000962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800089a:	4b4c      	ldr	r3, [pc, #304]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00b      	beq.n	80008be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008a6:	4b49      	ldr	r3, [pc, #292]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f003 030c 	and.w	r3, r3, #12
 80008ae:	2b08      	cmp	r3, #8
 80008b0:	d11c      	bne.n	80008ec <HAL_RCC_OscConfig+0x18c>
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d116      	bne.n	80008ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <HAL_RCC_OscConfig+0x176>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d001      	beq.n	80008d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e1c0      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4939      	ldr	r1, [pc, #228]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 80008e6:	4313      	orrs	r3, r2
 80008e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ea:	e03a      	b.n	8000962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d020      	beq.n	8000936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f4:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <HAL_RCC_OscConfig+0x270>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe1f 	bl	800053c <HAL_GetTick>
 80008fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	e008      	b.n	8000914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000902:	f7ff fe1b 	bl	800053c <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d901      	bls.n	8000914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000910:	2303      	movs	r3, #3
 8000912:	e1a1      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f0      	beq.n	8000902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4927      	ldr	r1, [pc, #156]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
 8000934:	e015      	b.n	8000962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_RCC_OscConfig+0x270>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093c:	f7ff fdfe 	bl	800053c <HAL_GetTick>
 8000940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000942:	e008      	b.n	8000956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000944:	f7ff fdfa 	bl	800053c <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d901      	bls.n	8000956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e180      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f0      	bne.n	8000944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d03a      	beq.n	80009e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d019      	beq.n	80009aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_RCC_OscConfig+0x274>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097c:	f7ff fdde 	bl	800053c <HAL_GetTick>
 8000980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	e008      	b.n	8000996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000984:	f7ff fdda 	bl	800053c <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d901      	bls.n	8000996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e160      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_RCC_OscConfig+0x26c>)
 8000998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f0      	beq.n	8000984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f000 fa9c 	bl	8000ee0 <RCC_Delay>
 80009a8:	e01c      	b.n	80009e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_RCC_OscConfig+0x274>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009b0:	f7ff fdc4 	bl	800053c <HAL_GetTick>
 80009b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b6:	e00f      	b.n	80009d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b8:	f7ff fdc0 	bl	800053c <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d908      	bls.n	80009d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009c6:	2303      	movs	r3, #3
 80009c8:	e146      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	42420000 	.word	0x42420000
 80009d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d8:	4b92      	ldr	r3, [pc, #584]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1e9      	bne.n	80009b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 80a6 	beq.w	8000b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f6:	4b8b      	ldr	r3, [pc, #556]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10d      	bne.n	8000a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b88      	ldr	r3, [pc, #544]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a87      	ldr	r2, [pc, #540]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b85      	ldr	r3, [pc, #532]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a1e:	4b82      	ldr	r3, [pc, #520]	; (8000c28 <HAL_RCC_OscConfig+0x4c8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d118      	bne.n	8000a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2a:	4b7f      	ldr	r3, [pc, #508]	; (8000c28 <HAL_RCC_OscConfig+0x4c8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a7e      	ldr	r2, [pc, #504]	; (8000c28 <HAL_RCC_OscConfig+0x4c8>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a36:	f7ff fd81 	bl	800053c <HAL_GetTick>
 8000a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3c:	e008      	b.n	8000a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3e:	f7ff fd7d 	bl	800053c <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	2b64      	cmp	r3, #100	; 0x64
 8000a4a:	d901      	bls.n	8000a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e103      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a50:	4b75      	ldr	r3, [pc, #468]	; (8000c28 <HAL_RCC_OscConfig+0x4c8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f0      	beq.n	8000a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d106      	bne.n	8000a72 <HAL_RCC_OscConfig+0x312>
 8000a64:	4b6f      	ldr	r3, [pc, #444]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4a6e      	ldr	r2, [pc, #440]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6213      	str	r3, [r2, #32]
 8000a70:	e02d      	b.n	8000ace <HAL_RCC_OscConfig+0x36e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10c      	bne.n	8000a94 <HAL_RCC_OscConfig+0x334>
 8000a7a:	4b6a      	ldr	r3, [pc, #424]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	4a69      	ldr	r2, [pc, #420]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a80:	f023 0301 	bic.w	r3, r3, #1
 8000a84:	6213      	str	r3, [r2, #32]
 8000a86:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a66      	ldr	r2, [pc, #408]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a8c:	f023 0304 	bic.w	r3, r3, #4
 8000a90:	6213      	str	r3, [r2, #32]
 8000a92:	e01c      	b.n	8000ace <HAL_RCC_OscConfig+0x36e>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d10c      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x356>
 8000a9c:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	4a60      	ldr	r2, [pc, #384]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6213      	str	r3, [r2, #32]
 8000aa8:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4a5d      	ldr	r2, [pc, #372]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6213      	str	r3, [r2, #32]
 8000ab4:	e00b      	b.n	8000ace <HAL_RCC_OscConfig+0x36e>
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4a5a      	ldr	r2, [pc, #360]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000abc:	f023 0301 	bic.w	r3, r3, #1
 8000ac0:	6213      	str	r3, [r2, #32]
 8000ac2:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4a57      	ldr	r2, [pc, #348]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	f023 0304 	bic.w	r3, r3, #4
 8000acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d015      	beq.n	8000b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad6:	f7ff fd31 	bl	800053c <HAL_GetTick>
 8000ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000adc:	e00a      	b.n	8000af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd2d 	bl	800053c <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d901      	bls.n	8000af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000af0:	2303      	movs	r3, #3
 8000af2:	e0b1      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af4:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0ee      	beq.n	8000ade <HAL_RCC_OscConfig+0x37e>
 8000b00:	e014      	b.n	8000b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b02:	f7ff fd1b 	bl	800053c <HAL_GetTick>
 8000b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b08:	e00a      	b.n	8000b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fd17 	bl	800053c <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d901      	bls.n	8000b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e09b      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	4b40      	ldr	r3, [pc, #256]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1ee      	bne.n	8000b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d105      	bne.n	8000b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b32:	4b3c      	ldr	r3, [pc, #240]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a3b      	ldr	r2, [pc, #236]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8087 	beq.w	8000c56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b48:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	d061      	beq.n	8000c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d146      	bne.n	8000bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_RCC_OscConfig+0x4cc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fceb 	bl	800053c <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fce7 	bl	800053c <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e06d      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f0      	bne.n	8000b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b90:	d108      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	4921      	ldr	r1, [pc, #132]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a19      	ldr	r1, [r3, #32]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	491b      	ldr	r1, [pc, #108]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_RCC_OscConfig+0x4cc>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fcbb 	bl	800053c <HAL_GetTick>
 8000bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc8:	e008      	b.n	8000bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fcb7 	bl	800053c <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e03d      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f0      	beq.n	8000bca <HAL_RCC_OscConfig+0x46a>
 8000be8:	e035      	b.n	8000c56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_RCC_OscConfig+0x4cc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fca4 	bl	800053c <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf8:	f7ff fca0 	bl	800053c <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e026      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_RCC_OscConfig+0x4c4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x498>
 8000c16:	e01e      	b.n	8000c56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d107      	bne.n	8000c30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e019      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_RCC_OscConfig+0x500>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d001      	beq.n	8000c56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0d0      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c78:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d910      	bls.n	8000ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 0207 	bic.w	r2, r3, #7
 8000c8e:	4965      	ldr	r1, [pc, #404]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c96:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d001      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e0b8      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d020      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc0:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a58      	ldr	r2, [pc, #352]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd8:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a52      	ldr	r2, [pc, #328]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	494d      	ldr	r1, [pc, #308]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d040      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d115      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e07f      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d107      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e073      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e06b      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4936      	ldr	r1, [pc, #216]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d54:	f7ff fbf2 	bl	800053c <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5a:	e00a      	b.n	8000d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fbee 	bl	800053c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e053      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 020c 	and.w	r2, r3, #12
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d1eb      	bne.n	8000d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d210      	bcs.n	8000db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 0207 	bic.w	r2, r3, #7
 8000d9a:	4922      	ldr	r1, [pc, #136]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d001      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e032      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d008      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4916      	ldr	r1, [pc, #88]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	490e      	ldr	r1, [pc, #56]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000df2:	f000 f821 	bl	8000e38 <HAL_RCC_GetSysClockFreq>
 8000df6:	4602      	mov	r2, r0
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <HAL_RCC_ClockConfig+0x1c8>)
 8000e04:	5ccb      	ldrb	r3, [r1, r3]
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_RCC_ClockConfig+0x1cc>)
 8000e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_RCC_ClockConfig+0x1d0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb50 	bl	80004b8 <HAL_InitTick>

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	08002438 	.word	0x08002438
 8000e30:	20000064 	.word	0x20000064
 8000e34:	20000068 	.word	0x20000068

08000e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d002      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x30>
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d003      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x36>
 8000e66:	e027      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e6a:	613b      	str	r3, [r7, #16]
      break;
 8000e6c:	e027      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d010      	beq.n	8000ea8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	0c5b      	lsrs	r3, r3, #17
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e9a:	fb03 f202 	mul.w	r2, r3, r2
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e004      	b.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
      break;
 8000eb6:	e002      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eba:	613b      	str	r3, [r7, #16]
      break;
 8000ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ebe:	693b      	ldr	r3, [r7, #16]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	007a1200 	.word	0x007a1200
 8000ed4:	08002448 	.word	0x08002448
 8000ed8:	08002458 	.word	0x08002458
 8000edc:	003d0900 	.word	0x003d0900

08000ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <RCC_Delay+0x34>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <RCC_Delay+0x38>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0a5b      	lsrs	r3, r3, #9
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000efc:	bf00      	nop
  }
  while (Delay --);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	60fa      	str	r2, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f9      	bne.n	8000efc <RCC_Delay+0x1c>
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000064 	.word	0x20000064
 8000f18:	10624dd3 	.word	0x10624dd3

08000f1c <findslot>:
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <findslot+0x2c>)
 8000f1e:	b510      	push	{r4, lr}
 8000f20:	4604      	mov	r4, r0
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	b118      	cbz	r0, 8000f2e <findslot+0x12>
 8000f26:	6a03      	ldr	r3, [r0, #32]
 8000f28:	b90b      	cbnz	r3, 8000f2e <findslot+0x12>
 8000f2a:	f000 fb1f 	bl	800156c <__sinit>
 8000f2e:	2c13      	cmp	r4, #19
 8000f30:	d807      	bhi.n	8000f42 <findslot+0x26>
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <findslot+0x30>)
 8000f34:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000f38:	3201      	adds	r2, #1
 8000f3a:	d002      	beq.n	8000f42 <findslot+0x26>
 8000f3c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	2000      	movs	r0, #0
 8000f44:	e7fc      	b.n	8000f40 <findslot+0x24>
 8000f46:	bf00      	nop
 8000f48:	200000d0 	.word	0x200000d0
 8000f4c:	20000104 	.word	0x20000104

08000f50 <error>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	4604      	mov	r4, r0
 8000f54:	f000 fcdc 	bl	8001910 <__errno>
 8000f58:	2613      	movs	r6, #19
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	2700      	movs	r7, #0
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4639      	mov	r1, r7
 8000f62:	beab      	bkpt	0x00ab
 8000f64:	4606      	mov	r6, r0
 8000f66:	4620      	mov	r0, r4
 8000f68:	602e      	str	r6, [r5, #0]
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f6c <checkerror>:
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	d101      	bne.n	8000f74 <checkerror+0x8>
 8000f70:	f7ff bfee 	b.w	8000f50 <error>
 8000f74:	4770      	bx	lr

08000f76 <_swiread>:
 8000f76:	b530      	push	{r4, r5, lr}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	2406      	movs	r4, #6
 8000f7c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000f80:	9203      	str	r2, [sp, #12]
 8000f82:	ad01      	add	r5, sp, #4
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	beab      	bkpt	0x00ab
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f7ff ffed 	bl	8000f6c <checkerror>
 8000f92:	b005      	add	sp, #20
 8000f94:	bd30      	pop	{r4, r5, pc}

08000f96 <_read>:
 8000f96:	b570      	push	{r4, r5, r6, lr}
 8000f98:	460e      	mov	r6, r1
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	f7ff ffbe 	bl	8000f1c <findslot>
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	b930      	cbnz	r0, 8000fb2 <_read+0x1c>
 8000fa4:	f000 fcb4 	bl	8001910 <__errno>
 8000fa8:	2309      	movs	r3, #9
 8000faa:	6003      	str	r3, [r0, #0]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	bd70      	pop	{r4, r5, r6, pc}
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	4631      	mov	r1, r6
 8000fb6:	6800      	ldr	r0, [r0, #0]
 8000fb8:	f7ff ffdd 	bl	8000f76 <_swiread>
 8000fbc:	1c43      	adds	r3, r0, #1
 8000fbe:	bf1f      	itttt	ne
 8000fc0:	6863      	ldrne	r3, [r4, #4]
 8000fc2:	1a28      	subne	r0, r5, r0
 8000fc4:	181b      	addne	r3, r3, r0
 8000fc6:	6063      	strne	r3, [r4, #4]
 8000fc8:	e7f2      	b.n	8000fb0 <_read+0x1a>

08000fca <_swilseek>:
 8000fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fcc:	460c      	mov	r4, r1
 8000fce:	4616      	mov	r6, r2
 8000fd0:	f7ff ffa4 	bl	8000f1c <findslot>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	b940      	cbnz	r0, 8000fea <_swilseek+0x20>
 8000fd8:	f000 fc9a 	bl	8001910 <__errno>
 8000fdc:	2309      	movs	r3, #9
 8000fde:	6003      	str	r3, [r0, #0]
 8000fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	b003      	add	sp, #12
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fea:	2e02      	cmp	r6, #2
 8000fec:	d903      	bls.n	8000ff6 <_swilseek+0x2c>
 8000fee:	f000 fc8f 	bl	8001910 <__errno>
 8000ff2:	2316      	movs	r3, #22
 8000ff4:	e7f3      	b.n	8000fde <_swilseek+0x14>
 8000ff6:	2e01      	cmp	r6, #1
 8000ff8:	d112      	bne.n	8001020 <_swilseek+0x56>
 8000ffa:	6843      	ldr	r3, [r0, #4]
 8000ffc:	18e4      	adds	r4, r4, r3
 8000ffe:	d4f6      	bmi.n	8000fee <_swilseek+0x24>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	260a      	movs	r6, #10
 8001004:	466f      	mov	r7, sp
 8001006:	e9cd 3400 	strd	r3, r4, [sp]
 800100a:	4630      	mov	r0, r6
 800100c:	4639      	mov	r1, r7
 800100e:	beab      	bkpt	0x00ab
 8001010:	4606      	mov	r6, r0
 8001012:	4630      	mov	r0, r6
 8001014:	f7ff ffaa 	bl	8000f6c <checkerror>
 8001018:	2800      	cmp	r0, #0
 800101a:	dbe1      	blt.n	8000fe0 <_swilseek+0x16>
 800101c:	606c      	str	r4, [r5, #4]
 800101e:	e7e1      	b.n	8000fe4 <_swilseek+0x1a>
 8001020:	2e02      	cmp	r6, #2
 8001022:	6803      	ldr	r3, [r0, #0]
 8001024:	d1ec      	bne.n	8001000 <_swilseek+0x36>
 8001026:	260c      	movs	r6, #12
 8001028:	466f      	mov	r7, sp
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4630      	mov	r0, r6
 800102e:	4639      	mov	r1, r7
 8001030:	beab      	bkpt	0x00ab
 8001032:	4606      	mov	r6, r0
 8001034:	4630      	mov	r0, r6
 8001036:	f7ff ff99 	bl	8000f6c <checkerror>
 800103a:	1c43      	adds	r3, r0, #1
 800103c:	d0d0      	beq.n	8000fe0 <_swilseek+0x16>
 800103e:	4404      	add	r4, r0
 8001040:	e7de      	b.n	8001000 <_swilseek+0x36>

08001042 <_lseek>:
 8001042:	f7ff bfc2 	b.w	8000fca <_swilseek>

08001046 <_swiwrite>:
 8001046:	b530      	push	{r4, r5, lr}
 8001048:	b085      	sub	sp, #20
 800104a:	2405      	movs	r4, #5
 800104c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001050:	9203      	str	r2, [sp, #12]
 8001052:	ad01      	add	r5, sp, #4
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	beab      	bkpt	0x00ab
 800105a:	4604      	mov	r4, r0
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff ff85 	bl	8000f6c <checkerror>
 8001062:	b005      	add	sp, #20
 8001064:	bd30      	pop	{r4, r5, pc}

08001066 <_write>:
 8001066:	b570      	push	{r4, r5, r6, lr}
 8001068:	460e      	mov	r6, r1
 800106a:	4615      	mov	r5, r2
 800106c:	f7ff ff56 	bl	8000f1c <findslot>
 8001070:	4604      	mov	r4, r0
 8001072:	b930      	cbnz	r0, 8001082 <_write+0x1c>
 8001074:	f000 fc4c 	bl	8001910 <__errno>
 8001078:	2309      	movs	r3, #9
 800107a:	6003      	str	r3, [r0, #0]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	462a      	mov	r2, r5
 8001084:	4631      	mov	r1, r6
 8001086:	6800      	ldr	r0, [r0, #0]
 8001088:	f7ff ffdd 	bl	8001046 <_swiwrite>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	dbf5      	blt.n	800107c <_write+0x16>
 8001090:	6862      	ldr	r2, [r4, #4]
 8001092:	1ae8      	subs	r0, r5, r3
 8001094:	4402      	add	r2, r0
 8001096:	42ab      	cmp	r3, r5
 8001098:	6062      	str	r2, [r4, #4]
 800109a:	d1f1      	bne.n	8001080 <_write+0x1a>
 800109c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff bf55 	b.w	8000f50 <error>

080010a6 <_swiclose>:
 80010a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010a8:	2402      	movs	r4, #2
 80010aa:	9001      	str	r0, [sp, #4]
 80010ac:	ad01      	add	r5, sp, #4
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	beab      	bkpt	0x00ab
 80010b4:	4604      	mov	r4, r0
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff ff58 	bl	8000f6c <checkerror>
 80010bc:	b003      	add	sp, #12
 80010be:	bd30      	pop	{r4, r5, pc}

080010c0 <_close>:
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4605      	mov	r5, r0
 80010c4:	f7ff ff2a 	bl	8000f1c <findslot>
 80010c8:	4604      	mov	r4, r0
 80010ca:	b930      	cbnz	r0, 80010da <_close+0x1a>
 80010cc:	f000 fc20 	bl	8001910 <__errno>
 80010d0:	2309      	movs	r3, #9
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	bd38      	pop	{r3, r4, r5, pc}
 80010da:	3d01      	subs	r5, #1
 80010dc:	2d01      	cmp	r5, #1
 80010de:	d809      	bhi.n	80010f4 <_close+0x34>
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <_close+0x48>)
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d104      	bne.n	80010f4 <_close+0x34>
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	6003      	str	r3, [r0, #0]
 80010f0:	2000      	movs	r0, #0
 80010f2:	e7f1      	b.n	80010d8 <_close+0x18>
 80010f4:	6820      	ldr	r0, [r4, #0]
 80010f6:	f7ff ffd6 	bl	80010a6 <_swiclose>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d1ec      	bne.n	80010d8 <_close+0x18>
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	6023      	str	r3, [r4, #0]
 8001104:	e7e8      	b.n	80010d8 <_close+0x18>
 8001106:	bf00      	nop
 8001108:	20000104 	.word	0x20000104

0800110c <_swistat>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	460c      	mov	r4, r1
 8001110:	f7ff ff04 	bl	8000f1c <findslot>
 8001114:	4605      	mov	r5, r0
 8001116:	b930      	cbnz	r0, 8001126 <_swistat+0x1a>
 8001118:	f000 fbfa 	bl	8001910 <__errno>
 800111c:	2309      	movs	r3, #9
 800111e:	6003      	str	r3, [r0, #0]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	bd70      	pop	{r4, r5, r6, pc}
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	260c      	movs	r6, #12
 800112a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112e:	6063      	str	r3, [r4, #4]
 8001130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001134:	64a3      	str	r3, [r4, #72]	; 0x48
 8001136:	4630      	mov	r0, r6
 8001138:	4629      	mov	r1, r5
 800113a:	beab      	bkpt	0x00ab
 800113c:	4605      	mov	r5, r0
 800113e:	4628      	mov	r0, r5
 8001140:	f7ff ff14 	bl	8000f6c <checkerror>
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	bf1c      	itt	ne
 8001148:	6120      	strne	r0, [r4, #16]
 800114a:	2000      	movne	r0, #0
 800114c:	e7ea      	b.n	8001124 <_swistat+0x18>

0800114e <_fstat>:
 800114e:	460b      	mov	r3, r1
 8001150:	b510      	push	{r4, lr}
 8001152:	2100      	movs	r1, #0
 8001154:	4604      	mov	r4, r0
 8001156:	2258      	movs	r2, #88	; 0x58
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fb8b 	bl	8001874 <memset>
 800115e:	4601      	mov	r1, r0
 8001160:	4620      	mov	r0, r4
 8001162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001166:	f7ff bfd1 	b.w	800110c <_swistat>

0800116a <_stat>:
 800116a:	b538      	push	{r3, r4, r5, lr}
 800116c:	460d      	mov	r5, r1
 800116e:	4604      	mov	r4, r0
 8001170:	2258      	movs	r2, #88	; 0x58
 8001172:	2100      	movs	r1, #0
 8001174:	4628      	mov	r0, r5
 8001176:	f000 fb7d 	bl	8001874 <memset>
 800117a:	4620      	mov	r0, r4
 800117c:	2100      	movs	r1, #0
 800117e:	f000 f811 	bl	80011a4 <_swiopen>
 8001182:	1c43      	adds	r3, r0, #1
 8001184:	4604      	mov	r4, r0
 8001186:	d00b      	beq.n	80011a0 <_stat+0x36>
 8001188:	686b      	ldr	r3, [r5, #4]
 800118a:	4629      	mov	r1, r5
 800118c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001190:	606b      	str	r3, [r5, #4]
 8001192:	f7ff ffbb 	bl	800110c <_swistat>
 8001196:	4605      	mov	r5, r0
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff ff91 	bl	80010c0 <_close>
 800119e:	462c      	mov	r4, r5
 80011a0:	4620      	mov	r0, r4
 80011a2:	bd38      	pop	{r3, r4, r5, pc}

080011a4 <_swiopen>:
 80011a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a8:	4607      	mov	r7, r0
 80011aa:	460e      	mov	r6, r1
 80011ac:	2500      	movs	r5, #0
 80011ae:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001254 <_swiopen+0xb0>
 80011b2:	b097      	sub	sp, #92	; 0x5c
 80011b4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80011b8:	1c61      	adds	r1, r4, #1
 80011ba:	d037      	beq.n	800122c <_swiopen+0x88>
 80011bc:	3501      	adds	r5, #1
 80011be:	2d14      	cmp	r5, #20
 80011c0:	d1f8      	bne.n	80011b4 <_swiopen+0x10>
 80011c2:	f000 fba5 	bl	8001910 <__errno>
 80011c6:	2318      	movs	r3, #24
 80011c8:	f04f 34ff 	mov.w	r4, #4294967295
 80011cc:	6003      	str	r3, [r0, #0]
 80011ce:	e03d      	b.n	800124c <_swiopen+0xa8>
 80011d0:	f240 6301 	movw	r3, #1537	; 0x601
 80011d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80011d8:	07b2      	lsls	r2, r6, #30
 80011da:	bf48      	it	mi
 80011dc:	f044 0402 	orrmi.w	r4, r4, #2
 80011e0:	421e      	tst	r6, r3
 80011e2:	bf18      	it	ne
 80011e4:	f044 0404 	orrne.w	r4, r4, #4
 80011e8:	0733      	lsls	r3, r6, #28
 80011ea:	bf48      	it	mi
 80011ec:	f024 0404 	bicmi.w	r4, r4, #4
 80011f0:	4638      	mov	r0, r7
 80011f2:	bf48      	it	mi
 80011f4:	f044 0408 	orrmi.w	r4, r4, #8
 80011f8:	9700      	str	r7, [sp, #0]
 80011fa:	f7fe ffa7 	bl	800014c <strlen>
 80011fe:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001202:	2401      	movs	r4, #1
 8001204:	4620      	mov	r0, r4
 8001206:	4649      	mov	r1, r9
 8001208:	beab      	bkpt	0x00ab
 800120a:	4604      	mov	r4, r0
 800120c:	2c00      	cmp	r4, #0
 800120e:	db08      	blt.n	8001222 <_swiopen+0x7e>
 8001210:	2300      	movs	r3, #0
 8001212:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001216:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800121a:	462c      	mov	r4, r5
 800121c:	f8c8 3004 	str.w	r3, [r8, #4]
 8001220:	e014      	b.n	800124c <_swiopen+0xa8>
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff fe94 	bl	8000f50 <error>
 8001228:	4604      	mov	r4, r0
 800122a:	e00f      	b.n	800124c <_swiopen+0xa8>
 800122c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001230:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001234:	46e9      	mov	r9, sp
 8001236:	d1cb      	bne.n	80011d0 <_swiopen+0x2c>
 8001238:	4649      	mov	r1, r9
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff ff95 	bl	800116a <_stat>
 8001240:	3001      	adds	r0, #1
 8001242:	d0c5      	beq.n	80011d0 <_swiopen+0x2c>
 8001244:	f000 fb64 	bl	8001910 <__errno>
 8001248:	2311      	movs	r3, #17
 800124a:	6003      	str	r3, [r0, #0]
 800124c:	4620      	mov	r0, r4
 800124e:	b017      	add	sp, #92	; 0x5c
 8001250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001254:	20000104 	.word	0x20000104

08001258 <_get_semihosting_exts>:
 8001258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800125c:	4606      	mov	r6, r0
 800125e:	460f      	mov	r7, r1
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <_get_semihosting_exts+0xb4>)
 8001262:	2100      	movs	r1, #0
 8001264:	4615      	mov	r5, r2
 8001266:	f7ff ff9d 	bl	80011a4 <_swiopen>
 800126a:	4604      	mov	r4, r0
 800126c:	462a      	mov	r2, r5
 800126e:	2100      	movs	r1, #0
 8001270:	4630      	mov	r0, r6
 8001272:	f000 faff 	bl	8001874 <memset>
 8001276:	1c63      	adds	r3, r4, #1
 8001278:	d016      	beq.n	80012a8 <_get_semihosting_exts+0x50>
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff fe4e 	bl	8000f1c <findslot>
 8001280:	f04f 080c 	mov.w	r8, #12
 8001284:	4681      	mov	r9, r0
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	beab      	bkpt	0x00ab
 800128c:	4680      	mov	r8, r0
 800128e:	4640      	mov	r0, r8
 8001290:	f7ff fe6c 	bl	8000f6c <checkerror>
 8001294:	2803      	cmp	r0, #3
 8001296:	dd02      	ble.n	800129e <_get_semihosting_exts+0x46>
 8001298:	1ec3      	subs	r3, r0, #3
 800129a:	42ab      	cmp	r3, r5
 800129c:	dc08      	bgt.n	80012b0 <_get_semihosting_exts+0x58>
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff ff0e 	bl	80010c0 <_close>
 80012a4:	f04f 34ff 	mov.w	r4, #4294967295
 80012a8:	4620      	mov	r0, r4
 80012aa:	b003      	add	sp, #12
 80012ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b0:	2204      	movs	r2, #4
 80012b2:	4620      	mov	r0, r4
 80012b4:	eb0d 0102 	add.w	r1, sp, r2
 80012b8:	f7ff fe6d 	bl	8000f96 <_read>
 80012bc:	2803      	cmp	r0, #3
 80012be:	ddee      	ble.n	800129e <_get_semihosting_exts+0x46>
 80012c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012c4:	2b53      	cmp	r3, #83	; 0x53
 80012c6:	d1ea      	bne.n	800129e <_get_semihosting_exts+0x46>
 80012c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012cc:	2b48      	cmp	r3, #72	; 0x48
 80012ce:	d1e6      	bne.n	800129e <_get_semihosting_exts+0x46>
 80012d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80012d4:	2b46      	cmp	r3, #70	; 0x46
 80012d6:	d1e2      	bne.n	800129e <_get_semihosting_exts+0x46>
 80012d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012dc:	2b42      	cmp	r3, #66	; 0x42
 80012de:	d1de      	bne.n	800129e <_get_semihosting_exts+0x46>
 80012e0:	2201      	movs	r2, #1
 80012e2:	4639      	mov	r1, r7
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff fe70 	bl	8000fca <_swilseek>
 80012ea:	2800      	cmp	r0, #0
 80012ec:	dbd7      	blt.n	800129e <_get_semihosting_exts+0x46>
 80012ee:	462a      	mov	r2, r5
 80012f0:	4631      	mov	r1, r6
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fe4f 	bl	8000f96 <_read>
 80012f8:	4605      	mov	r5, r0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fee0 	bl	80010c0 <_close>
 8001300:	4628      	mov	r0, r5
 8001302:	f7ff fe33 	bl	8000f6c <checkerror>
 8001306:	4604      	mov	r4, r0
 8001308:	e7ce      	b.n	80012a8 <_get_semihosting_exts+0x50>
 800130a:	bf00      	nop
 800130c:	0800245a 	.word	0x0800245a

08001310 <initialise_semihosting_exts>:
 8001310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001312:	2100      	movs	r1, #0
 8001314:	2201      	movs	r2, #1
 8001316:	4d09      	ldr	r5, [pc, #36]	; (800133c <initialise_semihosting_exts+0x2c>)
 8001318:	4c09      	ldr	r4, [pc, #36]	; (8001340 <initialise_semihosting_exts+0x30>)
 800131a:	a801      	add	r0, sp, #4
 800131c:	6029      	str	r1, [r5, #0]
 800131e:	6022      	str	r2, [r4, #0]
 8001320:	f7ff ff9a 	bl	8001258 <_get_semihosting_exts>
 8001324:	2800      	cmp	r0, #0
 8001326:	dd07      	ble.n	8001338 <initialise_semihosting_exts+0x28>
 8001328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	602a      	str	r2, [r5, #0]
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	b003      	add	sp, #12
 800133a:	bd30      	pop	{r4, r5, pc}
 800133c:	20000070 	.word	0x20000070
 8001340:	20000074 	.word	0x20000074

08001344 <_has_ext_stdout_stderr>:
 8001344:	b510      	push	{r4, lr}
 8001346:	4c04      	ldr	r4, [pc, #16]	; (8001358 <_has_ext_stdout_stderr+0x14>)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <_has_ext_stdout_stderr+0xe>
 800134e:	f7ff ffdf 	bl	8001310 <initialise_semihosting_exts>
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	bd10      	pop	{r4, pc}
 8001356:	bf00      	nop
 8001358:	20000074 	.word	0x20000074

0800135c <initialise_monitor_handles>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	2303      	movs	r3, #3
 8001362:	2400      	movs	r4, #0
 8001364:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001408 <initialise_monitor_handles+0xac>
 8001368:	b085      	sub	sp, #20
 800136a:	f8cd 9004 	str.w	r9, [sp, #4]
 800136e:	af01      	add	r7, sp, #4
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	2501      	movs	r5, #1
 8001374:	9402      	str	r4, [sp, #8]
 8001376:	4628      	mov	r0, r5
 8001378:	4639      	mov	r1, r7
 800137a:	beab      	bkpt	0x00ab
 800137c:	4605      	mov	r5, r0
 800137e:	f04f 32ff 	mov.w	r2, #4294967295
 8001382:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800140c <initialise_monitor_handles+0xb0>
 8001386:	4623      	mov	r3, r4
 8001388:	4c21      	ldr	r4, [pc, #132]	; (8001410 <initialise_monitor_handles+0xb4>)
 800138a:	f8c8 5000 	str.w	r5, [r8]
 800138e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001392:	3301      	adds	r3, #1
 8001394:	2b14      	cmp	r3, #20
 8001396:	d1fa      	bne.n	800138e <initialise_monitor_handles+0x32>
 8001398:	f7ff ffd4 	bl	8001344 <_has_ext_stdout_stderr>
 800139c:	4d1d      	ldr	r5, [pc, #116]	; (8001414 <initialise_monitor_handles+0xb8>)
 800139e:	b1d0      	cbz	r0, 80013d6 <initialise_monitor_handles+0x7a>
 80013a0:	f04f 0a03 	mov.w	sl, #3
 80013a4:	2304      	movs	r3, #4
 80013a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80013aa:	2601      	movs	r6, #1
 80013ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	4630      	mov	r0, r6
 80013b4:	4639      	mov	r1, r7
 80013b6:	beab      	bkpt	0x00ab
 80013b8:	4683      	mov	fp, r0
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <initialise_monitor_handles+0xbc>)
 80013bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80013c0:	f8c3 b000 	str.w	fp, [r3]
 80013c4:	2308      	movs	r3, #8
 80013c6:	f8cd a00c 	str.w	sl, [sp, #12]
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4630      	mov	r0, r6
 80013ce:	4639      	mov	r1, r7
 80013d0:	beab      	bkpt	0x00ab
 80013d2:	4606      	mov	r6, r0
 80013d4:	602e      	str	r6, [r5, #0]
 80013d6:	2600      	movs	r6, #0
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	6066      	str	r6, [r4, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	bf02      	ittt	eq
 80013e0:	4b0d      	ldreq	r3, [pc, #52]	; (8001418 <initialise_monitor_handles+0xbc>)
 80013e2:	681b      	ldreq	r3, [r3, #0]
 80013e4:	602b      	streq	r3, [r5, #0]
 80013e6:	f8d8 3000 	ldr.w	r3, [r8]
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	f7ff ffaa 	bl	8001344 <_has_ext_stdout_stderr>
 80013f0:	b130      	cbz	r0, 8001400 <initialise_monitor_handles+0xa4>
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <initialise_monitor_handles+0xbc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001400:	b005      	add	sp, #20
 8001402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001406:	bf00      	nop
 8001408:	08002470 	.word	0x08002470
 800140c:	200000fc 	.word	0x200000fc
 8001410:	20000104 	.word	0x20000104
 8001414:	200000f8 	.word	0x200000f8
 8001418:	20000100 	.word	0x20000100

0800141c <_isatty>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	f7ff fd7d 	bl	8000f1c <findslot>
 8001422:	2509      	movs	r5, #9
 8001424:	4604      	mov	r4, r0
 8001426:	b920      	cbnz	r0, 8001432 <_isatty+0x16>
 8001428:	f000 fa72 	bl	8001910 <__errno>
 800142c:	6005      	str	r5, [r0, #0]
 800142e:	4620      	mov	r0, r4
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	4628      	mov	r0, r5
 8001434:	4621      	mov	r1, r4
 8001436:	beab      	bkpt	0x00ab
 8001438:	4604      	mov	r4, r0
 800143a:	2c01      	cmp	r4, #1
 800143c:	d0f7      	beq.n	800142e <_isatty+0x12>
 800143e:	f000 fa67 	bl	8001910 <__errno>
 8001442:	2400      	movs	r4, #0
 8001444:	4605      	mov	r5, r0
 8001446:	2613      	movs	r6, #19
 8001448:	4630      	mov	r0, r6
 800144a:	4621      	mov	r1, r4
 800144c:	beab      	bkpt	0x00ab
 800144e:	4606      	mov	r6, r0
 8001450:	602e      	str	r6, [r5, #0]
 8001452:	e7ec      	b.n	800142e <_isatty+0x12>

08001454 <std>:
 8001454:	2300      	movs	r3, #0
 8001456:	b510      	push	{r4, lr}
 8001458:	4604      	mov	r4, r0
 800145a:	e9c0 3300 	strd	r3, r3, [r0]
 800145e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001462:	6083      	str	r3, [r0, #8]
 8001464:	8181      	strh	r1, [r0, #12]
 8001466:	6643      	str	r3, [r0, #100]	; 0x64
 8001468:	81c2      	strh	r2, [r0, #14]
 800146a:	6183      	str	r3, [r0, #24]
 800146c:	4619      	mov	r1, r3
 800146e:	2208      	movs	r2, #8
 8001470:	305c      	adds	r0, #92	; 0x5c
 8001472:	f000 f9ff 	bl	8001874 <memset>
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <std+0x58>)
 8001478:	6224      	str	r4, [r4, #32]
 800147a:	6263      	str	r3, [r4, #36]	; 0x24
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <std+0x5c>)
 800147e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <std+0x60>)
 8001482:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <std+0x64>)
 8001486:	6323      	str	r3, [r4, #48]	; 0x30
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <std+0x68>)
 800148a:	429c      	cmp	r4, r3
 800148c:	d006      	beq.n	800149c <std+0x48>
 800148e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001492:	4294      	cmp	r4, r2
 8001494:	d002      	beq.n	800149c <std+0x48>
 8001496:	33d0      	adds	r3, #208	; 0xd0
 8001498:	429c      	cmp	r4, r3
 800149a:	d105      	bne.n	80014a8 <std+0x54>
 800149c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014a4:	f000 ba5e 	b.w	8001964 <__retarget_lock_init_recursive>
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	bf00      	nop
 80014ac:	080016c5 	.word	0x080016c5
 80014b0:	080016e7 	.word	0x080016e7
 80014b4:	0800171f 	.word	0x0800171f
 80014b8:	08001743 	.word	0x08001743
 80014bc:	200001a4 	.word	0x200001a4

080014c0 <stdio_exit_handler>:
 80014c0:	4a02      	ldr	r2, [pc, #8]	; (80014cc <stdio_exit_handler+0xc>)
 80014c2:	4903      	ldr	r1, [pc, #12]	; (80014d0 <stdio_exit_handler+0x10>)
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <stdio_exit_handler+0x14>)
 80014c6:	f000 b869 	b.w	800159c <_fwalk_sglue>
 80014ca:	bf00      	nop
 80014cc:	20000078 	.word	0x20000078
 80014d0:	08002205 	.word	0x08002205
 80014d4:	20000084 	.word	0x20000084

080014d8 <cleanup_stdio>:
 80014d8:	6841      	ldr	r1, [r0, #4]
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <cleanup_stdio+0x34>)
 80014dc:	b510      	push	{r4, lr}
 80014de:	4299      	cmp	r1, r3
 80014e0:	4604      	mov	r4, r0
 80014e2:	d001      	beq.n	80014e8 <cleanup_stdio+0x10>
 80014e4:	f000 fe8e 	bl	8002204 <_fflush_r>
 80014e8:	68a1      	ldr	r1, [r4, #8]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <cleanup_stdio+0x38>)
 80014ec:	4299      	cmp	r1, r3
 80014ee:	d002      	beq.n	80014f6 <cleanup_stdio+0x1e>
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 fe87 	bl	8002204 <_fflush_r>
 80014f6:	68e1      	ldr	r1, [r4, #12]
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <cleanup_stdio+0x3c>)
 80014fa:	4299      	cmp	r1, r3
 80014fc:	d004      	beq.n	8001508 <cleanup_stdio+0x30>
 80014fe:	4620      	mov	r0, r4
 8001500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001504:	f000 be7e 	b.w	8002204 <_fflush_r>
 8001508:	bd10      	pop	{r4, pc}
 800150a:	bf00      	nop
 800150c:	200001a4 	.word	0x200001a4
 8001510:	2000020c 	.word	0x2000020c
 8001514:	20000274 	.word	0x20000274

08001518 <global_stdio_init.part.0>:
 8001518:	b510      	push	{r4, lr}
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <global_stdio_init.part.0+0x30>)
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <global_stdio_init.part.0+0x34>)
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <global_stdio_init.part.0+0x38>)
 8001520:	4620      	mov	r0, r4
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	2104      	movs	r1, #4
 8001526:	2200      	movs	r2, #0
 8001528:	f7ff ff94 	bl	8001454 <std>
 800152c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001530:	2201      	movs	r2, #1
 8001532:	2109      	movs	r1, #9
 8001534:	f7ff ff8e 	bl	8001454 <std>
 8001538:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800153c:	2202      	movs	r2, #2
 800153e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001542:	2112      	movs	r1, #18
 8001544:	f7ff bf86 	b.w	8001454 <std>
 8001548:	200002dc 	.word	0x200002dc
 800154c:	200001a4 	.word	0x200001a4
 8001550:	080014c1 	.word	0x080014c1

08001554 <__sfp_lock_acquire>:
 8001554:	4801      	ldr	r0, [pc, #4]	; (800155c <__sfp_lock_acquire+0x8>)
 8001556:	f000 ba06 	b.w	8001966 <__retarget_lock_acquire_recursive>
 800155a:	bf00      	nop
 800155c:	200002e5 	.word	0x200002e5

08001560 <__sfp_lock_release>:
 8001560:	4801      	ldr	r0, [pc, #4]	; (8001568 <__sfp_lock_release+0x8>)
 8001562:	f000 ba01 	b.w	8001968 <__retarget_lock_release_recursive>
 8001566:	bf00      	nop
 8001568:	200002e5 	.word	0x200002e5

0800156c <__sinit>:
 800156c:	b510      	push	{r4, lr}
 800156e:	4604      	mov	r4, r0
 8001570:	f7ff fff0 	bl	8001554 <__sfp_lock_acquire>
 8001574:	6a23      	ldr	r3, [r4, #32]
 8001576:	b11b      	cbz	r3, 8001580 <__sinit+0x14>
 8001578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800157c:	f7ff bff0 	b.w	8001560 <__sfp_lock_release>
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__sinit+0x28>)
 8001582:	6223      	str	r3, [r4, #32]
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__sinit+0x2c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f5      	bne.n	8001578 <__sinit+0xc>
 800158c:	f7ff ffc4 	bl	8001518 <global_stdio_init.part.0>
 8001590:	e7f2      	b.n	8001578 <__sinit+0xc>
 8001592:	bf00      	nop
 8001594:	080014d9 	.word	0x080014d9
 8001598:	200002dc 	.word	0x200002dc

0800159c <_fwalk_sglue>:
 800159c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a0:	4607      	mov	r7, r0
 80015a2:	4688      	mov	r8, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	2600      	movs	r6, #0
 80015a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015ac:	f1b9 0901 	subs.w	r9, r9, #1
 80015b0:	d505      	bpl.n	80015be <_fwalk_sglue+0x22>
 80015b2:	6824      	ldr	r4, [r4, #0]
 80015b4:	2c00      	cmp	r4, #0
 80015b6:	d1f7      	bne.n	80015a8 <_fwalk_sglue+0xc>
 80015b8:	4630      	mov	r0, r6
 80015ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015be:	89ab      	ldrh	r3, [r5, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d907      	bls.n	80015d4 <_fwalk_sglue+0x38>
 80015c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015c8:	3301      	adds	r3, #1
 80015ca:	d003      	beq.n	80015d4 <_fwalk_sglue+0x38>
 80015cc:	4629      	mov	r1, r5
 80015ce:	4638      	mov	r0, r7
 80015d0:	47c0      	blx	r8
 80015d2:	4306      	orrs	r6, r0
 80015d4:	3568      	adds	r5, #104	; 0x68
 80015d6:	e7e9      	b.n	80015ac <_fwalk_sglue+0x10>

080015d8 <iprintf>:
 80015d8:	b40f      	push	{r0, r1, r2, r3}
 80015da:	b507      	push	{r0, r1, r2, lr}
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <iprintf+0x20>)
 80015de:	ab04      	add	r3, sp, #16
 80015e0:	6808      	ldr	r0, [r1, #0]
 80015e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80015e6:	6881      	ldr	r1, [r0, #8]
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f000 fadb 	bl	8001ba4 <_vfiprintf_r>
 80015ee:	b003      	add	sp, #12
 80015f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015f4:	b004      	add	sp, #16
 80015f6:	4770      	bx	lr
 80015f8:	200000d0 	.word	0x200000d0

080015fc <putchar>:
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <putchar+0xc>)
 80015fe:	4601      	mov	r1, r0
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	6882      	ldr	r2, [r0, #8]
 8001604:	f000 be87 	b.w	8002316 <_putc_r>
 8001608:	200000d0 	.word	0x200000d0

0800160c <_puts_r>:
 800160c:	6a03      	ldr	r3, [r0, #32]
 800160e:	b570      	push	{r4, r5, r6, lr}
 8001610:	4605      	mov	r5, r0
 8001612:	460e      	mov	r6, r1
 8001614:	6884      	ldr	r4, [r0, #8]
 8001616:	b90b      	cbnz	r3, 800161c <_puts_r+0x10>
 8001618:	f7ff ffa8 	bl	800156c <__sinit>
 800161c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800161e:	07db      	lsls	r3, r3, #31
 8001620:	d405      	bmi.n	800162e <_puts_r+0x22>
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	0598      	lsls	r0, r3, #22
 8001626:	d402      	bmi.n	800162e <_puts_r+0x22>
 8001628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800162a:	f000 f99c 	bl	8001966 <__retarget_lock_acquire_recursive>
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	0719      	lsls	r1, r3, #28
 8001632:	d513      	bpl.n	800165c <_puts_r+0x50>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b18b      	cbz	r3, 800165c <_puts_r+0x50>
 8001638:	3e01      	subs	r6, #1
 800163a:	68a3      	ldr	r3, [r4, #8]
 800163c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001640:	3b01      	subs	r3, #1
 8001642:	60a3      	str	r3, [r4, #8]
 8001644:	b9e9      	cbnz	r1, 8001682 <_puts_r+0x76>
 8001646:	2b00      	cmp	r3, #0
 8001648:	da2e      	bge.n	80016a8 <_puts_r+0x9c>
 800164a:	4622      	mov	r2, r4
 800164c:	210a      	movs	r1, #10
 800164e:	4628      	mov	r0, r5
 8001650:	f000 f87b 	bl	800174a <__swbuf_r>
 8001654:	3001      	adds	r0, #1
 8001656:	d007      	beq.n	8001668 <_puts_r+0x5c>
 8001658:	250a      	movs	r5, #10
 800165a:	e007      	b.n	800166c <_puts_r+0x60>
 800165c:	4621      	mov	r1, r4
 800165e:	4628      	mov	r0, r5
 8001660:	f000 f8b0 	bl	80017c4 <__swsetup_r>
 8001664:	2800      	cmp	r0, #0
 8001666:	d0e7      	beq.n	8001638 <_puts_r+0x2c>
 8001668:	f04f 35ff 	mov.w	r5, #4294967295
 800166c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800166e:	07da      	lsls	r2, r3, #31
 8001670:	d405      	bmi.n	800167e <_puts_r+0x72>
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	059b      	lsls	r3, r3, #22
 8001676:	d402      	bmi.n	800167e <_puts_r+0x72>
 8001678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800167a:	f000 f975 	bl	8001968 <__retarget_lock_release_recursive>
 800167e:	4628      	mov	r0, r5
 8001680:	bd70      	pop	{r4, r5, r6, pc}
 8001682:	2b00      	cmp	r3, #0
 8001684:	da04      	bge.n	8001690 <_puts_r+0x84>
 8001686:	69a2      	ldr	r2, [r4, #24]
 8001688:	429a      	cmp	r2, r3
 800168a:	dc06      	bgt.n	800169a <_puts_r+0x8e>
 800168c:	290a      	cmp	r1, #10
 800168e:	d004      	beq.n	800169a <_puts_r+0x8e>
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	6022      	str	r2, [r4, #0]
 8001696:	7019      	strb	r1, [r3, #0]
 8001698:	e7cf      	b.n	800163a <_puts_r+0x2e>
 800169a:	4622      	mov	r2, r4
 800169c:	4628      	mov	r0, r5
 800169e:	f000 f854 	bl	800174a <__swbuf_r>
 80016a2:	3001      	adds	r0, #1
 80016a4:	d1c9      	bne.n	800163a <_puts_r+0x2e>
 80016a6:	e7df      	b.n	8001668 <_puts_r+0x5c>
 80016a8:	250a      	movs	r5, #10
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	6022      	str	r2, [r4, #0]
 80016b0:	701d      	strb	r5, [r3, #0]
 80016b2:	e7db      	b.n	800166c <_puts_r+0x60>

080016b4 <puts>:
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <puts+0xc>)
 80016b6:	4601      	mov	r1, r0
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f7ff bfa7 	b.w	800160c <_puts_r>
 80016be:	bf00      	nop
 80016c0:	200000d0 	.word	0x200000d0

080016c4 <__sread>:
 80016c4:	b510      	push	{r4, lr}
 80016c6:	460c      	mov	r4, r1
 80016c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016cc:	f000 f8fc 	bl	80018c8 <_read_r>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	bfab      	itete	ge
 80016d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016d6:	89a3      	ldrhlt	r3, [r4, #12]
 80016d8:	181b      	addge	r3, r3, r0
 80016da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016de:	bfac      	ite	ge
 80016e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80016e2:	81a3      	strhlt	r3, [r4, #12]
 80016e4:	bd10      	pop	{r4, pc}

080016e6 <__swrite>:
 80016e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ea:	461f      	mov	r7, r3
 80016ec:	898b      	ldrh	r3, [r1, #12]
 80016ee:	4605      	mov	r5, r0
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	460c      	mov	r4, r1
 80016f4:	4616      	mov	r6, r2
 80016f6:	d505      	bpl.n	8001704 <__swrite+0x1e>
 80016f8:	2302      	movs	r3, #2
 80016fa:	2200      	movs	r2, #0
 80016fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001700:	f000 f8d0 	bl	80018a4 <_lseek_r>
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	4632      	mov	r2, r6
 8001708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800170c:	81a3      	strh	r3, [r4, #12]
 800170e:	4628      	mov	r0, r5
 8001710:	463b      	mov	r3, r7
 8001712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800171a:	f000 b8e7 	b.w	80018ec <_write_r>

0800171e <__sseek>:
 800171e:	b510      	push	{r4, lr}
 8001720:	460c      	mov	r4, r1
 8001722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001726:	f000 f8bd 	bl	80018a4 <_lseek_r>
 800172a:	1c43      	adds	r3, r0, #1
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	bf15      	itete	ne
 8001730:	6560      	strne	r0, [r4, #84]	; 0x54
 8001732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800173a:	81a3      	strheq	r3, [r4, #12]
 800173c:	bf18      	it	ne
 800173e:	81a3      	strhne	r3, [r4, #12]
 8001740:	bd10      	pop	{r4, pc}

08001742 <__sclose>:
 8001742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001746:	f000 b89d 	b.w	8001884 <_close_r>

0800174a <__swbuf_r>:
 800174a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174c:	460e      	mov	r6, r1
 800174e:	4614      	mov	r4, r2
 8001750:	4605      	mov	r5, r0
 8001752:	b118      	cbz	r0, 800175c <__swbuf_r+0x12>
 8001754:	6a03      	ldr	r3, [r0, #32]
 8001756:	b90b      	cbnz	r3, 800175c <__swbuf_r+0x12>
 8001758:	f7ff ff08 	bl	800156c <__sinit>
 800175c:	69a3      	ldr	r3, [r4, #24]
 800175e:	60a3      	str	r3, [r4, #8]
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	071a      	lsls	r2, r3, #28
 8001764:	d525      	bpl.n	80017b2 <__swbuf_r+0x68>
 8001766:	6923      	ldr	r3, [r4, #16]
 8001768:	b31b      	cbz	r3, 80017b2 <__swbuf_r+0x68>
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	6922      	ldr	r2, [r4, #16]
 800176e:	b2f6      	uxtb	r6, r6
 8001770:	1a98      	subs	r0, r3, r2
 8001772:	6963      	ldr	r3, [r4, #20]
 8001774:	4637      	mov	r7, r6
 8001776:	4283      	cmp	r3, r0
 8001778:	dc04      	bgt.n	8001784 <__swbuf_r+0x3a>
 800177a:	4621      	mov	r1, r4
 800177c:	4628      	mov	r0, r5
 800177e:	f000 fd41 	bl	8002204 <_fflush_r>
 8001782:	b9e0      	cbnz	r0, 80017be <__swbuf_r+0x74>
 8001784:	68a3      	ldr	r3, [r4, #8]
 8001786:	3b01      	subs	r3, #1
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	6022      	str	r2, [r4, #0]
 8001790:	701e      	strb	r6, [r3, #0]
 8001792:	6962      	ldr	r2, [r4, #20]
 8001794:	1c43      	adds	r3, r0, #1
 8001796:	429a      	cmp	r2, r3
 8001798:	d004      	beq.n	80017a4 <__swbuf_r+0x5a>
 800179a:	89a3      	ldrh	r3, [r4, #12]
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	d506      	bpl.n	80017ae <__swbuf_r+0x64>
 80017a0:	2e0a      	cmp	r6, #10
 80017a2:	d104      	bne.n	80017ae <__swbuf_r+0x64>
 80017a4:	4621      	mov	r1, r4
 80017a6:	4628      	mov	r0, r5
 80017a8:	f000 fd2c 	bl	8002204 <_fflush_r>
 80017ac:	b938      	cbnz	r0, 80017be <__swbuf_r+0x74>
 80017ae:	4638      	mov	r0, r7
 80017b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b2:	4621      	mov	r1, r4
 80017b4:	4628      	mov	r0, r5
 80017b6:	f000 f805 	bl	80017c4 <__swsetup_r>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d0d5      	beq.n	800176a <__swbuf_r+0x20>
 80017be:	f04f 37ff 	mov.w	r7, #4294967295
 80017c2:	e7f4      	b.n	80017ae <__swbuf_r+0x64>

080017c4 <__swsetup_r>:
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <__swsetup_r+0xac>)
 80017c8:	4605      	mov	r5, r0
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	460c      	mov	r4, r1
 80017ce:	b118      	cbz	r0, 80017d8 <__swsetup_r+0x14>
 80017d0:	6a03      	ldr	r3, [r0, #32]
 80017d2:	b90b      	cbnz	r3, 80017d8 <__swsetup_r+0x14>
 80017d4:	f7ff feca 	bl	800156c <__sinit>
 80017d8:	89a3      	ldrh	r3, [r4, #12]
 80017da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017de:	0718      	lsls	r0, r3, #28
 80017e0:	d422      	bmi.n	8001828 <__swsetup_r+0x64>
 80017e2:	06d9      	lsls	r1, r3, #27
 80017e4:	d407      	bmi.n	80017f6 <__swsetup_r+0x32>
 80017e6:	2309      	movs	r3, #9
 80017e8:	602b      	str	r3, [r5, #0]
 80017ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80017ee:	f04f 30ff 	mov.w	r0, #4294967295
 80017f2:	81a3      	strh	r3, [r4, #12]
 80017f4:	e034      	b.n	8001860 <__swsetup_r+0x9c>
 80017f6:	0758      	lsls	r0, r3, #29
 80017f8:	d512      	bpl.n	8001820 <__swsetup_r+0x5c>
 80017fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017fc:	b141      	cbz	r1, 8001810 <__swsetup_r+0x4c>
 80017fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001802:	4299      	cmp	r1, r3
 8001804:	d002      	beq.n	800180c <__swsetup_r+0x48>
 8001806:	4628      	mov	r0, r5
 8001808:	f000 f8b0 	bl	800196c <_free_r>
 800180c:	2300      	movs	r3, #0
 800180e:	6363      	str	r3, [r4, #52]	; 0x34
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001816:	81a3      	strh	r3, [r4, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	6063      	str	r3, [r4, #4]
 800181c:	6923      	ldr	r3, [r4, #16]
 800181e:	6023      	str	r3, [r4, #0]
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	81a3      	strh	r3, [r4, #12]
 8001828:	6923      	ldr	r3, [r4, #16]
 800182a:	b94b      	cbnz	r3, 8001840 <__swsetup_r+0x7c>
 800182c:	89a3      	ldrh	r3, [r4, #12]
 800182e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001836:	d003      	beq.n	8001840 <__swsetup_r+0x7c>
 8001838:	4621      	mov	r1, r4
 800183a:	4628      	mov	r0, r5
 800183c:	f000 fd2f 	bl	800229e <__smakebuf_r>
 8001840:	89a0      	ldrh	r0, [r4, #12]
 8001842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001846:	f010 0301 	ands.w	r3, r0, #1
 800184a:	d00a      	beq.n	8001862 <__swsetup_r+0x9e>
 800184c:	2300      	movs	r3, #0
 800184e:	60a3      	str	r3, [r4, #8]
 8001850:	6963      	ldr	r3, [r4, #20]
 8001852:	425b      	negs	r3, r3
 8001854:	61a3      	str	r3, [r4, #24]
 8001856:	6923      	ldr	r3, [r4, #16]
 8001858:	b943      	cbnz	r3, 800186c <__swsetup_r+0xa8>
 800185a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800185e:	d1c4      	bne.n	80017ea <__swsetup_r+0x26>
 8001860:	bd38      	pop	{r3, r4, r5, pc}
 8001862:	0781      	lsls	r1, r0, #30
 8001864:	bf58      	it	pl
 8001866:	6963      	ldrpl	r3, [r4, #20]
 8001868:	60a3      	str	r3, [r4, #8]
 800186a:	e7f4      	b.n	8001856 <__swsetup_r+0x92>
 800186c:	2000      	movs	r0, #0
 800186e:	e7f7      	b.n	8001860 <__swsetup_r+0x9c>
 8001870:	200000d0 	.word	0x200000d0

08001874 <memset>:
 8001874:	4603      	mov	r3, r0
 8001876:	4402      	add	r2, r0
 8001878:	4293      	cmp	r3, r2
 800187a:	d100      	bne.n	800187e <memset+0xa>
 800187c:	4770      	bx	lr
 800187e:	f803 1b01 	strb.w	r1, [r3], #1
 8001882:	e7f9      	b.n	8001878 <memset+0x4>

08001884 <_close_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	2300      	movs	r3, #0
 8001888:	4d05      	ldr	r5, [pc, #20]	; (80018a0 <_close_r+0x1c>)
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	f7ff fc16 	bl	80010c0 <_close>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	d102      	bne.n	800189e <_close_r+0x1a>
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	b103      	cbz	r3, 800189e <_close_r+0x1a>
 800189c:	6023      	str	r3, [r4, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	200002e0 	.word	0x200002e0

080018a4 <_lseek_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	4d05      	ldr	r5, [pc, #20]	; (80018c4 <_lseek_r+0x20>)
 80018b0:	602a      	str	r2, [r5, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f7ff fbc5 	bl	8001042 <_lseek>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d102      	bne.n	80018c2 <_lseek_r+0x1e>
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	b103      	cbz	r3, 80018c2 <_lseek_r+0x1e>
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	200002e0 	.word	0x200002e0

080018c8 <_read_r>:
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	2200      	movs	r2, #0
 80018d2:	4d05      	ldr	r5, [pc, #20]	; (80018e8 <_read_r+0x20>)
 80018d4:	602a      	str	r2, [r5, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	f7ff fb5d 	bl	8000f96 <_read>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_read_r+0x1e>
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_read_r+0x1e>
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	200002e0 	.word	0x200002e0

080018ec <_write_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	2200      	movs	r2, #0
 80018f6:	4d05      	ldr	r5, [pc, #20]	; (800190c <_write_r+0x20>)
 80018f8:	602a      	str	r2, [r5, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7ff fbb3 	bl	8001066 <_write>
 8001900:	1c43      	adds	r3, r0, #1
 8001902:	d102      	bne.n	800190a <_write_r+0x1e>
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	b103      	cbz	r3, 800190a <_write_r+0x1e>
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	bd38      	pop	{r3, r4, r5, pc}
 800190c:	200002e0 	.word	0x200002e0

08001910 <__errno>:
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <__errno+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200000d0 	.word	0x200000d0

0800191c <__libc_init_array>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	2600      	movs	r6, #0
 8001920:	4d0c      	ldr	r5, [pc, #48]	; (8001954 <__libc_init_array+0x38>)
 8001922:	4c0d      	ldr	r4, [pc, #52]	; (8001958 <__libc_init_array+0x3c>)
 8001924:	1b64      	subs	r4, r4, r5
 8001926:	10a4      	asrs	r4, r4, #2
 8001928:	42a6      	cmp	r6, r4
 800192a:	d109      	bne.n	8001940 <__libc_init_array+0x24>
 800192c:	f000 fd68 	bl	8002400 <_init>
 8001930:	2600      	movs	r6, #0
 8001932:	4d0a      	ldr	r5, [pc, #40]	; (800195c <__libc_init_array+0x40>)
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <__libc_init_array+0x44>)
 8001936:	1b64      	subs	r4, r4, r5
 8001938:	10a4      	asrs	r4, r4, #2
 800193a:	42a6      	cmp	r6, r4
 800193c:	d105      	bne.n	800194a <__libc_init_array+0x2e>
 800193e:	bd70      	pop	{r4, r5, r6, pc}
 8001940:	f855 3b04 	ldr.w	r3, [r5], #4
 8001944:	4798      	blx	r3
 8001946:	3601      	adds	r6, #1
 8001948:	e7ee      	b.n	8001928 <__libc_init_array+0xc>
 800194a:	f855 3b04 	ldr.w	r3, [r5], #4
 800194e:	4798      	blx	r3
 8001950:	3601      	adds	r6, #1
 8001952:	e7f2      	b.n	800193a <__libc_init_array+0x1e>
 8001954:	080024a8 	.word	0x080024a8
 8001958:	080024a8 	.word	0x080024a8
 800195c:	080024a8 	.word	0x080024a8
 8001960:	080024ac 	.word	0x080024ac

08001964 <__retarget_lock_init_recursive>:
 8001964:	4770      	bx	lr

08001966 <__retarget_lock_acquire_recursive>:
 8001966:	4770      	bx	lr

08001968 <__retarget_lock_release_recursive>:
 8001968:	4770      	bx	lr
	...

0800196c <_free_r>:
 800196c:	b538      	push	{r3, r4, r5, lr}
 800196e:	4605      	mov	r5, r0
 8001970:	2900      	cmp	r1, #0
 8001972:	d040      	beq.n	80019f6 <_free_r+0x8a>
 8001974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001978:	1f0c      	subs	r4, r1, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfb8      	it	lt
 800197e:	18e4      	addlt	r4, r4, r3
 8001980:	f000 f8dc 	bl	8001b3c <__malloc_lock>
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <_free_r+0x8c>)
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	b933      	cbnz	r3, 8001998 <_free_r+0x2c>
 800198a:	6063      	str	r3, [r4, #4]
 800198c:	6014      	str	r4, [r2, #0]
 800198e:	4628      	mov	r0, r5
 8001990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001994:	f000 b8d8 	b.w	8001b48 <__malloc_unlock>
 8001998:	42a3      	cmp	r3, r4
 800199a:	d908      	bls.n	80019ae <_free_r+0x42>
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	1821      	adds	r1, r4, r0
 80019a0:	428b      	cmp	r3, r1
 80019a2:	bf01      	itttt	eq
 80019a4:	6819      	ldreq	r1, [r3, #0]
 80019a6:	685b      	ldreq	r3, [r3, #4]
 80019a8:	1809      	addeq	r1, r1, r0
 80019aa:	6021      	streq	r1, [r4, #0]
 80019ac:	e7ed      	b.n	800198a <_free_r+0x1e>
 80019ae:	461a      	mov	r2, r3
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	b10b      	cbz	r3, 80019b8 <_free_r+0x4c>
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	d9fa      	bls.n	80019ae <_free_r+0x42>
 80019b8:	6811      	ldr	r1, [r2, #0]
 80019ba:	1850      	adds	r0, r2, r1
 80019bc:	42a0      	cmp	r0, r4
 80019be:	d10b      	bne.n	80019d8 <_free_r+0x6c>
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	4401      	add	r1, r0
 80019c4:	1850      	adds	r0, r2, r1
 80019c6:	4283      	cmp	r3, r0
 80019c8:	6011      	str	r1, [r2, #0]
 80019ca:	d1e0      	bne.n	800198e <_free_r+0x22>
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4408      	add	r0, r1
 80019d2:	6010      	str	r0, [r2, #0]
 80019d4:	6053      	str	r3, [r2, #4]
 80019d6:	e7da      	b.n	800198e <_free_r+0x22>
 80019d8:	d902      	bls.n	80019e0 <_free_r+0x74>
 80019da:	230c      	movs	r3, #12
 80019dc:	602b      	str	r3, [r5, #0]
 80019de:	e7d6      	b.n	800198e <_free_r+0x22>
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	1821      	adds	r1, r4, r0
 80019e4:	428b      	cmp	r3, r1
 80019e6:	bf01      	itttt	eq
 80019e8:	6819      	ldreq	r1, [r3, #0]
 80019ea:	685b      	ldreq	r3, [r3, #4]
 80019ec:	1809      	addeq	r1, r1, r0
 80019ee:	6021      	streq	r1, [r4, #0]
 80019f0:	6063      	str	r3, [r4, #4]
 80019f2:	6054      	str	r4, [r2, #4]
 80019f4:	e7cb      	b.n	800198e <_free_r+0x22>
 80019f6:	bd38      	pop	{r3, r4, r5, pc}
 80019f8:	200002e8 	.word	0x200002e8

080019fc <sbrk_aligned>:
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4e0e      	ldr	r6, [pc, #56]	; (8001a38 <sbrk_aligned+0x3c>)
 8001a00:	460c      	mov	r4, r1
 8001a02:	6831      	ldr	r1, [r6, #0]
 8001a04:	4605      	mov	r5, r0
 8001a06:	b911      	cbnz	r1, 8001a0e <sbrk_aligned+0x12>
 8001a08:	f000 fcdc 	bl	80023c4 <_sbrk_r>
 8001a0c:	6030      	str	r0, [r6, #0]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 fcd7 	bl	80023c4 <_sbrk_r>
 8001a16:	1c43      	adds	r3, r0, #1
 8001a18:	d00a      	beq.n	8001a30 <sbrk_aligned+0x34>
 8001a1a:	1cc4      	adds	r4, r0, #3
 8001a1c:	f024 0403 	bic.w	r4, r4, #3
 8001a20:	42a0      	cmp	r0, r4
 8001a22:	d007      	beq.n	8001a34 <sbrk_aligned+0x38>
 8001a24:	1a21      	subs	r1, r4, r0
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 fccc 	bl	80023c4 <_sbrk_r>
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d101      	bne.n	8001a34 <sbrk_aligned+0x38>
 8001a30:	f04f 34ff 	mov.w	r4, #4294967295
 8001a34:	4620      	mov	r0, r4
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	200002ec 	.word	0x200002ec

08001a3c <_malloc_r>:
 8001a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a40:	1ccd      	adds	r5, r1, #3
 8001a42:	f025 0503 	bic.w	r5, r5, #3
 8001a46:	3508      	adds	r5, #8
 8001a48:	2d0c      	cmp	r5, #12
 8001a4a:	bf38      	it	cc
 8001a4c:	250c      	movcc	r5, #12
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	4607      	mov	r7, r0
 8001a52:	db01      	blt.n	8001a58 <_malloc_r+0x1c>
 8001a54:	42a9      	cmp	r1, r5
 8001a56:	d905      	bls.n	8001a64 <_malloc_r+0x28>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4630      	mov	r0, r6
 8001a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b38 <_malloc_r+0xfc>
 8001a68:	f000 f868 	bl	8001b3c <__malloc_lock>
 8001a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a70:	461c      	mov	r4, r3
 8001a72:	bb5c      	cbnz	r4, 8001acc <_malloc_r+0x90>
 8001a74:	4629      	mov	r1, r5
 8001a76:	4638      	mov	r0, r7
 8001a78:	f7ff ffc0 	bl	80019fc <sbrk_aligned>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	4604      	mov	r4, r0
 8001a80:	d155      	bne.n	8001b2e <_malloc_r+0xf2>
 8001a82:	f8d8 4000 	ldr.w	r4, [r8]
 8001a86:	4626      	mov	r6, r4
 8001a88:	2e00      	cmp	r6, #0
 8001a8a:	d145      	bne.n	8001b18 <_malloc_r+0xdc>
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d048      	beq.n	8001b22 <_malloc_r+0xe6>
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	4631      	mov	r1, r6
 8001a94:	4638      	mov	r0, r7
 8001a96:	eb04 0903 	add.w	r9, r4, r3
 8001a9a:	f000 fc93 	bl	80023c4 <_sbrk_r>
 8001a9e:	4581      	cmp	r9, r0
 8001aa0:	d13f      	bne.n	8001b22 <_malloc_r+0xe6>
 8001aa2:	6821      	ldr	r1, [r4, #0]
 8001aa4:	4638      	mov	r0, r7
 8001aa6:	1a6d      	subs	r5, r5, r1
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	f7ff ffa7 	bl	80019fc <sbrk_aligned>
 8001aae:	3001      	adds	r0, #1
 8001ab0:	d037      	beq.n	8001b22 <_malloc_r+0xe6>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	442b      	add	r3, r5
 8001ab6:	6023      	str	r3, [r4, #0]
 8001ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d038      	beq.n	8001b32 <_malloc_r+0xf6>
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	d12b      	bne.n	8001b1e <_malloc_r+0xe2>
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e00f      	b.n	8001aec <_malloc_r+0xb0>
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	1b52      	subs	r2, r2, r5
 8001ad0:	d41f      	bmi.n	8001b12 <_malloc_r+0xd6>
 8001ad2:	2a0b      	cmp	r2, #11
 8001ad4:	d917      	bls.n	8001b06 <_malloc_r+0xca>
 8001ad6:	1961      	adds	r1, r4, r5
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	6025      	str	r5, [r4, #0]
 8001adc:	bf18      	it	ne
 8001ade:	6059      	strne	r1, [r3, #4]
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	bf08      	it	eq
 8001ae4:	f8c8 1000 	streq.w	r1, [r8]
 8001ae8:	5162      	str	r2, [r4, r5]
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	4638      	mov	r0, r7
 8001aee:	f104 060b 	add.w	r6, r4, #11
 8001af2:	f000 f829 	bl	8001b48 <__malloc_unlock>
 8001af6:	f026 0607 	bic.w	r6, r6, #7
 8001afa:	1d23      	adds	r3, r4, #4
 8001afc:	1af2      	subs	r2, r6, r3
 8001afe:	d0ae      	beq.n	8001a5e <_malloc_r+0x22>
 8001b00:	1b9b      	subs	r3, r3, r6
 8001b02:	50a3      	str	r3, [r4, r2]
 8001b04:	e7ab      	b.n	8001a5e <_malloc_r+0x22>
 8001b06:	42a3      	cmp	r3, r4
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	d1dd      	bne.n	8001ac8 <_malloc_r+0x8c>
 8001b0c:	f8c8 2000 	str.w	r2, [r8]
 8001b10:	e7ec      	b.n	8001aec <_malloc_r+0xb0>
 8001b12:	4623      	mov	r3, r4
 8001b14:	6864      	ldr	r4, [r4, #4]
 8001b16:	e7ac      	b.n	8001a72 <_malloc_r+0x36>
 8001b18:	4634      	mov	r4, r6
 8001b1a:	6876      	ldr	r6, [r6, #4]
 8001b1c:	e7b4      	b.n	8001a88 <_malloc_r+0x4c>
 8001b1e:	4613      	mov	r3, r2
 8001b20:	e7cc      	b.n	8001abc <_malloc_r+0x80>
 8001b22:	230c      	movs	r3, #12
 8001b24:	4638      	mov	r0, r7
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	f000 f80e 	bl	8001b48 <__malloc_unlock>
 8001b2c:	e797      	b.n	8001a5e <_malloc_r+0x22>
 8001b2e:	6025      	str	r5, [r4, #0]
 8001b30:	e7dc      	b.n	8001aec <_malloc_r+0xb0>
 8001b32:	605b      	str	r3, [r3, #4]
 8001b34:	deff      	udf	#255	; 0xff
 8001b36:	bf00      	nop
 8001b38:	200002e8 	.word	0x200002e8

08001b3c <__malloc_lock>:
 8001b3c:	4801      	ldr	r0, [pc, #4]	; (8001b44 <__malloc_lock+0x8>)
 8001b3e:	f7ff bf12 	b.w	8001966 <__retarget_lock_acquire_recursive>
 8001b42:	bf00      	nop
 8001b44:	200002e4 	.word	0x200002e4

08001b48 <__malloc_unlock>:
 8001b48:	4801      	ldr	r0, [pc, #4]	; (8001b50 <__malloc_unlock+0x8>)
 8001b4a:	f7ff bf0d 	b.w	8001968 <__retarget_lock_release_recursive>
 8001b4e:	bf00      	nop
 8001b50:	200002e4 	.word	0x200002e4

08001b54 <__sfputc_r>:
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	b410      	push	{r4}
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	6093      	str	r3, [r2, #8]
 8001b5e:	da07      	bge.n	8001b70 <__sfputc_r+0x1c>
 8001b60:	6994      	ldr	r4, [r2, #24]
 8001b62:	42a3      	cmp	r3, r4
 8001b64:	db01      	blt.n	8001b6a <__sfputc_r+0x16>
 8001b66:	290a      	cmp	r1, #10
 8001b68:	d102      	bne.n	8001b70 <__sfputc_r+0x1c>
 8001b6a:	bc10      	pop	{r4}
 8001b6c:	f7ff bded 	b.w	800174a <__swbuf_r>
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	1c58      	adds	r0, r3, #1
 8001b74:	6010      	str	r0, [r2, #0]
 8001b76:	7019      	strb	r1, [r3, #0]
 8001b78:	4608      	mov	r0, r1
 8001b7a:	bc10      	pop	{r4}
 8001b7c:	4770      	bx	lr

08001b7e <__sfputs_r>:
 8001b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b80:	4606      	mov	r6, r0
 8001b82:	460f      	mov	r7, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	18d5      	adds	r5, r2, r3
 8001b88:	42ac      	cmp	r4, r5
 8001b8a:	d101      	bne.n	8001b90 <__sfputs_r+0x12>
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e007      	b.n	8001ba0 <__sfputs_r+0x22>
 8001b90:	463a      	mov	r2, r7
 8001b92:	4630      	mov	r0, r6
 8001b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b98:	f7ff ffdc 	bl	8001b54 <__sfputc_r>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d1f3      	bne.n	8001b88 <__sfputs_r+0xa>
 8001ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ba4 <_vfiprintf_r>:
 8001ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba8:	460d      	mov	r5, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	4698      	mov	r8, r3
 8001bae:	4606      	mov	r6, r0
 8001bb0:	b09d      	sub	sp, #116	; 0x74
 8001bb2:	b118      	cbz	r0, 8001bbc <_vfiprintf_r+0x18>
 8001bb4:	6a03      	ldr	r3, [r0, #32]
 8001bb6:	b90b      	cbnz	r3, 8001bbc <_vfiprintf_r+0x18>
 8001bb8:	f7ff fcd8 	bl	800156c <__sinit>
 8001bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bbe:	07d9      	lsls	r1, r3, #31
 8001bc0:	d405      	bmi.n	8001bce <_vfiprintf_r+0x2a>
 8001bc2:	89ab      	ldrh	r3, [r5, #12]
 8001bc4:	059a      	lsls	r2, r3, #22
 8001bc6:	d402      	bmi.n	8001bce <_vfiprintf_r+0x2a>
 8001bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bca:	f7ff fecc 	bl	8001966 <__retarget_lock_acquire_recursive>
 8001bce:	89ab      	ldrh	r3, [r5, #12]
 8001bd0:	071b      	lsls	r3, r3, #28
 8001bd2:	d501      	bpl.n	8001bd8 <_vfiprintf_r+0x34>
 8001bd4:	692b      	ldr	r3, [r5, #16]
 8001bd6:	b99b      	cbnz	r3, 8001c00 <_vfiprintf_r+0x5c>
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff fdf2 	bl	80017c4 <__swsetup_r>
 8001be0:	b170      	cbz	r0, 8001c00 <_vfiprintf_r+0x5c>
 8001be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001be4:	07dc      	lsls	r4, r3, #31
 8001be6:	d504      	bpl.n	8001bf2 <_vfiprintf_r+0x4e>
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	b01d      	add	sp, #116	; 0x74
 8001bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf2:	89ab      	ldrh	r3, [r5, #12]
 8001bf4:	0598      	lsls	r0, r3, #22
 8001bf6:	d4f7      	bmi.n	8001be8 <_vfiprintf_r+0x44>
 8001bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bfa:	f7ff feb5 	bl	8001968 <__retarget_lock_release_recursive>
 8001bfe:	e7f3      	b.n	8001be8 <_vfiprintf_r+0x44>
 8001c00:	2300      	movs	r3, #0
 8001c02:	9309      	str	r3, [sp, #36]	; 0x24
 8001c04:	2320      	movs	r3, #32
 8001c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c0a:	2330      	movs	r3, #48	; 0x30
 8001c0c:	f04f 0901 	mov.w	r9, #1
 8001c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001dc4 <_vfiprintf_r+0x220>
 8001c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	469a      	mov	sl, r3
 8001c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c24:	b10a      	cbz	r2, 8001c2a <_vfiprintf_r+0x86>
 8001c26:	2a25      	cmp	r2, #37	; 0x25
 8001c28:	d1f9      	bne.n	8001c1e <_vfiprintf_r+0x7a>
 8001c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c2e:	d00b      	beq.n	8001c48 <_vfiprintf_r+0xa4>
 8001c30:	465b      	mov	r3, fp
 8001c32:	4622      	mov	r2, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7ff ffa1 	bl	8001b7e <__sfputs_r>
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	f000 80a9 	beq.w	8001d94 <_vfiprintf_r+0x1f0>
 8001c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c44:	445a      	add	r2, fp
 8001c46:	9209      	str	r2, [sp, #36]	; 0x24
 8001c48:	f89a 3000 	ldrb.w	r3, [sl]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a1 	beq.w	8001d94 <_vfiprintf_r+0x1f0>
 8001c52:	2300      	movs	r3, #0
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c5c:	f10a 0a01 	add.w	sl, sl, #1
 8001c60:	9304      	str	r3, [sp, #16]
 8001c62:	9307      	str	r3, [sp, #28]
 8001c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c68:	931a      	str	r3, [sp, #104]	; 0x68
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c72:	4854      	ldr	r0, [pc, #336]	; (8001dc4 <_vfiprintf_r+0x220>)
 8001c74:	f000 fbb6 	bl	80023e4 <memchr>
 8001c78:	9a04      	ldr	r2, [sp, #16]
 8001c7a:	b9d8      	cbnz	r0, 8001cb4 <_vfiprintf_r+0x110>
 8001c7c:	06d1      	lsls	r1, r2, #27
 8001c7e:	bf44      	itt	mi
 8001c80:	2320      	movmi	r3, #32
 8001c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c86:	0713      	lsls	r3, r2, #28
 8001c88:	bf44      	itt	mi
 8001c8a:	232b      	movmi	r3, #43	; 0x2b
 8001c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c90:	f89a 3000 	ldrb.w	r3, [sl]
 8001c94:	2b2a      	cmp	r3, #42	; 0x2a
 8001c96:	d015      	beq.n	8001cc4 <_vfiprintf_r+0x120>
 8001c98:	4654      	mov	r4, sl
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f04f 0c0a 	mov.w	ip, #10
 8001ca0:	9a07      	ldr	r2, [sp, #28]
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca8:	3b30      	subs	r3, #48	; 0x30
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d94d      	bls.n	8001d4a <_vfiprintf_r+0x1a6>
 8001cae:	b1b0      	cbz	r0, 8001cde <_vfiprintf_r+0x13a>
 8001cb0:	9207      	str	r2, [sp, #28]
 8001cb2:	e014      	b.n	8001cde <_vfiprintf_r+0x13a>
 8001cb4:	eba0 0308 	sub.w	r3, r0, r8
 8001cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	46a2      	mov	sl, r4
 8001cc0:	9304      	str	r3, [sp, #16]
 8001cc2:	e7d2      	b.n	8001c6a <_vfiprintf_r+0xc6>
 8001cc4:	9b03      	ldr	r3, [sp, #12]
 8001cc6:	1d19      	adds	r1, r3, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	9103      	str	r1, [sp, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bfbb      	ittet	lt
 8001cd0:	425b      	neglt	r3, r3
 8001cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8001cd6:	9307      	strge	r3, [sp, #28]
 8001cd8:	9307      	strlt	r3, [sp, #28]
 8001cda:	bfb8      	it	lt
 8001cdc:	9204      	strlt	r2, [sp, #16]
 8001cde:	7823      	ldrb	r3, [r4, #0]
 8001ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ce2:	d10c      	bne.n	8001cfe <_vfiprintf_r+0x15a>
 8001ce4:	7863      	ldrb	r3, [r4, #1]
 8001ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce8:	d134      	bne.n	8001d54 <_vfiprintf_r+0x1b0>
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	3402      	adds	r4, #2
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	9203      	str	r2, [sp, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bfb8      	it	lt
 8001cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cfc:	9305      	str	r3, [sp, #20]
 8001cfe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001dc8 <_vfiprintf_r+0x224>
 8001d02:	2203      	movs	r2, #3
 8001d04:	4650      	mov	r0, sl
 8001d06:	7821      	ldrb	r1, [r4, #0]
 8001d08:	f000 fb6c 	bl	80023e4 <memchr>
 8001d0c:	b138      	cbz	r0, 8001d1e <_vfiprintf_r+0x17a>
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	9b04      	ldr	r3, [sp, #16]
 8001d12:	eba0 000a 	sub.w	r0, r0, sl
 8001d16:	4082      	lsls	r2, r0
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	3401      	adds	r4, #1
 8001d1c:	9304      	str	r3, [sp, #16]
 8001d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d22:	2206      	movs	r2, #6
 8001d24:	4829      	ldr	r0, [pc, #164]	; (8001dcc <_vfiprintf_r+0x228>)
 8001d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d2a:	f000 fb5b 	bl	80023e4 <memchr>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d03f      	beq.n	8001db2 <_vfiprintf_r+0x20e>
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <_vfiprintf_r+0x22c>)
 8001d34:	bb1b      	cbnz	r3, 8001d7e <_vfiprintf_r+0x1da>
 8001d36:	9b03      	ldr	r3, [sp, #12]
 8001d38:	3307      	adds	r3, #7
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	3308      	adds	r3, #8
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d44:	443b      	add	r3, r7
 8001d46:	9309      	str	r3, [sp, #36]	; 0x24
 8001d48:	e768      	b.n	8001c1c <_vfiprintf_r+0x78>
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d52:	e7a6      	b.n	8001ca2 <_vfiprintf_r+0xfe>
 8001d54:	2300      	movs	r3, #0
 8001d56:	f04f 0c0a 	mov.w	ip, #10
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	3401      	adds	r4, #1
 8001d5e:	9305      	str	r3, [sp, #20]
 8001d60:	4620      	mov	r0, r4
 8001d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d66:	3a30      	subs	r2, #48	; 0x30
 8001d68:	2a09      	cmp	r2, #9
 8001d6a:	d903      	bls.n	8001d74 <_vfiprintf_r+0x1d0>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0c6      	beq.n	8001cfe <_vfiprintf_r+0x15a>
 8001d70:	9105      	str	r1, [sp, #20]
 8001d72:	e7c4      	b.n	8001cfe <_vfiprintf_r+0x15a>
 8001d74:	4604      	mov	r4, r0
 8001d76:	2301      	movs	r3, #1
 8001d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d7c:	e7f0      	b.n	8001d60 <_vfiprintf_r+0x1bc>
 8001d7e:	ab03      	add	r3, sp, #12
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	462a      	mov	r2, r5
 8001d84:	4630      	mov	r0, r6
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_vfiprintf_r+0x230>)
 8001d88:	a904      	add	r1, sp, #16
 8001d8a:	f3af 8000 	nop.w
 8001d8e:	4607      	mov	r7, r0
 8001d90:	1c78      	adds	r0, r7, #1
 8001d92:	d1d6      	bne.n	8001d42 <_vfiprintf_r+0x19e>
 8001d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d96:	07d9      	lsls	r1, r3, #31
 8001d98:	d405      	bmi.n	8001da6 <_vfiprintf_r+0x202>
 8001d9a:	89ab      	ldrh	r3, [r5, #12]
 8001d9c:	059a      	lsls	r2, r3, #22
 8001d9e:	d402      	bmi.n	8001da6 <_vfiprintf_r+0x202>
 8001da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001da2:	f7ff fde1 	bl	8001968 <__retarget_lock_release_recursive>
 8001da6:	89ab      	ldrh	r3, [r5, #12]
 8001da8:	065b      	lsls	r3, r3, #25
 8001daa:	f53f af1d 	bmi.w	8001be8 <_vfiprintf_r+0x44>
 8001dae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001db0:	e71c      	b.n	8001bec <_vfiprintf_r+0x48>
 8001db2:	ab03      	add	r3, sp, #12
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	462a      	mov	r2, r5
 8001db8:	4630      	mov	r0, r6
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <_vfiprintf_r+0x230>)
 8001dbc:	a904      	add	r1, sp, #16
 8001dbe:	f000 f87d 	bl	8001ebc <_printf_i>
 8001dc2:	e7e4      	b.n	8001d8e <_vfiprintf_r+0x1ea>
 8001dc4:	08002474 	.word	0x08002474
 8001dc8:	0800247a 	.word	0x0800247a
 8001dcc:	0800247e 	.word	0x0800247e
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	08001b7f 	.word	0x08001b7f

08001dd8 <_printf_common>:
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ddc:	4616      	mov	r6, r2
 8001dde:	4699      	mov	r9, r3
 8001de0:	688a      	ldr	r2, [r1, #8]
 8001de2:	690b      	ldr	r3, [r1, #16]
 8001de4:	4607      	mov	r7, r0
 8001de6:	4293      	cmp	r3, r2
 8001de8:	bfb8      	it	lt
 8001dea:	4613      	movlt	r3, r2
 8001dec:	6033      	str	r3, [r6, #0]
 8001dee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001df2:	460c      	mov	r4, r1
 8001df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001df8:	b10a      	cbz	r2, 8001dfe <_printf_common+0x26>
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6033      	str	r3, [r6, #0]
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	0699      	lsls	r1, r3, #26
 8001e02:	bf42      	ittt	mi
 8001e04:	6833      	ldrmi	r3, [r6, #0]
 8001e06:	3302      	addmi	r3, #2
 8001e08:	6033      	strmi	r3, [r6, #0]
 8001e0a:	6825      	ldr	r5, [r4, #0]
 8001e0c:	f015 0506 	ands.w	r5, r5, #6
 8001e10:	d106      	bne.n	8001e20 <_printf_common+0x48>
 8001e12:	f104 0a19 	add.w	sl, r4, #25
 8001e16:	68e3      	ldr	r3, [r4, #12]
 8001e18:	6832      	ldr	r2, [r6, #0]
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	dc2b      	bgt.n	8001e78 <_printf_common+0xa0>
 8001e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e24:	1e13      	subs	r3, r2, #0
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	bf18      	it	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	0692      	lsls	r2, r2, #26
 8001e2e:	d430      	bmi.n	8001e92 <_printf_common+0xba>
 8001e30:	4649      	mov	r1, r9
 8001e32:	4638      	mov	r0, r7
 8001e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e38:	47c0      	blx	r8
 8001e3a:	3001      	adds	r0, #1
 8001e3c:	d023      	beq.n	8001e86 <_printf_common+0xae>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	6922      	ldr	r2, [r4, #16]
 8001e42:	f003 0306 	and.w	r3, r3, #6
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf14      	ite	ne
 8001e4a:	2500      	movne	r5, #0
 8001e4c:	6833      	ldreq	r3, [r6, #0]
 8001e4e:	f04f 0600 	mov.w	r6, #0
 8001e52:	bf08      	it	eq
 8001e54:	68e5      	ldreq	r5, [r4, #12]
 8001e56:	f104 041a 	add.w	r4, r4, #26
 8001e5a:	bf08      	it	eq
 8001e5c:	1aed      	subeq	r5, r5, r3
 8001e5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e62:	bf08      	it	eq
 8001e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bfc4      	itt	gt
 8001e6c:	1a9b      	subgt	r3, r3, r2
 8001e6e:	18ed      	addgt	r5, r5, r3
 8001e70:	42b5      	cmp	r5, r6
 8001e72:	d11a      	bne.n	8001eaa <_printf_common+0xd2>
 8001e74:	2000      	movs	r0, #0
 8001e76:	e008      	b.n	8001e8a <_printf_common+0xb2>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	4638      	mov	r0, r7
 8001e80:	47c0      	blx	r8
 8001e82:	3001      	adds	r0, #1
 8001e84:	d103      	bne.n	8001e8e <_printf_common+0xb6>
 8001e86:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e8e:	3501      	adds	r5, #1
 8001e90:	e7c1      	b.n	8001e16 <_printf_common+0x3e>
 8001e92:	2030      	movs	r0, #48	; 0x30
 8001e94:	18e1      	adds	r1, r4, r3
 8001e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ea0:	4422      	add	r2, r4
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ea8:	e7c2      	b.n	8001e30 <_printf_common+0x58>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4622      	mov	r2, r4
 8001eae:	4649      	mov	r1, r9
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	47c0      	blx	r8
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d0e6      	beq.n	8001e86 <_printf_common+0xae>
 8001eb8:	3601      	adds	r6, #1
 8001eba:	e7d9      	b.n	8001e70 <_printf_common+0x98>

08001ebc <_printf_i>:
 8001ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec0:	7e0f      	ldrb	r7, [r1, #24]
 8001ec2:	4691      	mov	r9, r2
 8001ec4:	2f78      	cmp	r7, #120	; 0x78
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	469a      	mov	sl, r3
 8001ecc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ed2:	d807      	bhi.n	8001ee4 <_printf_i+0x28>
 8001ed4:	2f62      	cmp	r7, #98	; 0x62
 8001ed6:	d80a      	bhi.n	8001eee <_printf_i+0x32>
 8001ed8:	2f00      	cmp	r7, #0
 8001eda:	f000 80d5 	beq.w	8002088 <_printf_i+0x1cc>
 8001ede:	2f58      	cmp	r7, #88	; 0x58
 8001ee0:	f000 80c1 	beq.w	8002066 <_printf_i+0x1aa>
 8001ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001eec:	e03a      	b.n	8001f64 <_printf_i+0xa8>
 8001eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ef2:	2b15      	cmp	r3, #21
 8001ef4:	d8f6      	bhi.n	8001ee4 <_printf_i+0x28>
 8001ef6:	a101      	add	r1, pc, #4	; (adr r1, 8001efc <_printf_i+0x40>)
 8001ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001efc:	08001f55 	.word	0x08001f55
 8001f00:	08001f69 	.word	0x08001f69
 8001f04:	08001ee5 	.word	0x08001ee5
 8001f08:	08001ee5 	.word	0x08001ee5
 8001f0c:	08001ee5 	.word	0x08001ee5
 8001f10:	08001ee5 	.word	0x08001ee5
 8001f14:	08001f69 	.word	0x08001f69
 8001f18:	08001ee5 	.word	0x08001ee5
 8001f1c:	08001ee5 	.word	0x08001ee5
 8001f20:	08001ee5 	.word	0x08001ee5
 8001f24:	08001ee5 	.word	0x08001ee5
 8001f28:	0800206f 	.word	0x0800206f
 8001f2c:	08001f95 	.word	0x08001f95
 8001f30:	08002029 	.word	0x08002029
 8001f34:	08001ee5 	.word	0x08001ee5
 8001f38:	08001ee5 	.word	0x08001ee5
 8001f3c:	08002091 	.word	0x08002091
 8001f40:	08001ee5 	.word	0x08001ee5
 8001f44:	08001f95 	.word	0x08001f95
 8001f48:	08001ee5 	.word	0x08001ee5
 8001f4c:	08001ee5 	.word	0x08001ee5
 8001f50:	08002031 	.word	0x08002031
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	1d1a      	adds	r2, r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	602a      	str	r2, [r5, #0]
 8001f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0a0      	b.n	80020aa <_printf_i+0x1ee>
 8001f68:	6820      	ldr	r0, [r4, #0]
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	0607      	lsls	r7, r0, #24
 8001f6e:	f103 0104 	add.w	r1, r3, #4
 8001f72:	6029      	str	r1, [r5, #0]
 8001f74:	d501      	bpl.n	8001f7a <_printf_i+0xbe>
 8001f76:	681e      	ldr	r6, [r3, #0]
 8001f78:	e003      	b.n	8001f82 <_printf_i+0xc6>
 8001f7a:	0646      	lsls	r6, r0, #25
 8001f7c:	d5fb      	bpl.n	8001f76 <_printf_i+0xba>
 8001f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f82:	2e00      	cmp	r6, #0
 8001f84:	da03      	bge.n	8001f8e <_printf_i+0xd2>
 8001f86:	232d      	movs	r3, #45	; 0x2d
 8001f88:	4276      	negs	r6, r6
 8001f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f8e:	230a      	movs	r3, #10
 8001f90:	4859      	ldr	r0, [pc, #356]	; (80020f8 <_printf_i+0x23c>)
 8001f92:	e012      	b.n	8001fba <_printf_i+0xfe>
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	1d19      	adds	r1, r3, #4
 8001f9a:	6029      	str	r1, [r5, #0]
 8001f9c:	0605      	lsls	r5, r0, #24
 8001f9e:	d501      	bpl.n	8001fa4 <_printf_i+0xe8>
 8001fa0:	681e      	ldr	r6, [r3, #0]
 8001fa2:	e002      	b.n	8001faa <_printf_i+0xee>
 8001fa4:	0641      	lsls	r1, r0, #25
 8001fa6:	d5fb      	bpl.n	8001fa0 <_printf_i+0xe4>
 8001fa8:	881e      	ldrh	r6, [r3, #0]
 8001faa:	2f6f      	cmp	r7, #111	; 0x6f
 8001fac:	bf0c      	ite	eq
 8001fae:	2308      	moveq	r3, #8
 8001fb0:	230a      	movne	r3, #10
 8001fb2:	4851      	ldr	r0, [pc, #324]	; (80020f8 <_printf_i+0x23c>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fba:	6865      	ldr	r5, [r4, #4]
 8001fbc:	2d00      	cmp	r5, #0
 8001fbe:	bfa8      	it	ge
 8001fc0:	6821      	ldrge	r1, [r4, #0]
 8001fc2:	60a5      	str	r5, [r4, #8]
 8001fc4:	bfa4      	itt	ge
 8001fc6:	f021 0104 	bicge.w	r1, r1, #4
 8001fca:	6021      	strge	r1, [r4, #0]
 8001fcc:	b90e      	cbnz	r6, 8001fd2 <_printf_i+0x116>
 8001fce:	2d00      	cmp	r5, #0
 8001fd0:	d04b      	beq.n	800206a <_printf_i+0x1ae>
 8001fd2:	4615      	mov	r5, r2
 8001fd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8001fd8:	fb03 6711 	mls	r7, r3, r1, r6
 8001fdc:	5dc7      	ldrb	r7, [r0, r7]
 8001fde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001fe2:	4637      	mov	r7, r6
 8001fe4:	42bb      	cmp	r3, r7
 8001fe6:	460e      	mov	r6, r1
 8001fe8:	d9f4      	bls.n	8001fd4 <_printf_i+0x118>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d10b      	bne.n	8002006 <_printf_i+0x14a>
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	07de      	lsls	r6, r3, #31
 8001ff2:	d508      	bpl.n	8002006 <_printf_i+0x14a>
 8001ff4:	6923      	ldr	r3, [r4, #16]
 8001ff6:	6861      	ldr	r1, [r4, #4]
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	bfde      	ittt	le
 8001ffc:	2330      	movle	r3, #48	; 0x30
 8001ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002002:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002006:	1b52      	subs	r2, r2, r5
 8002008:	6122      	str	r2, [r4, #16]
 800200a:	464b      	mov	r3, r9
 800200c:	4621      	mov	r1, r4
 800200e:	4640      	mov	r0, r8
 8002010:	f8cd a000 	str.w	sl, [sp]
 8002014:	aa03      	add	r2, sp, #12
 8002016:	f7ff fedf 	bl	8001dd8 <_printf_common>
 800201a:	3001      	adds	r0, #1
 800201c:	d14a      	bne.n	80020b4 <_printf_i+0x1f8>
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	b004      	add	sp, #16
 8002024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	2778      	movs	r7, #120	; 0x78
 8002032:	4832      	ldr	r0, [pc, #200]	; (80020fc <_printf_i+0x240>)
 8002034:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	6829      	ldr	r1, [r5, #0]
 800203c:	061f      	lsls	r7, r3, #24
 800203e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002042:	d402      	bmi.n	800204a <_printf_i+0x18e>
 8002044:	065f      	lsls	r7, r3, #25
 8002046:	bf48      	it	mi
 8002048:	b2b6      	uxthmi	r6, r6
 800204a:	07df      	lsls	r7, r3, #31
 800204c:	bf48      	it	mi
 800204e:	f043 0320 	orrmi.w	r3, r3, #32
 8002052:	6029      	str	r1, [r5, #0]
 8002054:	bf48      	it	mi
 8002056:	6023      	strmi	r3, [r4, #0]
 8002058:	b91e      	cbnz	r6, 8002062 <_printf_i+0x1a6>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	f023 0320 	bic.w	r3, r3, #32
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	2310      	movs	r3, #16
 8002064:	e7a6      	b.n	8001fb4 <_printf_i+0xf8>
 8002066:	4824      	ldr	r0, [pc, #144]	; (80020f8 <_printf_i+0x23c>)
 8002068:	e7e4      	b.n	8002034 <_printf_i+0x178>
 800206a:	4615      	mov	r5, r2
 800206c:	e7bd      	b.n	8001fea <_printf_i+0x12e>
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	6826      	ldr	r6, [r4, #0]
 8002072:	1d18      	adds	r0, r3, #4
 8002074:	6961      	ldr	r1, [r4, #20]
 8002076:	6028      	str	r0, [r5, #0]
 8002078:	0635      	lsls	r5, r6, #24
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	d501      	bpl.n	8002082 <_printf_i+0x1c6>
 800207e:	6019      	str	r1, [r3, #0]
 8002080:	e002      	b.n	8002088 <_printf_i+0x1cc>
 8002082:	0670      	lsls	r0, r6, #25
 8002084:	d5fb      	bpl.n	800207e <_printf_i+0x1c2>
 8002086:	8019      	strh	r1, [r3, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	4615      	mov	r5, r2
 800208c:	6123      	str	r3, [r4, #16]
 800208e:	e7bc      	b.n	800200a <_printf_i+0x14e>
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	1d1a      	adds	r2, r3, #4
 8002096:	602a      	str	r2, [r5, #0]
 8002098:	681d      	ldr	r5, [r3, #0]
 800209a:	6862      	ldr	r2, [r4, #4]
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f9a1 	bl	80023e4 <memchr>
 80020a2:	b108      	cbz	r0, 80020a8 <_printf_i+0x1ec>
 80020a4:	1b40      	subs	r0, r0, r5
 80020a6:	6060      	str	r0, [r4, #4]
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	6123      	str	r3, [r4, #16]
 80020ac:	2300      	movs	r3, #0
 80020ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020b2:	e7aa      	b.n	800200a <_printf_i+0x14e>
 80020b4:	462a      	mov	r2, r5
 80020b6:	4649      	mov	r1, r9
 80020b8:	4640      	mov	r0, r8
 80020ba:	6923      	ldr	r3, [r4, #16]
 80020bc:	47d0      	blx	sl
 80020be:	3001      	adds	r0, #1
 80020c0:	d0ad      	beq.n	800201e <_printf_i+0x162>
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	079b      	lsls	r3, r3, #30
 80020c6:	d413      	bmi.n	80020f0 <_printf_i+0x234>
 80020c8:	68e0      	ldr	r0, [r4, #12]
 80020ca:	9b03      	ldr	r3, [sp, #12]
 80020cc:	4298      	cmp	r0, r3
 80020ce:	bfb8      	it	lt
 80020d0:	4618      	movlt	r0, r3
 80020d2:	e7a6      	b.n	8002022 <_printf_i+0x166>
 80020d4:	2301      	movs	r3, #1
 80020d6:	4632      	mov	r2, r6
 80020d8:	4649      	mov	r1, r9
 80020da:	4640      	mov	r0, r8
 80020dc:	47d0      	blx	sl
 80020de:	3001      	adds	r0, #1
 80020e0:	d09d      	beq.n	800201e <_printf_i+0x162>
 80020e2:	3501      	adds	r5, #1
 80020e4:	68e3      	ldr	r3, [r4, #12]
 80020e6:	9903      	ldr	r1, [sp, #12]
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	42ab      	cmp	r3, r5
 80020ec:	dcf2      	bgt.n	80020d4 <_printf_i+0x218>
 80020ee:	e7eb      	b.n	80020c8 <_printf_i+0x20c>
 80020f0:	2500      	movs	r5, #0
 80020f2:	f104 0619 	add.w	r6, r4, #25
 80020f6:	e7f5      	b.n	80020e4 <_printf_i+0x228>
 80020f8:	08002485 	.word	0x08002485
 80020fc:	08002496 	.word	0x08002496

08002100 <__sflush_r>:
 8002100:	898a      	ldrh	r2, [r1, #12]
 8002102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002104:	4605      	mov	r5, r0
 8002106:	0710      	lsls	r0, r2, #28
 8002108:	460c      	mov	r4, r1
 800210a:	d457      	bmi.n	80021bc <__sflush_r+0xbc>
 800210c:	684b      	ldr	r3, [r1, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	dc04      	bgt.n	800211c <__sflush_r+0x1c>
 8002112:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	dc01      	bgt.n	800211c <__sflush_r+0x1c>
 8002118:	2000      	movs	r0, #0
 800211a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800211c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800211e:	2e00      	cmp	r6, #0
 8002120:	d0fa      	beq.n	8002118 <__sflush_r+0x18>
 8002122:	2300      	movs	r3, #0
 8002124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002128:	682f      	ldr	r7, [r5, #0]
 800212a:	6a21      	ldr	r1, [r4, #32]
 800212c:	602b      	str	r3, [r5, #0]
 800212e:	d032      	beq.n	8002196 <__sflush_r+0x96>
 8002130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	075a      	lsls	r2, r3, #29
 8002136:	d505      	bpl.n	8002144 <__sflush_r+0x44>
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	1ac0      	subs	r0, r0, r3
 800213c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800213e:	b10b      	cbz	r3, 8002144 <__sflush_r+0x44>
 8002140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002142:	1ac0      	subs	r0, r0, r3
 8002144:	2300      	movs	r3, #0
 8002146:	4602      	mov	r2, r0
 8002148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800214a:	4628      	mov	r0, r5
 800214c:	6a21      	ldr	r1, [r4, #32]
 800214e:	47b0      	blx	r6
 8002150:	1c43      	adds	r3, r0, #1
 8002152:	89a3      	ldrh	r3, [r4, #12]
 8002154:	d106      	bne.n	8002164 <__sflush_r+0x64>
 8002156:	6829      	ldr	r1, [r5, #0]
 8002158:	291d      	cmp	r1, #29
 800215a:	d82b      	bhi.n	80021b4 <__sflush_r+0xb4>
 800215c:	4a28      	ldr	r2, [pc, #160]	; (8002200 <__sflush_r+0x100>)
 800215e:	410a      	asrs	r2, r1
 8002160:	07d6      	lsls	r6, r2, #31
 8002162:	d427      	bmi.n	80021b4 <__sflush_r+0xb4>
 8002164:	2200      	movs	r2, #0
 8002166:	6062      	str	r2, [r4, #4]
 8002168:	6922      	ldr	r2, [r4, #16]
 800216a:	04d9      	lsls	r1, r3, #19
 800216c:	6022      	str	r2, [r4, #0]
 800216e:	d504      	bpl.n	800217a <__sflush_r+0x7a>
 8002170:	1c42      	adds	r2, r0, #1
 8002172:	d101      	bne.n	8002178 <__sflush_r+0x78>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	b903      	cbnz	r3, 800217a <__sflush_r+0x7a>
 8002178:	6560      	str	r0, [r4, #84]	; 0x54
 800217a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800217c:	602f      	str	r7, [r5, #0]
 800217e:	2900      	cmp	r1, #0
 8002180:	d0ca      	beq.n	8002118 <__sflush_r+0x18>
 8002182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002186:	4299      	cmp	r1, r3
 8002188:	d002      	beq.n	8002190 <__sflush_r+0x90>
 800218a:	4628      	mov	r0, r5
 800218c:	f7ff fbee 	bl	800196c <_free_r>
 8002190:	2000      	movs	r0, #0
 8002192:	6360      	str	r0, [r4, #52]	; 0x34
 8002194:	e7c1      	b.n	800211a <__sflush_r+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	4628      	mov	r0, r5
 800219a:	47b0      	blx	r6
 800219c:	1c41      	adds	r1, r0, #1
 800219e:	d1c8      	bne.n	8002132 <__sflush_r+0x32>
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0c5      	beq.n	8002132 <__sflush_r+0x32>
 80021a6:	2b1d      	cmp	r3, #29
 80021a8:	d001      	beq.n	80021ae <__sflush_r+0xae>
 80021aa:	2b16      	cmp	r3, #22
 80021ac:	d101      	bne.n	80021b2 <__sflush_r+0xb2>
 80021ae:	602f      	str	r7, [r5, #0]
 80021b0:	e7b2      	b.n	8002118 <__sflush_r+0x18>
 80021b2:	89a3      	ldrh	r3, [r4, #12]
 80021b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b8:	81a3      	strh	r3, [r4, #12]
 80021ba:	e7ae      	b.n	800211a <__sflush_r+0x1a>
 80021bc:	690f      	ldr	r7, [r1, #16]
 80021be:	2f00      	cmp	r7, #0
 80021c0:	d0aa      	beq.n	8002118 <__sflush_r+0x18>
 80021c2:	0793      	lsls	r3, r2, #30
 80021c4:	bf18      	it	ne
 80021c6:	2300      	movne	r3, #0
 80021c8:	680e      	ldr	r6, [r1, #0]
 80021ca:	bf08      	it	eq
 80021cc:	694b      	ldreq	r3, [r1, #20]
 80021ce:	1bf6      	subs	r6, r6, r7
 80021d0:	600f      	str	r7, [r1, #0]
 80021d2:	608b      	str	r3, [r1, #8]
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	dd9f      	ble.n	8002118 <__sflush_r+0x18>
 80021d8:	4633      	mov	r3, r6
 80021da:	463a      	mov	r2, r7
 80021dc:	4628      	mov	r0, r5
 80021de:	6a21      	ldr	r1, [r4, #32]
 80021e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80021e4:	47e0      	blx	ip
 80021e6:	2800      	cmp	r0, #0
 80021e8:	dc06      	bgt.n	80021f8 <__sflush_r+0xf8>
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f4:	81a3      	strh	r3, [r4, #12]
 80021f6:	e790      	b.n	800211a <__sflush_r+0x1a>
 80021f8:	4407      	add	r7, r0
 80021fa:	1a36      	subs	r6, r6, r0
 80021fc:	e7ea      	b.n	80021d4 <__sflush_r+0xd4>
 80021fe:	bf00      	nop
 8002200:	dfbffffe 	.word	0xdfbffffe

08002204 <_fflush_r>:
 8002204:	b538      	push	{r3, r4, r5, lr}
 8002206:	690b      	ldr	r3, [r1, #16]
 8002208:	4605      	mov	r5, r0
 800220a:	460c      	mov	r4, r1
 800220c:	b913      	cbnz	r3, 8002214 <_fflush_r+0x10>
 800220e:	2500      	movs	r5, #0
 8002210:	4628      	mov	r0, r5
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	b118      	cbz	r0, 800221e <_fflush_r+0x1a>
 8002216:	6a03      	ldr	r3, [r0, #32]
 8002218:	b90b      	cbnz	r3, 800221e <_fflush_r+0x1a>
 800221a:	f7ff f9a7 	bl	800156c <__sinit>
 800221e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f3      	beq.n	800220e <_fflush_r+0xa>
 8002226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002228:	07d0      	lsls	r0, r2, #31
 800222a:	d404      	bmi.n	8002236 <_fflush_r+0x32>
 800222c:	0599      	lsls	r1, r3, #22
 800222e:	d402      	bmi.n	8002236 <_fflush_r+0x32>
 8002230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002232:	f7ff fb98 	bl	8001966 <__retarget_lock_acquire_recursive>
 8002236:	4628      	mov	r0, r5
 8002238:	4621      	mov	r1, r4
 800223a:	f7ff ff61 	bl	8002100 <__sflush_r>
 800223e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002240:	4605      	mov	r5, r0
 8002242:	07da      	lsls	r2, r3, #31
 8002244:	d4e4      	bmi.n	8002210 <_fflush_r+0xc>
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	059b      	lsls	r3, r3, #22
 800224a:	d4e1      	bmi.n	8002210 <_fflush_r+0xc>
 800224c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800224e:	f7ff fb8b 	bl	8001968 <__retarget_lock_release_recursive>
 8002252:	e7dd      	b.n	8002210 <_fflush_r+0xc>

08002254 <__swhatbuf_r>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460c      	mov	r4, r1
 8002258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225c:	4615      	mov	r5, r2
 800225e:	2900      	cmp	r1, #0
 8002260:	461e      	mov	r6, r3
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	da0c      	bge.n	8002280 <__swhatbuf_r+0x2c>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	2100      	movs	r1, #0
 800226a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800226e:	bf0c      	ite	eq
 8002270:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002274:	2340      	movne	r3, #64	; 0x40
 8002276:	2000      	movs	r0, #0
 8002278:	6031      	str	r1, [r6, #0]
 800227a:	602b      	str	r3, [r5, #0]
 800227c:	b016      	add	sp, #88	; 0x58
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	466a      	mov	r2, sp
 8002282:	f000 f87d 	bl	8002380 <_fstat_r>
 8002286:	2800      	cmp	r0, #0
 8002288:	dbed      	blt.n	8002266 <__swhatbuf_r+0x12>
 800228a:	9901      	ldr	r1, [sp, #4]
 800228c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002290:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002294:	4259      	negs	r1, r3
 8002296:	4159      	adcs	r1, r3
 8002298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229c:	e7eb      	b.n	8002276 <__swhatbuf_r+0x22>

0800229e <__smakebuf_r>:
 800229e:	898b      	ldrh	r3, [r1, #12]
 80022a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022a2:	079d      	lsls	r5, r3, #30
 80022a4:	4606      	mov	r6, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	d507      	bpl.n	80022ba <__smakebuf_r+0x1c>
 80022aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022ae:	6023      	str	r3, [r4, #0]
 80022b0:	6123      	str	r3, [r4, #16]
 80022b2:	2301      	movs	r3, #1
 80022b4:	6163      	str	r3, [r4, #20]
 80022b6:	b002      	add	sp, #8
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	466a      	mov	r2, sp
 80022bc:	ab01      	add	r3, sp, #4
 80022be:	f7ff ffc9 	bl	8002254 <__swhatbuf_r>
 80022c2:	9900      	ldr	r1, [sp, #0]
 80022c4:	4605      	mov	r5, r0
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff fbb8 	bl	8001a3c <_malloc_r>
 80022cc:	b948      	cbnz	r0, 80022e2 <__smakebuf_r+0x44>
 80022ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022d2:	059a      	lsls	r2, r3, #22
 80022d4:	d4ef      	bmi.n	80022b6 <__smakebuf_r+0x18>
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	81a3      	strh	r3, [r4, #12]
 80022e0:	e7e3      	b.n	80022aa <__smakebuf_r+0xc>
 80022e2:	89a3      	ldrh	r3, [r4, #12]
 80022e4:	6020      	str	r0, [r4, #0]
 80022e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ea:	81a3      	strh	r3, [r4, #12]
 80022ec:	9b00      	ldr	r3, [sp, #0]
 80022ee:	6120      	str	r0, [r4, #16]
 80022f0:	6163      	str	r3, [r4, #20]
 80022f2:	9b01      	ldr	r3, [sp, #4]
 80022f4:	b15b      	cbz	r3, 800230e <__smakebuf_r+0x70>
 80022f6:	4630      	mov	r0, r6
 80022f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fc:	f000 f852 	bl	80023a4 <_isatty_r>
 8002300:	b128      	cbz	r0, 800230e <__smakebuf_r+0x70>
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	431d      	orrs	r5, r3
 8002312:	81a5      	strh	r5, [r4, #12]
 8002314:	e7cf      	b.n	80022b6 <__smakebuf_r+0x18>

08002316 <_putc_r>:
 8002316:	b570      	push	{r4, r5, r6, lr}
 8002318:	460d      	mov	r5, r1
 800231a:	4614      	mov	r4, r2
 800231c:	4606      	mov	r6, r0
 800231e:	b118      	cbz	r0, 8002328 <_putc_r+0x12>
 8002320:	6a03      	ldr	r3, [r0, #32]
 8002322:	b90b      	cbnz	r3, 8002328 <_putc_r+0x12>
 8002324:	f7ff f922 	bl	800156c <__sinit>
 8002328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800232a:	07d8      	lsls	r0, r3, #31
 800232c:	d405      	bmi.n	800233a <_putc_r+0x24>
 800232e:	89a3      	ldrh	r3, [r4, #12]
 8002330:	0599      	lsls	r1, r3, #22
 8002332:	d402      	bmi.n	800233a <_putc_r+0x24>
 8002334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002336:	f7ff fb16 	bl	8001966 <__retarget_lock_acquire_recursive>
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	60a3      	str	r3, [r4, #8]
 8002342:	da05      	bge.n	8002350 <_putc_r+0x3a>
 8002344:	69a2      	ldr	r2, [r4, #24]
 8002346:	4293      	cmp	r3, r2
 8002348:	db12      	blt.n	8002370 <_putc_r+0x5a>
 800234a:	b2eb      	uxtb	r3, r5
 800234c:	2b0a      	cmp	r3, #10
 800234e:	d00f      	beq.n	8002370 <_putc_r+0x5a>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	6022      	str	r2, [r4, #0]
 8002356:	701d      	strb	r5, [r3, #0]
 8002358:	b2ed      	uxtb	r5, r5
 800235a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800235c:	07da      	lsls	r2, r3, #31
 800235e:	d405      	bmi.n	800236c <_putc_r+0x56>
 8002360:	89a3      	ldrh	r3, [r4, #12]
 8002362:	059b      	lsls	r3, r3, #22
 8002364:	d402      	bmi.n	800236c <_putc_r+0x56>
 8002366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002368:	f7ff fafe 	bl	8001968 <__retarget_lock_release_recursive>
 800236c:	4628      	mov	r0, r5
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	4629      	mov	r1, r5
 8002372:	4622      	mov	r2, r4
 8002374:	4630      	mov	r0, r6
 8002376:	f7ff f9e8 	bl	800174a <__swbuf_r>
 800237a:	4605      	mov	r5, r0
 800237c:	e7ed      	b.n	800235a <_putc_r+0x44>
	...

08002380 <_fstat_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	2300      	movs	r3, #0
 8002384:	4d06      	ldr	r5, [pc, #24]	; (80023a0 <_fstat_r+0x20>)
 8002386:	4604      	mov	r4, r0
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	602b      	str	r3, [r5, #0]
 800238e:	f7fe fede 	bl	800114e <_fstat>
 8002392:	1c43      	adds	r3, r0, #1
 8002394:	d102      	bne.n	800239c <_fstat_r+0x1c>
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	b103      	cbz	r3, 800239c <_fstat_r+0x1c>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	bd38      	pop	{r3, r4, r5, pc}
 800239e:	bf00      	nop
 80023a0:	200002e0 	.word	0x200002e0

080023a4 <_isatty_r>:
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	2300      	movs	r3, #0
 80023a8:	4d05      	ldr	r5, [pc, #20]	; (80023c0 <_isatty_r+0x1c>)
 80023aa:	4604      	mov	r4, r0
 80023ac:	4608      	mov	r0, r1
 80023ae:	602b      	str	r3, [r5, #0]
 80023b0:	f7ff f834 	bl	800141c <_isatty>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_isatty_r+0x1a>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_isatty_r+0x1a>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	200002e0 	.word	0x200002e0

080023c4 <_sbrk_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	2300      	movs	r3, #0
 80023c8:	4d05      	ldr	r5, [pc, #20]	; (80023e0 <_sbrk_r+0x1c>)
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	f7fd fffa 	bl	80003c8 <_sbrk>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_sbrk_r+0x1a>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_sbrk_r+0x1a>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	200002e0 	.word	0x200002e0

080023e4 <memchr>:
 80023e4:	4603      	mov	r3, r0
 80023e6:	b510      	push	{r4, lr}
 80023e8:	b2c9      	uxtb	r1, r1
 80023ea:	4402      	add	r2, r0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	d101      	bne.n	80023f6 <memchr+0x12>
 80023f2:	2000      	movs	r0, #0
 80023f4:	e003      	b.n	80023fe <memchr+0x1a>
 80023f6:	7804      	ldrb	r4, [r0, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	428c      	cmp	r4, r1
 80023fc:	d1f6      	bne.n	80023ec <memchr+0x8>
 80023fe:	bd10      	pop	{r4, pc}

08002400 <_init>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	bf00      	nop
 8002404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002406:	bc08      	pop	{r3}
 8002408:	469e      	mov	lr, r3
 800240a:	4770      	bx	lr

0800240c <_fini>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr
