
Blink_OCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080026c4  080026c4  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c4  080026c4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080026cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000d4  080027a0  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080027a0  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bc6  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dec  00000000  00000000  00022d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00023af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000029e  00000000  00000000  00023ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000165c0  00000000  00000000  00024146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000467d  00000000  00000000  0003a706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f716  00000000  00000000  0003ed83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000192c  00000000  00000000  000be49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000bfdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	0800261c 	.word	0x0800261c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <leds_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void leds_init()
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
	//set PB12 in output push-pull
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000162:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <leds_init+0x74>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a1a      	ldr	r2, [pc, #104]	; (80001d0 <leds_init+0x74>)
 8000168:	f043 0308 	orr.w	r3, r3, #8
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <leds_init+0x74>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0308 	and.w	r3, r3, #8
 8000176:	60bb      	str	r3, [r7, #8]
 8000178:	68bb      	ldr	r3, [r7, #8]
	uint32_t * GPIOB_CRH = (uint32_t *) (GPIOB_BASE_ARR + 0x04);
 800017a:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <leds_init+0x78>)
 800017c:	60fb      	str	r3, [r7, #12]
	*GPIOB_CRH |= (0b11 << 16);// set PB12 in OUTPUT mode speed 50MHz
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	601a      	str	r2, [r3, #0]

	*GPIOB_CRH &= ~(0b11 << 18); //set PB12 output push-pull
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	601a      	str	r2, [r3, #0]

	//set PC13 in output push-pull
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <leds_init+0x74>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	4a0d      	ldr	r2, [pc, #52]	; (80001d0 <leds_init+0x74>)
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6193      	str	r3, [r2, #24]
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <leds_init+0x74>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	f003 0310 	and.w	r3, r3, #16
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]

	GPIOC->CRH &= ~(0xF<<20);  // Clear Bits 23:22:21:20
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <leds_init+0x7c>)
 80001b0:	685b      	ldr	r3, [r3, #4]
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <leds_init+0x7c>)
 80001b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001b8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1<<20);  // PC13 Output mode 10 MHz, push pull
 80001ba:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <leds_init+0x7c>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <leds_init+0x7c>)
 80001c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c4:	6053      	str	r3, [r2, #4]
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010c04 	.word	0x40010c04
 80001d8:	40011000 	.word	0x40011000

080001dc <led_toggle>:
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}

void led_toggle(){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
	uint32_t * GPIOB_ODR = (uint32_t *) (GPIOB_BASE_ARR + 0x0C);
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <led_toggle+0x3c>)
 80001e4:	607b      	str	r3, [r7, #4]

	if(((* GPIOB_ODR >> 12)&1)==0)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d106      	bne.n	8000200 <led_toggle+0x24>
	{

		*GPIOB_ODR |= (1<<12);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}
 80001fe:	e005      	b.n	800020c <led_toggle+0x30>
		*GPIOB_ODR &= ~(1<<12);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40010c0c 	.word	0x40010c0c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000220:	f001 f8a6 	bl	8001370 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f93c 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f860 	bl	80002f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  leds_init();
 8000230:	f7ff ff94 	bl	800015c <leds_init>
  printf("Hello, World!\n");
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <main+0x4c>)
 8000236:	f001 fab5 	bl	80017a4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Enter string:\n");
 800023a:	480c      	ldr	r0, [pc, #48]	; (800026c <main+0x50>)
 800023c:	f001 fab2 	bl	80017a4 <puts>
	  fgets(buff, sizeof(buff), stdin);
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x54>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	461a      	mov	r2, r3
 8000248:	2164      	movs	r1, #100	; 0x64
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <main+0x58>)
 800024c:	f001 f970 	bl	8001530 <fgets>
	  printf(buff);
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0x58>)
 8000252:	f001 fa39 	bl	80016c8 <iprintf>
	  printf("\n");
 8000256:	200a      	movs	r0, #10
 8000258:	f001 fa48 	bl	80016ec <putchar>
	  led_toggle();
 800025c:	f7ff ffbe 	bl	80001dc <led_toggle>
	  HAL_Delay(100);
 8000260:	2064      	movs	r0, #100	; 0x64
 8000262:	f000 f97f 	bl	8000564 <HAL_Delay>
	  printf("Enter string:\n");
 8000266:	e7e8      	b.n	800023a <main+0x1e>
 8000268:	08002634 	.word	0x08002634
 800026c:	08002644 	.word	0x08002644
 8000270:	200000d0 	.word	0x200000d0
 8000274:	20000000 	.word	0x20000000

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fbf4 	bl	8001a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fa60 	bl	8000774 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ba:	f000 f82f 	bl	800031c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fcce 	bl	8000c78 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f81b 	bl	800031c <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_GPIO_Init+0x28>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <MX_GPIO_Init+0x28>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <MX_GPIO_Init+0x28>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0304 	and.w	r3, r3, #4
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000320:	b672      	cpsid	i
}
 8000322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000324:	e7fe      	b.n	8000324 <Error_Handler+0x8>
	...

08000328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <HAL_MspInit+0x5c>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a14      	ldr	r2, [pc, #80]	; (8000384 <HAL_MspInit+0x5c>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x5c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x5c>)
 800034c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000350:	61d3      	str	r3, [r2, #28]
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <HAL_MspInit+0x60>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <HAL_MspInit+0x60>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <NMI_Handler+0x4>

08000392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <HardFault_Handler+0x4>

08000398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <MemManage_Handler+0x4>

0800039e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <BusFault_Handler+0x4>

080003a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <UsageFault_Handler+0x4>

080003aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d2:	f000 f8ab 	bl	800052c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <_sbrk+0x5c>)
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <_sbrk+0x60>)
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d102      	bne.n	80003fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <_sbrk+0x64>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <_sbrk+0x68>)
 80003fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <_sbrk+0x64>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	693a      	ldr	r2, [r7, #16]
 8000408:	429a      	cmp	r2, r3
 800040a:	d207      	bcs.n	800041c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800040c:	f001 fb80 	bl	8001b10 <__errno>
 8000410:	4603      	mov	r3, r0
 8000412:	220c      	movs	r2, #12
 8000414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
 800041a:	e009      	b.n	8000430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <_sbrk+0x64>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <_sbrk+0x64>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <_sbrk+0x64>)
 800042c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20005000 	.word	0x20005000
 800043c:	00000400 	.word	0x00000400
 8000440:	200000f0 	.word	0x200000f0
 8000444:	200002f0 	.word	0x200002f0

08000448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000454:	f7ff fff8 	bl	8000448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800045a:	490c      	ldr	r1, [pc, #48]	; (800048c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a09      	ldr	r2, [pc, #36]	; (8000494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000470:	4c09      	ldr	r4, [pc, #36]	; (8000498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047e:	f001 fb4d 	bl	8001b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff fecb 	bl	800021c <main>
  bx lr
 8000486:	4770      	bx	lr
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000490:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 8000494:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000498:	200002f0 	.word	0x200002f0

0800049c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_2_IRQHandler>
	...

080004a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_Init+0x28>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <HAL_Init+0x28>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f92b 	bl	800070c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004b6:	200f      	movs	r0, #15
 80004b8:	f000 f808 	bl	80004cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004bc:	f7ff ff34 	bl	8000328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40022000 	.word	0x40022000

080004cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_InitTick+0x54>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_InitTick+0x58>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f935 	bl	800075a <HAL_SYSTICK_Config>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e00e      	b.n	8000518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	d80a      	bhi.n	8000516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000500:	2200      	movs	r2, #0
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	f04f 30ff 	mov.w	r0, #4294967295
 8000508:	f000 f90b 	bl	8000722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050c:	4a06      	ldr	r2, [pc, #24]	; (8000528 <HAL_InitTick+0x5c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000064 	.word	0x20000064
 8000524:	2000006c 	.word	0x2000006c
 8000528:	20000068 	.word	0x20000068

0800052c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_IncTick+0x1c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_IncTick+0x20>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x20>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	2000006c 	.word	0x2000006c
 800054c:	200000f4 	.word	0x200000f4

08000550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return uwTick;
 8000554:	4b02      	ldr	r3, [pc, #8]	; (8000560 <HAL_GetTick+0x10>)
 8000556:	681b      	ldr	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	200000f4 	.word	0x200000f4

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff0 	bl	8000550 <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffe0 	bl	8000550 <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000006c 	.word	0x2000006c

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d8:	d301      	bcc.n	80006de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2301      	movs	r3, #1
 80006dc:	e00f      	b.n	80006fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <SysTick_Config+0x40>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e6:	210f      	movs	r1, #15
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f7ff ff90 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <SysTick_Config+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <SysTick_Config+0x40>)
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010

0800070c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff49 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000734:	f7ff ff5e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ff90 	bl	8000664 <NVIC_EncodePriority>
 8000744:	4602      	mov	r2, r0
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5f 	bl	8000610 <__NVIC_SetPriority>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffb0 	bl	80006c8 <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e272      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 8087 	beq.w	80008a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000794:	4b92      	ldr	r3, [pc, #584]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f003 030c 	and.w	r3, r3, #12
 800079c:	2b04      	cmp	r3, #4
 800079e:	d00c      	beq.n	80007ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007a0:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 030c 	and.w	r3, r3, #12
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d112      	bne.n	80007d2 <HAL_RCC_OscConfig+0x5e>
 80007ac:	4b8c      	ldr	r3, [pc, #560]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007b8:	d10b      	bne.n	80007d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ba:	4b89      	ldr	r3, [pc, #548]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d06c      	beq.n	80008a0 <HAL_RCC_OscConfig+0x12c>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d168      	bne.n	80008a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e24c      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007da:	d106      	bne.n	80007ea <HAL_RCC_OscConfig+0x76>
 80007dc:	4b80      	ldr	r3, [pc, #512]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a7f      	ldr	r2, [pc, #508]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	e02e      	b.n	8000848 <HAL_RCC_OscConfig+0xd4>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10c      	bne.n	800080c <HAL_RCC_OscConfig+0x98>
 80007f2:	4b7b      	ldr	r3, [pc, #492]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a7a      	ldr	r2, [pc, #488]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a77      	ldr	r2, [pc, #476]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e01d      	b.n	8000848 <HAL_RCC_OscConfig+0xd4>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000814:	d10c      	bne.n	8000830 <HAL_RCC_OscConfig+0xbc>
 8000816:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a71      	ldr	r2, [pc, #452]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b6f      	ldr	r3, [pc, #444]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a6e      	ldr	r2, [pc, #440]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e00b      	b.n	8000848 <HAL_RCC_OscConfig+0xd4>
 8000830:	4b6b      	ldr	r3, [pc, #428]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a6a      	ldr	r2, [pc, #424]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a67      	ldr	r2, [pc, #412]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000846:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000850:	f7ff fe7e 	bl	8000550 <HAL_GetTick>
 8000854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000856:	e008      	b.n	800086a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000858:	f7ff fe7a 	bl	8000550 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	2b64      	cmp	r3, #100	; 0x64
 8000864:	d901      	bls.n	800086a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000866:	2303      	movs	r3, #3
 8000868:	e200      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086a:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f0      	beq.n	8000858 <HAL_RCC_OscConfig+0xe4>
 8000876:	e014      	b.n	80008a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff fe6a 	bl	8000550 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000880:	f7ff fe66 	bl	8000550 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b64      	cmp	r3, #100	; 0x64
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e1ec      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000892:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f0      	bne.n	8000880 <HAL_RCC_OscConfig+0x10c>
 800089e:	e000      	b.n	80008a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d063      	beq.n	8000976 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 030c 	and.w	r3, r3, #12
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 030c 	and.w	r3, r3, #12
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	d11c      	bne.n	8000900 <HAL_RCC_OscConfig+0x18c>
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d116      	bne.n	8000900 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d005      	beq.n	80008ea <HAL_RCC_OscConfig+0x176>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d001      	beq.n	80008ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e1c0      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4939      	ldr	r1, [pc, #228]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fe:	e03a      	b.n	8000976 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d020      	beq.n	800094a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800090e:	f7ff fe1f 	bl	8000550 <HAL_GetTick>
 8000912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000914:	e008      	b.n	8000928 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000916:	f7ff fe1b 	bl	8000550 <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d901      	bls.n	8000928 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000924:	2303      	movs	r3, #3
 8000926:	e1a1      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f0      	beq.n	8000916 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4927      	ldr	r1, [pc, #156]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 8000944:	4313      	orrs	r3, r2
 8000946:	600b      	str	r3, [r1, #0]
 8000948:	e015      	b.n	8000976 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000950:	f7ff fdfe 	bl	8000550 <HAL_GetTick>
 8000954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000956:	e008      	b.n	800096a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000958:	f7ff fdfa 	bl	8000550 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d901      	bls.n	800096a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e180      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f0      	bne.n	8000958 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	2b00      	cmp	r3, #0
 8000980:	d03a      	beq.n	80009f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d019      	beq.n	80009be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_RCC_OscConfig+0x274>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000990:	f7ff fdde 	bl	8000550 <HAL_GetTick>
 8000994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000998:	f7ff fdda 	bl	8000550 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e160      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f0      	beq.n	8000998 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fa9c 	bl	8000ef4 <RCC_Delay>
 80009bc:	e01c      	b.n	80009f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_RCC_OscConfig+0x274>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c4:	f7ff fdc4 	bl	8000550 <HAL_GetTick>
 80009c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ca:	e00f      	b.n	80009ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009cc:	f7ff fdc0 	bl	8000550 <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d908      	bls.n	80009ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009da:	2303      	movs	r3, #3
 80009dc:	e146      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	42420000 	.word	0x42420000
 80009e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ec:	4b92      	ldr	r3, [pc, #584]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e9      	bne.n	80009cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f000 80a6 	beq.w	8000b52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a0a:	4b8b      	ldr	r3, [pc, #556]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10d      	bne.n	8000a32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b88      	ldr	r3, [pc, #544]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a87      	ldr	r2, [pc, #540]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b85      	ldr	r3, [pc, #532]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a32:	4b82      	ldr	r3, [pc, #520]	; (8000c3c <HAL_RCC_OscConfig+0x4c8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d118      	bne.n	8000a70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	; (8000c3c <HAL_RCC_OscConfig+0x4c8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a7e      	ldr	r2, [pc, #504]	; (8000c3c <HAL_RCC_OscConfig+0x4c8>)
 8000a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fd81 	bl	8000550 <HAL_GetTick>
 8000a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a50:	e008      	b.n	8000a64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a52:	f7ff fd7d 	bl	8000550 <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b64      	cmp	r3, #100	; 0x64
 8000a5e:	d901      	bls.n	8000a64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e103      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	4b75      	ldr	r3, [pc, #468]	; (8000c3c <HAL_RCC_OscConfig+0x4c8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f0      	beq.n	8000a52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d106      	bne.n	8000a86 <HAL_RCC_OscConfig+0x312>
 8000a78:	4b6f      	ldr	r3, [pc, #444]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	4a6e      	ldr	r2, [pc, #440]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6213      	str	r3, [r2, #32]
 8000a84:	e02d      	b.n	8000ae2 <HAL_RCC_OscConfig+0x36e>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10c      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x334>
 8000a8e:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	4a69      	ldr	r2, [pc, #420]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a94:	f023 0301 	bic.w	r3, r3, #1
 8000a98:	6213      	str	r3, [r2, #32]
 8000a9a:	4b67      	ldr	r3, [pc, #412]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	4a66      	ldr	r2, [pc, #408]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000aa0:	f023 0304 	bic.w	r3, r3, #4
 8000aa4:	6213      	str	r3, [r2, #32]
 8000aa6:	e01c      	b.n	8000ae2 <HAL_RCC_OscConfig+0x36e>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d10c      	bne.n	8000aca <HAL_RCC_OscConfig+0x356>
 8000ab0:	4b61      	ldr	r3, [pc, #388]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	4a60      	ldr	r2, [pc, #384]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6213      	str	r3, [r2, #32]
 8000abc:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000abe:	6a1b      	ldr	r3, [r3, #32]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6213      	str	r3, [r2, #32]
 8000ac8:	e00b      	b.n	8000ae2 <HAL_RCC_OscConfig+0x36e>
 8000aca:	4b5b      	ldr	r3, [pc, #364]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	6213      	str	r3, [r2, #32]
 8000ad6:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	4a57      	ldr	r2, [pc, #348]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	f023 0304 	bic.w	r3, r3, #4
 8000ae0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d015      	beq.n	8000b16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aea:	f7ff fd31 	bl	8000550 <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af0:	e00a      	b.n	8000b08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af2:	f7ff fd2d 	bl	8000550 <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d901      	bls.n	8000b08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b04:	2303      	movs	r3, #3
 8000b06:	e0b1      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b08:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0ee      	beq.n	8000af2 <HAL_RCC_OscConfig+0x37e>
 8000b14:	e014      	b.n	8000b40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fd1b 	bl	8000550 <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	e00a      	b.n	8000b34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fd17 	bl	8000550 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d901      	bls.n	8000b34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e09b      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1ee      	bne.n	8000b1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d105      	bne.n	8000b52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8087 	beq.w	8000c6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d061      	beq.n	8000c2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69db      	ldr	r3, [r3, #28]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d146      	bne.n	8000bfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_RCC_OscConfig+0x4cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b76:	f7ff fceb 	bl	8000550 <HAL_GetTick>
 8000b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b7c:	e008      	b.n	8000b90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7e:	f7ff fce7 	bl	8000550 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d901      	bls.n	8000b90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	e06d      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f0      	bne.n	8000b7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d108      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	4921      	ldr	r1, [pc, #132]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a19      	ldr	r1, [r3, #32]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	491b      	ldr	r1, [pc, #108]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_RCC_OscConfig+0x4cc>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd6:	f7ff fcbb 	bl	8000550 <HAL_GetTick>
 8000bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bdc:	e008      	b.n	8000bf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bde:	f7ff fcb7 	bl	8000550 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e03d      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f0      	beq.n	8000bde <HAL_RCC_OscConfig+0x46a>
 8000bfc:	e035      	b.n	8000c6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_RCC_OscConfig+0x4cc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fca4 	bl	8000550 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c0c:	f7ff fca0 	bl	8000550 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e026      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_RCC_OscConfig+0x4c4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x498>
 8000c2a:	e01e      	b.n	8000c6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d107      	bne.n	8000c44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e019      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40007000 	.word	0x40007000
 8000c40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_RCC_OscConfig+0x500>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d106      	bne.n	8000c66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d001      	beq.n	8000c6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e0d0      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c8c:	4b6a      	ldr	r3, [pc, #424]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d910      	bls.n	8000cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 0207 	bic.w	r2, r3, #7
 8000ca2:	4965      	ldr	r1, [pc, #404]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d001      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e0b8      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d020      	beq.n	8000d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d005      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd4:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a58      	ldr	r2, [pc, #352]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf8:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	494d      	ldr	r1, [pc, #308]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d040      	beq.n	8000d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d107      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d115      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e07f      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d107      	bne.n	8000d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d36:	4b41      	ldr	r3, [pc, #260]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e073      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e06b      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f023 0203 	bic.w	r2, r3, #3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4936      	ldr	r1, [pc, #216]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d68:	f7ff fbf2 	bl	8000550 <HAL_GetTick>
 8000d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d6e:	e00a      	b.n	8000d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d70:	f7ff fbee 	bl	8000550 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e053      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 020c 	and.w	r2, r3, #12
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d1eb      	bne.n	8000d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d210      	bcs.n	8000dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 0207 	bic.w	r2, r3, #7
 8000dae:	4922      	ldr	r1, [pc, #136]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e032      	b.n	8000e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4916      	ldr	r1, [pc, #88]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d009      	beq.n	8000e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	490e      	ldr	r1, [pc, #56]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e06:	f000 f821 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	490a      	ldr	r1, [pc, #40]	; (8000e40 <HAL_RCC_ClockConfig+0x1c8>)
 8000e18:	5ccb      	ldrb	r3, [r1, r3]
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_RCC_ClockConfig+0x1cc>)
 8000e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_RCC_ClockConfig+0x1d0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb50 	bl	80004cc <HAL_InitTick>

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	08002654 	.word	0x08002654
 8000e44:	20000064 	.word	0x20000064
 8000e48:	20000068 	.word	0x20000068

08000e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d002      	beq.n	8000e7c <HAL_RCC_GetSysClockFreq+0x30>
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d003      	beq.n	8000e82 <HAL_RCC_GetSysClockFreq+0x36>
 8000e7a:	e027      	b.n	8000ecc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e7e:	613b      	str	r3, [r7, #16]
      break;
 8000e80:	e027      	b.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	0c9b      	lsrs	r3, r3, #18
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d010      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	0c5b      	lsrs	r3, r3, #17
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eae:	fb03 f202 	mul.w	r2, r3, r2
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e004      	b.n	8000ec6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	613b      	str	r3, [r7, #16]
      break;
 8000eca:	e002      	b.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ece:	613b      	str	r3, [r7, #16]
      break;
 8000ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ed2:	693b      	ldr	r3, [r7, #16]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	007a1200 	.word	0x007a1200
 8000ee8:	08002664 	.word	0x08002664
 8000eec:	08002674 	.word	0x08002674
 8000ef0:	003d0900 	.word	0x003d0900

08000ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <RCC_Delay+0x34>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <RCC_Delay+0x38>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0a5b      	lsrs	r3, r3, #9
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f10:	bf00      	nop
  }
  while (Delay --);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	60fa      	str	r2, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f9      	bne.n	8000f10 <RCC_Delay+0x1c>
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000064 	.word	0x20000064
 8000f2c:	10624dd3 	.word	0x10624dd3

08000f30 <findslot>:
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <findslot+0x2c>)
 8000f32:	b510      	push	{r4, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	b118      	cbz	r0, 8000f42 <findslot+0x12>
 8000f3a:	6a03      	ldr	r3, [r0, #32]
 8000f3c:	b90b      	cbnz	r3, 8000f42 <findslot+0x12>
 8000f3e:	f000 fb8d 	bl	800165c <__sinit>
 8000f42:	2c13      	cmp	r4, #19
 8000f44:	d807      	bhi.n	8000f56 <findslot+0x26>
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <findslot+0x30>)
 8000f48:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	d002      	beq.n	8000f56 <findslot+0x26>
 8000f50:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	2000      	movs	r0, #0
 8000f58:	e7fc      	b.n	8000f54 <findslot+0x24>
 8000f5a:	bf00      	nop
 8000f5c:	200000d0 	.word	0x200000d0
 8000f60:	20000104 	.word	0x20000104

08000f64 <error>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	4604      	mov	r4, r0
 8000f68:	f000 fdd2 	bl	8001b10 <__errno>
 8000f6c:	2613      	movs	r6, #19
 8000f6e:	4605      	mov	r5, r0
 8000f70:	2700      	movs	r7, #0
 8000f72:	4630      	mov	r0, r6
 8000f74:	4639      	mov	r1, r7
 8000f76:	beab      	bkpt	0x00ab
 8000f78:	4606      	mov	r6, r0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	602e      	str	r6, [r5, #0]
 8000f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f80 <checkerror>:
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d101      	bne.n	8000f88 <checkerror+0x8>
 8000f84:	f7ff bfee 	b.w	8000f64 <error>
 8000f88:	4770      	bx	lr

08000f8a <_swiread>:
 8000f8a:	b530      	push	{r4, r5, lr}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	2406      	movs	r4, #6
 8000f90:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000f94:	9203      	str	r2, [sp, #12]
 8000f96:	ad01      	add	r5, sp, #4
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	beab      	bkpt	0x00ab
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff ffed 	bl	8000f80 <checkerror>
 8000fa6:	b005      	add	sp, #20
 8000fa8:	bd30      	pop	{r4, r5, pc}

08000faa <_read>:
 8000faa:	b570      	push	{r4, r5, r6, lr}
 8000fac:	460e      	mov	r6, r1
 8000fae:	4615      	mov	r5, r2
 8000fb0:	f7ff ffbe 	bl	8000f30 <findslot>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	b930      	cbnz	r0, 8000fc6 <_read+0x1c>
 8000fb8:	f000 fdaa 	bl	8001b10 <__errno>
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	4631      	mov	r1, r6
 8000fca:	6800      	ldr	r0, [r0, #0]
 8000fcc:	f7ff ffdd 	bl	8000f8a <_swiread>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	bf1f      	itttt	ne
 8000fd4:	6863      	ldrne	r3, [r4, #4]
 8000fd6:	1a28      	subne	r0, r5, r0
 8000fd8:	181b      	addne	r3, r3, r0
 8000fda:	6063      	strne	r3, [r4, #4]
 8000fdc:	e7f2      	b.n	8000fc4 <_read+0x1a>

08000fde <_swilseek>:
 8000fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	4616      	mov	r6, r2
 8000fe4:	f7ff ffa4 	bl	8000f30 <findslot>
 8000fe8:	4605      	mov	r5, r0
 8000fea:	b940      	cbnz	r0, 8000ffe <_swilseek+0x20>
 8000fec:	f000 fd90 	bl	8001b10 <__errno>
 8000ff0:	2309      	movs	r3, #9
 8000ff2:	6003      	str	r3, [r0, #0]
 8000ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	b003      	add	sp, #12
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffe:	2e02      	cmp	r6, #2
 8001000:	d903      	bls.n	800100a <_swilseek+0x2c>
 8001002:	f000 fd85 	bl	8001b10 <__errno>
 8001006:	2316      	movs	r3, #22
 8001008:	e7f3      	b.n	8000ff2 <_swilseek+0x14>
 800100a:	2e01      	cmp	r6, #1
 800100c:	d112      	bne.n	8001034 <_swilseek+0x56>
 800100e:	6843      	ldr	r3, [r0, #4]
 8001010:	18e4      	adds	r4, r4, r3
 8001012:	d4f6      	bmi.n	8001002 <_swilseek+0x24>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	260a      	movs	r6, #10
 8001018:	466f      	mov	r7, sp
 800101a:	e9cd 3400 	strd	r3, r4, [sp]
 800101e:	4630      	mov	r0, r6
 8001020:	4639      	mov	r1, r7
 8001022:	beab      	bkpt	0x00ab
 8001024:	4606      	mov	r6, r0
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff ffaa 	bl	8000f80 <checkerror>
 800102c:	2800      	cmp	r0, #0
 800102e:	dbe1      	blt.n	8000ff4 <_swilseek+0x16>
 8001030:	606c      	str	r4, [r5, #4]
 8001032:	e7e1      	b.n	8000ff8 <_swilseek+0x1a>
 8001034:	2e02      	cmp	r6, #2
 8001036:	6803      	ldr	r3, [r0, #0]
 8001038:	d1ec      	bne.n	8001014 <_swilseek+0x36>
 800103a:	260c      	movs	r6, #12
 800103c:	466f      	mov	r7, sp
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4630      	mov	r0, r6
 8001042:	4639      	mov	r1, r7
 8001044:	beab      	bkpt	0x00ab
 8001046:	4606      	mov	r6, r0
 8001048:	4630      	mov	r0, r6
 800104a:	f7ff ff99 	bl	8000f80 <checkerror>
 800104e:	1c43      	adds	r3, r0, #1
 8001050:	d0d0      	beq.n	8000ff4 <_swilseek+0x16>
 8001052:	4404      	add	r4, r0
 8001054:	e7de      	b.n	8001014 <_swilseek+0x36>

08001056 <_lseek>:
 8001056:	f7ff bfc2 	b.w	8000fde <_swilseek>

0800105a <_swiwrite>:
 800105a:	b530      	push	{r4, r5, lr}
 800105c:	b085      	sub	sp, #20
 800105e:	2405      	movs	r4, #5
 8001060:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001064:	9203      	str	r2, [sp, #12]
 8001066:	ad01      	add	r5, sp, #4
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	beab      	bkpt	0x00ab
 800106e:	4604      	mov	r4, r0
 8001070:	4620      	mov	r0, r4
 8001072:	f7ff ff85 	bl	8000f80 <checkerror>
 8001076:	b005      	add	sp, #20
 8001078:	bd30      	pop	{r4, r5, pc}

0800107a <_write>:
 800107a:	b570      	push	{r4, r5, r6, lr}
 800107c:	460e      	mov	r6, r1
 800107e:	4615      	mov	r5, r2
 8001080:	f7ff ff56 	bl	8000f30 <findslot>
 8001084:	4604      	mov	r4, r0
 8001086:	b930      	cbnz	r0, 8001096 <_write+0x1c>
 8001088:	f000 fd42 	bl	8001b10 <__errno>
 800108c:	2309      	movs	r3, #9
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	bd70      	pop	{r4, r5, r6, pc}
 8001096:	462a      	mov	r2, r5
 8001098:	4631      	mov	r1, r6
 800109a:	6800      	ldr	r0, [r0, #0]
 800109c:	f7ff ffdd 	bl	800105a <_swiwrite>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	dbf5      	blt.n	8001090 <_write+0x16>
 80010a4:	6862      	ldr	r2, [r4, #4]
 80010a6:	1ae8      	subs	r0, r5, r3
 80010a8:	4402      	add	r2, r0
 80010aa:	42ab      	cmp	r3, r5
 80010ac:	6062      	str	r2, [r4, #4]
 80010ae:	d1f1      	bne.n	8001094 <_write+0x1a>
 80010b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff bf55 	b.w	8000f64 <error>

080010ba <_swiclose>:
 80010ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010bc:	2402      	movs	r4, #2
 80010be:	9001      	str	r0, [sp, #4]
 80010c0:	ad01      	add	r5, sp, #4
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	beab      	bkpt	0x00ab
 80010c8:	4604      	mov	r4, r0
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ff58 	bl	8000f80 <checkerror>
 80010d0:	b003      	add	sp, #12
 80010d2:	bd30      	pop	{r4, r5, pc}

080010d4 <_close>:
 80010d4:	b538      	push	{r3, r4, r5, lr}
 80010d6:	4605      	mov	r5, r0
 80010d8:	f7ff ff2a 	bl	8000f30 <findslot>
 80010dc:	4604      	mov	r4, r0
 80010de:	b930      	cbnz	r0, 80010ee <_close+0x1a>
 80010e0:	f000 fd16 	bl	8001b10 <__errno>
 80010e4:	2309      	movs	r3, #9
 80010e6:	6003      	str	r3, [r0, #0]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	3d01      	subs	r5, #1
 80010f0:	2d01      	cmp	r5, #1
 80010f2:	d809      	bhi.n	8001108 <_close+0x34>
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <_close+0x48>)
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d104      	bne.n	8001108 <_close+0x34>
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	6003      	str	r3, [r0, #0]
 8001104:	2000      	movs	r0, #0
 8001106:	e7f1      	b.n	80010ec <_close+0x18>
 8001108:	6820      	ldr	r0, [r4, #0]
 800110a:	f7ff ffd6 	bl	80010ba <_swiclose>
 800110e:	2800      	cmp	r0, #0
 8001110:	d1ec      	bne.n	80010ec <_close+0x18>
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	e7e8      	b.n	80010ec <_close+0x18>
 800111a:	bf00      	nop
 800111c:	20000104 	.word	0x20000104

08001120 <_swistat>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	460c      	mov	r4, r1
 8001124:	f7ff ff04 	bl	8000f30 <findslot>
 8001128:	4605      	mov	r5, r0
 800112a:	b930      	cbnz	r0, 800113a <_swistat+0x1a>
 800112c:	f000 fcf0 	bl	8001b10 <__errno>
 8001130:	2309      	movs	r3, #9
 8001132:	6003      	str	r3, [r0, #0]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	bd70      	pop	{r4, r5, r6, pc}
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	260c      	movs	r6, #12
 800113e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001142:	6063      	str	r3, [r4, #4]
 8001144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001148:	64a3      	str	r3, [r4, #72]	; 0x48
 800114a:	4630      	mov	r0, r6
 800114c:	4629      	mov	r1, r5
 800114e:	beab      	bkpt	0x00ab
 8001150:	4605      	mov	r5, r0
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff ff14 	bl	8000f80 <checkerror>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	bf1c      	itt	ne
 800115c:	6120      	strne	r0, [r4, #16]
 800115e:	2000      	movne	r0, #0
 8001160:	e7ea      	b.n	8001138 <_swistat+0x18>

08001162 <_fstat>:
 8001162:	460b      	mov	r3, r1
 8001164:	b510      	push	{r4, lr}
 8001166:	2100      	movs	r1, #0
 8001168:	4604      	mov	r4, r0
 800116a:	2258      	movs	r2, #88	; 0x58
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fc81 	bl	8001a74 <memset>
 8001172:	4601      	mov	r1, r0
 8001174:	4620      	mov	r0, r4
 8001176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800117a:	f7ff bfd1 	b.w	8001120 <_swistat>

0800117e <_stat>:
 800117e:	b538      	push	{r3, r4, r5, lr}
 8001180:	460d      	mov	r5, r1
 8001182:	4604      	mov	r4, r0
 8001184:	2258      	movs	r2, #88	; 0x58
 8001186:	2100      	movs	r1, #0
 8001188:	4628      	mov	r0, r5
 800118a:	f000 fc73 	bl	8001a74 <memset>
 800118e:	4620      	mov	r0, r4
 8001190:	2100      	movs	r1, #0
 8001192:	f000 f811 	bl	80011b8 <_swiopen>
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	4604      	mov	r4, r0
 800119a:	d00b      	beq.n	80011b4 <_stat+0x36>
 800119c:	686b      	ldr	r3, [r5, #4]
 800119e:	4629      	mov	r1, r5
 80011a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80011a4:	606b      	str	r3, [r5, #4]
 80011a6:	f7ff ffbb 	bl	8001120 <_swistat>
 80011aa:	4605      	mov	r5, r0
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff ff91 	bl	80010d4 <_close>
 80011b2:	462c      	mov	r4, r5
 80011b4:	4620      	mov	r0, r4
 80011b6:	bd38      	pop	{r3, r4, r5, pc}

080011b8 <_swiopen>:
 80011b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011bc:	4607      	mov	r7, r0
 80011be:	460e      	mov	r6, r1
 80011c0:	2500      	movs	r5, #0
 80011c2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001268 <_swiopen+0xb0>
 80011c6:	b097      	sub	sp, #92	; 0x5c
 80011c8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80011cc:	1c61      	adds	r1, r4, #1
 80011ce:	d037      	beq.n	8001240 <_swiopen+0x88>
 80011d0:	3501      	adds	r5, #1
 80011d2:	2d14      	cmp	r5, #20
 80011d4:	d1f8      	bne.n	80011c8 <_swiopen+0x10>
 80011d6:	f000 fc9b 	bl	8001b10 <__errno>
 80011da:	2318      	movs	r3, #24
 80011dc:	f04f 34ff 	mov.w	r4, #4294967295
 80011e0:	6003      	str	r3, [r0, #0]
 80011e2:	e03d      	b.n	8001260 <_swiopen+0xa8>
 80011e4:	f240 6301 	movw	r3, #1537	; 0x601
 80011e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80011ec:	07b2      	lsls	r2, r6, #30
 80011ee:	bf48      	it	mi
 80011f0:	f044 0402 	orrmi.w	r4, r4, #2
 80011f4:	421e      	tst	r6, r3
 80011f6:	bf18      	it	ne
 80011f8:	f044 0404 	orrne.w	r4, r4, #4
 80011fc:	0733      	lsls	r3, r6, #28
 80011fe:	bf48      	it	mi
 8001200:	f024 0404 	bicmi.w	r4, r4, #4
 8001204:	4638      	mov	r0, r7
 8001206:	bf48      	it	mi
 8001208:	f044 0408 	orrmi.w	r4, r4, #8
 800120c:	9700      	str	r7, [sp, #0]
 800120e:	f7fe ff9d 	bl	800014c <strlen>
 8001212:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001216:	2401      	movs	r4, #1
 8001218:	4620      	mov	r0, r4
 800121a:	4649      	mov	r1, r9
 800121c:	beab      	bkpt	0x00ab
 800121e:	4604      	mov	r4, r0
 8001220:	2c00      	cmp	r4, #0
 8001222:	db08      	blt.n	8001236 <_swiopen+0x7e>
 8001224:	2300      	movs	r3, #0
 8001226:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800122a:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800122e:	462c      	mov	r4, r5
 8001230:	f8c8 3004 	str.w	r3, [r8, #4]
 8001234:	e014      	b.n	8001260 <_swiopen+0xa8>
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff fe94 	bl	8000f64 <error>
 800123c:	4604      	mov	r4, r0
 800123e:	e00f      	b.n	8001260 <_swiopen+0xa8>
 8001240:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001244:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001248:	46e9      	mov	r9, sp
 800124a:	d1cb      	bne.n	80011e4 <_swiopen+0x2c>
 800124c:	4649      	mov	r1, r9
 800124e:	4638      	mov	r0, r7
 8001250:	f7ff ff95 	bl	800117e <_stat>
 8001254:	3001      	adds	r0, #1
 8001256:	d0c5      	beq.n	80011e4 <_swiopen+0x2c>
 8001258:	f000 fc5a 	bl	8001b10 <__errno>
 800125c:	2311      	movs	r3, #17
 800125e:	6003      	str	r3, [r0, #0]
 8001260:	4620      	mov	r0, r4
 8001262:	b017      	add	sp, #92	; 0x5c
 8001264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001268:	20000104 	.word	0x20000104

0800126c <_get_semihosting_exts>:
 800126c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001270:	4606      	mov	r6, r0
 8001272:	460f      	mov	r7, r1
 8001274:	482a      	ldr	r0, [pc, #168]	; (8001320 <_get_semihosting_exts+0xb4>)
 8001276:	2100      	movs	r1, #0
 8001278:	4615      	mov	r5, r2
 800127a:	f7ff ff9d 	bl	80011b8 <_swiopen>
 800127e:	4604      	mov	r4, r0
 8001280:	462a      	mov	r2, r5
 8001282:	2100      	movs	r1, #0
 8001284:	4630      	mov	r0, r6
 8001286:	f000 fbf5 	bl	8001a74 <memset>
 800128a:	1c63      	adds	r3, r4, #1
 800128c:	d016      	beq.n	80012bc <_get_semihosting_exts+0x50>
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff fe4e 	bl	8000f30 <findslot>
 8001294:	f04f 080c 	mov.w	r8, #12
 8001298:	4681      	mov	r9, r0
 800129a:	4640      	mov	r0, r8
 800129c:	4649      	mov	r1, r9
 800129e:	beab      	bkpt	0x00ab
 80012a0:	4680      	mov	r8, r0
 80012a2:	4640      	mov	r0, r8
 80012a4:	f7ff fe6c 	bl	8000f80 <checkerror>
 80012a8:	2803      	cmp	r0, #3
 80012aa:	dd02      	ble.n	80012b2 <_get_semihosting_exts+0x46>
 80012ac:	1ec3      	subs	r3, r0, #3
 80012ae:	42ab      	cmp	r3, r5
 80012b0:	dc08      	bgt.n	80012c4 <_get_semihosting_exts+0x58>
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff ff0e 	bl	80010d4 <_close>
 80012b8:	f04f 34ff 	mov.w	r4, #4294967295
 80012bc:	4620      	mov	r0, r4
 80012be:	b003      	add	sp, #12
 80012c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012c4:	2204      	movs	r2, #4
 80012c6:	4620      	mov	r0, r4
 80012c8:	eb0d 0102 	add.w	r1, sp, r2
 80012cc:	f7ff fe6d 	bl	8000faa <_read>
 80012d0:	2803      	cmp	r0, #3
 80012d2:	ddee      	ble.n	80012b2 <_get_semihosting_exts+0x46>
 80012d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012d8:	2b53      	cmp	r3, #83	; 0x53
 80012da:	d1ea      	bne.n	80012b2 <_get_semihosting_exts+0x46>
 80012dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012e0:	2b48      	cmp	r3, #72	; 0x48
 80012e2:	d1e6      	bne.n	80012b2 <_get_semihosting_exts+0x46>
 80012e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80012e8:	2b46      	cmp	r3, #70	; 0x46
 80012ea:	d1e2      	bne.n	80012b2 <_get_semihosting_exts+0x46>
 80012ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012f0:	2b42      	cmp	r3, #66	; 0x42
 80012f2:	d1de      	bne.n	80012b2 <_get_semihosting_exts+0x46>
 80012f4:	2201      	movs	r2, #1
 80012f6:	4639      	mov	r1, r7
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff fe70 	bl	8000fde <_swilseek>
 80012fe:	2800      	cmp	r0, #0
 8001300:	dbd7      	blt.n	80012b2 <_get_semihosting_exts+0x46>
 8001302:	462a      	mov	r2, r5
 8001304:	4631      	mov	r1, r6
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fe4f 	bl	8000faa <_read>
 800130c:	4605      	mov	r5, r0
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fee0 	bl	80010d4 <_close>
 8001314:	4628      	mov	r0, r5
 8001316:	f7ff fe33 	bl	8000f80 <checkerror>
 800131a:	4604      	mov	r4, r0
 800131c:	e7ce      	b.n	80012bc <_get_semihosting_exts+0x50>
 800131e:	bf00      	nop
 8001320:	08002676 	.word	0x08002676

08001324 <initialise_semihosting_exts>:
 8001324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001326:	2100      	movs	r1, #0
 8001328:	2201      	movs	r2, #1
 800132a:	4d09      	ldr	r5, [pc, #36]	; (8001350 <initialise_semihosting_exts+0x2c>)
 800132c:	4c09      	ldr	r4, [pc, #36]	; (8001354 <initialise_semihosting_exts+0x30>)
 800132e:	a801      	add	r0, sp, #4
 8001330:	6029      	str	r1, [r5, #0]
 8001332:	6022      	str	r2, [r4, #0]
 8001334:	f7ff ff9a 	bl	800126c <_get_semihosting_exts>
 8001338:	2800      	cmp	r0, #0
 800133a:	dd07      	ble.n	800134c <initialise_semihosting_exts+0x28>
 800133c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001340:	f003 0201 	and.w	r2, r3, #1
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	602a      	str	r2, [r5, #0]
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	b003      	add	sp, #12
 800134e:	bd30      	pop	{r4, r5, pc}
 8001350:	20000070 	.word	0x20000070
 8001354:	20000074 	.word	0x20000074

08001358 <_has_ext_stdout_stderr>:
 8001358:	b510      	push	{r4, lr}
 800135a:	4c04      	ldr	r4, [pc, #16]	; (800136c <_has_ext_stdout_stderr+0x14>)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da01      	bge.n	8001366 <_has_ext_stdout_stderr+0xe>
 8001362:	f7ff ffdf 	bl	8001324 <initialise_semihosting_exts>
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	20000074 	.word	0x20000074

08001370 <initialise_monitor_handles>:
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	2303      	movs	r3, #3
 8001376:	2400      	movs	r4, #0
 8001378:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800141c <initialise_monitor_handles+0xac>
 800137c:	b085      	sub	sp, #20
 800137e:	f8cd 9004 	str.w	r9, [sp, #4]
 8001382:	af01      	add	r7, sp, #4
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	2501      	movs	r5, #1
 8001388:	9402      	str	r4, [sp, #8]
 800138a:	4628      	mov	r0, r5
 800138c:	4639      	mov	r1, r7
 800138e:	beab      	bkpt	0x00ab
 8001390:	4605      	mov	r5, r0
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001420 <initialise_monitor_handles+0xb0>
 800139a:	4623      	mov	r3, r4
 800139c:	4c21      	ldr	r4, [pc, #132]	; (8001424 <initialise_monitor_handles+0xb4>)
 800139e:	f8c8 5000 	str.w	r5, [r8]
 80013a2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80013a6:	3301      	adds	r3, #1
 80013a8:	2b14      	cmp	r3, #20
 80013aa:	d1fa      	bne.n	80013a2 <initialise_monitor_handles+0x32>
 80013ac:	f7ff ffd4 	bl	8001358 <_has_ext_stdout_stderr>
 80013b0:	4d1d      	ldr	r5, [pc, #116]	; (8001428 <initialise_monitor_handles+0xb8>)
 80013b2:	b1d0      	cbz	r0, 80013ea <initialise_monitor_handles+0x7a>
 80013b4:	f04f 0a03 	mov.w	sl, #3
 80013b8:	2304      	movs	r3, #4
 80013ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80013be:	2601      	movs	r6, #1
 80013c0:	f8cd a00c 	str.w	sl, [sp, #12]
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	4630      	mov	r0, r6
 80013c8:	4639      	mov	r1, r7
 80013ca:	beab      	bkpt	0x00ab
 80013cc:	4683      	mov	fp, r0
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <initialise_monitor_handles+0xbc>)
 80013d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80013d4:	f8c3 b000 	str.w	fp, [r3]
 80013d8:	2308      	movs	r3, #8
 80013da:	f8cd a00c 	str.w	sl, [sp, #12]
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	4630      	mov	r0, r6
 80013e2:	4639      	mov	r1, r7
 80013e4:	beab      	bkpt	0x00ab
 80013e6:	4606      	mov	r6, r0
 80013e8:	602e      	str	r6, [r5, #0]
 80013ea:	2600      	movs	r6, #0
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	6066      	str	r6, [r4, #4]
 80013f0:	3301      	adds	r3, #1
 80013f2:	bf02      	ittt	eq
 80013f4:	4b0d      	ldreq	r3, [pc, #52]	; (800142c <initialise_monitor_handles+0xbc>)
 80013f6:	681b      	ldreq	r3, [r3, #0]
 80013f8:	602b      	streq	r3, [r5, #0]
 80013fa:	f8d8 3000 	ldr.w	r3, [r8]
 80013fe:	6023      	str	r3, [r4, #0]
 8001400:	f7ff ffaa 	bl	8001358 <_has_ext_stdout_stderr>
 8001404:	b130      	cbz	r0, 8001414 <initialise_monitor_handles+0xa4>
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <initialise_monitor_handles+0xbc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001414:	b005      	add	sp, #20
 8001416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800141a:	bf00      	nop
 800141c:	0800268c 	.word	0x0800268c
 8001420:	200000fc 	.word	0x200000fc
 8001424:	20000104 	.word	0x20000104
 8001428:	200000f8 	.word	0x200000f8
 800142c:	20000100 	.word	0x20000100

08001430 <_isatty>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	f7ff fd7d 	bl	8000f30 <findslot>
 8001436:	2509      	movs	r5, #9
 8001438:	4604      	mov	r4, r0
 800143a:	b920      	cbnz	r0, 8001446 <_isatty+0x16>
 800143c:	f000 fb68 	bl	8001b10 <__errno>
 8001440:	6005      	str	r5, [r0, #0]
 8001442:	4620      	mov	r0, r4
 8001444:	bd70      	pop	{r4, r5, r6, pc}
 8001446:	4628      	mov	r0, r5
 8001448:	4621      	mov	r1, r4
 800144a:	beab      	bkpt	0x00ab
 800144c:	4604      	mov	r4, r0
 800144e:	2c01      	cmp	r4, #1
 8001450:	d0f7      	beq.n	8001442 <_isatty+0x12>
 8001452:	f000 fb5d 	bl	8001b10 <__errno>
 8001456:	2400      	movs	r4, #0
 8001458:	4605      	mov	r5, r0
 800145a:	2613      	movs	r6, #19
 800145c:	4630      	mov	r0, r6
 800145e:	4621      	mov	r1, r4
 8001460:	beab      	bkpt	0x00ab
 8001462:	4606      	mov	r6, r0
 8001464:	602e      	str	r6, [r5, #0]
 8001466:	e7ec      	b.n	8001442 <_isatty+0x12>

08001468 <_fgets_r>:
 8001468:	2a01      	cmp	r2, #1
 800146a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800146e:	4681      	mov	r9, r0
 8001470:	460d      	mov	r5, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461c      	mov	r4, r3
 8001476:	dc03      	bgt.n	8001480 <_fgets_r+0x18>
 8001478:	2500      	movs	r5, #0
 800147a:	4628      	mov	r0, r5
 800147c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001480:	b118      	cbz	r0, 800148a <_fgets_r+0x22>
 8001482:	6a03      	ldr	r3, [r0, #32]
 8001484:	b90b      	cbnz	r3, 800148a <_fgets_r+0x22>
 8001486:	f000 f8e9 	bl	800165c <__sinit>
 800148a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800148c:	07de      	lsls	r6, r3, #31
 800148e:	d405      	bmi.n	800149c <_fgets_r+0x34>
 8001490:	89a3      	ldrh	r3, [r4, #12]
 8001492:	0598      	lsls	r0, r3, #22
 8001494:	d402      	bmi.n	800149c <_fgets_r+0x34>
 8001496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001498:	f000 fb65 	bl	8001b66 <__retarget_lock_acquire_recursive>
 800149c:	46a8      	mov	r8, r5
 800149e:	3f01      	subs	r7, #1
 80014a0:	6866      	ldr	r6, [r4, #4]
 80014a2:	b996      	cbnz	r6, 80014ca <_fgets_r+0x62>
 80014a4:	4621      	mov	r1, r4
 80014a6:	4648      	mov	r0, r9
 80014a8:	f000 f992 	bl	80017d0 <__srefill_r>
 80014ac:	b160      	cbz	r0, 80014c8 <_fgets_r+0x60>
 80014ae:	45a8      	cmp	r8, r5
 80014b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014b2:	d138      	bne.n	8001526 <_fgets_r+0xbe>
 80014b4:	07d9      	lsls	r1, r3, #31
 80014b6:	d4df      	bmi.n	8001478 <_fgets_r+0x10>
 80014b8:	89a5      	ldrh	r5, [r4, #12]
 80014ba:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 80014be:	d1db      	bne.n	8001478 <_fgets_r+0x10>
 80014c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c2:	f000 fb51 	bl	8001b68 <__retarget_lock_release_recursive>
 80014c6:	e7d8      	b.n	800147a <_fgets_r+0x12>
 80014c8:	6866      	ldr	r6, [r4, #4]
 80014ca:	42be      	cmp	r6, r7
 80014cc:	bf28      	it	cs
 80014ce:	463e      	movcs	r6, r7
 80014d0:	f8d4 a000 	ldr.w	sl, [r4]
 80014d4:	4632      	mov	r2, r6
 80014d6:	210a      	movs	r1, #10
 80014d8:	4650      	mov	r0, sl
 80014da:	f000 fb46 	bl	8001b6a <memchr>
 80014de:	6863      	ldr	r3, [r4, #4]
 80014e0:	b1a0      	cbz	r0, 800150c <_fgets_r+0xa4>
 80014e2:	3001      	adds	r0, #1
 80014e4:	eba0 060a 	sub.w	r6, r0, sl
 80014e8:	1b9b      	subs	r3, r3, r6
 80014ea:	e9c4 0300 	strd	r0, r3, [r4]
 80014ee:	4632      	mov	r2, r6
 80014f0:	4651      	mov	r1, sl
 80014f2:	4640      	mov	r0, r8
 80014f4:	f000 fb47 	bl	8001b86 <memcpy>
 80014f8:	2300      	movs	r3, #0
 80014fa:	f808 3006 	strb.w	r3, [r8, r6]
 80014fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001500:	07da      	lsls	r2, r3, #31
 8001502:	d4ba      	bmi.n	800147a <_fgets_r+0x12>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	059b      	lsls	r3, r3, #22
 8001508:	d4b7      	bmi.n	800147a <_fgets_r+0x12>
 800150a:	e7d9      	b.n	80014c0 <_fgets_r+0x58>
 800150c:	1b9b      	subs	r3, r3, r6
 800150e:	6063      	str	r3, [r4, #4]
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	4640      	mov	r0, r8
 8001514:	4433      	add	r3, r6
 8001516:	4632      	mov	r2, r6
 8001518:	4651      	mov	r1, sl
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	f000 fb33 	bl	8001b86 <memcpy>
 8001520:	1bbf      	subs	r7, r7, r6
 8001522:	44b0      	add	r8, r6
 8001524:	d1bc      	bne.n	80014a0 <_fgets_r+0x38>
 8001526:	2300      	movs	r3, #0
 8001528:	f888 3000 	strb.w	r3, [r8]
 800152c:	e7e7      	b.n	80014fe <_fgets_r+0x96>
	...

08001530 <fgets>:
 8001530:	4613      	mov	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	4601      	mov	r1, r0
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <fgets+0x10>)
 8001538:	6800      	ldr	r0, [r0, #0]
 800153a:	f7ff bf95 	b.w	8001468 <_fgets_r>
 800153e:	bf00      	nop
 8001540:	200000d0 	.word	0x200000d0

08001544 <std>:
 8001544:	2300      	movs	r3, #0
 8001546:	b510      	push	{r4, lr}
 8001548:	4604      	mov	r4, r0
 800154a:	e9c0 3300 	strd	r3, r3, [r0]
 800154e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001552:	6083      	str	r3, [r0, #8]
 8001554:	8181      	strh	r1, [r0, #12]
 8001556:	6643      	str	r3, [r0, #100]	; 0x64
 8001558:	81c2      	strh	r2, [r0, #14]
 800155a:	6183      	str	r3, [r0, #24]
 800155c:	4619      	mov	r1, r3
 800155e:	2208      	movs	r2, #8
 8001560:	305c      	adds	r0, #92	; 0x5c
 8001562:	f000 fa87 	bl	8001a74 <memset>
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <std+0x58>)
 8001568:	6224      	str	r4, [r4, #32]
 800156a:	6263      	str	r3, [r4, #36]	; 0x24
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <std+0x5c>)
 800156e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <std+0x60>)
 8001572:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <std+0x64>)
 8001576:	6323      	str	r3, [r4, #48]	; 0x30
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <std+0x68>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d006      	beq.n	800158c <std+0x48>
 800157e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001582:	4294      	cmp	r4, r2
 8001584:	d002      	beq.n	800158c <std+0x48>
 8001586:	33d0      	adds	r3, #208	; 0xd0
 8001588:	429c      	cmp	r4, r3
 800158a:	d105      	bne.n	8001598 <std+0x54>
 800158c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001594:	f000 bae6 	b.w	8001b64 <__retarget_lock_init_recursive>
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	080018c5 	.word	0x080018c5
 80015a0:	080018e7 	.word	0x080018e7
 80015a4:	0800191f 	.word	0x0800191f
 80015a8:	08001943 	.word	0x08001943
 80015ac:	200001a4 	.word	0x200001a4

080015b0 <stdio_exit_handler>:
 80015b0:	4a02      	ldr	r2, [pc, #8]	; (80015bc <stdio_exit_handler+0xc>)
 80015b2:	4903      	ldr	r1, [pc, #12]	; (80015c0 <stdio_exit_handler+0x10>)
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <stdio_exit_handler+0x14>)
 80015b6:	f000 b869 	b.w	800168c <_fwalk_sglue>
 80015ba:	bf00      	nop
 80015bc:	20000078 	.word	0x20000078
 80015c0:	0800243d 	.word	0x0800243d
 80015c4:	20000084 	.word	0x20000084

080015c8 <cleanup_stdio>:
 80015c8:	6841      	ldr	r1, [r0, #4]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <cleanup_stdio+0x34>)
 80015cc:	b510      	push	{r4, lr}
 80015ce:	4299      	cmp	r1, r3
 80015d0:	4604      	mov	r4, r0
 80015d2:	d001      	beq.n	80015d8 <cleanup_stdio+0x10>
 80015d4:	f000 ff32 	bl	800243c <_fflush_r>
 80015d8:	68a1      	ldr	r1, [r4, #8]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <cleanup_stdio+0x38>)
 80015dc:	4299      	cmp	r1, r3
 80015de:	d002      	beq.n	80015e6 <cleanup_stdio+0x1e>
 80015e0:	4620      	mov	r0, r4
 80015e2:	f000 ff2b 	bl	800243c <_fflush_r>
 80015e6:	68e1      	ldr	r1, [r4, #12]
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <cleanup_stdio+0x3c>)
 80015ea:	4299      	cmp	r1, r3
 80015ec:	d004      	beq.n	80015f8 <cleanup_stdio+0x30>
 80015ee:	4620      	mov	r0, r4
 80015f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f4:	f000 bf22 	b.w	800243c <_fflush_r>
 80015f8:	bd10      	pop	{r4, pc}
 80015fa:	bf00      	nop
 80015fc:	200001a4 	.word	0x200001a4
 8001600:	2000020c 	.word	0x2000020c
 8001604:	20000274 	.word	0x20000274

08001608 <global_stdio_init.part.0>:
 8001608:	b510      	push	{r4, lr}
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <global_stdio_init.part.0+0x30>)
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <global_stdio_init.part.0+0x34>)
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <global_stdio_init.part.0+0x38>)
 8001610:	4620      	mov	r0, r4
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	2104      	movs	r1, #4
 8001616:	2200      	movs	r2, #0
 8001618:	f7ff ff94 	bl	8001544 <std>
 800161c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001620:	2201      	movs	r2, #1
 8001622:	2109      	movs	r1, #9
 8001624:	f7ff ff8e 	bl	8001544 <std>
 8001628:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800162c:	2202      	movs	r2, #2
 800162e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001632:	2112      	movs	r1, #18
 8001634:	f7ff bf86 	b.w	8001544 <std>
 8001638:	200002dc 	.word	0x200002dc
 800163c:	200001a4 	.word	0x200001a4
 8001640:	080015b1 	.word	0x080015b1

08001644 <__sfp_lock_acquire>:
 8001644:	4801      	ldr	r0, [pc, #4]	; (800164c <__sfp_lock_acquire+0x8>)
 8001646:	f000 ba8e 	b.w	8001b66 <__retarget_lock_acquire_recursive>
 800164a:	bf00      	nop
 800164c:	200002e5 	.word	0x200002e5

08001650 <__sfp_lock_release>:
 8001650:	4801      	ldr	r0, [pc, #4]	; (8001658 <__sfp_lock_release+0x8>)
 8001652:	f000 ba89 	b.w	8001b68 <__retarget_lock_release_recursive>
 8001656:	bf00      	nop
 8001658:	200002e5 	.word	0x200002e5

0800165c <__sinit>:
 800165c:	b510      	push	{r4, lr}
 800165e:	4604      	mov	r4, r0
 8001660:	f7ff fff0 	bl	8001644 <__sfp_lock_acquire>
 8001664:	6a23      	ldr	r3, [r4, #32]
 8001666:	b11b      	cbz	r3, 8001670 <__sinit+0x14>
 8001668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800166c:	f7ff bff0 	b.w	8001650 <__sfp_lock_release>
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__sinit+0x28>)
 8001672:	6223      	str	r3, [r4, #32]
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__sinit+0x2c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f5      	bne.n	8001668 <__sinit+0xc>
 800167c:	f7ff ffc4 	bl	8001608 <global_stdio_init.part.0>
 8001680:	e7f2      	b.n	8001668 <__sinit+0xc>
 8001682:	bf00      	nop
 8001684:	080015c9 	.word	0x080015c9
 8001688:	200002dc 	.word	0x200002dc

0800168c <_fwalk_sglue>:
 800168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001690:	4607      	mov	r7, r0
 8001692:	4688      	mov	r8, r1
 8001694:	4614      	mov	r4, r2
 8001696:	2600      	movs	r6, #0
 8001698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800169c:	f1b9 0901 	subs.w	r9, r9, #1
 80016a0:	d505      	bpl.n	80016ae <_fwalk_sglue+0x22>
 80016a2:	6824      	ldr	r4, [r4, #0]
 80016a4:	2c00      	cmp	r4, #0
 80016a6:	d1f7      	bne.n	8001698 <_fwalk_sglue+0xc>
 80016a8:	4630      	mov	r0, r6
 80016aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016ae:	89ab      	ldrh	r3, [r5, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d907      	bls.n	80016c4 <_fwalk_sglue+0x38>
 80016b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016b8:	3301      	adds	r3, #1
 80016ba:	d003      	beq.n	80016c4 <_fwalk_sglue+0x38>
 80016bc:	4629      	mov	r1, r5
 80016be:	4638      	mov	r0, r7
 80016c0:	47c0      	blx	r8
 80016c2:	4306      	orrs	r6, r0
 80016c4:	3568      	adds	r5, #104	; 0x68
 80016c6:	e7e9      	b.n	800169c <_fwalk_sglue+0x10>

080016c8 <iprintf>:
 80016c8:	b40f      	push	{r0, r1, r2, r3}
 80016ca:	b507      	push	{r0, r1, r2, lr}
 80016cc:	4906      	ldr	r1, [pc, #24]	; (80016e8 <iprintf+0x20>)
 80016ce:	ab04      	add	r3, sp, #16
 80016d0:	6808      	ldr	r0, [r1, #0]
 80016d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80016d6:	6881      	ldr	r1, [r0, #8]
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	f000 fb7f 	bl	8001ddc <_vfiprintf_r>
 80016de:	b003      	add	sp, #12
 80016e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80016e4:	b004      	add	sp, #16
 80016e6:	4770      	bx	lr
 80016e8:	200000d0 	.word	0x200000d0

080016ec <putchar>:
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <putchar+0xc>)
 80016ee:	4601      	mov	r1, r0
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	6882      	ldr	r2, [r0, #8]
 80016f4:	f000 bf2b 	b.w	800254e <_putc_r>
 80016f8:	200000d0 	.word	0x200000d0

080016fc <_puts_r>:
 80016fc:	6a03      	ldr	r3, [r0, #32]
 80016fe:	b570      	push	{r4, r5, r6, lr}
 8001700:	4605      	mov	r5, r0
 8001702:	460e      	mov	r6, r1
 8001704:	6884      	ldr	r4, [r0, #8]
 8001706:	b90b      	cbnz	r3, 800170c <_puts_r+0x10>
 8001708:	f7ff ffa8 	bl	800165c <__sinit>
 800170c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800170e:	07db      	lsls	r3, r3, #31
 8001710:	d405      	bmi.n	800171e <_puts_r+0x22>
 8001712:	89a3      	ldrh	r3, [r4, #12]
 8001714:	0598      	lsls	r0, r3, #22
 8001716:	d402      	bmi.n	800171e <_puts_r+0x22>
 8001718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800171a:	f000 fa24 	bl	8001b66 <__retarget_lock_acquire_recursive>
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	0719      	lsls	r1, r3, #28
 8001722:	d513      	bpl.n	800174c <_puts_r+0x50>
 8001724:	6923      	ldr	r3, [r4, #16]
 8001726:	b18b      	cbz	r3, 800174c <_puts_r+0x50>
 8001728:	3e01      	subs	r6, #1
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001730:	3b01      	subs	r3, #1
 8001732:	60a3      	str	r3, [r4, #8]
 8001734:	b9e9      	cbnz	r1, 8001772 <_puts_r+0x76>
 8001736:	2b00      	cmp	r3, #0
 8001738:	da2e      	bge.n	8001798 <_puts_r+0x9c>
 800173a:	4622      	mov	r2, r4
 800173c:	210a      	movs	r1, #10
 800173e:	4628      	mov	r0, r5
 8001740:	f000 f903 	bl	800194a <__swbuf_r>
 8001744:	3001      	adds	r0, #1
 8001746:	d007      	beq.n	8001758 <_puts_r+0x5c>
 8001748:	250a      	movs	r5, #10
 800174a:	e007      	b.n	800175c <_puts_r+0x60>
 800174c:	4621      	mov	r1, r4
 800174e:	4628      	mov	r0, r5
 8001750:	f000 f938 	bl	80019c4 <__swsetup_r>
 8001754:	2800      	cmp	r0, #0
 8001756:	d0e7      	beq.n	8001728 <_puts_r+0x2c>
 8001758:	f04f 35ff 	mov.w	r5, #4294967295
 800175c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800175e:	07da      	lsls	r2, r3, #31
 8001760:	d405      	bmi.n	800176e <_puts_r+0x72>
 8001762:	89a3      	ldrh	r3, [r4, #12]
 8001764:	059b      	lsls	r3, r3, #22
 8001766:	d402      	bmi.n	800176e <_puts_r+0x72>
 8001768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800176a:	f000 f9fd 	bl	8001b68 <__retarget_lock_release_recursive>
 800176e:	4628      	mov	r0, r5
 8001770:	bd70      	pop	{r4, r5, r6, pc}
 8001772:	2b00      	cmp	r3, #0
 8001774:	da04      	bge.n	8001780 <_puts_r+0x84>
 8001776:	69a2      	ldr	r2, [r4, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	dc06      	bgt.n	800178a <_puts_r+0x8e>
 800177c:	290a      	cmp	r1, #10
 800177e:	d004      	beq.n	800178a <_puts_r+0x8e>
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	6022      	str	r2, [r4, #0]
 8001786:	7019      	strb	r1, [r3, #0]
 8001788:	e7cf      	b.n	800172a <_puts_r+0x2e>
 800178a:	4622      	mov	r2, r4
 800178c:	4628      	mov	r0, r5
 800178e:	f000 f8dc 	bl	800194a <__swbuf_r>
 8001792:	3001      	adds	r0, #1
 8001794:	d1c9      	bne.n	800172a <_puts_r+0x2e>
 8001796:	e7df      	b.n	8001758 <_puts_r+0x5c>
 8001798:	250a      	movs	r5, #10
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	6022      	str	r2, [r4, #0]
 80017a0:	701d      	strb	r5, [r3, #0]
 80017a2:	e7db      	b.n	800175c <_puts_r+0x60>

080017a4 <puts>:
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <puts+0xc>)
 80017a6:	4601      	mov	r1, r0
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f7ff bfa7 	b.w	80016fc <_puts_r>
 80017ae:	bf00      	nop
 80017b0:	200000d0 	.word	0x200000d0

080017b4 <lflush>:
 80017b4:	898b      	ldrh	r3, [r1, #12]
 80017b6:	f003 0309 	and.w	r3, r3, #9
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d103      	bne.n	80017c6 <lflush+0x12>
 80017be:	4b03      	ldr	r3, [pc, #12]	; (80017cc <lflush+0x18>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f000 be3b 	b.w	800243c <_fflush_r>
 80017c6:	2000      	movs	r0, #0
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000d0 	.word	0x200000d0

080017d0 <__srefill_r>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	460c      	mov	r4, r1
 80017d4:	4605      	mov	r5, r0
 80017d6:	b118      	cbz	r0, 80017e0 <__srefill_r+0x10>
 80017d8:	6a03      	ldr	r3, [r0, #32]
 80017da:	b90b      	cbnz	r3, 80017e0 <__srefill_r+0x10>
 80017dc:	f7ff ff3e 	bl	800165c <__sinit>
 80017e0:	2300      	movs	r3, #0
 80017e2:	6063      	str	r3, [r4, #4]
 80017e4:	89a3      	ldrh	r3, [r4, #12]
 80017e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017ea:	069e      	lsls	r6, r3, #26
 80017ec:	d502      	bpl.n	80017f4 <__srefill_r+0x24>
 80017ee:	f04f 30ff 	mov.w	r0, #4294967295
 80017f2:	e05d      	b.n	80018b0 <__srefill_r+0xe0>
 80017f4:	0758      	lsls	r0, r3, #29
 80017f6:	d449      	bmi.n	800188c <__srefill_r+0xbc>
 80017f8:	06d9      	lsls	r1, r3, #27
 80017fa:	d405      	bmi.n	8001808 <__srefill_r+0x38>
 80017fc:	2309      	movs	r3, #9
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001804:	81a3      	strh	r3, [r4, #12]
 8001806:	e7f2      	b.n	80017ee <__srefill_r+0x1e>
 8001808:	071a      	lsls	r2, r3, #28
 800180a:	d50b      	bpl.n	8001824 <__srefill_r+0x54>
 800180c:	4621      	mov	r1, r4
 800180e:	4628      	mov	r0, r5
 8001810:	f000 fe14 	bl	800243c <_fflush_r>
 8001814:	2800      	cmp	r0, #0
 8001816:	d1ea      	bne.n	80017ee <__srefill_r+0x1e>
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	60a0      	str	r0, [r4, #8]
 800181c:	f023 0308 	bic.w	r3, r3, #8
 8001820:	81a3      	strh	r3, [r4, #12]
 8001822:	61a0      	str	r0, [r4, #24]
 8001824:	89a3      	ldrh	r3, [r4, #12]
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	81a3      	strh	r3, [r4, #12]
 800182c:	6923      	ldr	r3, [r4, #16]
 800182e:	b91b      	cbnz	r3, 8001838 <__srefill_r+0x68>
 8001830:	4621      	mov	r1, r4
 8001832:	4628      	mov	r0, r5
 8001834:	f000 fe4f 	bl	80024d6 <__smakebuf_r>
 8001838:	89a6      	ldrh	r6, [r4, #12]
 800183a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800183e:	07b3      	lsls	r3, r6, #30
 8001840:	d00f      	beq.n	8001862 <__srefill_r+0x92>
 8001842:	2301      	movs	r3, #1
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <__srefill_r+0xe8>)
 8001846:	491d      	ldr	r1, [pc, #116]	; (80018bc <__srefill_r+0xec>)
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <__srefill_r+0xf0>)
 800184a:	81a3      	strh	r3, [r4, #12]
 800184c:	f006 0609 	and.w	r6, r6, #9
 8001850:	f7ff ff1c 	bl	800168c <_fwalk_sglue>
 8001854:	2e09      	cmp	r6, #9
 8001856:	81a7      	strh	r7, [r4, #12]
 8001858:	d103      	bne.n	8001862 <__srefill_r+0x92>
 800185a:	4621      	mov	r1, r4
 800185c:	4628      	mov	r0, r5
 800185e:	f000 fd6b 	bl	8002338 <__sflush_r>
 8001862:	6922      	ldr	r2, [r4, #16]
 8001864:	4628      	mov	r0, r5
 8001866:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001868:	6963      	ldr	r3, [r4, #20]
 800186a:	6a21      	ldr	r1, [r4, #32]
 800186c:	6022      	str	r2, [r4, #0]
 800186e:	47b0      	blx	r6
 8001870:	2800      	cmp	r0, #0
 8001872:	6060      	str	r0, [r4, #4]
 8001874:	dc1d      	bgt.n	80018b2 <__srefill_r+0xe2>
 8001876:	bf18      	it	ne
 8001878:	2200      	movne	r2, #0
 800187a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800187e:	bf16      	itet	ne
 8001880:	6062      	strne	r2, [r4, #4]
 8001882:	f043 0320 	orreq.w	r3, r3, #32
 8001886:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800188a:	e7bb      	b.n	8001804 <__srefill_r+0x34>
 800188c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800188e:	2900      	cmp	r1, #0
 8001890:	d0cc      	beq.n	800182c <__srefill_r+0x5c>
 8001892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001896:	4299      	cmp	r1, r3
 8001898:	d002      	beq.n	80018a0 <__srefill_r+0xd0>
 800189a:	4628      	mov	r0, r5
 800189c:	f000 f982 	bl	8001ba4 <_free_r>
 80018a0:	2000      	movs	r0, #0
 80018a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a4:	6360      	str	r0, [r4, #52]	; 0x34
 80018a6:	6063      	str	r3, [r4, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0bf      	beq.n	800182c <__srefill_r+0x5c>
 80018ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b2:	2000      	movs	r0, #0
 80018b4:	e7fc      	b.n	80018b0 <__srefill_r+0xe0>
 80018b6:	bf00      	nop
 80018b8:	20000078 	.word	0x20000078
 80018bc:	080017b5 	.word	0x080017b5
 80018c0:	20000084 	.word	0x20000084

080018c4 <__sread>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	460c      	mov	r4, r1
 80018c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018cc:	f000 f8fc 	bl	8001ac8 <_read_r>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	bfab      	itete	ge
 80018d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80018d6:	89a3      	ldrhlt	r3, [r4, #12]
 80018d8:	181b      	addge	r3, r3, r0
 80018da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018de:	bfac      	ite	ge
 80018e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80018e2:	81a3      	strhlt	r3, [r4, #12]
 80018e4:	bd10      	pop	{r4, pc}

080018e6 <__swrite>:
 80018e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ea:	461f      	mov	r7, r3
 80018ec:	898b      	ldrh	r3, [r1, #12]
 80018ee:	4605      	mov	r5, r0
 80018f0:	05db      	lsls	r3, r3, #23
 80018f2:	460c      	mov	r4, r1
 80018f4:	4616      	mov	r6, r2
 80018f6:	d505      	bpl.n	8001904 <__swrite+0x1e>
 80018f8:	2302      	movs	r3, #2
 80018fa:	2200      	movs	r2, #0
 80018fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001900:	f000 f8d0 	bl	8001aa4 <_lseek_r>
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	4632      	mov	r2, r6
 8001908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800190c:	81a3      	strh	r3, [r4, #12]
 800190e:	4628      	mov	r0, r5
 8001910:	463b      	mov	r3, r7
 8001912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800191a:	f000 b8e7 	b.w	8001aec <_write_r>

0800191e <__sseek>:
 800191e:	b510      	push	{r4, lr}
 8001920:	460c      	mov	r4, r1
 8001922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001926:	f000 f8bd 	bl	8001aa4 <_lseek_r>
 800192a:	1c43      	adds	r3, r0, #1
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	bf15      	itete	ne
 8001930:	6560      	strne	r0, [r4, #84]	; 0x54
 8001932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800193a:	81a3      	strheq	r3, [r4, #12]
 800193c:	bf18      	it	ne
 800193e:	81a3      	strhne	r3, [r4, #12]
 8001940:	bd10      	pop	{r4, pc}

08001942 <__sclose>:
 8001942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001946:	f000 b89d 	b.w	8001a84 <_close_r>

0800194a <__swbuf_r>:
 800194a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194c:	460e      	mov	r6, r1
 800194e:	4614      	mov	r4, r2
 8001950:	4605      	mov	r5, r0
 8001952:	b118      	cbz	r0, 800195c <__swbuf_r+0x12>
 8001954:	6a03      	ldr	r3, [r0, #32]
 8001956:	b90b      	cbnz	r3, 800195c <__swbuf_r+0x12>
 8001958:	f7ff fe80 	bl	800165c <__sinit>
 800195c:	69a3      	ldr	r3, [r4, #24]
 800195e:	60a3      	str	r3, [r4, #8]
 8001960:	89a3      	ldrh	r3, [r4, #12]
 8001962:	071a      	lsls	r2, r3, #28
 8001964:	d525      	bpl.n	80019b2 <__swbuf_r+0x68>
 8001966:	6923      	ldr	r3, [r4, #16]
 8001968:	b31b      	cbz	r3, 80019b2 <__swbuf_r+0x68>
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	6922      	ldr	r2, [r4, #16]
 800196e:	b2f6      	uxtb	r6, r6
 8001970:	1a98      	subs	r0, r3, r2
 8001972:	6963      	ldr	r3, [r4, #20]
 8001974:	4637      	mov	r7, r6
 8001976:	4283      	cmp	r3, r0
 8001978:	dc04      	bgt.n	8001984 <__swbuf_r+0x3a>
 800197a:	4621      	mov	r1, r4
 800197c:	4628      	mov	r0, r5
 800197e:	f000 fd5d 	bl	800243c <_fflush_r>
 8001982:	b9e0      	cbnz	r0, 80019be <__swbuf_r+0x74>
 8001984:	68a3      	ldr	r3, [r4, #8]
 8001986:	3b01      	subs	r3, #1
 8001988:	60a3      	str	r3, [r4, #8]
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	6022      	str	r2, [r4, #0]
 8001990:	701e      	strb	r6, [r3, #0]
 8001992:	6962      	ldr	r2, [r4, #20]
 8001994:	1c43      	adds	r3, r0, #1
 8001996:	429a      	cmp	r2, r3
 8001998:	d004      	beq.n	80019a4 <__swbuf_r+0x5a>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	07db      	lsls	r3, r3, #31
 800199e:	d506      	bpl.n	80019ae <__swbuf_r+0x64>
 80019a0:	2e0a      	cmp	r6, #10
 80019a2:	d104      	bne.n	80019ae <__swbuf_r+0x64>
 80019a4:	4621      	mov	r1, r4
 80019a6:	4628      	mov	r0, r5
 80019a8:	f000 fd48 	bl	800243c <_fflush_r>
 80019ac:	b938      	cbnz	r0, 80019be <__swbuf_r+0x74>
 80019ae:	4638      	mov	r0, r7
 80019b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b2:	4621      	mov	r1, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	f000 f805 	bl	80019c4 <__swsetup_r>
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d0d5      	beq.n	800196a <__swbuf_r+0x20>
 80019be:	f04f 37ff 	mov.w	r7, #4294967295
 80019c2:	e7f4      	b.n	80019ae <__swbuf_r+0x64>

080019c4 <__swsetup_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <__swsetup_r+0xac>)
 80019c8:	4605      	mov	r5, r0
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	460c      	mov	r4, r1
 80019ce:	b118      	cbz	r0, 80019d8 <__swsetup_r+0x14>
 80019d0:	6a03      	ldr	r3, [r0, #32]
 80019d2:	b90b      	cbnz	r3, 80019d8 <__swsetup_r+0x14>
 80019d4:	f7ff fe42 	bl	800165c <__sinit>
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019de:	0718      	lsls	r0, r3, #28
 80019e0:	d422      	bmi.n	8001a28 <__swsetup_r+0x64>
 80019e2:	06d9      	lsls	r1, r3, #27
 80019e4:	d407      	bmi.n	80019f6 <__swsetup_r+0x32>
 80019e6:	2309      	movs	r3, #9
 80019e8:	602b      	str	r3, [r5, #0]
 80019ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
 80019f2:	81a3      	strh	r3, [r4, #12]
 80019f4:	e034      	b.n	8001a60 <__swsetup_r+0x9c>
 80019f6:	0758      	lsls	r0, r3, #29
 80019f8:	d512      	bpl.n	8001a20 <__swsetup_r+0x5c>
 80019fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019fc:	b141      	cbz	r1, 8001a10 <__swsetup_r+0x4c>
 80019fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a02:	4299      	cmp	r1, r3
 8001a04:	d002      	beq.n	8001a0c <__swsetup_r+0x48>
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 f8cc 	bl	8001ba4 <_free_r>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6363      	str	r3, [r4, #52]	; 0x34
 8001a10:	89a3      	ldrh	r3, [r4, #12]
 8001a12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a16:	81a3      	strh	r3, [r4, #12]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6063      	str	r3, [r4, #4]
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	6023      	str	r3, [r4, #0]
 8001a20:	89a3      	ldrh	r3, [r4, #12]
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	81a3      	strh	r3, [r4, #12]
 8001a28:	6923      	ldr	r3, [r4, #16]
 8001a2a:	b94b      	cbnz	r3, 8001a40 <__swsetup_r+0x7c>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a36:	d003      	beq.n	8001a40 <__swsetup_r+0x7c>
 8001a38:	4621      	mov	r1, r4
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	f000 fd4b 	bl	80024d6 <__smakebuf_r>
 8001a40:	89a0      	ldrh	r0, [r4, #12]
 8001a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a46:	f010 0301 	ands.w	r3, r0, #1
 8001a4a:	d00a      	beq.n	8001a62 <__swsetup_r+0x9e>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60a3      	str	r3, [r4, #8]
 8001a50:	6963      	ldr	r3, [r4, #20]
 8001a52:	425b      	negs	r3, r3
 8001a54:	61a3      	str	r3, [r4, #24]
 8001a56:	6923      	ldr	r3, [r4, #16]
 8001a58:	b943      	cbnz	r3, 8001a6c <__swsetup_r+0xa8>
 8001a5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a5e:	d1c4      	bne.n	80019ea <__swsetup_r+0x26>
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
 8001a62:	0781      	lsls	r1, r0, #30
 8001a64:	bf58      	it	pl
 8001a66:	6963      	ldrpl	r3, [r4, #20]
 8001a68:	60a3      	str	r3, [r4, #8]
 8001a6a:	e7f4      	b.n	8001a56 <__swsetup_r+0x92>
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e7f7      	b.n	8001a60 <__swsetup_r+0x9c>
 8001a70:	200000d0 	.word	0x200000d0

08001a74 <memset>:
 8001a74:	4603      	mov	r3, r0
 8001a76:	4402      	add	r2, r0
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <memset+0xa>
 8001a7c:	4770      	bx	lr
 8001a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a82:	e7f9      	b.n	8001a78 <memset+0x4>

08001a84 <_close_r>:
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	2300      	movs	r3, #0
 8001a88:	4d05      	ldr	r5, [pc, #20]	; (8001aa0 <_close_r+0x1c>)
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	602b      	str	r3, [r5, #0]
 8001a90:	f7ff fb20 	bl	80010d4 <_close>
 8001a94:	1c43      	adds	r3, r0, #1
 8001a96:	d102      	bne.n	8001a9e <_close_r+0x1a>
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	b103      	cbz	r3, 8001a9e <_close_r+0x1a>
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	bd38      	pop	{r3, r4, r5, pc}
 8001aa0:	200002e0 	.word	0x200002e0

08001aa4 <_lseek_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	2200      	movs	r2, #0
 8001aae:	4d05      	ldr	r5, [pc, #20]	; (8001ac4 <_lseek_r+0x20>)
 8001ab0:	602a      	str	r2, [r5, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7ff facf 	bl	8001056 <_lseek>
 8001ab8:	1c43      	adds	r3, r0, #1
 8001aba:	d102      	bne.n	8001ac2 <_lseek_r+0x1e>
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	b103      	cbz	r3, 8001ac2 <_lseek_r+0x1e>
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	200002e0 	.word	0x200002e0

08001ac8 <_read_r>:
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4604      	mov	r4, r0
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4d05      	ldr	r5, [pc, #20]	; (8001ae8 <_read_r+0x20>)
 8001ad4:	602a      	str	r2, [r5, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f7ff fa67 	bl	8000faa <_read>
 8001adc:	1c43      	adds	r3, r0, #1
 8001ade:	d102      	bne.n	8001ae6 <_read_r+0x1e>
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	b103      	cbz	r3, 8001ae6 <_read_r+0x1e>
 8001ae4:	6023      	str	r3, [r4, #0]
 8001ae6:	bd38      	pop	{r3, r4, r5, pc}
 8001ae8:	200002e0 	.word	0x200002e0

08001aec <_write_r>:
 8001aec:	b538      	push	{r3, r4, r5, lr}
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	2200      	movs	r2, #0
 8001af6:	4d05      	ldr	r5, [pc, #20]	; (8001b0c <_write_r+0x20>)
 8001af8:	602a      	str	r2, [r5, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fabd 	bl	800107a <_write>
 8001b00:	1c43      	adds	r3, r0, #1
 8001b02:	d102      	bne.n	8001b0a <_write_r+0x1e>
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	b103      	cbz	r3, 8001b0a <_write_r+0x1e>
 8001b08:	6023      	str	r3, [r4, #0]
 8001b0a:	bd38      	pop	{r3, r4, r5, pc}
 8001b0c:	200002e0 	.word	0x200002e0

08001b10 <__errno>:
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <__errno+0x8>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200000d0 	.word	0x200000d0

08001b1c <__libc_init_array>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	2600      	movs	r6, #0
 8001b20:	4d0c      	ldr	r5, [pc, #48]	; (8001b54 <__libc_init_array+0x38>)
 8001b22:	4c0d      	ldr	r4, [pc, #52]	; (8001b58 <__libc_init_array+0x3c>)
 8001b24:	1b64      	subs	r4, r4, r5
 8001b26:	10a4      	asrs	r4, r4, #2
 8001b28:	42a6      	cmp	r6, r4
 8001b2a:	d109      	bne.n	8001b40 <__libc_init_array+0x24>
 8001b2c:	f000 fd76 	bl	800261c <_init>
 8001b30:	2600      	movs	r6, #0
 8001b32:	4d0a      	ldr	r5, [pc, #40]	; (8001b5c <__libc_init_array+0x40>)
 8001b34:	4c0a      	ldr	r4, [pc, #40]	; (8001b60 <__libc_init_array+0x44>)
 8001b36:	1b64      	subs	r4, r4, r5
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d105      	bne.n	8001b4a <__libc_init_array+0x2e>
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}
 8001b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b44:	4798      	blx	r3
 8001b46:	3601      	adds	r6, #1
 8001b48:	e7ee      	b.n	8001b28 <__libc_init_array+0xc>
 8001b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4e:	4798      	blx	r3
 8001b50:	3601      	adds	r6, #1
 8001b52:	e7f2      	b.n	8001b3a <__libc_init_array+0x1e>
 8001b54:	080026c4 	.word	0x080026c4
 8001b58:	080026c4 	.word	0x080026c4
 8001b5c:	080026c4 	.word	0x080026c4
 8001b60:	080026c8 	.word	0x080026c8

08001b64 <__retarget_lock_init_recursive>:
 8001b64:	4770      	bx	lr

08001b66 <__retarget_lock_acquire_recursive>:
 8001b66:	4770      	bx	lr

08001b68 <__retarget_lock_release_recursive>:
 8001b68:	4770      	bx	lr

08001b6a <memchr>:
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	b2c9      	uxtb	r1, r1
 8001b70:	4402      	add	r2, r0
 8001b72:	4293      	cmp	r3, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	d101      	bne.n	8001b7c <memchr+0x12>
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e003      	b.n	8001b84 <memchr+0x1a>
 8001b7c:	7804      	ldrb	r4, [r0, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	428c      	cmp	r4, r1
 8001b82:	d1f6      	bne.n	8001b72 <memchr+0x8>
 8001b84:	bd10      	pop	{r4, pc}

08001b86 <memcpy>:
 8001b86:	440a      	add	r2, r1
 8001b88:	4291      	cmp	r1, r2
 8001b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b8e:	d100      	bne.n	8001b92 <memcpy+0xc>
 8001b90:	4770      	bx	lr
 8001b92:	b510      	push	{r4, lr}
 8001b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b98:	4291      	cmp	r1, r2
 8001b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b9e:	d1f9      	bne.n	8001b94 <memcpy+0xe>
 8001ba0:	bd10      	pop	{r4, pc}
	...

08001ba4 <_free_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	2900      	cmp	r1, #0
 8001baa:	d040      	beq.n	8001c2e <_free_r+0x8a>
 8001bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb0:	1f0c      	subs	r4, r1, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfb8      	it	lt
 8001bb6:	18e4      	addlt	r4, r4, r3
 8001bb8:	f000 f8dc 	bl	8001d74 <__malloc_lock>
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <_free_r+0x8c>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	b933      	cbnz	r3, 8001bd0 <_free_r+0x2c>
 8001bc2:	6063      	str	r3, [r4, #4]
 8001bc4:	6014      	str	r4, [r2, #0]
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bcc:	f000 b8d8 	b.w	8001d80 <__malloc_unlock>
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	d908      	bls.n	8001be6 <_free_r+0x42>
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	1821      	adds	r1, r4, r0
 8001bd8:	428b      	cmp	r3, r1
 8001bda:	bf01      	itttt	eq
 8001bdc:	6819      	ldreq	r1, [r3, #0]
 8001bde:	685b      	ldreq	r3, [r3, #4]
 8001be0:	1809      	addeq	r1, r1, r0
 8001be2:	6021      	streq	r1, [r4, #0]
 8001be4:	e7ed      	b.n	8001bc2 <_free_r+0x1e>
 8001be6:	461a      	mov	r2, r3
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	b10b      	cbz	r3, 8001bf0 <_free_r+0x4c>
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d9fa      	bls.n	8001be6 <_free_r+0x42>
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	1850      	adds	r0, r2, r1
 8001bf4:	42a0      	cmp	r0, r4
 8001bf6:	d10b      	bne.n	8001c10 <_free_r+0x6c>
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	4401      	add	r1, r0
 8001bfc:	1850      	adds	r0, r2, r1
 8001bfe:	4283      	cmp	r3, r0
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	d1e0      	bne.n	8001bc6 <_free_r+0x22>
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4408      	add	r0, r1
 8001c0a:	6010      	str	r0, [r2, #0]
 8001c0c:	6053      	str	r3, [r2, #4]
 8001c0e:	e7da      	b.n	8001bc6 <_free_r+0x22>
 8001c10:	d902      	bls.n	8001c18 <_free_r+0x74>
 8001c12:	230c      	movs	r3, #12
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	e7d6      	b.n	8001bc6 <_free_r+0x22>
 8001c18:	6820      	ldr	r0, [r4, #0]
 8001c1a:	1821      	adds	r1, r4, r0
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	bf01      	itttt	eq
 8001c20:	6819      	ldreq	r1, [r3, #0]
 8001c22:	685b      	ldreq	r3, [r3, #4]
 8001c24:	1809      	addeq	r1, r1, r0
 8001c26:	6021      	streq	r1, [r4, #0]
 8001c28:	6063      	str	r3, [r4, #4]
 8001c2a:	6054      	str	r4, [r2, #4]
 8001c2c:	e7cb      	b.n	8001bc6 <_free_r+0x22>
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	200002e8 	.word	0x200002e8

08001c34 <sbrk_aligned>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4e0e      	ldr	r6, [pc, #56]	; (8001c70 <sbrk_aligned+0x3c>)
 8001c38:	460c      	mov	r4, r1
 8001c3a:	6831      	ldr	r1, [r6, #0]
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	b911      	cbnz	r1, 8001c46 <sbrk_aligned+0x12>
 8001c40:	f000 fcdc 	bl	80025fc <_sbrk_r>
 8001c44:	6030      	str	r0, [r6, #0]
 8001c46:	4621      	mov	r1, r4
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f000 fcd7 	bl	80025fc <_sbrk_r>
 8001c4e:	1c43      	adds	r3, r0, #1
 8001c50:	d00a      	beq.n	8001c68 <sbrk_aligned+0x34>
 8001c52:	1cc4      	adds	r4, r0, #3
 8001c54:	f024 0403 	bic.w	r4, r4, #3
 8001c58:	42a0      	cmp	r0, r4
 8001c5a:	d007      	beq.n	8001c6c <sbrk_aligned+0x38>
 8001c5c:	1a21      	subs	r1, r4, r0
 8001c5e:	4628      	mov	r0, r5
 8001c60:	f000 fccc 	bl	80025fc <_sbrk_r>
 8001c64:	3001      	adds	r0, #1
 8001c66:	d101      	bne.n	8001c6c <sbrk_aligned+0x38>
 8001c68:	f04f 34ff 	mov.w	r4, #4294967295
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	200002ec 	.word	0x200002ec

08001c74 <_malloc_r>:
 8001c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c78:	1ccd      	adds	r5, r1, #3
 8001c7a:	f025 0503 	bic.w	r5, r5, #3
 8001c7e:	3508      	adds	r5, #8
 8001c80:	2d0c      	cmp	r5, #12
 8001c82:	bf38      	it	cc
 8001c84:	250c      	movcc	r5, #12
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	4607      	mov	r7, r0
 8001c8a:	db01      	blt.n	8001c90 <_malloc_r+0x1c>
 8001c8c:	42a9      	cmp	r1, r5
 8001c8e:	d905      	bls.n	8001c9c <_malloc_r+0x28>
 8001c90:	230c      	movs	r3, #12
 8001c92:	2600      	movs	r6, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4630      	mov	r0, r6
 8001c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001d70 <_malloc_r+0xfc>
 8001ca0:	f000 f868 	bl	8001d74 <__malloc_lock>
 8001ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ca8:	461c      	mov	r4, r3
 8001caa:	bb5c      	cbnz	r4, 8001d04 <_malloc_r+0x90>
 8001cac:	4629      	mov	r1, r5
 8001cae:	4638      	mov	r0, r7
 8001cb0:	f7ff ffc0 	bl	8001c34 <sbrk_aligned>
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	d155      	bne.n	8001d66 <_malloc_r+0xf2>
 8001cba:	f8d8 4000 	ldr.w	r4, [r8]
 8001cbe:	4626      	mov	r6, r4
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	d145      	bne.n	8001d50 <_malloc_r+0xdc>
 8001cc4:	2c00      	cmp	r4, #0
 8001cc6:	d048      	beq.n	8001d5a <_malloc_r+0xe6>
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	4631      	mov	r1, r6
 8001ccc:	4638      	mov	r0, r7
 8001cce:	eb04 0903 	add.w	r9, r4, r3
 8001cd2:	f000 fc93 	bl	80025fc <_sbrk_r>
 8001cd6:	4581      	cmp	r9, r0
 8001cd8:	d13f      	bne.n	8001d5a <_malloc_r+0xe6>
 8001cda:	6821      	ldr	r1, [r4, #0]
 8001cdc:	4638      	mov	r0, r7
 8001cde:	1a6d      	subs	r5, r5, r1
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7ff ffa7 	bl	8001c34 <sbrk_aligned>
 8001ce6:	3001      	adds	r0, #1
 8001ce8:	d037      	beq.n	8001d5a <_malloc_r+0xe6>
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	442b      	add	r3, r5
 8001cee:	6023      	str	r3, [r4, #0]
 8001cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d038      	beq.n	8001d6a <_malloc_r+0xf6>
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	42a2      	cmp	r2, r4
 8001cfc:	d12b      	bne.n	8001d56 <_malloc_r+0xe2>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	e00f      	b.n	8001d24 <_malloc_r+0xb0>
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	1b52      	subs	r2, r2, r5
 8001d08:	d41f      	bmi.n	8001d4a <_malloc_r+0xd6>
 8001d0a:	2a0b      	cmp	r2, #11
 8001d0c:	d917      	bls.n	8001d3e <_malloc_r+0xca>
 8001d0e:	1961      	adds	r1, r4, r5
 8001d10:	42a3      	cmp	r3, r4
 8001d12:	6025      	str	r5, [r4, #0]
 8001d14:	bf18      	it	ne
 8001d16:	6059      	strne	r1, [r3, #4]
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	bf08      	it	eq
 8001d1c:	f8c8 1000 	streq.w	r1, [r8]
 8001d20:	5162      	str	r2, [r4, r5]
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	4638      	mov	r0, r7
 8001d26:	f104 060b 	add.w	r6, r4, #11
 8001d2a:	f000 f829 	bl	8001d80 <__malloc_unlock>
 8001d2e:	f026 0607 	bic.w	r6, r6, #7
 8001d32:	1d23      	adds	r3, r4, #4
 8001d34:	1af2      	subs	r2, r6, r3
 8001d36:	d0ae      	beq.n	8001c96 <_malloc_r+0x22>
 8001d38:	1b9b      	subs	r3, r3, r6
 8001d3a:	50a3      	str	r3, [r4, r2]
 8001d3c:	e7ab      	b.n	8001c96 <_malloc_r+0x22>
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	6862      	ldr	r2, [r4, #4]
 8001d42:	d1dd      	bne.n	8001d00 <_malloc_r+0x8c>
 8001d44:	f8c8 2000 	str.w	r2, [r8]
 8001d48:	e7ec      	b.n	8001d24 <_malloc_r+0xb0>
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	6864      	ldr	r4, [r4, #4]
 8001d4e:	e7ac      	b.n	8001caa <_malloc_r+0x36>
 8001d50:	4634      	mov	r4, r6
 8001d52:	6876      	ldr	r6, [r6, #4]
 8001d54:	e7b4      	b.n	8001cc0 <_malloc_r+0x4c>
 8001d56:	4613      	mov	r3, r2
 8001d58:	e7cc      	b.n	8001cf4 <_malloc_r+0x80>
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	4638      	mov	r0, r7
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	f000 f80e 	bl	8001d80 <__malloc_unlock>
 8001d64:	e797      	b.n	8001c96 <_malloc_r+0x22>
 8001d66:	6025      	str	r5, [r4, #0]
 8001d68:	e7dc      	b.n	8001d24 <_malloc_r+0xb0>
 8001d6a:	605b      	str	r3, [r3, #4]
 8001d6c:	deff      	udf	#255	; 0xff
 8001d6e:	bf00      	nop
 8001d70:	200002e8 	.word	0x200002e8

08001d74 <__malloc_lock>:
 8001d74:	4801      	ldr	r0, [pc, #4]	; (8001d7c <__malloc_lock+0x8>)
 8001d76:	f7ff bef6 	b.w	8001b66 <__retarget_lock_acquire_recursive>
 8001d7a:	bf00      	nop
 8001d7c:	200002e4 	.word	0x200002e4

08001d80 <__malloc_unlock>:
 8001d80:	4801      	ldr	r0, [pc, #4]	; (8001d88 <__malloc_unlock+0x8>)
 8001d82:	f7ff bef1 	b.w	8001b68 <__retarget_lock_release_recursive>
 8001d86:	bf00      	nop
 8001d88:	200002e4 	.word	0x200002e4

08001d8c <__sfputc_r>:
 8001d8c:	6893      	ldr	r3, [r2, #8]
 8001d8e:	b410      	push	{r4}
 8001d90:	3b01      	subs	r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	6093      	str	r3, [r2, #8]
 8001d96:	da07      	bge.n	8001da8 <__sfputc_r+0x1c>
 8001d98:	6994      	ldr	r4, [r2, #24]
 8001d9a:	42a3      	cmp	r3, r4
 8001d9c:	db01      	blt.n	8001da2 <__sfputc_r+0x16>
 8001d9e:	290a      	cmp	r1, #10
 8001da0:	d102      	bne.n	8001da8 <__sfputc_r+0x1c>
 8001da2:	bc10      	pop	{r4}
 8001da4:	f7ff bdd1 	b.w	800194a <__swbuf_r>
 8001da8:	6813      	ldr	r3, [r2, #0]
 8001daa:	1c58      	adds	r0, r3, #1
 8001dac:	6010      	str	r0, [r2, #0]
 8001dae:	7019      	strb	r1, [r3, #0]
 8001db0:	4608      	mov	r0, r1
 8001db2:	bc10      	pop	{r4}
 8001db4:	4770      	bx	lr

08001db6 <__sfputs_r>:
 8001db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db8:	4606      	mov	r6, r0
 8001dba:	460f      	mov	r7, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	18d5      	adds	r5, r2, r3
 8001dc0:	42ac      	cmp	r4, r5
 8001dc2:	d101      	bne.n	8001dc8 <__sfputs_r+0x12>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e007      	b.n	8001dd8 <__sfputs_r+0x22>
 8001dc8:	463a      	mov	r2, r7
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd0:	f7ff ffdc 	bl	8001d8c <__sfputc_r>
 8001dd4:	1c43      	adds	r3, r0, #1
 8001dd6:	d1f3      	bne.n	8001dc0 <__sfputs_r+0xa>
 8001dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ddc <_vfiprintf_r>:
 8001ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de0:	460d      	mov	r5, r1
 8001de2:	4614      	mov	r4, r2
 8001de4:	4698      	mov	r8, r3
 8001de6:	4606      	mov	r6, r0
 8001de8:	b09d      	sub	sp, #116	; 0x74
 8001dea:	b118      	cbz	r0, 8001df4 <_vfiprintf_r+0x18>
 8001dec:	6a03      	ldr	r3, [r0, #32]
 8001dee:	b90b      	cbnz	r3, 8001df4 <_vfiprintf_r+0x18>
 8001df0:	f7ff fc34 	bl	800165c <__sinit>
 8001df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001df6:	07d9      	lsls	r1, r3, #31
 8001df8:	d405      	bmi.n	8001e06 <_vfiprintf_r+0x2a>
 8001dfa:	89ab      	ldrh	r3, [r5, #12]
 8001dfc:	059a      	lsls	r2, r3, #22
 8001dfe:	d402      	bmi.n	8001e06 <_vfiprintf_r+0x2a>
 8001e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e02:	f7ff feb0 	bl	8001b66 <__retarget_lock_acquire_recursive>
 8001e06:	89ab      	ldrh	r3, [r5, #12]
 8001e08:	071b      	lsls	r3, r3, #28
 8001e0a:	d501      	bpl.n	8001e10 <_vfiprintf_r+0x34>
 8001e0c:	692b      	ldr	r3, [r5, #16]
 8001e0e:	b99b      	cbnz	r3, 8001e38 <_vfiprintf_r+0x5c>
 8001e10:	4629      	mov	r1, r5
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fdd6 	bl	80019c4 <__swsetup_r>
 8001e18:	b170      	cbz	r0, 8001e38 <_vfiprintf_r+0x5c>
 8001e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e1c:	07dc      	lsls	r4, r3, #31
 8001e1e:	d504      	bpl.n	8001e2a <_vfiprintf_r+0x4e>
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	b01d      	add	sp, #116	; 0x74
 8001e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e2a:	89ab      	ldrh	r3, [r5, #12]
 8001e2c:	0598      	lsls	r0, r3, #22
 8001e2e:	d4f7      	bmi.n	8001e20 <_vfiprintf_r+0x44>
 8001e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e32:	f7ff fe99 	bl	8001b68 <__retarget_lock_release_recursive>
 8001e36:	e7f3      	b.n	8001e20 <_vfiprintf_r+0x44>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e42:	2330      	movs	r3, #48	; 0x30
 8001e44:	f04f 0901 	mov.w	r9, #1
 8001e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001ffc <_vfiprintf_r+0x220>
 8001e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e54:	4623      	mov	r3, r4
 8001e56:	469a      	mov	sl, r3
 8001e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e5c:	b10a      	cbz	r2, 8001e62 <_vfiprintf_r+0x86>
 8001e5e:	2a25      	cmp	r2, #37	; 0x25
 8001e60:	d1f9      	bne.n	8001e56 <_vfiprintf_r+0x7a>
 8001e62:	ebba 0b04 	subs.w	fp, sl, r4
 8001e66:	d00b      	beq.n	8001e80 <_vfiprintf_r+0xa4>
 8001e68:	465b      	mov	r3, fp
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4630      	mov	r0, r6
 8001e70:	f7ff ffa1 	bl	8001db6 <__sfputs_r>
 8001e74:	3001      	adds	r0, #1
 8001e76:	f000 80a9 	beq.w	8001fcc <_vfiprintf_r+0x1f0>
 8001e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e7c:	445a      	add	r2, fp
 8001e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e80:	f89a 3000 	ldrb.w	r3, [sl]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <_vfiprintf_r+0x1f0>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e94:	f10a 0a01 	add.w	sl, sl, #1
 8001e98:	9304      	str	r3, [sp, #16]
 8001e9a:	9307      	str	r3, [sp, #28]
 8001e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8001ea2:	4654      	mov	r4, sl
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eaa:	4854      	ldr	r0, [pc, #336]	; (8001ffc <_vfiprintf_r+0x220>)
 8001eac:	f7ff fe5d 	bl	8001b6a <memchr>
 8001eb0:	9a04      	ldr	r2, [sp, #16]
 8001eb2:	b9d8      	cbnz	r0, 8001eec <_vfiprintf_r+0x110>
 8001eb4:	06d1      	lsls	r1, r2, #27
 8001eb6:	bf44      	itt	mi
 8001eb8:	2320      	movmi	r3, #32
 8001eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ebe:	0713      	lsls	r3, r2, #28
 8001ec0:	bf44      	itt	mi
 8001ec2:	232b      	movmi	r3, #43	; 0x2b
 8001ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ece:	d015      	beq.n	8001efc <_vfiprintf_r+0x120>
 8001ed0:	4654      	mov	r4, sl
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f04f 0c0a 	mov.w	ip, #10
 8001ed8:	9a07      	ldr	r2, [sp, #28]
 8001eda:	4621      	mov	r1, r4
 8001edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ee0:	3b30      	subs	r3, #48	; 0x30
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	d94d      	bls.n	8001f82 <_vfiprintf_r+0x1a6>
 8001ee6:	b1b0      	cbz	r0, 8001f16 <_vfiprintf_r+0x13a>
 8001ee8:	9207      	str	r2, [sp, #28]
 8001eea:	e014      	b.n	8001f16 <_vfiprintf_r+0x13a>
 8001eec:	eba0 0308 	sub.w	r3, r0, r8
 8001ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	46a2      	mov	sl, r4
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	e7d2      	b.n	8001ea2 <_vfiprintf_r+0xc6>
 8001efc:	9b03      	ldr	r3, [sp, #12]
 8001efe:	1d19      	adds	r1, r3, #4
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	9103      	str	r1, [sp, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bfbb      	ittet	lt
 8001f08:	425b      	neglt	r3, r3
 8001f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001f0e:	9307      	strge	r3, [sp, #28]
 8001f10:	9307      	strlt	r3, [sp, #28]
 8001f12:	bfb8      	it	lt
 8001f14:	9204      	strlt	r2, [sp, #16]
 8001f16:	7823      	ldrb	r3, [r4, #0]
 8001f18:	2b2e      	cmp	r3, #46	; 0x2e
 8001f1a:	d10c      	bne.n	8001f36 <_vfiprintf_r+0x15a>
 8001f1c:	7863      	ldrb	r3, [r4, #1]
 8001f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f20:	d134      	bne.n	8001f8c <_vfiprintf_r+0x1b0>
 8001f22:	9b03      	ldr	r3, [sp, #12]
 8001f24:	3402      	adds	r4, #2
 8001f26:	1d1a      	adds	r2, r3, #4
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	9203      	str	r2, [sp, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bfb8      	it	lt
 8001f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f34:	9305      	str	r3, [sp, #20]
 8001f36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002000 <_vfiprintf_r+0x224>
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4650      	mov	r0, sl
 8001f3e:	7821      	ldrb	r1, [r4, #0]
 8001f40:	f7ff fe13 	bl	8001b6a <memchr>
 8001f44:	b138      	cbz	r0, 8001f56 <_vfiprintf_r+0x17a>
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	9b04      	ldr	r3, [sp, #16]
 8001f4a:	eba0 000a 	sub.w	r0, r0, sl
 8001f4e:	4082      	lsls	r2, r0
 8001f50:	4313      	orrs	r3, r2
 8001f52:	3401      	adds	r4, #1
 8001f54:	9304      	str	r3, [sp, #16]
 8001f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f5a:	2206      	movs	r2, #6
 8001f5c:	4829      	ldr	r0, [pc, #164]	; (8002004 <_vfiprintf_r+0x228>)
 8001f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f62:	f7ff fe02 	bl	8001b6a <memchr>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d03f      	beq.n	8001fea <_vfiprintf_r+0x20e>
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <_vfiprintf_r+0x22c>)
 8001f6c:	bb1b      	cbnz	r3, 8001fb6 <_vfiprintf_r+0x1da>
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	3307      	adds	r3, #7
 8001f72:	f023 0307 	bic.w	r3, r3, #7
 8001f76:	3308      	adds	r3, #8
 8001f78:	9303      	str	r3, [sp, #12]
 8001f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f7c:	443b      	add	r3, r7
 8001f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f80:	e768      	b.n	8001e54 <_vfiprintf_r+0x78>
 8001f82:	460c      	mov	r4, r1
 8001f84:	2001      	movs	r0, #1
 8001f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f8a:	e7a6      	b.n	8001eda <_vfiprintf_r+0xfe>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f04f 0c0a 	mov.w	ip, #10
 8001f92:	4619      	mov	r1, r3
 8001f94:	3401      	adds	r4, #1
 8001f96:	9305      	str	r3, [sp, #20]
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f9e:	3a30      	subs	r2, #48	; 0x30
 8001fa0:	2a09      	cmp	r2, #9
 8001fa2:	d903      	bls.n	8001fac <_vfiprintf_r+0x1d0>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0c6      	beq.n	8001f36 <_vfiprintf_r+0x15a>
 8001fa8:	9105      	str	r1, [sp, #20]
 8001faa:	e7c4      	b.n	8001f36 <_vfiprintf_r+0x15a>
 8001fac:	4604      	mov	r4, r0
 8001fae:	2301      	movs	r3, #1
 8001fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fb4:	e7f0      	b.n	8001f98 <_vfiprintf_r+0x1bc>
 8001fb6:	ab03      	add	r3, sp, #12
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	462a      	mov	r2, r5
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <_vfiprintf_r+0x230>)
 8001fc0:	a904      	add	r1, sp, #16
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4607      	mov	r7, r0
 8001fc8:	1c78      	adds	r0, r7, #1
 8001fca:	d1d6      	bne.n	8001f7a <_vfiprintf_r+0x19e>
 8001fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fce:	07d9      	lsls	r1, r3, #31
 8001fd0:	d405      	bmi.n	8001fde <_vfiprintf_r+0x202>
 8001fd2:	89ab      	ldrh	r3, [r5, #12]
 8001fd4:	059a      	lsls	r2, r3, #22
 8001fd6:	d402      	bmi.n	8001fde <_vfiprintf_r+0x202>
 8001fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fda:	f7ff fdc5 	bl	8001b68 <__retarget_lock_release_recursive>
 8001fde:	89ab      	ldrh	r3, [r5, #12]
 8001fe0:	065b      	lsls	r3, r3, #25
 8001fe2:	f53f af1d 	bmi.w	8001e20 <_vfiprintf_r+0x44>
 8001fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fe8:	e71c      	b.n	8001e24 <_vfiprintf_r+0x48>
 8001fea:	ab03      	add	r3, sp, #12
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	462a      	mov	r2, r5
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <_vfiprintf_r+0x230>)
 8001ff4:	a904      	add	r1, sp, #16
 8001ff6:	f000 f87d 	bl	80020f4 <_printf_i>
 8001ffa:	e7e4      	b.n	8001fc6 <_vfiprintf_r+0x1ea>
 8001ffc:	08002690 	.word	0x08002690
 8002000:	08002696 	.word	0x08002696
 8002004:	0800269a 	.word	0x0800269a
 8002008:	00000000 	.word	0x00000000
 800200c:	08001db7 	.word	0x08001db7

08002010 <_printf_common>:
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	4616      	mov	r6, r2
 8002016:	4699      	mov	r9, r3
 8002018:	688a      	ldr	r2, [r1, #8]
 800201a:	690b      	ldr	r3, [r1, #16]
 800201c:	4607      	mov	r7, r0
 800201e:	4293      	cmp	r3, r2
 8002020:	bfb8      	it	lt
 8002022:	4613      	movlt	r3, r2
 8002024:	6033      	str	r3, [r6, #0]
 8002026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800202a:	460c      	mov	r4, r1
 800202c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002030:	b10a      	cbz	r2, 8002036 <_printf_common+0x26>
 8002032:	3301      	adds	r3, #1
 8002034:	6033      	str	r3, [r6, #0]
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	0699      	lsls	r1, r3, #26
 800203a:	bf42      	ittt	mi
 800203c:	6833      	ldrmi	r3, [r6, #0]
 800203e:	3302      	addmi	r3, #2
 8002040:	6033      	strmi	r3, [r6, #0]
 8002042:	6825      	ldr	r5, [r4, #0]
 8002044:	f015 0506 	ands.w	r5, r5, #6
 8002048:	d106      	bne.n	8002058 <_printf_common+0x48>
 800204a:	f104 0a19 	add.w	sl, r4, #25
 800204e:	68e3      	ldr	r3, [r4, #12]
 8002050:	6832      	ldr	r2, [r6, #0]
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	42ab      	cmp	r3, r5
 8002056:	dc2b      	bgt.n	80020b0 <_printf_common+0xa0>
 8002058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800205c:	1e13      	subs	r3, r2, #0
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	bf18      	it	ne
 8002062:	2301      	movne	r3, #1
 8002064:	0692      	lsls	r2, r2, #26
 8002066:	d430      	bmi.n	80020ca <_printf_common+0xba>
 8002068:	4649      	mov	r1, r9
 800206a:	4638      	mov	r0, r7
 800206c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002070:	47c0      	blx	r8
 8002072:	3001      	adds	r0, #1
 8002074:	d023      	beq.n	80020be <_printf_common+0xae>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	6922      	ldr	r2, [r4, #16]
 800207a:	f003 0306 	and.w	r3, r3, #6
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf14      	ite	ne
 8002082:	2500      	movne	r5, #0
 8002084:	6833      	ldreq	r3, [r6, #0]
 8002086:	f04f 0600 	mov.w	r6, #0
 800208a:	bf08      	it	eq
 800208c:	68e5      	ldreq	r5, [r4, #12]
 800208e:	f104 041a 	add.w	r4, r4, #26
 8002092:	bf08      	it	eq
 8002094:	1aed      	subeq	r5, r5, r3
 8002096:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800209a:	bf08      	it	eq
 800209c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bfc4      	itt	gt
 80020a4:	1a9b      	subgt	r3, r3, r2
 80020a6:	18ed      	addgt	r5, r5, r3
 80020a8:	42b5      	cmp	r5, r6
 80020aa:	d11a      	bne.n	80020e2 <_printf_common+0xd2>
 80020ac:	2000      	movs	r0, #0
 80020ae:	e008      	b.n	80020c2 <_printf_common+0xb2>
 80020b0:	2301      	movs	r3, #1
 80020b2:	4652      	mov	r2, sl
 80020b4:	4649      	mov	r1, r9
 80020b6:	4638      	mov	r0, r7
 80020b8:	47c0      	blx	r8
 80020ba:	3001      	adds	r0, #1
 80020bc:	d103      	bne.n	80020c6 <_printf_common+0xb6>
 80020be:	f04f 30ff 	mov.w	r0, #4294967295
 80020c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c6:	3501      	adds	r5, #1
 80020c8:	e7c1      	b.n	800204e <_printf_common+0x3e>
 80020ca:	2030      	movs	r0, #48	; 0x30
 80020cc:	18e1      	adds	r1, r4, r3
 80020ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020d8:	4422      	add	r2, r4
 80020da:	3302      	adds	r3, #2
 80020dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020e0:	e7c2      	b.n	8002068 <_printf_common+0x58>
 80020e2:	2301      	movs	r3, #1
 80020e4:	4622      	mov	r2, r4
 80020e6:	4649      	mov	r1, r9
 80020e8:	4638      	mov	r0, r7
 80020ea:	47c0      	blx	r8
 80020ec:	3001      	adds	r0, #1
 80020ee:	d0e6      	beq.n	80020be <_printf_common+0xae>
 80020f0:	3601      	adds	r6, #1
 80020f2:	e7d9      	b.n	80020a8 <_printf_common+0x98>

080020f4 <_printf_i>:
 80020f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020f8:	7e0f      	ldrb	r7, [r1, #24]
 80020fa:	4691      	mov	r9, r2
 80020fc:	2f78      	cmp	r7, #120	; 0x78
 80020fe:	4680      	mov	r8, r0
 8002100:	460c      	mov	r4, r1
 8002102:	469a      	mov	sl, r3
 8002104:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800210a:	d807      	bhi.n	800211c <_printf_i+0x28>
 800210c:	2f62      	cmp	r7, #98	; 0x62
 800210e:	d80a      	bhi.n	8002126 <_printf_i+0x32>
 8002110:	2f00      	cmp	r7, #0
 8002112:	f000 80d5 	beq.w	80022c0 <_printf_i+0x1cc>
 8002116:	2f58      	cmp	r7, #88	; 0x58
 8002118:	f000 80c1 	beq.w	800229e <_printf_i+0x1aa>
 800211c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002124:	e03a      	b.n	800219c <_printf_i+0xa8>
 8002126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800212a:	2b15      	cmp	r3, #21
 800212c:	d8f6      	bhi.n	800211c <_printf_i+0x28>
 800212e:	a101      	add	r1, pc, #4	; (adr r1, 8002134 <_printf_i+0x40>)
 8002130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002134:	0800218d 	.word	0x0800218d
 8002138:	080021a1 	.word	0x080021a1
 800213c:	0800211d 	.word	0x0800211d
 8002140:	0800211d 	.word	0x0800211d
 8002144:	0800211d 	.word	0x0800211d
 8002148:	0800211d 	.word	0x0800211d
 800214c:	080021a1 	.word	0x080021a1
 8002150:	0800211d 	.word	0x0800211d
 8002154:	0800211d 	.word	0x0800211d
 8002158:	0800211d 	.word	0x0800211d
 800215c:	0800211d 	.word	0x0800211d
 8002160:	080022a7 	.word	0x080022a7
 8002164:	080021cd 	.word	0x080021cd
 8002168:	08002261 	.word	0x08002261
 800216c:	0800211d 	.word	0x0800211d
 8002170:	0800211d 	.word	0x0800211d
 8002174:	080022c9 	.word	0x080022c9
 8002178:	0800211d 	.word	0x0800211d
 800217c:	080021cd 	.word	0x080021cd
 8002180:	0800211d 	.word	0x0800211d
 8002184:	0800211d 	.word	0x0800211d
 8002188:	08002269 	.word	0x08002269
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	602a      	str	r2, [r5, #0]
 8002194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800219c:	2301      	movs	r3, #1
 800219e:	e0a0      	b.n	80022e2 <_printf_i+0x1ee>
 80021a0:	6820      	ldr	r0, [r4, #0]
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	0607      	lsls	r7, r0, #24
 80021a6:	f103 0104 	add.w	r1, r3, #4
 80021aa:	6029      	str	r1, [r5, #0]
 80021ac:	d501      	bpl.n	80021b2 <_printf_i+0xbe>
 80021ae:	681e      	ldr	r6, [r3, #0]
 80021b0:	e003      	b.n	80021ba <_printf_i+0xc6>
 80021b2:	0646      	lsls	r6, r0, #25
 80021b4:	d5fb      	bpl.n	80021ae <_printf_i+0xba>
 80021b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80021ba:	2e00      	cmp	r6, #0
 80021bc:	da03      	bge.n	80021c6 <_printf_i+0xd2>
 80021be:	232d      	movs	r3, #45	; 0x2d
 80021c0:	4276      	negs	r6, r6
 80021c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021c6:	230a      	movs	r3, #10
 80021c8:	4859      	ldr	r0, [pc, #356]	; (8002330 <_printf_i+0x23c>)
 80021ca:	e012      	b.n	80021f2 <_printf_i+0xfe>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	1d19      	adds	r1, r3, #4
 80021d2:	6029      	str	r1, [r5, #0]
 80021d4:	0605      	lsls	r5, r0, #24
 80021d6:	d501      	bpl.n	80021dc <_printf_i+0xe8>
 80021d8:	681e      	ldr	r6, [r3, #0]
 80021da:	e002      	b.n	80021e2 <_printf_i+0xee>
 80021dc:	0641      	lsls	r1, r0, #25
 80021de:	d5fb      	bpl.n	80021d8 <_printf_i+0xe4>
 80021e0:	881e      	ldrh	r6, [r3, #0]
 80021e2:	2f6f      	cmp	r7, #111	; 0x6f
 80021e4:	bf0c      	ite	eq
 80021e6:	2308      	moveq	r3, #8
 80021e8:	230a      	movne	r3, #10
 80021ea:	4851      	ldr	r0, [pc, #324]	; (8002330 <_printf_i+0x23c>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021f2:	6865      	ldr	r5, [r4, #4]
 80021f4:	2d00      	cmp	r5, #0
 80021f6:	bfa8      	it	ge
 80021f8:	6821      	ldrge	r1, [r4, #0]
 80021fa:	60a5      	str	r5, [r4, #8]
 80021fc:	bfa4      	itt	ge
 80021fe:	f021 0104 	bicge.w	r1, r1, #4
 8002202:	6021      	strge	r1, [r4, #0]
 8002204:	b90e      	cbnz	r6, 800220a <_printf_i+0x116>
 8002206:	2d00      	cmp	r5, #0
 8002208:	d04b      	beq.n	80022a2 <_printf_i+0x1ae>
 800220a:	4615      	mov	r5, r2
 800220c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002210:	fb03 6711 	mls	r7, r3, r1, r6
 8002214:	5dc7      	ldrb	r7, [r0, r7]
 8002216:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800221a:	4637      	mov	r7, r6
 800221c:	42bb      	cmp	r3, r7
 800221e:	460e      	mov	r6, r1
 8002220:	d9f4      	bls.n	800220c <_printf_i+0x118>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d10b      	bne.n	800223e <_printf_i+0x14a>
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	07de      	lsls	r6, r3, #31
 800222a:	d508      	bpl.n	800223e <_printf_i+0x14a>
 800222c:	6923      	ldr	r3, [r4, #16]
 800222e:	6861      	ldr	r1, [r4, #4]
 8002230:	4299      	cmp	r1, r3
 8002232:	bfde      	ittt	le
 8002234:	2330      	movle	r3, #48	; 0x30
 8002236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800223a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800223e:	1b52      	subs	r2, r2, r5
 8002240:	6122      	str	r2, [r4, #16]
 8002242:	464b      	mov	r3, r9
 8002244:	4621      	mov	r1, r4
 8002246:	4640      	mov	r0, r8
 8002248:	f8cd a000 	str.w	sl, [sp]
 800224c:	aa03      	add	r2, sp, #12
 800224e:	f7ff fedf 	bl	8002010 <_printf_common>
 8002252:	3001      	adds	r0, #1
 8002254:	d14a      	bne.n	80022ec <_printf_i+0x1f8>
 8002256:	f04f 30ff 	mov.w	r0, #4294967295
 800225a:	b004      	add	sp, #16
 800225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	2778      	movs	r7, #120	; 0x78
 800226a:	4832      	ldr	r0, [pc, #200]	; (8002334 <_printf_i+0x240>)
 800226c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	6829      	ldr	r1, [r5, #0]
 8002274:	061f      	lsls	r7, r3, #24
 8002276:	f851 6b04 	ldr.w	r6, [r1], #4
 800227a:	d402      	bmi.n	8002282 <_printf_i+0x18e>
 800227c:	065f      	lsls	r7, r3, #25
 800227e:	bf48      	it	mi
 8002280:	b2b6      	uxthmi	r6, r6
 8002282:	07df      	lsls	r7, r3, #31
 8002284:	bf48      	it	mi
 8002286:	f043 0320 	orrmi.w	r3, r3, #32
 800228a:	6029      	str	r1, [r5, #0]
 800228c:	bf48      	it	mi
 800228e:	6023      	strmi	r3, [r4, #0]
 8002290:	b91e      	cbnz	r6, 800229a <_printf_i+0x1a6>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	f023 0320 	bic.w	r3, r3, #32
 8002298:	6023      	str	r3, [r4, #0]
 800229a:	2310      	movs	r3, #16
 800229c:	e7a6      	b.n	80021ec <_printf_i+0xf8>
 800229e:	4824      	ldr	r0, [pc, #144]	; (8002330 <_printf_i+0x23c>)
 80022a0:	e7e4      	b.n	800226c <_printf_i+0x178>
 80022a2:	4615      	mov	r5, r2
 80022a4:	e7bd      	b.n	8002222 <_printf_i+0x12e>
 80022a6:	682b      	ldr	r3, [r5, #0]
 80022a8:	6826      	ldr	r6, [r4, #0]
 80022aa:	1d18      	adds	r0, r3, #4
 80022ac:	6961      	ldr	r1, [r4, #20]
 80022ae:	6028      	str	r0, [r5, #0]
 80022b0:	0635      	lsls	r5, r6, #24
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	d501      	bpl.n	80022ba <_printf_i+0x1c6>
 80022b6:	6019      	str	r1, [r3, #0]
 80022b8:	e002      	b.n	80022c0 <_printf_i+0x1cc>
 80022ba:	0670      	lsls	r0, r6, #25
 80022bc:	d5fb      	bpl.n	80022b6 <_printf_i+0x1c2>
 80022be:	8019      	strh	r1, [r3, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	4615      	mov	r5, r2
 80022c4:	6123      	str	r3, [r4, #16]
 80022c6:	e7bc      	b.n	8002242 <_printf_i+0x14e>
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	2100      	movs	r1, #0
 80022cc:	1d1a      	adds	r2, r3, #4
 80022ce:	602a      	str	r2, [r5, #0]
 80022d0:	681d      	ldr	r5, [r3, #0]
 80022d2:	6862      	ldr	r2, [r4, #4]
 80022d4:	4628      	mov	r0, r5
 80022d6:	f7ff fc48 	bl	8001b6a <memchr>
 80022da:	b108      	cbz	r0, 80022e0 <_printf_i+0x1ec>
 80022dc:	1b40      	subs	r0, r0, r5
 80022de:	6060      	str	r0, [r4, #4]
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	6123      	str	r3, [r4, #16]
 80022e4:	2300      	movs	r3, #0
 80022e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ea:	e7aa      	b.n	8002242 <_printf_i+0x14e>
 80022ec:	462a      	mov	r2, r5
 80022ee:	4649      	mov	r1, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	6923      	ldr	r3, [r4, #16]
 80022f4:	47d0      	blx	sl
 80022f6:	3001      	adds	r0, #1
 80022f8:	d0ad      	beq.n	8002256 <_printf_i+0x162>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	079b      	lsls	r3, r3, #30
 80022fe:	d413      	bmi.n	8002328 <_printf_i+0x234>
 8002300:	68e0      	ldr	r0, [r4, #12]
 8002302:	9b03      	ldr	r3, [sp, #12]
 8002304:	4298      	cmp	r0, r3
 8002306:	bfb8      	it	lt
 8002308:	4618      	movlt	r0, r3
 800230a:	e7a6      	b.n	800225a <_printf_i+0x166>
 800230c:	2301      	movs	r3, #1
 800230e:	4632      	mov	r2, r6
 8002310:	4649      	mov	r1, r9
 8002312:	4640      	mov	r0, r8
 8002314:	47d0      	blx	sl
 8002316:	3001      	adds	r0, #1
 8002318:	d09d      	beq.n	8002256 <_printf_i+0x162>
 800231a:	3501      	adds	r5, #1
 800231c:	68e3      	ldr	r3, [r4, #12]
 800231e:	9903      	ldr	r1, [sp, #12]
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	42ab      	cmp	r3, r5
 8002324:	dcf2      	bgt.n	800230c <_printf_i+0x218>
 8002326:	e7eb      	b.n	8002300 <_printf_i+0x20c>
 8002328:	2500      	movs	r5, #0
 800232a:	f104 0619 	add.w	r6, r4, #25
 800232e:	e7f5      	b.n	800231c <_printf_i+0x228>
 8002330:	080026a1 	.word	0x080026a1
 8002334:	080026b2 	.word	0x080026b2

08002338 <__sflush_r>:
 8002338:	898a      	ldrh	r2, [r1, #12]
 800233a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233c:	4605      	mov	r5, r0
 800233e:	0710      	lsls	r0, r2, #28
 8002340:	460c      	mov	r4, r1
 8002342:	d457      	bmi.n	80023f4 <__sflush_r+0xbc>
 8002344:	684b      	ldr	r3, [r1, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	dc04      	bgt.n	8002354 <__sflush_r+0x1c>
 800234a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	dc01      	bgt.n	8002354 <__sflush_r+0x1c>
 8002350:	2000      	movs	r0, #0
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002356:	2e00      	cmp	r6, #0
 8002358:	d0fa      	beq.n	8002350 <__sflush_r+0x18>
 800235a:	2300      	movs	r3, #0
 800235c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002360:	682f      	ldr	r7, [r5, #0]
 8002362:	6a21      	ldr	r1, [r4, #32]
 8002364:	602b      	str	r3, [r5, #0]
 8002366:	d032      	beq.n	80023ce <__sflush_r+0x96>
 8002368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	075a      	lsls	r2, r3, #29
 800236e:	d505      	bpl.n	800237c <__sflush_r+0x44>
 8002370:	6863      	ldr	r3, [r4, #4]
 8002372:	1ac0      	subs	r0, r0, r3
 8002374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002376:	b10b      	cbz	r3, 800237c <__sflush_r+0x44>
 8002378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800237a:	1ac0      	subs	r0, r0, r3
 800237c:	2300      	movs	r3, #0
 800237e:	4602      	mov	r2, r0
 8002380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002382:	4628      	mov	r0, r5
 8002384:	6a21      	ldr	r1, [r4, #32]
 8002386:	47b0      	blx	r6
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	d106      	bne.n	800239c <__sflush_r+0x64>
 800238e:	6829      	ldr	r1, [r5, #0]
 8002390:	291d      	cmp	r1, #29
 8002392:	d82b      	bhi.n	80023ec <__sflush_r+0xb4>
 8002394:	4a28      	ldr	r2, [pc, #160]	; (8002438 <__sflush_r+0x100>)
 8002396:	410a      	asrs	r2, r1
 8002398:	07d6      	lsls	r6, r2, #31
 800239a:	d427      	bmi.n	80023ec <__sflush_r+0xb4>
 800239c:	2200      	movs	r2, #0
 800239e:	6062      	str	r2, [r4, #4]
 80023a0:	6922      	ldr	r2, [r4, #16]
 80023a2:	04d9      	lsls	r1, r3, #19
 80023a4:	6022      	str	r2, [r4, #0]
 80023a6:	d504      	bpl.n	80023b2 <__sflush_r+0x7a>
 80023a8:	1c42      	adds	r2, r0, #1
 80023aa:	d101      	bne.n	80023b0 <__sflush_r+0x78>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b903      	cbnz	r3, 80023b2 <__sflush_r+0x7a>
 80023b0:	6560      	str	r0, [r4, #84]	; 0x54
 80023b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023b4:	602f      	str	r7, [r5, #0]
 80023b6:	2900      	cmp	r1, #0
 80023b8:	d0ca      	beq.n	8002350 <__sflush_r+0x18>
 80023ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023be:	4299      	cmp	r1, r3
 80023c0:	d002      	beq.n	80023c8 <__sflush_r+0x90>
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7ff fbee 	bl	8001ba4 <_free_r>
 80023c8:	2000      	movs	r0, #0
 80023ca:	6360      	str	r0, [r4, #52]	; 0x34
 80023cc:	e7c1      	b.n	8002352 <__sflush_r+0x1a>
 80023ce:	2301      	movs	r3, #1
 80023d0:	4628      	mov	r0, r5
 80023d2:	47b0      	blx	r6
 80023d4:	1c41      	adds	r1, r0, #1
 80023d6:	d1c8      	bne.n	800236a <__sflush_r+0x32>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0c5      	beq.n	800236a <__sflush_r+0x32>
 80023de:	2b1d      	cmp	r3, #29
 80023e0:	d001      	beq.n	80023e6 <__sflush_r+0xae>
 80023e2:	2b16      	cmp	r3, #22
 80023e4:	d101      	bne.n	80023ea <__sflush_r+0xb2>
 80023e6:	602f      	str	r7, [r5, #0]
 80023e8:	e7b2      	b.n	8002350 <__sflush_r+0x18>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	e7ae      	b.n	8002352 <__sflush_r+0x1a>
 80023f4:	690f      	ldr	r7, [r1, #16]
 80023f6:	2f00      	cmp	r7, #0
 80023f8:	d0aa      	beq.n	8002350 <__sflush_r+0x18>
 80023fa:	0793      	lsls	r3, r2, #30
 80023fc:	bf18      	it	ne
 80023fe:	2300      	movne	r3, #0
 8002400:	680e      	ldr	r6, [r1, #0]
 8002402:	bf08      	it	eq
 8002404:	694b      	ldreq	r3, [r1, #20]
 8002406:	1bf6      	subs	r6, r6, r7
 8002408:	600f      	str	r7, [r1, #0]
 800240a:	608b      	str	r3, [r1, #8]
 800240c:	2e00      	cmp	r6, #0
 800240e:	dd9f      	ble.n	8002350 <__sflush_r+0x18>
 8002410:	4633      	mov	r3, r6
 8002412:	463a      	mov	r2, r7
 8002414:	4628      	mov	r0, r5
 8002416:	6a21      	ldr	r1, [r4, #32]
 8002418:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800241c:	47e0      	blx	ip
 800241e:	2800      	cmp	r0, #0
 8002420:	dc06      	bgt.n	8002430 <__sflush_r+0xf8>
 8002422:	89a3      	ldrh	r3, [r4, #12]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	e790      	b.n	8002352 <__sflush_r+0x1a>
 8002430:	4407      	add	r7, r0
 8002432:	1a36      	subs	r6, r6, r0
 8002434:	e7ea      	b.n	800240c <__sflush_r+0xd4>
 8002436:	bf00      	nop
 8002438:	dfbffffe 	.word	0xdfbffffe

0800243c <_fflush_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	690b      	ldr	r3, [r1, #16]
 8002440:	4605      	mov	r5, r0
 8002442:	460c      	mov	r4, r1
 8002444:	b913      	cbnz	r3, 800244c <_fflush_r+0x10>
 8002446:	2500      	movs	r5, #0
 8002448:	4628      	mov	r0, r5
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	b118      	cbz	r0, 8002456 <_fflush_r+0x1a>
 800244e:	6a03      	ldr	r3, [r0, #32]
 8002450:	b90b      	cbnz	r3, 8002456 <_fflush_r+0x1a>
 8002452:	f7ff f903 	bl	800165c <__sinit>
 8002456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f3      	beq.n	8002446 <_fflush_r+0xa>
 800245e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002460:	07d0      	lsls	r0, r2, #31
 8002462:	d404      	bmi.n	800246e <_fflush_r+0x32>
 8002464:	0599      	lsls	r1, r3, #22
 8002466:	d402      	bmi.n	800246e <_fflush_r+0x32>
 8002468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800246a:	f7ff fb7c 	bl	8001b66 <__retarget_lock_acquire_recursive>
 800246e:	4628      	mov	r0, r5
 8002470:	4621      	mov	r1, r4
 8002472:	f7ff ff61 	bl	8002338 <__sflush_r>
 8002476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002478:	4605      	mov	r5, r0
 800247a:	07da      	lsls	r2, r3, #31
 800247c:	d4e4      	bmi.n	8002448 <_fflush_r+0xc>
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	059b      	lsls	r3, r3, #22
 8002482:	d4e1      	bmi.n	8002448 <_fflush_r+0xc>
 8002484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002486:	f7ff fb6f 	bl	8001b68 <__retarget_lock_release_recursive>
 800248a:	e7dd      	b.n	8002448 <_fflush_r+0xc>

0800248c <__swhatbuf_r>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	460c      	mov	r4, r1
 8002490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002494:	4615      	mov	r5, r2
 8002496:	2900      	cmp	r1, #0
 8002498:	461e      	mov	r6, r3
 800249a:	b096      	sub	sp, #88	; 0x58
 800249c:	da0c      	bge.n	80024b8 <__swhatbuf_r+0x2c>
 800249e:	89a3      	ldrh	r3, [r4, #12]
 80024a0:	2100      	movs	r1, #0
 80024a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024a6:	bf0c      	ite	eq
 80024a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80024ac:	2340      	movne	r3, #64	; 0x40
 80024ae:	2000      	movs	r0, #0
 80024b0:	6031      	str	r1, [r6, #0]
 80024b2:	602b      	str	r3, [r5, #0]
 80024b4:	b016      	add	sp, #88	; 0x58
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	466a      	mov	r2, sp
 80024ba:	f000 f87d 	bl	80025b8 <_fstat_r>
 80024be:	2800      	cmp	r0, #0
 80024c0:	dbed      	blt.n	800249e <__swhatbuf_r+0x12>
 80024c2:	9901      	ldr	r1, [sp, #4]
 80024c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80024c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80024cc:	4259      	negs	r1, r3
 80024ce:	4159      	adcs	r1, r3
 80024d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d4:	e7eb      	b.n	80024ae <__swhatbuf_r+0x22>

080024d6 <__smakebuf_r>:
 80024d6:	898b      	ldrh	r3, [r1, #12]
 80024d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024da:	079d      	lsls	r5, r3, #30
 80024dc:	4606      	mov	r6, r0
 80024de:	460c      	mov	r4, r1
 80024e0:	d507      	bpl.n	80024f2 <__smakebuf_r+0x1c>
 80024e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024e6:	6023      	str	r3, [r4, #0]
 80024e8:	6123      	str	r3, [r4, #16]
 80024ea:	2301      	movs	r3, #1
 80024ec:	6163      	str	r3, [r4, #20]
 80024ee:	b002      	add	sp, #8
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
 80024f2:	466a      	mov	r2, sp
 80024f4:	ab01      	add	r3, sp, #4
 80024f6:	f7ff ffc9 	bl	800248c <__swhatbuf_r>
 80024fa:	9900      	ldr	r1, [sp, #0]
 80024fc:	4605      	mov	r5, r0
 80024fe:	4630      	mov	r0, r6
 8002500:	f7ff fbb8 	bl	8001c74 <_malloc_r>
 8002504:	b948      	cbnz	r0, 800251a <__smakebuf_r+0x44>
 8002506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800250a:	059a      	lsls	r2, r3, #22
 800250c:	d4ef      	bmi.n	80024ee <__smakebuf_r+0x18>
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	e7e3      	b.n	80024e2 <__smakebuf_r+0xc>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	6020      	str	r0, [r4, #0]
 800251e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002522:	81a3      	strh	r3, [r4, #12]
 8002524:	9b00      	ldr	r3, [sp, #0]
 8002526:	6120      	str	r0, [r4, #16]
 8002528:	6163      	str	r3, [r4, #20]
 800252a:	9b01      	ldr	r3, [sp, #4]
 800252c:	b15b      	cbz	r3, 8002546 <__smakebuf_r+0x70>
 800252e:	4630      	mov	r0, r6
 8002530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002534:	f000 f852 	bl	80025dc <_isatty_r>
 8002538:	b128      	cbz	r0, 8002546 <__smakebuf_r+0x70>
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	81a3      	strh	r3, [r4, #12]
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	431d      	orrs	r5, r3
 800254a:	81a5      	strh	r5, [r4, #12]
 800254c:	e7cf      	b.n	80024ee <__smakebuf_r+0x18>

0800254e <_putc_r>:
 800254e:	b570      	push	{r4, r5, r6, lr}
 8002550:	460d      	mov	r5, r1
 8002552:	4614      	mov	r4, r2
 8002554:	4606      	mov	r6, r0
 8002556:	b118      	cbz	r0, 8002560 <_putc_r+0x12>
 8002558:	6a03      	ldr	r3, [r0, #32]
 800255a:	b90b      	cbnz	r3, 8002560 <_putc_r+0x12>
 800255c:	f7ff f87e 	bl	800165c <__sinit>
 8002560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002562:	07d8      	lsls	r0, r3, #31
 8002564:	d405      	bmi.n	8002572 <_putc_r+0x24>
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	0599      	lsls	r1, r3, #22
 800256a:	d402      	bmi.n	8002572 <_putc_r+0x24>
 800256c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800256e:	f7ff fafa 	bl	8001b66 <__retarget_lock_acquire_recursive>
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	3b01      	subs	r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	60a3      	str	r3, [r4, #8]
 800257a:	da05      	bge.n	8002588 <_putc_r+0x3a>
 800257c:	69a2      	ldr	r2, [r4, #24]
 800257e:	4293      	cmp	r3, r2
 8002580:	db12      	blt.n	80025a8 <_putc_r+0x5a>
 8002582:	b2eb      	uxtb	r3, r5
 8002584:	2b0a      	cmp	r3, #10
 8002586:	d00f      	beq.n	80025a8 <_putc_r+0x5a>
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	6022      	str	r2, [r4, #0]
 800258e:	701d      	strb	r5, [r3, #0]
 8002590:	b2ed      	uxtb	r5, r5
 8002592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002594:	07da      	lsls	r2, r3, #31
 8002596:	d405      	bmi.n	80025a4 <_putc_r+0x56>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	059b      	lsls	r3, r3, #22
 800259c:	d402      	bmi.n	80025a4 <_putc_r+0x56>
 800259e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025a0:	f7ff fae2 	bl	8001b68 <__retarget_lock_release_recursive>
 80025a4:	4628      	mov	r0, r5
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	4629      	mov	r1, r5
 80025aa:	4622      	mov	r2, r4
 80025ac:	4630      	mov	r0, r6
 80025ae:	f7ff f9cc 	bl	800194a <__swbuf_r>
 80025b2:	4605      	mov	r5, r0
 80025b4:	e7ed      	b.n	8002592 <_putc_r+0x44>
	...

080025b8 <_fstat_r>:
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	2300      	movs	r3, #0
 80025bc:	4d06      	ldr	r5, [pc, #24]	; (80025d8 <_fstat_r+0x20>)
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	f7fe fdcc 	bl	8001162 <_fstat>
 80025ca:	1c43      	adds	r3, r0, #1
 80025cc:	d102      	bne.n	80025d4 <_fstat_r+0x1c>
 80025ce:	682b      	ldr	r3, [r5, #0]
 80025d0:	b103      	cbz	r3, 80025d4 <_fstat_r+0x1c>
 80025d2:	6023      	str	r3, [r4, #0]
 80025d4:	bd38      	pop	{r3, r4, r5, pc}
 80025d6:	bf00      	nop
 80025d8:	200002e0 	.word	0x200002e0

080025dc <_isatty_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	2300      	movs	r3, #0
 80025e0:	4d05      	ldr	r5, [pc, #20]	; (80025f8 <_isatty_r+0x1c>)
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	602b      	str	r3, [r5, #0]
 80025e8:	f7fe ff22 	bl	8001430 <_isatty>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_isatty_r+0x1a>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_isatty_r+0x1a>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	200002e0 	.word	0x200002e0

080025fc <_sbrk_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	2300      	movs	r3, #0
 8002600:	4d05      	ldr	r5, [pc, #20]	; (8002618 <_sbrk_r+0x1c>)
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	602b      	str	r3, [r5, #0]
 8002608:	f7fd fee8 	bl	80003dc <_sbrk>
 800260c:	1c43      	adds	r3, r0, #1
 800260e:	d102      	bne.n	8002616 <_sbrk_r+0x1a>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	b103      	cbz	r3, 8002616 <_sbrk_r+0x1a>
 8002614:	6023      	str	r3, [r4, #0]
 8002616:	bd38      	pop	{r3, r4, r5, pc}
 8002618:	200002e0 	.word	0x200002e0

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
