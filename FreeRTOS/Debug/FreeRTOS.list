
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a14c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800a260  0800a260  0001a260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f0  0800a7f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7f0  0800a7f0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7f0  0800a7f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000337c  200001e0  0800a9d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000355c  0800a9d8  0002355c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5d8  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002547  00000000  00000000  0002c824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089e  00000000  00000000  0002f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000319e  00000000  00000000  00030186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d81b  00000000  00000000  00033324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089492  00000000  00000000  00040b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000460c  00000000  00000000  000c9fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ce5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a244 	.word	0x0800a244

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a244 	.word	0x0800a244

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <leds_init>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GPIOB_BASE_ARR 0x40010C00
void leds_init()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	//set PB12 in output push-pull
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <leds_init+0x44>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <leds_init+0x44>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <leds_init+0x44>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
	uint32_t * GPIOB_CRH = (uint32_t *) (GPIOB_BASE_ARR + 0x04);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <leds_init+0x48>)
 8000bf8:	607b      	str	r3, [r7, #4]
	*GPIOB_CRH |= (0b11 << 16);// set PB12 in OUTPUT mode speed 50MHz
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]

	*GPIOB_CRH &= ~(0b11 << 18); //set PB12 output push-pull
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010c04 	.word	0x40010c04

08000c24 <led_toggle>:
void led_toggle(){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
	uint32_t * GPIOB_ODR = (uint32_t *) (GPIOB_BASE_ARR + 0x0C);
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <led_toggle+0x3c>)
 8000c2c:	607b      	str	r3, [r7, #4]

	if(((* GPIOB_ODR >> 12)&1)==0)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d106      	bne.n	8000c48 <led_toggle+0x24>
	{

		*GPIOB_ODR |= (1<<12);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}
 8000c46:	e005      	b.n	8000c54 <led_toggle+0x30>
		*GPIOB_ODR &= ~(1<<12);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40010c0c 	.word	0x40010c0c

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000c68:	f004 fe90 	bl	800598c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fa16 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f858 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f89c 	bl	8000db0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	UART1_init();
 8000c78:	f004 fb96 	bl	80053a8 <UART1_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c7c:	f000 ff32 	bl	8001ae4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of log */
  logHandle = osMutexNew(&log_attributes);
 8000c80:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <main+0x80>)
 8000c82:	f001 f86d 	bl	8001d60 <osMutexNew>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <main+0x84>)
 8000c8a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp */
  tempHandle = osMessageQueueNew (32, sizeof(float), &temp_attributes);
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <main+0x88>)
 8000c8e:	2104      	movs	r1, #4
 8000c90:	2020      	movs	r0, #32
 8000c92:	f001 f9ad 	bl	8001ff0 <osMessageQueueNew>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <main+0x8c>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(func1, NULL, &task1_attributes);
 8000c9c:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <main+0x90>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <main+0x94>)
 8000ca2:	f000 ff85 	bl	8001bb0 <osThreadNew>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <main+0x98>)
 8000caa:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(func2, NULL, &task2_attributes);
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <main+0x9c>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <main+0xa0>)
 8000cb2:	f000 ff7d 	bl	8001bb0 <osThreadNew>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <main+0xa4>)
 8000cba:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(func3, NULL, &task3_attributes);
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <main+0xa8>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <main+0xac>)
 8000cc2:	f000 ff75 	bl	8001bb0 <osThreadNew>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <main+0xb0>)
 8000cca:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(func4, NULL, &task4_attributes);
 8000ccc:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <main+0xb4>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <main+0xb8>)
 8000cd2:	f000 ff6d 	bl	8001bb0 <osThreadNew>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <main+0xbc>)
 8000cda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cdc:	f000 ff34 	bl	8001b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//initialise_monitor_handles();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <main+0x7c>
 8000ce2:	bf00      	nop
 8000ce4:	0800a378 	.word	0x0800a378
 8000ce8:	20000210 	.word	0x20000210
 8000cec:	0800a360 	.word	0x0800a360
 8000cf0:	2000020c 	.word	0x2000020c
 8000cf4:	0800a2d0 	.word	0x0800a2d0
 8000cf8:	08000df5 	.word	0x08000df5
 8000cfc:	200001fc 	.word	0x200001fc
 8000d00:	0800a2f4 	.word	0x0800a2f4
 8000d04:	08000e2d 	.word	0x08000e2d
 8000d08:	20000200 	.word	0x20000200
 8000d0c:	0800a318 	.word	0x0800a318
 8000d10:	08000e49 	.word	0x08000e49
 8000d14:	20000204 	.word	0x20000204
 8000d18:	0800a33c 	.word	0x0800a33c
 8000d1c:	08000edd 	.word	0x08000edd
 8000d20:	20000208 	.word	0x20000208

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fe58 	bl	80069e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fadb 	bl	8001328 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d78:	f000 f8ce 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fd48 	bl	800182c <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000da2:	f000 f8b9 	bl	8000f18 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3740      	adds	r7, #64	; 0x40
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MX_GPIO_Init+0x40>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <func1+0x30>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f845 	bl	8001e94 <osMutexAcquire>
	uart_printf("xin chao");
 8000e0a:	4807      	ldr	r0, [pc, #28]	; (8000e28 <func1+0x34>)
 8000e0c:	f004 fb77 	bl	80054fe <uart_printf>
	osMutexRelease(logHandle);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <func1+0x30>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 f89b 	bl	8001f50 <osMutexRelease>
    osDelay(1000);
 8000e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1e:	f000 ff71 	bl	8001d04 <osDelay>
	  osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000e22:	e7eb      	b.n	8000dfc <func1+0x8>
 8000e24:	20000210 	.word	0x20000210
 8000e28:	0800a28c 	.word	0x0800a28c

08000e2c <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
	leds_init();
 8000e34:	f7ff fed0 	bl	8000bd8 <leds_init>
  /* Infinite loop */
  for(;;)
  {
	  led_toggle();
 8000e38:	f7ff fef4 	bl	8000c24 <led_toggle>
    osDelay(1000);
 8000e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e40:	f000 ff60 	bl	8001d04 <osDelay>
	  led_toggle();
 8000e44:	e7f8      	b.n	8000e38 <func2+0xc>
	...

08000e48 <func3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func3 */
void func3(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func3 */
	float temp =0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	uint32_t num_msg = osMessageQueueGetCount(tempHandle);
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <func3+0x80>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fa34 	bl	80022c8 <osMessageQueueGetCount>
 8000e60:	6138      	str	r0, [r7, #16]
	osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <func3+0x84>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f812 	bl	8001e94 <osMutexAcquire>
	uart_printf("device temp:[");
 8000e70:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <func3+0x88>)
 8000e72:	f004 fb44 	bl	80054fe <uart_printf>
	for(int i=0;i<num_msg;i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e014      	b.n	8000ea6 <func3+0x5e>
		osMessageQueueGet(tempHandle, &temp, 0, HAL_MAX_DELAY);
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <func3+0x80>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f107 010c 	add.w	r1, r7, #12
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f001 f9ab 	bl	80021e4 <osMessageQueueGet>
		uart_printf("%.2f, ",temp);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fac9 	bl	8000428 <__aeabi_f2d>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <func3+0x8c>)
 8000e9c:	f004 fb2f 	bl	80054fe <uart_printf>
	for(int i=0;i<num_msg;i++){
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d8e6      	bhi.n	8000e7c <func3+0x34>
	}
	uart_printf("\b\b]\r\n");
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <func3+0x90>)
 8000eb0:	f004 fb25 	bl	80054fe <uart_printf>
	osMutexRelease(logHandle);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <func3+0x84>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f849 	bl	8001f50 <osMutexRelease>
    osDelay(3000);
 8000ebe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ec2:	f000 ff1f 	bl	8001d04 <osDelay>
  {
 8000ec6:	e7c6      	b.n	8000e56 <func3+0xe>
 8000ec8:	2000020c 	.word	0x2000020c
 8000ecc:	20000210 	.word	0x20000210
 8000ed0:	0800a298 	.word	0x0800a298
 8000ed4:	0800a2a8 	.word	0x0800a2a8
 8000ed8:	0800a2b0 	.word	0x0800a2b0

08000edc <func4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func4 */
void func4(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func4 */
	read_temp_init();
 8000ee4:	f004 f9a2 	bl	800522c <read_temp_init>
	float temp =0;
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	temp = adc_get_temp_ss();
 8000eee:	f004 f9d7 	bl	80052a0 <adc_get_temp_ss>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(tempHandle, &temp, 0, HAL_MAX_DELAY);
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <func4+0x38>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f107 010c 	add.w	r1, r7, #12
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2200      	movs	r2, #0
 8000f04:	f001 f8fa 	bl	80020fc <osMessageQueuePut>
    osDelay(1000);
 8000f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0c:	f000 fefa 	bl	8001d04 <osDelay>
	temp = adc_get_temp_ss();
 8000f10:	e7ed      	b.n	8000eee <func4+0x12>
 8000f12:	bf00      	nop
 8000f14:	2000020c 	.word	0x2000020c

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_MspInit+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_MspInit+0x68>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x68>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_MspInit+0x68>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x68>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f06f 0001 	mvn.w	r0, #1
 8000f62:	f000 f9b8 	bl	80012d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x6c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x6c>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f8b1 	bl	8001128 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fc6:	f003 f86f 	bl	80040a8 <xTaskGetSchedulerState>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d001      	beq.n	8000fd4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fd0:	f003 fed2 	bl	8004d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f005 fd40 	bl	8006a8c <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20005000 	.word	0x20005000
 8001038:	00000400 	.word	0x00000400
 800103c:	20000214 	.word	0x20000214
 8001040:	20003560 	.word	0x20003560

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff fff8 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001056:	490c      	ldr	r1, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <LoopFillZerobss+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800106c:	4c09      	ldr	r4, [pc, #36]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f005 fd0d 	bl	8006a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fdf1 	bl	8000c64 <main>
  bx lr
 8001082:	4770      	bx	lr
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800108c:	0800a7f8 	.word	0x0800a7f8
  ldr r2, =_sbss
 8001090:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001094:	2000355c 	.word	0x2000355c

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x28>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f907 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff ff34 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f911 	bl	800130e <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f8e7 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000008 	.word	0x20000008
 8001148:	20000218 	.word	0x20000218

0800114c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000218 	.word	0x20000218

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff90 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff49 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff5e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb0 	bl	800127c <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e272      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8087 	beq.w	8001456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001348:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b04      	cmp	r3, #4
 8001352:	d00c      	beq.n	800136e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001354:	4b8f      	ldr	r3, [pc, #572]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d112      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
 8001360:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d10b      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d06c      	beq.n	8001454 <HAL_RCC_OscConfig+0x12c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d168      	bne.n	8001454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e24c      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x76>
 8001390:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e02e      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7a      	ldr	r2, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b78      	ldr	r3, [pc, #480]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0xbc>
 80013ca:	4b72      	ldr	r3, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a71      	ldr	r2, [pc, #452]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 80013e4:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a67      	ldr	r2, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fea2 	bl	800114c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fe9e 	bl	800114c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e200      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xe4>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fe8e 	bl	800114c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fe8a 	bl	800114c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1ec      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x10c>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x18c>
 800147a:	4b46      	ldr	r3, [pc, #280]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x176>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1c0      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4939      	ldr	r1, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fe43 	bl	800114c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fe3f 	bl	800114c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e1a1      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fe22 	bl	800114c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fe1e 	bl	800114c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e180      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03a      	beq.n	80015ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d019      	beq.n	8001572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_RCC_OscConfig+0x274>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fe02 	bl	800114c <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fdfe 	bl	800114c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e160      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f000 fa9c 	bl	8001aa8 <RCC_Delay>
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_OscConfig+0x274>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fde8 	bl	800114c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157e:	e00f      	b.n	80015a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fde4 	bl	800114c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d908      	bls.n	80015a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e146      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	42420000 	.word	0x42420000
 800159c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e9      	bne.n	8001580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a6 	beq.w	8001706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b8b      	ldr	r3, [pc, #556]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a87      	ldr	r2, [pc, #540]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x4c8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b7f      	ldr	r3, [pc, #508]	; (80017f0 <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7e      	ldr	r2, [pc, #504]	; (80017f0 <HAL_RCC_OscConfig+0x4c8>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fda5 	bl	800114c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fda1 	bl	800114c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e103      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x4c8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x312>
 800162c:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e02d      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x334>
 8001642:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a69      	ldr	r2, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a66      	ldr	r2, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x356>
 8001664:	4b61      	ldr	r3, [pc, #388]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a60      	ldr	r2, [pc, #384]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	4b5e      	ldr	r3, [pc, #376]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a5d      	ldr	r2, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a5a      	ldr	r2, [pc, #360]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fd55 	bl	800114c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fd51 	bl	800114c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0b1      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x37e>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fd3f 	bl	800114c <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fd3b 	bl	800114c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e09b      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8087 	beq.w	800181e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d061      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d146      	bne.n	80017b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_RCC_OscConfig+0x4cc>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fd0f 	bl	800114c <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fd0b 	bl	800114c <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e06d      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d108      	bne.n	800176c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4921      	ldr	r1, [pc, #132]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a19      	ldr	r1, [r3, #32]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	430b      	orrs	r3, r1
 800177e:	491b      	ldr	r1, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fcdf 	bl	800114c <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fcdb 	bl	800114c <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e03d      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x46a>
 80017b0:	e035      	b.n	800181e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_OscConfig+0x4cc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fcc8 	bl	800114c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fcc4 	bl	800114c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e026      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x498>
 80017de:	e01e      	b.n	800181e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e019      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x500>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	429a      	cmp	r2, r3
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0d0      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d910      	bls.n	8001870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 0207 	bic.w	r2, r3, #7
 8001856:	4965      	ldr	r1, [pc, #404]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0b8      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	494d      	ldr	r1, [pc, #308]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d040      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d115      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e073      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06b      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4936      	ldr	r1, [pc, #216]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff fc16 	bl	800114c <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fc12 	bl	800114c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e053      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d210      	bcs.n	800197c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0207 	bic.w	r2, r3, #7
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e032      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4916      	ldr	r1, [pc, #88]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ba:	f000 f821 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	5ccb      	ldrb	r3, [r1, r3]
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1cc>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1d0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb74 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40022000 	.word	0x40022000
 80019f0:	40021000 	.word	0x40021000
 80019f4:	0800a388 	.word	0x0800a388
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x30>
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x36>
 8001a2e:	e027      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a32:	613b      	str	r3, [r7, #16]
      break;
 8001a34:	e027      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0c5b      	lsrs	r3, r3, #17
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a62:	fb03 f202 	mul.w	r2, r3, r2
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e004      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	613b      	str	r3, [r7, #16]
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a82:	613b      	str	r3, [r7, #16]
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	693b      	ldr	r3, [r7, #16]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	007a1200 	.word	0x007a1200
 8001a9c:	0800a398 	.word	0x0800a398
 8001aa0:	0800a3a8 	.word	0x0800a3a8
 8001aa4:	003d0900 	.word	0x003d0900

08001aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <RCC_Delay+0x34>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <RCC_Delay+0x38>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0a5b      	lsrs	r3, r3, #9
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ac4:	bf00      	nop
  }
  while (Delay --);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1e5a      	subs	r2, r3, #1
 8001aca:	60fa      	str	r2, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f9      	bne.n	8001ac4 <RCC_Delay+0x1c>
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	10624dd3 	.word	0x10624dd3

08001ae4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aea:	f3ef 8305 	mrs	r3, IPSR
 8001aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8001af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af6:	f3ef 8310 	mrs	r3, PRIMASK
 8001afa:	607b      	str	r3, [r7, #4]
  return(result);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <osKernelInitialize+0x32>
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <osKernelInitialize+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d109      	bne.n	8001b1e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001b16:	f06f 0305 	mvn.w	r3, #5
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e00c      	b.n	8001b38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <osKernelInitialize+0x60>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <osKernelInitialize+0x60>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	e002      	b.n	8001b38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	2000021c 	.word	0x2000021c

08001b48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b4e:	f3ef 8305 	mrs	r3, IPSR
 8001b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b5e:	607b      	str	r3, [r7, #4]
  return(result);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <osKernelStart+0x32>
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <osKernelStart+0x64>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d109      	bne.n	8001b82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8001b72:	603b      	str	r3, [r7, #0]
  return(result);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001b7a:	f06f 0305 	mvn.w	r3, #5
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e00e      	b.n	8001ba0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <osKernelStart+0x64>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <osKernelStart+0x64>)
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001b90:	f001 fe30 	bl	80037f4 <vTaskStartScheduler>
      stat = osOK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e002      	b.n	8001ba0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000021c 	.word	0x2000021c

08001bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b092      	sub	sp, #72	; 0x48
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bc0:	f3ef 8305 	mrs	r3, IPSR
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 8094 	bne.w	8001cf6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bce:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 808d 	bne.w	8001cf6 <osThreadNew+0x146>
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <osThreadNew+0x150>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d106      	bne.n	8001bf2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001be4:	f3ef 8311 	mrs	r3, BASEPRI
 8001be8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 8082 	bne.w	8001cf6 <osThreadNew+0x146>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d07e      	beq.n	8001cf6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001bfc:	2318      	movs	r3, #24
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001c00:	2300      	movs	r3, #0
 8001c02:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001c04:	f107 031b 	add.w	r3, r7, #27
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d045      	beq.n	8001ca2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <osThreadNew+0x74>
        name = attr->name;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <osThreadNew+0x9a>
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	2b38      	cmp	r3, #56	; 0x38
 8001c3c:	d805      	bhi.n	8001c4a <osThreadNew+0x9a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <osThreadNew+0x9e>
        return (NULL);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e054      	b.n	8001cf8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00e      	beq.n	8001c84 <osThreadNew+0xd4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b5b      	cmp	r3, #91	; 0x5b
 8001c6c:	d90a      	bls.n	8001c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <osThreadNew+0xd4>
        mem = 1;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c82:	e010      	b.n	8001ca6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10c      	bne.n	8001ca6 <osThreadNew+0xf6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d108      	bne.n	8001ca6 <osThreadNew+0xf6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <osThreadNew+0xf6>
          mem = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca0:	e001      	b.n	8001ca6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d110      	bne.n	8001cce <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cb4:	9202      	str	r2, [sp, #8]
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f001 fbca 	bl	800345c <xTaskCreateStatic>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e013      	b.n	8001cf6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d110      	bne.n	8001cf6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 fc14 	bl	8003514 <xTaskCreate>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d001      	beq.n	8001cf6 <osThreadNew+0x146>
          hTask = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cf6:	697b      	ldr	r3, [r7, #20]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000021c 	.word	0x2000021c

08001d04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d0c:	f3ef 8305 	mrs	r3, IPSR
 8001d10:	613b      	str	r3, [r7, #16]
  return(result);
 8001d12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10f      	bne.n	8001d38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d18:	f3ef 8310 	mrs	r3, PRIMASK
 8001d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <osDelay+0x34>
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <osDelay+0x58>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d109      	bne.n	8001d40 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8001d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <osDelay+0x3c>
    stat = osErrorISR;
 8001d38:	f06f 0305 	mvn.w	r3, #5
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e007      	b.n	8001d50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f001 fd1e 	bl	800378c <vTaskDelay>
    }
  }

  return (stat);
 8001d50:	697b      	ldr	r3, [r7, #20]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000021c 	.word	0x2000021c

08001d60 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d6c:	f3ef 8305 	mrs	r3, IPSR
 8001d70:	613b      	str	r3, [r7, #16]
  return(result);
 8001d72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 8085 	bne.w	8001e84 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d17e      	bne.n	8001e84 <osMutexNew+0x124>
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <osMutexNew+0x130>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d105      	bne.n	8001d9a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8001d92:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d174      	bne.n	8001e84 <osMutexNew+0x124>
    if (attr != NULL) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	e001      	b.n	8001dac <osMutexNew+0x4c>
    } else {
      type = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <osMutexNew+0x5c>
      rmtx = 1U;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	e001      	b.n	8001dc0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d15c      	bne.n	8001e84 <osMutexNew+0x124>
      mem = -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d015      	beq.n	8001e02 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <osMutexNew+0x8c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b4f      	cmp	r3, #79	; 0x4f
 8001de4:	d902      	bls.n	8001dec <osMutexNew+0x8c>
          mem = 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	e00c      	b.n	8001e06 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d108      	bne.n	8001e06 <osMutexNew+0xa6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <osMutexNew+0xa6>
            mem = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e001      	b.n	8001e06 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d112      	bne.n	8001e32 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d007      	beq.n	8001e22 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4619      	mov	r1, r3
 8001e18:	2004      	movs	r0, #4
 8001e1a:	f000 fcdb 	bl	80027d4 <xQueueCreateMutexStatic>
 8001e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e20:	e016      	b.n	8001e50 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4619      	mov	r1, r3
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f000 fcd3 	bl	80027d4 <xQueueCreateMutexStatic>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e30:	e00e      	b.n	8001e50 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f000 fcb0 	bl	80027a4 <xQueueCreateMutex>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24
 8001e46:	e003      	b.n	8001e50 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f000 fcab 	bl	80027a4 <xQueueCreateMutex>
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <osMutexNew+0x110>
        if (attr != NULL) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <osMutexNew+0x104>
          name = attr->name;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e001      	b.n	8001e68 <osMutexNew+0x108>
        } else {
          name = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8001e68:	6979      	ldr	r1, [r7, #20]
 8001e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e6c:	f001 fa9a 	bl	80033a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <osMutexNew+0x124>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000021c 	.word	0x2000021c

08001e94 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb2:	f3ef 8305 	mrs	r3, IPSR
 8001eb6:	613b      	str	r3, [r7, #16]
  return(result);
 8001eb8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <osMutexAcquire+0x4a>
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <osMutexAcquire+0xb8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d109      	bne.n	8001ee6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8001ede:	f06f 0305 	mvn.w	r3, #5
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	e02c      	b.n	8001f40 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8001eec:	f06f 0303 	mvn.w	r3, #3
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e025      	b.n	8001f40 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d011      	beq.n	8001f1e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f000 fcb8 	bl	8002872 <xQueueTakeMutexRecursive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d01b      	beq.n	8001f40 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8001f0e:	f06f 0301 	mvn.w	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e014      	b.n	8001f40 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001f16:	f06f 0302 	mvn.w	r3, #2
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e010      	b.n	8001f40 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	69b8      	ldr	r0, [r7, #24]
 8001f22:	f000 ff53 	bl	8002dcc <xQueueSemaphoreTake>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d009      	beq.n	8001f40 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8001f32:	f06f 0301 	mvn.w	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	e002      	b.n	8001f40 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001f3a:	f06f 0302 	mvn.w	r3, #2
 8001f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001f40:	69fb      	ldr	r3, [r7, #28]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000021c 	.word	0x2000021c

08001f50 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f6c:	f3ef 8305 	mrs	r3, IPSR
 8001f70:	613b      	str	r3, [r7, #16]
  return(result);
 8001f72:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10f      	bne.n	8001f98 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f78:	f3ef 8310 	mrs	r3, PRIMASK
 8001f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <osMutexRelease+0x48>
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <osMutexRelease+0x9c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d109      	bne.n	8001fa0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8001f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8001f98:	f06f 0305 	mvn.w	r3, #5
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e01f      	b.n	8001fe0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8001fa6:	f06f 0303 	mvn.w	r3, #3
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	e018      	b.n	8001fe0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d009      	beq.n	8001fc8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8001fb4:	69b8      	ldr	r0, [r7, #24]
 8001fb6:	f000 fc28 	bl	800280a <xQueueGiveMutexRecursive>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d00f      	beq.n	8001fe0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8001fc0:	f06f 0302 	mvn.w	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e00b      	b.n	8001fe0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	f000 fc86 	bl	80028e0 <xQueueGenericSend>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8001fda:	f06f 0302 	mvn.w	r3, #2
 8001fde:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000021c 	.word	0x2000021c

08001ff0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002000:	f3ef 8305 	mrs	r3, IPSR
 8002004:	61bb      	str	r3, [r7, #24]
  return(result);
 8002006:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002008:	2b00      	cmp	r3, #0
 800200a:	d16f      	bne.n	80020ec <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200c:	f3ef 8310 	mrs	r3, PRIMASK
 8002010:	617b      	str	r3, [r7, #20]
  return(result);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d169      	bne.n	80020ec <osMessageQueueNew+0xfc>
 8002018:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <osMessageQueueNew+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d105      	bne.n	800202c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002020:	f3ef 8311 	mrs	r3, BASEPRI
 8002024:	613b      	str	r3, [r7, #16]
  return(result);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d15f      	bne.n	80020ec <osMessageQueueNew+0xfc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d05c      	beq.n	80020ec <osMessageQueueNew+0xfc>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d059      	beq.n	80020ec <osMessageQueueNew+0xfc>
    mem = -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d029      	beq.n	8002098 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <osMessageQueueNew+0x82>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b4f      	cmp	r3, #79	; 0x4f
 8002052:	d90e      	bls.n	8002072 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	429a      	cmp	r2, r3
 800206a:	d302      	bcc.n	8002072 <osMessageQueueNew+0x82>
        mem = 1;
 800206c:	2301      	movs	r3, #1
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	e014      	b.n	800209c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d110      	bne.n	800209c <osMessageQueueNew+0xac>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <osMessageQueueNew+0xac>
          mem = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	e001      	b.n	800209c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10b      	bne.n	80020ba <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2100      	movs	r1, #0
 80020ac:	9100      	str	r1, [sp, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fa85 	bl	80025c0 <xQueueGenericCreateStatic>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24
 80020b8:	e008      	b.n	80020cc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80020c0:	2200      	movs	r2, #0
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 faf2 	bl	80026ae <xQueueGenericCreate>
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e001      	b.n	80020e4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80020e4:	69f9      	ldr	r1, [r7, #28]
 80020e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e8:	f001 f95c 	bl	80033a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000021c 	.word	0x2000021c

080020fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002114:	f3ef 8305 	mrs	r3, IPSR
 8002118:	61fb      	str	r3, [r7, #28]
  return(result);
 800211a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002120:	f3ef 8310 	mrs	r3, PRIMASK
 8002124:	61bb      	str	r3, [r7, #24]
  return(result);
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <osMessageQueuePut+0x44>
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <osMessageQueuePut+0xe0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d12e      	bne.n	8002192 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002134:	f3ef 8311 	mrs	r3, BASEPRI
 8002138:	617b      	str	r3, [r7, #20]
  return(result);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d028      	beq.n	8002192 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <osMessageQueuePut+0x56>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <osMessageQueuePut+0x56>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002152:	f06f 0303 	mvn.w	r3, #3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002158:	e039      	b.n	80021ce <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800215e:	f107 0210 	add.w	r2, r7, #16
 8002162:	2300      	movs	r3, #0
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6a38      	ldr	r0, [r7, #32]
 8002168:	f000 fcb8 	bl	8002adc <xQueueGenericSendFromISR>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d003      	beq.n	800217a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002172:	f06f 0302 	mvn.w	r3, #2
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002178:	e029      	b.n	80021ce <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <osMessageQueuePut+0xd2>
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <osMessageQueuePut+0xe4>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002190:	e01d      	b.n	80021ce <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <osMessageQueuePut+0xa2>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800219e:	f06f 0303 	mvn.w	r3, #3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
 80021a4:	e014      	b.n	80021d0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	6a38      	ldr	r0, [r7, #32]
 80021ae:	f000 fb97 	bl	80028e0 <xQueueGenericSend>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d00b      	beq.n	80021d0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80021be:	f06f 0301 	mvn.w	r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	e004      	b.n	80021d0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80021c6:	f06f 0302 	mvn.w	r3, #2
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	e000      	b.n	80021d0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000021c 	.word	0x2000021c
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021fa:	f3ef 8305 	mrs	r3, IPSR
 80021fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8002200:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002206:	f3ef 8310 	mrs	r3, PRIMASK
 800220a:	61bb      	str	r3, [r7, #24]
  return(result);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <osMessageQueueGet+0x42>
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <osMessageQueueGet+0xdc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d12e      	bne.n	8002278 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800221a:	f3ef 8311 	mrs	r3, BASEPRI
 800221e:	617b      	str	r3, [r7, #20]
  return(result);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <osMessageQueueGet+0x54>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <osMessageQueueGet+0x54>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002238:	f06f 0303 	mvn.w	r3, #3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800223e:	e038      	b.n	80022b2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	461a      	mov	r2, r3
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	6a38      	ldr	r0, [r7, #32]
 800224e:	f000 fec9 	bl	8002fe4 <xQueueReceiveFromISR>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d003      	beq.n	8002260 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002258:	f06f 0302 	mvn.w	r3, #2
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800225e:	e028      	b.n	80022b2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d025      	beq.n	80022b2 <osMessageQueueGet+0xce>
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <osMessageQueueGet+0xe0>)
 8002268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002276:	e01c      	b.n	80022b2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <osMessageQueueGet+0xa0>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d103      	bne.n	800228c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002284:	f06f 0303 	mvn.w	r3, #3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e013      	b.n	80022b4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	6a38      	ldr	r0, [r7, #32]
 8002292:	f000 fcbb 	bl	8002c0c <xQueueReceive>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d00b      	beq.n	80022b4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80022a2:	f06f 0301 	mvn.w	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e004      	b.n	80022b4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80022aa:	f06f 0302 	mvn.w	r3, #2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e000      	b.n	80022b4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80022b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000021c 	.word	0x2000021c
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e01e      	b.n	800231e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022e0:	f3ef 8305 	mrs	r3, IPSR
 80022e4:	617b      	str	r3, [r7, #20]
  return(result);
 80022e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ec:	f3ef 8310 	mrs	r3, PRIMASK
 80022f0:	613b      	str	r3, [r7, #16]
  return(result);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <osMessageQueueGetCount+0x44>
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <osMessageQueueGetCount+0x60>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d10a      	bne.n	8002316 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002300:	f3ef 8311 	mrs	r3, BASEPRI
 8002304:	60fb      	str	r3, [r7, #12]
  return(result);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800230c:	69b8      	ldr	r0, [r7, #24]
 800230e:	f000 ff07 	bl	8003120 <uxQueueMessagesWaitingFromISR>
 8002312:	61f8      	str	r0, [r7, #28]
 8002314:	e003      	b.n	800231e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f000 fee4 	bl	80030e4 <uxQueueMessagesWaiting>
 800231c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800231e:	69fb      	ldr	r3, [r7, #28]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000021c 	.word	0x2000021c

0800232c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <vApplicationGetIdleTaskMemory+0x28>)
 800233c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <vApplicationGetIdleTaskMemory+0x2c>)
 8002342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000220 	.word	0x20000220
 8002358:	2000027c 	.word	0x2000027c

0800235c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <vApplicationGetTimerTaskMemory+0x2c>)
 800236c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <vApplicationGetTimerTaskMemory+0x30>)
 8002372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000047c 	.word	0x2000047c
 800238c:	200004d8 	.word	0x200004d8

08002390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0208 	add.w	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f103 0208 	add.w	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0208 	add.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d103      	bne.n	800244c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e00c      	b.n	8002466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3308      	adds	r3, #8
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e002      	b.n	800245a <vListInsert+0x2e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d2f6      	bcs.n	8002454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6892      	ldr	r2, [r2, #8]
 80024b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6852      	ldr	r2, [r2, #4]
 80024bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d103      	bne.n	80024d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800251a:	f002 fbaf 	bl	8004c7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	441a      	add	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	3b01      	subs	r3, #1
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d114      	bne.n	800259a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fbc3 	bl	8003d08 <xTaskRemoveFromEventList>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <xQueueGenericReset+0xcc>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e009      	b.n	80025ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3310      	adds	r3, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fef6 	bl	8002390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fef1 	bl	8002390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ae:	f002 fb95 	bl	8004cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <xQueueGenericCreateStatic+0x52>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <xQueueGenericCreateStatic+0x56>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <xQueueGenericCreateStatic+0x58>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	623b      	str	r3, [r7, #32]
}
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <xQueueGenericCreateStatic+0x7e>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <xQueueGenericCreateStatic+0x82>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <xQueueGenericCreateStatic+0x84>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61fb      	str	r3, [r7, #28]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800265e:	2350      	movs	r3, #80	; 0x50
 8002660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d00a      	beq.n	800267e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	61bb      	str	r3, [r7, #24]
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002690:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f843 	bl	800272a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3730      	adds	r7, #48	; 0x30
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08a      	sub	sp, #40	; 0x28
 80026b2:	af02      	add	r7, sp, #8
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	613b      	str	r3, [r7, #16]
}
 80026d4:	bf00      	nop
 80026d6:	e7fe      	b.n	80026d6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e004      	b.n	80026ee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3350      	adds	r3, #80	; 0x50
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fbc2 	bl	8004e7c <pvPortMalloc>
 80026f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00f      	beq.n	8002720 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3350      	adds	r3, #80	; 0x50
 8002704:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f805 	bl	800272a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002720:	69bb      	ldr	r3, [r7, #24]
	}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e002      	b.n	800274c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002758:	2101      	movs	r1, #1
 800275a:	69b8      	ldr	r0, [r7, #24]
 800275c:	f7ff fec8 	bl	80024f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00e      	beq.n	800279c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002790:	2300      	movs	r3, #0
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8a2 	bl	80028e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027ae:	2301      	movs	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff ff76 	bl	80026ae <xQueueGenericCreate>
 80027c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff ffd3 	bl	8002770 <prvInitialiseMutex>

		return pxNewQueue;
 80027ca:	68fb      	ldr	r3, [r7, #12]
	}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027e0:	2301      	movs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	6939      	ldr	r1, [r7, #16]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff fee4 	bl	80025c0 <xQueueGenericCreateStatic>
 80027f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff ffb8 	bl	8002770 <prvInitialiseMutex>

		return pxNewQueue;
 8002800:	68fb      	ldr	r3, [r7, #12]
	}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800280a:	b590      	push	{r4, r7, lr}
 800280c:	b087      	sub	sp, #28
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	60fb      	str	r3, [r7, #12]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	685c      	ldr	r4, [r3, #4]
 8002836:	f001 fc29 	bl	800408c <xTaskGetCurrentTaskHandle>
 800283a:	4603      	mov	r3, r0
 800283c:	429c      	cmp	r4, r3
 800283e:	d111      	bne.n	8002864 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002852:	2300      	movs	r3, #0
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	6938      	ldr	r0, [r7, #16]
 800285a:	f000 f841 	bl	80028e0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800285e:	2301      	movs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e001      	b.n	8002868 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002868:	697b      	ldr	r3, [r7, #20]
	}
 800286a:	4618      	mov	r0, r3
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002872:	b590      	push	{r4, r7, lr}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	60fb      	str	r3, [r7, #12]
}
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	685c      	ldr	r4, [r3, #4]
 80028a0:	f001 fbf4 	bl	800408c <xTaskGetCurrentTaskHandle>
 80028a4:	4603      	mov	r3, r0
 80028a6:	429c      	cmp	r4, r3
 80028a8:	d107      	bne.n	80028ba <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80028b4:	2301      	movs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e00c      	b.n	80028d4 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	6938      	ldr	r0, [r7, #16]
 80028be:	f000 fa85 	bl	8002dcc <xQueueSemaphoreTake>
 80028c2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80028d4:	697b      	ldr	r3, [r7, #20]
	}
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
	...

080028e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericSend+0x32>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <xQueueGenericSend+0x40>
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <xQueueGenericSend+0x44>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <xQueueGenericSend+0x46>
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <xQueueGenericSend+0x60>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x6e>
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <xQueueGenericSend+0x72>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueGenericSend+0x74>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueGenericSend+0x8e>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	623b      	str	r3, [r7, #32]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296e:	f001 fb9b 	bl	80040a8 <xTaskGetSchedulerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <xQueueGenericSend+0x9e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueGenericSend+0xa2>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueGenericSend+0xa4>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericSend+0xbe>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61fb      	str	r3, [r7, #28]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299e:	f002 f96d 	bl	8004c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <xQueueGenericSend+0xd4>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d129      	bne.n	8002a08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ba:	f000 fbe3 	bl	8003184 <prvCopyDataToQueue>
 80029be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f99b 	bl	8003d08 <xTaskRemoveFromEventList>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 80029da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	e00a      	b.n	8002a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 80029f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a00:	f002 f96c 	bl	8004cdc <vPortExitCritical>
				return pdPASS;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e063      	b.n	8002ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a0e:	f002 f965 	bl	8004cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e05c      	b.n	8002ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f9d5 	bl	8003dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a2a:	f002 f957 	bl	8004cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a2e:	f000 ff47 	bl	80038c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a32:	f002 f923 	bl	8004c7c <vPortEnterCritical>
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d103      	bne.n	8002a4c <xQueueGenericSend+0x16c>
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSend+0x182>
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a62:	f002 f93b 	bl	8004cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a66:	1d3a      	adds	r2, r7, #4
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f9c4 	bl	8003dfc <xTaskCheckForTimeOut>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d124      	bne.n	8002ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a7c:	f000 fc7a 	bl	8003374 <prvIsQueueFull>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	3310      	adds	r3, #16
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f8ea 	bl	8003c68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a96:	f000 fc05 	bl	80032a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a9a:	f000 ff1f 	bl	80038dc <xTaskResumeAll>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af7c 	bne.w	800299e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <xQueueGenericSend+0x1f8>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	e772      	b.n	800299e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aba:	f000 fbf3 	bl	80032a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002abe:	f000 ff0d 	bl	80038dc <xTaskResumeAll>
 8002ac2:	e76c      	b.n	800299e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac6:	f000 fbed 	bl	80032a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aca:	f000 ff07 	bl	80038dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ace:	2300      	movs	r3, #0
		}
	}
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3738      	adds	r7, #56	; 0x38
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <xQueueGenericSendFromISR+0x3c>
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <xQueueGenericSendFromISR+0x40>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <xQueueGenericSendFromISR+0x42>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	623b      	str	r3, [r7, #32]
}
 8002b34:	bf00      	nop
 8002b36:	e7fe      	b.n	8002b36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d103      	bne.n	8002b46 <xQueueGenericSendFromISR+0x6a>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <xQueueGenericSendFromISR+0x6e>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <xQueueGenericSendFromISR+0x70>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	61fb      	str	r3, [r7, #28]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b66:	f002 f94b 	bl	8004e00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <xQueueGenericSendFromISR+0xbc>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d12c      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba8:	f000 faec 	bl	8003184 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d112      	bne.n	8002bdc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3324      	adds	r3, #36	; 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f8a0 	bl	8003d08 <xTaskRemoveFromEventList>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00e      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e007      	b.n	8002bec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002be0:	3301      	adds	r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bec:	2301      	movs	r3, #1
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002bf0:	e001      	b.n	8002bf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3738      	adds	r7, #56	; 0x38
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <xQueueReceive+0x30>
	__asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	623b      	str	r3, [r7, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <xQueueReceive+0x3e>
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <xQueueReceive+0x42>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <xQueueReceive+0x44>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <xQueueReceive+0x5e>
	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	61fb      	str	r3, [r7, #28]
}
 8002c66:	bf00      	nop
 8002c68:	e7fe      	b.n	8002c68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c6a:	f001 fa1d 	bl	80040a8 <xTaskGetSchedulerState>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <xQueueReceive+0x6e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <xQueueReceive+0x72>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueReceive+0x74>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueReceive+0x8e>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c9a:	f001 ffef 	bl	8004c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01f      	beq.n	8002cea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cae:	f000 fad3 	bl	8003258 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	3310      	adds	r3, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 f81e 	bl	8003d08 <xTaskRemoveFromEventList>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <xQueueReceive+0x1bc>)
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ce2:	f001 fffb 	bl	8004cdc <vPortExitCritical>
				return pdPASS;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e069      	b.n	8002dbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf0:	f001 fff4 	bl	8004cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e062      	b.n	8002dbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 f864 	bl	8003dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d0c:	f001 ffe6 	bl	8004cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d10:	f000 fdd6 	bl	80038c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d14:	f001 ffb2 	bl	8004c7c <vPortEnterCritical>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0x122>
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <xQueueReceive+0x138>
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d44:	f001 ffca 	bl	8004cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d48:	1d3a      	adds	r2, r7, #4
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f853 	bl	8003dfc <xTaskCheckForTimeOut>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d123      	bne.n	8002da4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d5e:	f000 faf3 	bl	8003348 <prvIsQueueEmpty>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 ff79 	bl	8003c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d78:	f000 fa94 	bl	80032a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d7c:	f000 fdae 	bl	80038dc <xTaskResumeAll>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d189      	bne.n	8002c9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <xQueueReceive+0x1bc>)
 8002d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	e780      	b.n	8002c9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9a:	f000 fa83 	bl	80032a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d9e:	f000 fd9d 	bl	80038dc <xTaskResumeAll>
 8002da2:	e77a      	b.n	8002c9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da6:	f000 fa7d 	bl	80032a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002daa:	f000 fd97 	bl	80038dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db0:	f000 faca 	bl	8003348 <prvIsQueueEmpty>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f43f af6f 	beq.w	8002c9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	623b      	str	r3, [r7, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	61fb      	str	r3, [r7, #28]
}
 8002e18:	bf00      	nop
 8002e1a:	e7fe      	b.n	8002e1a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1c:	f001 f944 	bl	80040a8 <xTaskGetSchedulerState>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <xQueueSemaphoreTake+0x60>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <xQueueSemaphoreTake+0x64>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <xQueueSemaphoreTake+0x66>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	61bb      	str	r3, [r7, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e4c:	f001 ff16 	bl	8004c7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d024      	beq.n	8002ea6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002e6c:	f001 fa9c 	bl	80043a8 <pvTaskIncrementMutexHeldCount>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00f      	beq.n	8002e9e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	3310      	adds	r3, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff40 	bl	8003d08 <xTaskRemoveFromEventList>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <xQueueSemaphoreTake+0x214>)
 8002e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e9e:	f001 ff1d 	bl	8004cdc <vPortExitCritical>
				return pdPASS;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e097      	b.n	8002fd6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	617b      	str	r3, [r7, #20]
}
 8002ec4:	bf00      	nop
 8002ec6:	e7fe      	b.n	8002ec6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ec8:	f001 ff08 	bl	8004cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e082      	b.n	8002fd6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ff78 	bl	8003dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ee4:	f001 fefa 	bl	8004cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ee8:	f000 fcea 	bl	80038c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eec:	f001 fec6 	bl	8004c7c <vPortEnterCritical>
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <xQueueSemaphoreTake+0x13a>
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d103      	bne.n	8002f1c <xQueueSemaphoreTake+0x150>
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f1c:	f001 fede 	bl	8004cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f20:	463a      	mov	r2, r7
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 ff67 	bl	8003dfc <xTaskCheckForTimeOut>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d132      	bne.n	8002f9a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f36:	f000 fa07 	bl	8003348 <prvIsQueueEmpty>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d026      	beq.n	8002f8e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002f48:	f001 fe98 	bl	8004c7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 f8c7 	bl	80040e4 <xTaskPriorityInherit>
 8002f56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f58:	f001 fec0 	bl	8004cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	3324      	adds	r3, #36	; 0x24
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fe7f 	bl	8003c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f6c:	f000 f99a 	bl	80032a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f70:	f000 fcb4 	bl	80038dc <xTaskResumeAll>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f47f af68 	bne.w	8002e4c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <xQueueSemaphoreTake+0x214>)
 8002f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	e75e      	b.n	8002e4c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f90:	f000 f988 	bl	80032a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f94:	f000 fca2 	bl	80038dc <xTaskResumeAll>
 8002f98:	e758      	b.n	8002e4c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f9c:	f000 f982 	bl	80032a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fa0:	f000 fc9c 	bl	80038dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa6:	f000 f9cf 	bl	8003348 <prvIsQueueEmpty>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f43f af4d 	beq.w	8002e4c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002fb8:	f001 fe60 	bl	8004c7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fbe:	f000 f8ca 	bl	8003156 <prvGetDisinheritPriorityAfterTimeout>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f966 	bl	800429c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002fd0:	f001 fe84 	bl	8004cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3738      	adds	r7, #56	; 0x38
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08e      	sub	sp, #56	; 0x38
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	623b      	str	r3, [r7, #32]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <xQueueReceiveFromISR+0x3a>
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <xQueueReceiveFromISR+0x3e>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <xQueueReceiveFromISR+0x40>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61fb      	str	r3, [r7, #28]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800303e:	f001 fedf 	bl	8004e00 <vPortValidateInterruptPriority>
	__asm volatile
 8003042:	f3ef 8211 	mrs	r2, BASEPRI
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	61ba      	str	r2, [r7, #24]
 8003058:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800305a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02f      	beq.n	80030ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003078:	f000 f8ee 	bl	8003258 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d112      	bne.n	80030b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	3310      	adds	r3, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fe34 	bl	8003d08 <xTaskRemoveFromEventList>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e007      	b.n	80030c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	b25a      	sxtb	r2, r3
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80030c4:	2301      	movs	r3, #1
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
 80030c8:	e001      	b.n	80030ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f383 8811 	msr	BASEPRI, r3
}
 80030d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3738      	adds	r7, #56	; 0x38
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60bb      	str	r3, [r7, #8]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003108:	f001 fdb8 	bl	8004c7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003112:	f001 fde3 	bl	8004cdc <vPortExitCritical>

	return uxReturn;
 8003116:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	60bb      	str	r3, [r7, #8]
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800314a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e001      	b.n	8003178 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003178:	68fb      	ldr	r3, [r7, #12]
	}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d14d      	bne.n	8003246 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 f806 	bl	80041c0 <xTaskPriorityDisinherit>
 80031b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	e043      	b.n	8003246 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d119      	bne.n	80031f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6898      	ldr	r0, [r3, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	461a      	mov	r2, r3
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	f003 fc97 	bl	8006b02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d32b      	bcc.n	8003246 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	e026      	b.n	8003246 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68d8      	ldr	r0, [r3, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	461a      	mov	r2, r3
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	f003 fc7d 	bl	8006b02 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	425b      	negs	r3, r3
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	425b      	negs	r3, r3
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d105      	bne.n	8003246 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	3b01      	subs	r3, #1
 8003244:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800324e:	697b      	ldr	r3, [r7, #20]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d303      	bcc.n	800328c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	461a      	mov	r2, r3
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	f003 fc33 	bl	8006b02 <memcpy>
	}
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032ac:	f001 fce6 	bl	8004c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b8:	e011      	b.n	80032de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3324      	adds	r3, #36	; 0x24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fd1e 	bl	8003d08 <xTaskRemoveFromEventList>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032d2:	f000 fdf5 	bl	8003ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3b01      	subs	r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dce9      	bgt.n	80032ba <prvUnlockQueue+0x16>
 80032e6:	e000      	b.n	80032ea <prvUnlockQueue+0x46>
					break;
 80032e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	22ff      	movs	r2, #255	; 0xff
 80032ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032f2:	f001 fcf3 	bl	8004cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032f6:	f001 fcc1 	bl	8004c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003300:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003302:	e011      	b.n	8003328 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3310      	adds	r3, #16
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fcf9 	bl	8003d08 <xTaskRemoveFromEventList>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800331c:	f000 fdd0 	bl	8003ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	3b01      	subs	r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800332c:	2b00      	cmp	r3, #0
 800332e:	dce9      	bgt.n	8003304 <prvUnlockQueue+0x60>
 8003330:	e000      	b.n	8003334 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003332:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800333c:	f001 fcce 	bl	8004cdc <vPortExitCritical>
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003350:	f001 fc94 	bl	8004c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e001      	b.n	8003366 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003366:	f001 fcb9 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800337c:	f001 fc7e 	bl	8004c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	429a      	cmp	r2, r3
 800338a:	d102      	bne.n	8003392 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800338c:	2301      	movs	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e001      	b.n	8003396 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003396:	f001 fca1 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e014      	b.n	80033de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033b4:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <vQueueAddToRegistry+0x4c>)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033c0:	490b      	ldr	r1, [pc, #44]	; (80033f0 <vQueueAddToRegistry+0x4c>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <vQueueAddToRegistry+0x4c>)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033d6:	e006      	b.n	80033e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b07      	cmp	r3, #7
 80033e2:	d9e7      	bls.n	80033b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	200008d8 	.word	0x200008d8

080033f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003404:	f001 fc3a 	bl	8004c7c <vPortEnterCritical>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800340e:	b25b      	sxtb	r3, r3
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d103      	bne.n	800341e <vQueueWaitForMessageRestricted+0x2a>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d103      	bne.n	8003434 <vQueueWaitForMessageRestricted+0x40>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003434:	f001 fc52 	bl	8004cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3324      	adds	r3, #36	; 0x24
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fc31 	bl	8003cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7ff ff28 	bl	80032a4 <prvUnlockQueue>
	}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	61fb      	str	r3, [r7, #28]
}
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034a2:	235c      	movs	r3, #92	; 0x5c
 80034a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b5c      	cmp	r3, #92	; 0x5c
 80034aa:	d00a      	beq.n	80034c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	61bb      	str	r3, [r7, #24]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01e      	beq.n	8003506 <xTaskCreateStatic+0xaa>
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01b      	beq.n	8003506 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034e0:	2300      	movs	r3, #0
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f850 	bl	800359e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003500:	f000 f8d4 	bl	80036ac <prvAddNewTaskToReadyList>
 8003504:	e001      	b.n	800350a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800350a:	697b      	ldr	r3, [r7, #20]
	}
 800350c:	4618      	mov	r0, r3
 800350e:	3728      	adds	r7, #40	; 0x28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af04      	add	r7, sp, #16
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f001 fca7 	bl	8004e7c <pvPortMalloc>
 800352e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003536:	205c      	movs	r0, #92	; 0x5c
 8003538:	f001 fca0 	bl	8004e7c <pvPortMalloc>
 800353c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
 800354a:	e005      	b.n	8003558 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800354c:	6978      	ldr	r0, [r7, #20]
 800354e:	f001 fd59 	bl	8005004 <vPortFree>
 8003552:	e001      	b.n	8003558 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	2300      	movs	r3, #0
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f80e 	bl	800359e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003582:	69f8      	ldr	r0, [r7, #28]
 8003584:	f000 f892 	bl	80036ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003588:	2301      	movs	r3, #1
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e002      	b.n	8003594 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003594:	69bb      	ldr	r3, [r7, #24]
	}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b088      	sub	sp, #32
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	461a      	mov	r2, r3
 80035b6:	21a5      	movs	r1, #165	; 0xa5
 80035b8:	f003 fa16 	bl	80069e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	3b01      	subs	r3, #1
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f023 0307 	bic.w	r3, r3, #7
 80035d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	617b      	str	r3, [r7, #20]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e012      	b.n	8003622 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	7819      	ldrb	r1, [r3, #0]
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	3334      	adds	r3, #52	; 0x34
 800360c:	460a      	mov	r2, r1
 800360e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d9e9      	bls.n	80035fc <prvInitialiseNewTask+0x5e>
 8003628:	e000      	b.n	800362c <prvInitialiseNewTask+0x8e>
		{
			break;
 800362a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	2b37      	cmp	r3, #55	; 0x37
 8003638:	d901      	bls.n	800363e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800363a:	2337      	movs	r3, #55	; 0x37
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003648:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	2200      	movs	r2, #0
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	3304      	adds	r3, #4
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe feba 	bl	80023ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	3318      	adds	r3, #24
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe feb5 	bl	80023ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003668:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2200      	movs	r2, #0
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	69b8      	ldr	r0, [r7, #24]
 800368e:	f001 fa05 	bl	8004a9c <pxPortInitialiseStack>
 8003692:	4602      	mov	r2, r0
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036a4:	bf00      	nop
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036b4:	f001 fae2 	bl	8004c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <prvAddNewTaskToReadyList+0xc4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	4a2c      	ldr	r2, [pc, #176]	; (8003770 <prvAddNewTaskToReadyList+0xc4>)
 80036c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <prvAddNewTaskToReadyList+0xc8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ca:	4a2a      	ldr	r2, [pc, #168]	; (8003774 <prvAddNewTaskToReadyList+0xc8>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <prvAddNewTaskToReadyList+0xc4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d110      	bne.n	80036fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036d8:	f000 fc16 	bl	8003f08 <prvInitialiseTaskLists>
 80036dc:	e00d      	b.n	80036fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <prvAddNewTaskToReadyList+0xcc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <prvAddNewTaskToReadyList+0xc8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d802      	bhi.n	80036fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <prvAddNewTaskToReadyList+0xc8>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <prvAddNewTaskToReadyList+0xd0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <prvAddNewTaskToReadyList+0xd0>)
 8003702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <prvAddNewTaskToReadyList+0xd0>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <prvAddNewTaskToReadyList+0xd4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d903      	bls.n	8003720 <prvAddNewTaskToReadyList+0x74>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <prvAddNewTaskToReadyList+0xd4>)
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <prvAddNewTaskToReadyList+0xd8>)
 800372e:	441a      	add	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f7fe fe55 	bl	80023e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800373c:	f001 face 	bl	8004cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <prvAddNewTaskToReadyList+0xcc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <prvAddNewTaskToReadyList+0xc8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d207      	bcs.n	8003766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <prvAddNewTaskToReadyList+0xdc>)
 8003758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000dec 	.word	0x20000dec
 8003774:	20000918 	.word	0x20000918
 8003778:	20000df8 	.word	0x20000df8
 800377c:	20000e08 	.word	0x20000e08
 8003780:	20000df4 	.word	0x20000df4
 8003784:	2000091c 	.word	0x2000091c
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <vTaskDelay+0x60>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <vTaskDelay+0x30>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60bb      	str	r3, [r7, #8]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037bc:	f000 f880 	bl	80038c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037c0:	2100      	movs	r1, #0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fe04 	bl	80043d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037c8:	f000 f888 	bl	80038dc <xTaskResumeAll>
 80037cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <vTaskDelay+0x64>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000e14 	.word	0x20000e14
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003802:	463a      	mov	r2, r7
 8003804:	1d39      	adds	r1, r7, #4
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fd8e 	bl	800232c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003810:	6839      	ldr	r1, [r7, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	9202      	str	r2, [sp, #8]
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2300      	movs	r3, #0
 8003820:	460a      	mov	r2, r1
 8003822:	4921      	ldr	r1, [pc, #132]	; (80038a8 <vTaskStartScheduler+0xb4>)
 8003824:	4821      	ldr	r0, [pc, #132]	; (80038ac <vTaskStartScheduler+0xb8>)
 8003826:	f7ff fe19 	bl	800345c <xTaskCreateStatic>
 800382a:	4603      	mov	r3, r0
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <vTaskStartScheduler+0xbc>)
 800382e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <vTaskStartScheduler+0xbc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e001      	b.n	8003842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003848:	f000 fe16 	bl	8004478 <xTimerCreateTimerTask>
 800384c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d116      	bne.n	8003882 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	613b      	str	r3, [r7, #16]
}
 8003866:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <vTaskStartScheduler+0xc0>)
 800386a:	f04f 32ff 	mov.w	r2, #4294967295
 800386e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <vTaskStartScheduler+0xc4>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <vTaskStartScheduler+0xc8>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800387c:	f001 f98c 	bl	8004b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003880:	e00e      	b.n	80038a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d10a      	bne.n	80038a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60fb      	str	r3, [r7, #12]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <vTaskStartScheduler+0xaa>
}
 80038a0:	bf00      	nop
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	0800a2b8 	.word	0x0800a2b8
 80038ac:	08003ed9 	.word	0x08003ed9
 80038b0:	20000e10 	.word	0x20000e10
 80038b4:	20000e0c 	.word	0x20000e0c
 80038b8:	20000df8 	.word	0x20000df8
 80038bc:	20000df0 	.word	0x20000df0

080038c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <vTaskSuspendAll+0x18>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <vTaskSuspendAll+0x18>)
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000e14 	.word	0x20000e14

080038dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ea:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <xTaskResumeAll+0x118>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <xTaskResumeAll+0x2c>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	603b      	str	r3, [r7, #0]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003908:	f001 f9b8 	bl	8004c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800390c:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <xTaskResumeAll+0x118>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3b01      	subs	r3, #1
 8003912:	4a38      	ldr	r2, [pc, #224]	; (80039f4 <xTaskResumeAll+0x118>)
 8003914:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <xTaskResumeAll+0x118>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d162      	bne.n	80039e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <xTaskResumeAll+0x11c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d05e      	beq.n	80039e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003926:	e02f      	b.n	8003988 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003928:	4b34      	ldr	r3, [pc, #208]	; (80039fc <xTaskResumeAll+0x120>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3318      	adds	r3, #24
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fdb1 	bl	800249c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fdac 	bl	800249c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <xTaskResumeAll+0x124>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d903      	bls.n	8003958 <xTaskResumeAll+0x7c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <xTaskResumeAll+0x124>)
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <xTaskResumeAll+0x128>)
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7fe fd39 	bl	80023e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <xTaskResumeAll+0x12c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <xTaskResumeAll+0x130>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <xTaskResumeAll+0x120>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1cb      	bne.n	8003928 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003996:	f000 fb55 	bl	8004044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <xTaskResumeAll+0x134>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d010      	beq.n	80039c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039a6:	f000 f845 	bl	8003a34 <xTaskIncrementTick>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <xTaskResumeAll+0x130>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f1      	bne.n	80039a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <xTaskResumeAll+0x134>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <xTaskResumeAll+0x130>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <xTaskResumeAll+0x138>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039e4:	f001 f97a 	bl	8004cdc <vPortExitCritical>

	return xAlreadyYielded;
 80039e8:	68bb      	ldr	r3, [r7, #8]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000e14 	.word	0x20000e14
 80039f8:	20000dec 	.word	0x20000dec
 80039fc:	20000dac 	.word	0x20000dac
 8003a00:	20000df4 	.word	0x20000df4
 8003a04:	2000091c 	.word	0x2000091c
 8003a08:	20000918 	.word	0x20000918
 8003a0c:	20000e00 	.word	0x20000e00
 8003a10:	20000dfc 	.word	0x20000dfc
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <xTaskGetTickCount+0x18>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a24:	687b      	ldr	r3, [r7, #4]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000df0 	.word	0x20000df0

08003a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <xTaskIncrementTick+0x150>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 808e 	bne.w	8003b64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <xTaskIncrementTick+0x154>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <xTaskIncrementTick+0x154>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d120      	bne.n	8003a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <xTaskIncrementTick+0x158>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	603b      	str	r3, [r7, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <xTaskIncrementTick+0x46>
 8003a7c:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <xTaskIncrementTick+0x158>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b43      	ldr	r3, [pc, #268]	; (8003b90 <xTaskIncrementTick+0x15c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <xTaskIncrementTick+0x158>)
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <xTaskIncrementTick+0x15c>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <xTaskIncrementTick+0x160>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <xTaskIncrementTick+0x160>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	f000 fad3 	bl	8004044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <xTaskIncrementTick+0x164>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d34e      	bcc.n	8003b46 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa8:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <xTaskIncrementTick+0x158>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <xTaskIncrementTick+0x82>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <xTaskIncrementTick+0x84>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <xTaskIncrementTick+0x164>)
 8003abe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac2:	601a      	str	r2, [r3, #0]
					break;
 8003ac4:	e03f      	b.n	8003b46 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <xTaskIncrementTick+0x158>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d203      	bcs.n	8003ae6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ade:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <xTaskIncrementTick+0x164>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]
						break;
 8003ae4:	e02f      	b.n	8003b46 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fcd6 	bl	800249c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3318      	adds	r3, #24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fccd 	bl	800249c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <xTaskIncrementTick+0x168>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d903      	bls.n	8003b16 <xTaskIncrementTick+0xe2>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <xTaskIncrementTick+0x168>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <xTaskIncrementTick+0x16c>)
 8003b24:	441a      	add	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fe fc5a 	bl	80023e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <xTaskIncrementTick+0x170>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3b3      	bcc.n	8003aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b44:	e7b0      	b.n	8003aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <xTaskIncrementTick+0x170>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4914      	ldr	r1, [pc, #80]	; (8003ba0 <xTaskIncrementTick+0x16c>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d907      	bls.n	8003b6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e004      	b.n	8003b6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <xTaskIncrementTick+0x174>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ba8 <xTaskIncrementTick+0x174>)
 8003b6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <xTaskIncrementTick+0x178>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b7a:	697b      	ldr	r3, [r7, #20]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000e14 	.word	0x20000e14
 8003b88:	20000df0 	.word	0x20000df0
 8003b8c:	20000da4 	.word	0x20000da4
 8003b90:	20000da8 	.word	0x20000da8
 8003b94:	20000e04 	.word	0x20000e04
 8003b98:	20000e0c 	.word	0x20000e0c
 8003b9c:	20000df4 	.word	0x20000df4
 8003ba0:	2000091c 	.word	0x2000091c
 8003ba4:	20000918 	.word	0x20000918
 8003ba8:	20000dfc 	.word	0x20000dfc
 8003bac:	20000e00 	.word	0x20000e00

08003bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <vTaskSwitchContext+0xa4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <vTaskSwitchContext+0xa8>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bc4:	e041      	b.n	8003c4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <vTaskSwitchContext+0xa8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bcc:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <vTaskSwitchContext+0xac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e010      	b.n	8003bf6 <vTaskSwitchContext+0x46>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	607b      	str	r3, [r7, #4]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <vTaskSwitchContext+0x3e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	491a      	ldr	r1, [pc, #104]	; (8003c60 <vTaskSwitchContext+0xb0>)
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0e4      	beq.n	8003bd4 <vTaskSwitchContext+0x24>
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <vTaskSwitchContext+0xb0>)
 8003c16:	4413      	add	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	605a      	str	r2, [r3, #4]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d104      	bne.n	8003c3a <vTaskSwitchContext+0x8a>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <vTaskSwitchContext+0xb4>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <vTaskSwitchContext+0xac>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	20000e14 	.word	0x20000e14
 8003c58:	20000e00 	.word	0x20000e00
 8003c5c:	20000df4 	.word	0x20000df4
 8003c60:	2000091c 	.word	0x2000091c
 8003c64:	20000918 	.word	0x20000918

08003c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	60fb      	str	r3, [r7, #12]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c8e:	4b07      	ldr	r3, [pc, #28]	; (8003cac <vTaskPlaceOnEventList+0x44>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3318      	adds	r3, #24
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fe fbc8 	bl	800242c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	6838      	ldr	r0, [r7, #0]
 8003ca0:	f000 fb96 	bl	80043d0 <prvAddCurrentTaskToDelayedList>
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20000918 	.word	0x20000918

08003cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	617b      	str	r3, [r7, #20]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	4619      	mov	r1, r3
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7fe fb80 	bl	80023e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	68b8      	ldr	r0, [r7, #8]
 8003cf6:	f000 fb6b 	bl	80043d0 <prvAddCurrentTaskToDelayedList>
	}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000918 	.word	0x20000918

08003d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60fb      	str	r3, [r7, #12]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3318      	adds	r3, #24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fbaf 	bl	800249c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <xTaskRemoveFromEventList+0xb0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11d      	bne.n	8003d82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fba6 	bl	800249c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <xTaskRemoveFromEventList+0xb4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <xTaskRemoveFromEventList+0x5c>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <xTaskRemoveFromEventList+0xb4>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <xTaskRemoveFromEventList+0xb8>)
 8003d72:	441a      	add	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7fe fb33 	bl	80023e6 <vListInsertEnd>
 8003d80:	e005      	b.n	8003d8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4619      	mov	r1, r3
 8003d88:	480e      	ldr	r0, [pc, #56]	; (8003dc4 <xTaskRemoveFromEventList+0xbc>)
 8003d8a:	f7fe fb2c 	bl	80023e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <xTaskRemoveFromEventList+0xc0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d905      	bls.n	8003da8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <xTaskRemoveFromEventList+0xc4>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e001      	b.n	8003dac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003dac:	697b      	ldr	r3, [r7, #20]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000e14 	.word	0x20000e14
 8003dbc:	20000df4 	.word	0x20000df4
 8003dc0:	2000091c 	.word	0x2000091c
 8003dc4:	20000dac 	.word	0x20000dac
 8003dc8:	20000918 	.word	0x20000918
 8003dcc:	20000e00 	.word	0x20000e00

08003dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <vTaskInternalSetTimeOutState+0x24>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <vTaskInternalSetTimeOutState+0x28>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	605a      	str	r2, [r3, #4]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000e04 	.word	0x20000e04
 8003df8:	20000df0 	.word	0x20000df0

08003dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	613b      	str	r3, [r7, #16]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	60fb      	str	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e3e:	f000 ff1d 	bl	8004c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <xTaskCheckForTimeOut+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d102      	bne.n	8003e62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e023      	b.n	8003eaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <xTaskCheckForTimeOut+0xc0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d007      	beq.n	8003e7e <xTaskCheckForTimeOut+0x82>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	e015      	b.n	8003eaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d20b      	bcs.n	8003ea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff9b 	bl	8003dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e004      	b.n	8003eaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eaa:	f000 ff17 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 8003eae:	69fb      	ldr	r3, [r7, #28]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000df0 	.word	0x20000df0
 8003ebc:	20000e04 	.word	0x20000e04

08003ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <vTaskMissedYield+0x14>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000e00 	.word	0x20000e00

08003ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ee0:	f000 f852 	bl	8003f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <prvIdleTask+0x28>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d9f9      	bls.n	8003ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <prvIdleTask+0x2c>)
 8003eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003efc:	e7f0      	b.n	8003ee0 <prvIdleTask+0x8>
 8003efe:	bf00      	nop
 8003f00:	2000091c 	.word	0x2000091c
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	e00c      	b.n	8003f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <prvInitialiseTaskLists+0x60>)
 8003f20:	4413      	add	r3, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fa34 	bl	8002390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b37      	cmp	r3, #55	; 0x37
 8003f32:	d9ef      	bls.n	8003f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f34:	480d      	ldr	r0, [pc, #52]	; (8003f6c <prvInitialiseTaskLists+0x64>)
 8003f36:	f7fe fa2b 	bl	8002390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f3a:	480d      	ldr	r0, [pc, #52]	; (8003f70 <prvInitialiseTaskLists+0x68>)
 8003f3c:	f7fe fa28 	bl	8002390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f40:	480c      	ldr	r0, [pc, #48]	; (8003f74 <prvInitialiseTaskLists+0x6c>)
 8003f42:	f7fe fa25 	bl	8002390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f46:	480c      	ldr	r0, [pc, #48]	; (8003f78 <prvInitialiseTaskLists+0x70>)
 8003f48:	f7fe fa22 	bl	8002390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f4c:	480b      	ldr	r0, [pc, #44]	; (8003f7c <prvInitialiseTaskLists+0x74>)
 8003f4e:	f7fe fa1f 	bl	8002390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <prvInitialiseTaskLists+0x78>)
 8003f54:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <prvInitialiseTaskLists+0x64>)
 8003f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <prvInitialiseTaskLists+0x7c>)
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <prvInitialiseTaskLists+0x68>)
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000091c 	.word	0x2000091c
 8003f6c:	20000d7c 	.word	0x20000d7c
 8003f70:	20000d90 	.word	0x20000d90
 8003f74:	20000dac 	.word	0x20000dac
 8003f78:	20000dc0 	.word	0x20000dc0
 8003f7c:	20000dd8 	.word	0x20000dd8
 8003f80:	20000da4 	.word	0x20000da4
 8003f84:	20000da8 	.word	0x20000da8

08003f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f8e:	e019      	b.n	8003fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f90:	f000 fe74 	bl	8004c7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <prvCheckTasksWaitingTermination+0x50>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fa7b 	bl	800249c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <prvCheckTasksWaitingTermination+0x54>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <prvCheckTasksWaitingTermination+0x54>)
 8003fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fba:	f000 fe8f 	bl	8004cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f810 	bl	8003fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e1      	bne.n	8003f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000dc0 	.word	0x20000dc0
 8003fdc:	20000dec 	.word	0x20000dec
 8003fe0:	20000dd4 	.word	0x20000dd4

08003fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f802 	bl	8005004 <vPortFree>
				vPortFree( pxTCB );
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ffff 	bl	8005004 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004006:	e018      	b.n	800403a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800400e:	2b01      	cmp	r3, #1
 8004010:	d103      	bne.n	800401a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fff6 	bl	8005004 <vPortFree>
	}
 8004018:	e00f      	b.n	800403a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00a      	beq.n	800403a <prvDeleteTCB+0x56>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60fb      	str	r3, [r7, #12]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <prvDeleteTCB+0x54>
	}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <prvResetNextTaskUnblockTime+0x40>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <prvResetNextTaskUnblockTime+0x14>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <prvResetNextTaskUnblockTime+0x16>
 8004058:	2300      	movs	r3, #0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <prvResetNextTaskUnblockTime+0x44>)
 8004060:	f04f 32ff 	mov.w	r2, #4294967295
 8004064:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004066:	e008      	b.n	800407a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <prvResetNextTaskUnblockTime+0x40>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a04      	ldr	r2, [pc, #16]	; (8004088 <prvResetNextTaskUnblockTime+0x44>)
 8004078:	6013      	str	r3, [r2, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	20000da4 	.word	0x20000da4
 8004088:	20000e0c 	.word	0x20000e0c

0800408c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004092:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <xTaskGetCurrentTaskHandle+0x18>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004098:	687b      	ldr	r3, [r7, #4]
	}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	20000918 	.word	0x20000918

080040a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <xTaskGetSchedulerState+0x34>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040b6:	2301      	movs	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	e008      	b.n	80040ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <xTaskGetSchedulerState+0x38>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040c4:	2302      	movs	r3, #2
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e001      	b.n	80040ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040ce:	687b      	ldr	r3, [r7, #4]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000df8 	.word	0x20000df8
 80040e0:	20000e14 	.word	0x20000e14

080040e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d056      	beq.n	80041a8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <xTaskPriorityInherit+0xd0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d246      	bcs.n	8004196 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db06      	blt.n	800411e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <xTaskPriorityInherit+0xd0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6959      	ldr	r1, [r3, #20]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <xTaskPriorityInherit+0xd4>)
 8004130:	4413      	add	r3, r2
 8004132:	4299      	cmp	r1, r3
 8004134:	d101      	bne.n	800413a <xTaskPriorityInherit+0x56>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xTaskPriorityInherit+0x58>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d022      	beq.n	8004186 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f9a9 	bl	800249c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <xTaskPriorityInherit+0xd0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <xTaskPriorityInherit+0xd8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d903      	bls.n	8004168 <xTaskPriorityInherit+0x84>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <xTaskPriorityInherit+0xd8>)
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <xTaskPriorityInherit+0xd4>)
 8004176:	441a      	add	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe f931 	bl	80023e6 <vListInsertEnd>
 8004184:	e004      	b.n	8004190 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <xTaskPriorityInherit+0xd0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e008      	b.n	80041a8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <xTaskPriorityInherit+0xd0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d201      	bcs.n	80041a8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041a8:	68fb      	ldr	r3, [r7, #12]
	}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000918 	.word	0x20000918
 80041b8:	2000091c 	.word	0x2000091c
 80041bc:	20000df4 	.word	0x20000df4

080041c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d056      	beq.n	8004284 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041d6:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <xTaskPriorityDisinherit+0xd0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d00a      	beq.n	80041f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60bb      	str	r3, [r7, #8]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	429a      	cmp	r2, r3
 8004228:	d02c      	beq.n	8004284 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d128      	bne.n	8004284 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f930 	bl	800249c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <xTaskPriorityDisinherit+0xd4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d903      	bls.n	8004264 <xTaskPriorityDisinherit+0xa4>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <xTaskPriorityDisinherit+0xd4>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a09      	ldr	r2, [pc, #36]	; (8004298 <xTaskPriorityDisinherit+0xd8>)
 8004272:	441a      	add	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fe f8b3 	bl	80023e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004284:	697b      	ldr	r3, [r7, #20]
	}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000918 	.word	0x20000918
 8004294:	20000df4 	.word	0x20000df4
 8004298:	2000091c 	.word	0x2000091c

0800429c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d06f      	beq.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60fb      	str	r3, [r7, #12]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d902      	bls.n	80042e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e002      	b.n	80042e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d050      	beq.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d14b      	bne.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	429a      	cmp	r2, r3
 8004304:	d10a      	bne.n	800431c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db04      	blt.n	800433a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6959      	ldr	r1, [r3, #20]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800434a:	4413      	add	r3, r2
 800434c:	4299      	cmp	r1, r3
 800434e:	d101      	bne.n	8004354 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01c      	beq.n	8004394 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	3304      	adds	r3, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe f89c 	bl	800249c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d903      	bls.n	8004378 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a06      	ldr	r2, [pc, #24]	; (80043a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004386:	441a      	add	r2, r3
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe f829 	bl	80023e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004394:	bf00      	nop
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000918 	.word	0x20000918
 80043a0:	2000091c 	.word	0x2000091c
 80043a4:	20000df4 	.word	0x20000df4

080043a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ba:	3201      	adds	r2, #1
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80043be:	4b03      	ldr	r3, [pc, #12]	; (80043cc <pvTaskIncrementMutexHeldCount+0x24>)
 80043c0:	681b      	ldr	r3, [r3, #0]
	}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000918 	.word	0x20000918

080043d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <prvAddCurrentTaskToDelayedList+0x90>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e0:	4b20      	ldr	r3, [pc, #128]	; (8004464 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe f858 	bl	800249c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d10a      	bne.n	800440a <prvAddCurrentTaskToDelayedList+0x3a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <prvAddCurrentTaskToDelayedList+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4819      	ldr	r0, [pc, #100]	; (8004468 <prvAddCurrentTaskToDelayedList+0x98>)
 8004404:	f7fd ffef 	bl	80023e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004408:	e026      	b.n	8004458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <prvAddCurrentTaskToDelayedList+0x94>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	429a      	cmp	r2, r3
 8004420:	d209      	bcs.n	8004436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <prvAddCurrentTaskToDelayedList+0x94>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7fd fffc 	bl	800242c <vListInsert>
}
 8004434:	e010      	b.n	8004458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvAddCurrentTaskToDelayedList+0x94>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fd fff2 	bl	800242c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d202      	bcs.n	8004458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6013      	str	r3, [r2, #0]
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000df0 	.word	0x20000df0
 8004464:	20000918 	.word	0x20000918
 8004468:	20000dd8 	.word	0x20000dd8
 800446c:	20000da8 	.word	0x20000da8
 8004470:	20000da4 	.word	0x20000da4
 8004474:	20000e0c 	.word	0x20000e0c

08004478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004482:	f000 facb 	bl	8004a1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <xTimerCreateTimerTask+0x80>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d021      	beq.n	80044d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004496:	1d3a      	adds	r2, r7, #4
 8004498:	f107 0108 	add.w	r1, r7, #8
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd ff5b 	bl	800235c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	9202      	str	r2, [sp, #8]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	2302      	movs	r3, #2
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	460a      	mov	r2, r1
 80044b8:	4910      	ldr	r1, [pc, #64]	; (80044fc <xTimerCreateTimerTask+0x84>)
 80044ba:	4811      	ldr	r0, [pc, #68]	; (8004500 <xTimerCreateTimerTask+0x88>)
 80044bc:	f7fe ffce 	bl	800345c <xTaskCreateStatic>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <xTimerCreateTimerTask+0x8c>)
 80044c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <xTimerCreateTimerTask+0x8c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044ce:	2301      	movs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044ee:	697b      	ldr	r3, [r7, #20]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000e48 	.word	0x20000e48
 80044fc:	0800a2c0 	.word	0x0800a2c0
 8004500:	08004625 	.word	0x08004625
 8004504:	20000e4c 	.word	0x20000e4c

08004508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623b      	str	r3, [r7, #32]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <xTimerGenericCommand+0x98>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d02a      	beq.n	8004594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b05      	cmp	r3, #5
 800454e:	dc18      	bgt.n	8004582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004550:	f7ff fdaa 	bl	80040a8 <xTaskGetSchedulerState>
 8004554:	4603      	mov	r3, r0
 8004556:	2b02      	cmp	r3, #2
 8004558:	d109      	bne.n	800456e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800455a:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <xTimerGenericCommand+0x98>)
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	f107 0110 	add.w	r1, r7, #16
 8004562:	2300      	movs	r3, #0
 8004564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004566:	f7fe f9bb 	bl	80028e0 <xQueueGenericSend>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24
 800456c:	e012      	b.n	8004594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <xTimerGenericCommand+0x98>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f107 0110 	add.w	r1, r7, #16
 8004576:	2300      	movs	r3, #0
 8004578:	2200      	movs	r2, #0
 800457a:	f7fe f9b1 	bl	80028e0 <xQueueGenericSend>
 800457e:	6278      	str	r0, [r7, #36]	; 0x24
 8004580:	e008      	b.n	8004594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <xTimerGenericCommand+0x98>)
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f107 0110 	add.w	r1, r7, #16
 800458a:	2300      	movs	r3, #0
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	f7fe faa5 	bl	8002adc <xQueueGenericSendFromISR>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000e48 	.word	0x20000e48

080045a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <prvProcessExpiredTimer+0x7c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd ff6d 	bl	800249c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d122      	bne.n	8004610 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	18d1      	adds	r1, r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f000 f8c8 	bl	800476c <prvInsertTimerInActiveList>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	2100      	movs	r1, #0
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7ff ff8b 	bl	8004508 <xTimerGenericCommand>
 80045f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	60fb      	str	r3, [r7, #12]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	4798      	blx	r3
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000e40 	.word	0x20000e40

08004624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f857 	bl	80046e4 <prvGetNextExpireTime>
 8004636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4619      	mov	r1, r3
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f803 	bl	8004648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004642:	f000 f8d5 	bl	80047f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004646:	e7f1      	b.n	800462c <prvTimerTask+0x8>

08004648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004652:	f7ff f935 	bl	80038c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f866 	bl	800472c <prvSampleTimeNow>
 8004660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d130      	bne.n	80046ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <prvProcessTimerOrBlockTask+0x3c>
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	d806      	bhi.n	8004684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004676:	f7ff f931 	bl	80038dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff91 	bl	80045a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004682:	e024      	b.n	80046ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d008      	beq.n	800469c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <prvProcessTimerOrBlockTask+0x90>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <prvProcessTimerOrBlockTask+0x94>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f7fe fea3 	bl	80033f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ae:	f7ff f915 	bl	80038dc <xTaskResumeAll>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <prvProcessTimerOrBlockTask+0x98>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
}
 80046c8:	e001      	b.n	80046ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046ca:	f7ff f907 	bl	80038dc <xTaskResumeAll>
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000e44 	.word	0x20000e44
 80046dc:	20000e48 	.word	0x20000e48
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <prvGetNextExpireTime+0x44>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <prvGetNextExpireTime+0x44>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e001      	b.n	800471a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000e40 	.word	0x20000e40

0800472c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004734:	f7ff f970 	bl	8003a18 <xTaskGetTickCount>
 8004738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <prvSampleTimeNow+0x3c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d205      	bcs.n	8004750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004744:	f000 f908 	bl	8004958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <prvSampleTimeNow+0x3c>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000e50 	.word	0x20000e50

0800476c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d812      	bhi.n	80047b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e01b      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <prvInsertTimerInActiveList+0x7c>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fd fe3b 	bl	800242c <vListInsert>
 80047b6:	e012      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d206      	bcs.n	80047ce <prvInsertTimerInActiveList+0x62>
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e007      	b.n	80047de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <prvInsertTimerInActiveList+0x80>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fd fe27 	bl	800242c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047de:	697b      	ldr	r3, [r7, #20]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000e44 	.word	0x20000e44
 80047ec:	20000e40 	.word	0x20000e40

080047f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08e      	sub	sp, #56	; 0x38
 80047f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047f6:	e09d      	b.n	8004934 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da18      	bge.n	8004830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	3304      	adds	r3, #4
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	61fb      	str	r3, [r7, #28]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004826:	6850      	ldr	r0, [r2, #4]
 8004828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	4611      	mov	r1, r2
 800482e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db7e      	blt.n	8004934 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fe28 	bl	800249c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800484c:	463b      	mov	r3, r7
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff ff6c 	bl	800472c <prvSampleTimeNow>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b09      	cmp	r3, #9
 800485a:	d86a      	bhi.n	8004932 <prvProcessReceivedCommands+0x142>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <prvProcessReceivedCommands+0x74>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	0800488d 	.word	0x0800488d
 8004868:	0800488d 	.word	0x0800488d
 800486c:	0800488d 	.word	0x0800488d
 8004870:	08004935 	.word	0x08004935
 8004874:	080048e9 	.word	0x080048e9
 8004878:	08004921 	.word	0x08004921
 800487c:	0800488d 	.word	0x0800488d
 8004880:	0800488d 	.word	0x0800488d
 8004884:	08004935 	.word	0x08004935
 8004888:	080048e9 	.word	0x080048e9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	18d1      	adds	r1, r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489a:	f7ff ff67 	bl	800476c <prvInsertTimerInActiveList>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d047      	beq.n	8004934 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d13f      	bne.n	8004934 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	441a      	add	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	2100      	movs	r1, #0
 80048c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c6:	f7ff fe1f 	bl	8004508 <xTimerGenericCommand>
 80048ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d130      	bne.n	8004934 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61bb      	str	r3, [r7, #24]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	617b      	str	r3, [r7, #20]
}
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	18d1      	adds	r1, r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491a:	f7ff ff27 	bl	800476c <prvInsertTimerInActiveList>
					break;
 800491e:	e009      	b.n	8004934 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800492a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492c:	f000 fb6a 	bl	8005004 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004930:	e000      	b.n	8004934 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004932:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <prvProcessReceivedCommands+0x164>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	1d39      	adds	r1, r7, #4
 800493a:	2200      	movs	r2, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe f965 	bl	8002c0c <xQueueReceive>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f47f af57 	bne.w	80047f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3730      	adds	r7, #48	; 0x30
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000e48 	.word	0x20000e48

08004958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800495e:	e045      	b.n	80049ec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004960:	4b2c      	ldr	r3, [pc, #176]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fd fd8f 	bl	800249c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d12e      	bne.n	80049ec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d90e      	bls.n	80049be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fd fd38 	bl	800242c <vListInsert>
 80049bc:	e016      	b.n	80049ec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049be:	2300      	movs	r3, #0
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	2100      	movs	r1, #0
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff fd9d 	bl	8004508 <xTimerGenericCommand>
 80049ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <prvSwitchTimerLists+0x94>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	603b      	str	r3, [r7, #0]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1b4      	bne.n	8004960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <prvSwitchTimerLists+0xc0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <prvSwitchTimerLists+0xbc>)
 8004a02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a04:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <prvSwitchTimerLists+0xc0>)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000e40 	.word	0x20000e40
 8004a18:	20000e44 	.word	0x20000e44

08004a1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a22:	f000 f92b 	bl	8004c7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d120      	bne.n	8004a70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a2e:	4814      	ldr	r0, [pc, #80]	; (8004a80 <prvCheckForValidListAndQueue+0x64>)
 8004a30:	f7fd fcae 	bl	8002390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a34:	4813      	ldr	r0, [pc, #76]	; (8004a84 <prvCheckForValidListAndQueue+0x68>)
 8004a36:	f7fd fcab 	bl	8002390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <prvCheckForValidListAndQueue+0x6c>)
 8004a3c:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <prvCheckForValidListAndQueue+0x64>)
 8004a3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <prvCheckForValidListAndQueue+0x70>)
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <prvCheckForValidListAndQueue+0x68>)
 8004a44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <prvCheckForValidListAndQueue+0x74>)
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <prvCheckForValidListAndQueue+0x78>)
 8004a4e:	2110      	movs	r1, #16
 8004a50:	200a      	movs	r0, #10
 8004a52:	f7fd fdb5 	bl	80025c0 <xQueueGenericCreateStatic>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	490b      	ldr	r1, [pc, #44]	; (8004a98 <prvCheckForValidListAndQueue+0x7c>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fc9a 	bl	80033a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a70:	f000 f934 	bl	8004cdc <vPortExitCritical>
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000e48 	.word	0x20000e48
 8004a80:	20000e18 	.word	0x20000e18
 8004a84:	20000e2c 	.word	0x20000e2c
 8004a88:	20000e40 	.word	0x20000e40
 8004a8c:	20000e44 	.word	0x20000e44
 8004a90:	20000ef4 	.word	0x20000ef4
 8004a94:	20000e54 	.word	0x20000e54
 8004a98:	0800a2c8 	.word	0x0800a2c8

08004a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b04      	subs	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004acc:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <pxPortInitialiseStack+0x54>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b14      	subs	r3, #20
 8004ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b20      	subs	r3, #32
 8004ae2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	08004af5 	.word	0x08004af5

08004af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <prvTaskExitError+0x54>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d00a      	beq.n	8004b1e <prvTaskExitError+0x2a>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <prvTaskExitError+0x28>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	60bb      	str	r3, [r7, #8]
}
 8004b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b32:	bf00      	nop
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0fc      	beq.n	8004b34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c
 8004b4c:	00000000 	.word	0x00000000

08004b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <pxCurrentTCBConst2>)
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	6808      	ldr	r0, [r1, #0]
 8004b56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b5a:	f380 8809 	msr	PSP, r0
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8811 	msr	BASEPRI, r0
 8004b6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004b6e:	4770      	bx	lr

08004b70 <pxCurrentTCBConst2>:
 8004b70:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004b78:	4806      	ldr	r0, [pc, #24]	; (8004b94 <prvPortStartFirstTask+0x1c>)
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f380 8808 	msr	MSP, r0
 8004b82:	b662      	cpsie	i
 8004b84:	b661      	cpsie	f
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	df00      	svc	0
 8004b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b92:	bf00      	nop
 8004b94:	e000ed08 	.word	0xe000ed08

08004b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b9e:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <xPortStartScheduler+0xd0>)
 8004ba0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	22ff      	movs	r2, #255	; 0xff
 8004bae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <xPortStartScheduler+0xd4>)
 8004bc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004bc8:	2207      	movs	r2, #7
 8004bca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bcc:	e009      	b.n	8004be2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004bce:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004bd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d0ef      	beq.n	8004bce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d00a      	beq.n	8004c10 <xPortStartScheduler+0x78>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c10:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004c18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c1a:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <xPortStartScheduler+0xd8>)
 8004c24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <xPortStartScheduler+0xdc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <xPortStartScheduler+0xdc>)
 8004c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <xPortStartScheduler+0xdc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <xPortStartScheduler+0xdc>)
 8004c40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c46:	f000 f8b9 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <xPortStartScheduler+0xe0>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c50:	f7ff ff92 	bl	8004b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c54:	f7fe ffac 	bl	8003bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c58:	f7ff ff4c 	bl	8004af4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000e400 	.word	0xe000e400
 8004c6c:	20000f44 	.word	0x20000f44
 8004c70:	20000f48 	.word	0x20000f48
 8004c74:	e000ed20 	.word	0xe000ed20
 8004c78:	2000000c 	.word	0x2000000c

08004c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <vPortEnterCritical+0x58>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <vPortEnterCritical+0x58>)
 8004c9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <vPortEnterCritical+0x58>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10f      	bne.n	8004cc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <vPortEnterCritical+0x5c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	603b      	str	r3, [r7, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <vPortEnterCritical+0x4a>
	}
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <vPortExitCritical+0x4c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <vPortExitCritical+0x24>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	607b      	str	r3, [r7, #4]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <vPortExitCritical+0x4c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <vPortExitCritical+0x4c>)
 8004d08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d0a:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <vPortExitCritical+0x4c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <vPortExitCritical+0x42>
 8004d12:	2300      	movs	r3, #0
 8004d14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f383 8811 	msr	BASEPRI, r3
}
 8004d1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	2000000c 	.word	0x2000000c
 8004d2c:	00000000 	.word	0x00000000

08004d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d30:	f3ef 8009 	mrs	r0, PSP
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <pxCurrentTCBConst>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d40:	6010      	str	r0, [r2, #0]
 8004d42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004d46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d4a:	f380 8811 	msr	BASEPRI, r0
 8004d4e:	f7fe ff2f 	bl	8003bb0 <vTaskSwitchContext>
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	6808      	ldr	r0, [r1, #0]
 8004d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d66:	f380 8809 	msr	PSP, r0
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	4770      	bx	lr

08004d70 <pxCurrentTCBConst>:
 8004d70:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7fe fe4f 	bl	8003a34 <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <xPortSysTickHandler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <vPortSetupTimerInterrupt+0x30>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b03      	ldr	r3, [pc, #12]	; (8004dec <vPortSetupTimerInterrupt+0x30>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	e000e010 	.word	0xe000e010
 8004df0:	e000e018 	.word	0xe000e018
 8004df4:	20000000 	.word	0x20000000
 8004df8:	10624dd3 	.word	0x10624dd3
 8004dfc:	e000e014 	.word	0xe000e014

08004e00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e06:	f3ef 8305 	mrs	r3, IPSR
 8004e0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d914      	bls.n	8004e3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e12:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <vPortValidateInterruptPriority+0x6c>)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <vPortValidateInterruptPriority+0x70>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	7afa      	ldrb	r2, [r7, #11]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20a      	bcs.n	8004e3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <vPortValidateInterruptPriority+0x74>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <vPortValidateInterruptPriority+0x78>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d90a      	bls.n	8004e62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	603b      	str	r3, [r7, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <vPortValidateInterruptPriority+0x60>
	}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	e000e3f0 	.word	0xe000e3f0
 8004e70:	20000f44 	.word	0x20000f44
 8004e74:	e000ed0c 	.word	0xe000ed0c
 8004e78:	20000f48 	.word	0x20000f48

08004e7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e88:	f7fe fd1a 	bl	80038c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e8c:	4b58      	ldr	r3, [pc, #352]	; (8004ff0 <pvPortMalloc+0x174>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e94:	f000 f910 	bl	80050b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e98:	4b56      	ldr	r3, [pc, #344]	; (8004ff4 <pvPortMalloc+0x178>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 808e 	bne.w	8004fc2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01d      	beq.n	8004ee8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004eac:	2208      	movs	r2, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f023 0307 	bic.w	r3, r3, #7
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	617b      	str	r3, [r7, #20]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d069      	beq.n	8004fc2 <pvPortMalloc+0x146>
 8004eee:	4b42      	ldr	r3, [pc, #264]	; (8004ff8 <pvPortMalloc+0x17c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d864      	bhi.n	8004fc2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <pvPortMalloc+0x180>)
 8004efa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004efc:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <pvPortMalloc+0x180>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f02:	e004      	b.n	8004f0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <pvPortMalloc+0xa4>
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f1      	bne.n	8004f04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f20:	4b33      	ldr	r3, [pc, #204]	; (8004ff0 <pvPortMalloc+0x174>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d04b      	beq.n	8004fc2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2208      	movs	r2, #8
 8004f30:	4413      	add	r3, r2
 8004f32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	2308      	movs	r3, #8
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d91f      	bls.n	8004f8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <pvPortMalloc+0xf8>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	613b      	str	r3, [r7, #16]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f86:	69b8      	ldr	r0, [r7, #24]
 8004f88:	f000 f8f8 	bl	800517c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <pvPortMalloc+0x17c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <pvPortMalloc+0x17c>)
 8004f98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <pvPortMalloc+0x17c>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <pvPortMalloc+0x184>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d203      	bcs.n	8004fae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <pvPortMalloc+0x17c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <pvPortMalloc+0x184>)
 8004fac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <pvPortMalloc+0x178>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fc2:	f7fe fc8b 	bl	80038dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <pvPortMalloc+0x16a>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <pvPortMalloc+0x168>
	return pvReturn;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20003354 	.word	0x20003354
 8004ff4:	20003360 	.word	0x20003360
 8004ff8:	20003358 	.word	0x20003358
 8004ffc:	2000334c 	.word	0x2000334c
 8005000:	2000335c 	.word	0x2000335c

08005004 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d048      	beq.n	80050a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005016:	2308      	movs	r3, #8
 8005018:	425b      	negs	r3, r3
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <vPortFree+0xac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <vPortFree+0x44>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <vPortFree+0x62>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60bb      	str	r3, [r7, #8]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <vPortFree+0xac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d115      	bne.n	80050a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vPortFree+0xac>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	43db      	mvns	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800508c:	f7fe fc18 	bl	80038c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <vPortFree+0xb0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4413      	add	r3, r2
 800509a:	4a06      	ldr	r2, [pc, #24]	; (80050b4 <vPortFree+0xb0>)
 800509c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800509e:	6938      	ldr	r0, [r7, #16]
 80050a0:	f000 f86c 	bl	800517c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80050a4:	f7fe fc1a 	bl	80038dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20003360 	.word	0x20003360
 80050b4:	20003358 	.word	0x20003358

080050b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050be:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80050c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <prvHeapInit+0xac>)
 80050c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3307      	adds	r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0307 	bic.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <prvHeapInit+0xac>)
 80050e8:	4413      	add	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <prvHeapInit+0xb0>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050f6:	4b1c      	ldr	r3, [pc, #112]	; (8005168 <prvHeapInit+0xb0>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4413      	add	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005104:	2208      	movs	r2, #8
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a15      	ldr	r2, [pc, #84]	; (800516c <prvHeapInit+0xb4>)
 8005118:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800511a:	4b14      	ldr	r3, [pc, #80]	; (800516c <prvHeapInit+0xb4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <prvHeapInit+0xb4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <prvHeapInit+0xb4>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <prvHeapInit+0xb8>)
 8005146:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a09      	ldr	r2, [pc, #36]	; (8005174 <prvHeapInit+0xbc>)
 800514e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <prvHeapInit+0xc0>)
 8005152:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005156:	601a      	str	r2, [r3, #0]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000f4c 	.word	0x20000f4c
 8005168:	2000334c 	.word	0x2000334c
 800516c:	20003354 	.word	0x20003354
 8005170:	2000335c 	.word	0x2000335c
 8005174:	20003358 	.word	0x20003358
 8005178:	20003360 	.word	0x20003360

0800517c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <prvInsertBlockIntoFreeList+0xa8>)
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e002      	b.n	8005190 <prvInsertBlockIntoFreeList+0x14>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d8f7      	bhi.n	800518a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4413      	add	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d108      	bne.n	80051be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	441a      	add	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d118      	bne.n	8005204 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <prvInsertBlockIntoFreeList+0xac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d00d      	beq.n	80051fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e008      	b.n	800520c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <prvInsertBlockIntoFreeList+0xac>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e003      	b.n	800520c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d002      	beq.n	800521a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	2000334c 	.word	0x2000334c
 8005228:	20003354 	.word	0x20003354

0800522c <read_temp_init>:
 */

#include "adc.h"

void read_temp_init(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
	RCC ->CFGR &= ~(0b11<<14);
 8005230:	4b19      	ldr	r3, [pc, #100]	; (8005298 <read_temp_init+0x6c>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <read_temp_init+0x6c>)
 8005236:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800523a:	6053      	str	r3, [r2, #4]
	RCC ->CFGR |= (0b10<<14);
 800523c:	4b16      	ldr	r3, [pc, #88]	; (8005298 <read_temp_init+0x6c>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a15      	ldr	r2, [pc, #84]	; (8005298 <read_temp_init+0x6c>)
 8005242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005246:	6053      	str	r3, [r2, #4]

    RCC-> APB2ENR |= RCC_APB2ENR_ADC1EN;
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <read_temp_init+0x6c>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4a12      	ldr	r2, [pc, #72]	; (8005298 <read_temp_init+0x6c>)
 800524e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005252:	6193      	str	r3, [r2, #24]

    ADC1-> SMPR1 |= (0b111<<18); //sample time: 239.5 cycles
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <read_temp_init+0x70>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a10      	ldr	r2, [pc, #64]	; (800529c <read_temp_init+0x70>)
 800525a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800525e:	60d3      	str	r3, [r2, #12]
    ADC1-> JSQR &= ~(0b11<<20); //00: 1 conversion
 8005260:	4b0e      	ldr	r3, [pc, #56]	; (800529c <read_temp_init+0x70>)
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <read_temp_init+0x70>)
 8005266:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800526a:	6393      	str	r3, [r2, #56]	; 0x38
    ADC1-> JSQR |= (16<<15); //set source for JSQ4 is temp sensor (CH16)
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <read_temp_init+0x70>)
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	4a0a      	ldr	r2, [pc, #40]	; (800529c <read_temp_init+0x70>)
 8005272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005276:	6393      	str	r3, [r2, #56]	; 0x38

    ADC1-> CR2 |= (1<<23); //enable temp sensor
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <read_temp_init+0x70>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a07      	ldr	r2, [pc, #28]	; (800529c <read_temp_init+0x70>)
 800527e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005282:	6093      	str	r3, [r2, #8]

    ADC1-> CR2 |= (1<<0); //Enable ADC and to start conversion
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <read_temp_init+0x70>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <read_temp_init+0x70>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6093      	str	r3, [r2, #8]
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	40021000 	.word	0x40021000
 800529c:	40012400 	.word	0x40012400

080052a0 <adc_get_temp_ss>:

float adc_get_temp_ss(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
    float temp = 0;
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
    float vin = 0;
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
    uint16_t raw_data = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	80fb      	strh	r3, [r7, #6]

	ADC1->CR2 |= (0b111 << 12) ;//External event select for injected group: JSWSTART
 80052b6:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052bc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80052c0:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (0b1 << 15) ;//1: Conversion on external event enabled
 80052c2:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4a36      	ldr	r2, [pc, #216]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	6093      	str	r3, [r2, #8]

    // trigger ADC start convert
    ADC1-> CR2 |= (1u<<21);//Start conversion of injected channels
 80052ce:	4b34      	ldr	r3, [pc, #208]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4a33      	ldr	r2, [pc, #204]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052d8:	6093      	str	r3, [r2, #8]

    //wait until end of conversion
    while(((ADC1-> SR>>2)&1) == 0);
 80052da:	bf00      	nop
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f9      	beq.n	80052dc <adc_get_temp_ss+0x3c>
    ADC1-> SR &= ~(1u<<2); //clear JEOC flag
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052ee:	f023 0304 	bic.w	r3, r3, #4
 80052f2:	6013      	str	r3, [r2, #0]

    raw_data = ADC1-> JDR1; //read ADC data form JDR1 (data of JSQ4)
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <adc_get_temp_ss+0x100>)
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	80fb      	strh	r3, [r7, #6]

    vin = (raw_data*3300.0)/4095.0;
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb f881 	bl	8000404 <__aeabi_i2d>
 8005302:	a31f      	add	r3, pc, #124	; (adr r3, 8005380 <adc_get_temp_ss+0xe0>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f7fb f8e6 	bl	80004d8 <__aeabi_dmul>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	a31c      	add	r3, pc, #112	; (adr r3, 8005388 <adc_get_temp_ss+0xe8>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb fa07 	bl	800072c <__aeabi_ddiv>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	f7fb fbcf 	bl	8000ac8 <__aeabi_d2f>
 800532a:	4603      	mov	r3, r0
 800532c:	60bb      	str	r3, [r7, #8]

    temp = ((1430.0 - vin) / 4.3) + 25.0;
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f7fb f87a 	bl	8000428 <__aeabi_f2d>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	a115      	add	r1, pc, #84	; (adr r1, 8005390 <adc_get_temp_ss+0xf0>)
 800533a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533e:	f7fa ff13 	bl	8000168 <__aeabi_dsub>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	a313      	add	r3, pc, #76	; (adr r3, 8005398 <adc_get_temp_ss+0xf8>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fb f9ec 	bl	800072c <__aeabi_ddiv>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <adc_get_temp_ss+0x104>)
 8005362:	f7fa ff03 	bl	800016c <__adddf3>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4610      	mov	r0, r2
 800536c:	4619      	mov	r1, r3
 800536e:	f7fb fbab 	bl	8000ac8 <__aeabi_d2f>
 8005372:	4603      	mov	r3, r0
 8005374:	60fb      	str	r3, [r7, #12]

    return temp;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	00000000 	.word	0x00000000
 8005384:	40a9c800 	.word	0x40a9c800
 8005388:	00000000 	.word	0x00000000
 800538c:	40affe00 	.word	0x40affe00
 8005390:	00000000 	.word	0x00000000
 8005394:	40965800 	.word	0x40965800
 8005398:	33333333 	.word	0x33333333
 800539c:	40113333 	.word	0x40113333
 80053a0:	40012400 	.word	0x40012400
 80053a4:	40390000 	.word	0x40390000

080053a8 <UART1_init>:
 */

#include "uart.h"

void UART1_init()
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <UART1_init+0xb0>)
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	4a29      	ldr	r2, [pc, #164]	; (8005458 <UART1_init+0xb0>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6193      	str	r3, [r2, #24]
 80053ba:	4b27      	ldr	r3, [pc, #156]	; (8005458 <UART1_init+0xb0>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
	//register (0x4001 0000)AFIO_MAPR: UART1 default on PA9, PA10  neu muon dung PB6, PB7 set USART1_REMAP len 1
	uint32_t * AFIO_MAPR = (uint32_t *) (AFIO_BASE_ARR + 0x04);
 80053c6:	4b25      	ldr	r3, [pc, #148]	; (800545c <UART1_init+0xb4>)
 80053c8:	617b      	str	r3, [r7, #20]
	* AFIO_MAPR &= ~(1<<2);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0204 	bic.w	r2, r3, #4
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	601a      	str	r2, [r3, #0]
	//set PA9 as UART1_TX, PA10 as UART1_RX
	uint32_t * GPIOA_CRH = (uint32_t *) (GPIOA_BASE_ARR + 0x04);
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <UART1_init+0xb8>)
 80053d8:	613b      	str	r3, [r7, #16]
	*GPIOA_CRH &= ~ (0xff << 4);// clear MODE, CNF for PA9, PA10
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f423 627f 	bic.w	r2, r3, #4080	; 0xff0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	601a      	str	r2, [r3, #0]
	*GPIOA_CRH |= (0b10<<4)|(0b10<<6); //PA9 output 2MHz, Alternate function output Push-pull
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	601a      	str	r2, [r3, #0]

	*GPIOA_CRH |= (0b01<<10); 		//set PA10 Floating input
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	601a      	str	r2, [r3, #0]
 * 	+baudrate: 9600
 * 	+ frame:
 * 		data len: 8 bits
 * 		parity (none/odd/even): none
 */
	__HAL_RCC_USART1_CLK_ENABLE(); //18Mhz set in .ioc file USART1 in APB2 --> f_clock = 72Mhz
 80053fe:	4b16      	ldr	r3, [pc, #88]	; (8005458 <UART1_init+0xb0>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <UART1_init+0xb0>)
 8005404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005408:	6193      	str	r3, [r2, #24]
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <UART1_init+0xb0>)
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
	uint32_t * USART_BRR = (uint32_t *) (USART1_BASE_ARR + 0x08);
 8005416:	4b13      	ldr	r3, [pc, #76]	; (8005464 <UART1_init+0xbc>)
 8005418:	60fb      	str	r3, [r7, #12]
	* USART_BRR = (468 << 4) | (12 << 0); //baudrate 9600
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8005420:	601a      	str	r2, [r3, #0]
	uint32_t * USART_CR1 = (uint32_t *) (USART1_BASE_ARR + 0x0C);
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <UART1_init+0xc0>)
 8005424:	60bb      	str	r3, [r7, #8]
	* USART_CR1 &= ~(1<<10); //disable parity control = parity: none
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	601a      	str	r2, [r3, #0]
	//* USART_CR1 &= ~(1<<12); //1 Start bit, 8 Data bits, n Stop bit
	* USART_CR1 &= ~(1<<12); //1 Start bit, 8 Data bits, n Stop bit
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	601a      	str	r2, [r3, #0]
	* USART_CR1 |= (1<<13)|(1<<3)|(1<<2); //enable UART, TX, RX
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005446:	f043 030c 	orr.w	r3, r3, #12
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	6013      	str	r3, [r2, #0]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40021000 	.word	0x40021000
 800545c:	40010004 	.word	0x40010004
 8005460:	40010804 	.word	0x40010804
 8005464:	40013808 	.word	0x40013808
 8005468:	4001380c 	.word	0x4001380c

0800546c <UART1_Send_1byte>:

static void UART1_Send_1byte (char data)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
	uint32_t *USART_SR = (uint32_t *) (USART1_BASE_ARR + 0x00);
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <UART1_Send_1byte+0x4c>)
 8005478:	60fb      	str	r3, [r7, #12]
	uint32_t *USART_DR = (uint32_t *) (USART1_BASE_ARR + 0x04);
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <UART1_Send_1byte+0x50>)
 800547c:	60bb      	str	r3, [r7, #8]
	while(((*USART_SR >> 7) & 1) == 0);	//Wait Transmit data register empty
 800547e:	bf00      	nop
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f9      	beq.n	8005480 <UART1_Send_1byte+0x14>
	*USART_DR = data;					// Write data to DR to UART transfer data via Tx (PA9)
 800548c:	79fa      	ldrb	r2, [r7, #7]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	601a      	str	r2, [r3, #0]
	while(((*USART_SR >> 6) & 1) == 0);	//Wait Transmission complete
 8005492:	bf00      	nop
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f9      	beq.n	8005494 <UART1_Send_1byte+0x28>
	*USART_SR &= ~(1<<6); 				//clear TC flag
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40013800 	.word	0x40013800
 80054bc:	40013804 	.word	0x40013804

080054c0 <UART1_Send_String>:

static void UART1_Send_String (char * msg)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fa fe41 	bl	8000150 <strlen>
 80054ce:	4603      	mov	r3, r0
 80054d0:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<msg_len;i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e009      	b.n	80054ec <UART1_Send_String+0x2c>
	{
		UART1_Send_1byte(msg[i]);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ffc3 	bl	800546c <UART1_Send_1byte>
	for(int i=0;i<msg_len;i++)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	dbf1      	blt.n	80054d8 <UART1_Send_String+0x18>
	}
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <uart_printf>:

void uart_printf(char* format, ...)
{
 80054fe:	b40f      	push	{r0, r1, r2, r3}
 8005500:	b580      	push	{r7, lr}
 8005502:	b0a2      	sub	sp, #136	; 0x88
 8005504:	af00      	add	r7, sp, #0
	va_list aptr;
	va_start(aptr, format);
 8005506:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800550a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char buffer[128] = {0};
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	227c      	movs	r2, #124	; 0x7c
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fa64 	bl	80069e8 <memset>
	vsprintf(buffer, format, aptr);
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fa52 	bl	80069d4 <vsiprintf>
	UART1_Send_String(buffer);
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ffc4 	bl	80054c0 <UART1_Send_String>
	va_end(aptr);
}
 8005538:	bf00      	nop
 800553a:	3788      	adds	r7, #136	; 0x88
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005542:	b004      	add	sp, #16
 8005544:	4770      	bx	lr
	...

08005548 <findslot>:
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <findslot+0x2c>)
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	b118      	cbz	r0, 800555a <findslot+0x12>
 8005552:	6a03      	ldr	r3, [r0, #32]
 8005554:	b90b      	cbnz	r3, 800555a <findslot+0x12>
 8005556:	f001 f98d 	bl	8006874 <__sinit>
 800555a:	2c13      	cmp	r4, #19
 800555c:	d807      	bhi.n	800556e <findslot+0x26>
 800555e:	4806      	ldr	r0, [pc, #24]	; (8005578 <findslot+0x30>)
 8005560:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005564:	3201      	adds	r2, #1
 8005566:	d002      	beq.n	800556e <findslot+0x26>
 8005568:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800556c:	bd10      	pop	{r4, pc}
 800556e:	2000      	movs	r0, #0
 8005570:	e7fc      	b.n	800556c <findslot+0x24>
 8005572:	bf00      	nop
 8005574:	20000070 	.word	0x20000070
 8005578:	20003370 	.word	0x20003370

0800557c <error>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	f001 fa84 	bl	8006a8c <__errno>
 8005584:	2613      	movs	r6, #19
 8005586:	4605      	mov	r5, r0
 8005588:	2700      	movs	r7, #0
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	beab      	bkpt	0x00ab
 8005590:	4606      	mov	r6, r0
 8005592:	4620      	mov	r0, r4
 8005594:	602e      	str	r6, [r5, #0]
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005598 <checkerror>:
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d101      	bne.n	80055a0 <checkerror+0x8>
 800559c:	f7ff bfee 	b.w	800557c <error>
 80055a0:	4770      	bx	lr

080055a2 <_swiread>:
 80055a2:	b530      	push	{r4, r5, lr}
 80055a4:	b085      	sub	sp, #20
 80055a6:	2406      	movs	r4, #6
 80055a8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80055ac:	9203      	str	r2, [sp, #12]
 80055ae:	ad01      	add	r5, sp, #4
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	beab      	bkpt	0x00ab
 80055b6:	4604      	mov	r4, r0
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7ff ffed 	bl	8005598 <checkerror>
 80055be:	b005      	add	sp, #20
 80055c0:	bd30      	pop	{r4, r5, pc}

080055c2 <_read>:
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	460e      	mov	r6, r1
 80055c6:	4615      	mov	r5, r2
 80055c8:	f7ff ffbe 	bl	8005548 <findslot>
 80055cc:	4604      	mov	r4, r0
 80055ce:	b930      	cbnz	r0, 80055de <_read+0x1c>
 80055d0:	f001 fa5c 	bl	8006a8c <__errno>
 80055d4:	2309      	movs	r3, #9
 80055d6:	6003      	str	r3, [r0, #0]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	462a      	mov	r2, r5
 80055e0:	4631      	mov	r1, r6
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	f7ff ffdd 	bl	80055a2 <_swiread>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	bf1f      	itttt	ne
 80055ec:	6863      	ldrne	r3, [r4, #4]
 80055ee:	1a28      	subne	r0, r5, r0
 80055f0:	181b      	addne	r3, r3, r0
 80055f2:	6063      	strne	r3, [r4, #4]
 80055f4:	e7f2      	b.n	80055dc <_read+0x1a>

080055f6 <_swilseek>:
 80055f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f8:	460c      	mov	r4, r1
 80055fa:	4616      	mov	r6, r2
 80055fc:	f7ff ffa4 	bl	8005548 <findslot>
 8005600:	4605      	mov	r5, r0
 8005602:	b940      	cbnz	r0, 8005616 <_swilseek+0x20>
 8005604:	f001 fa42 	bl	8006a8c <__errno>
 8005608:	2309      	movs	r3, #9
 800560a:	6003      	str	r3, [r0, #0]
 800560c:	f04f 34ff 	mov.w	r4, #4294967295
 8005610:	4620      	mov	r0, r4
 8005612:	b003      	add	sp, #12
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005616:	2e02      	cmp	r6, #2
 8005618:	d903      	bls.n	8005622 <_swilseek+0x2c>
 800561a:	f001 fa37 	bl	8006a8c <__errno>
 800561e:	2316      	movs	r3, #22
 8005620:	e7f3      	b.n	800560a <_swilseek+0x14>
 8005622:	2e01      	cmp	r6, #1
 8005624:	d112      	bne.n	800564c <_swilseek+0x56>
 8005626:	6843      	ldr	r3, [r0, #4]
 8005628:	18e4      	adds	r4, r4, r3
 800562a:	d4f6      	bmi.n	800561a <_swilseek+0x24>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	260a      	movs	r6, #10
 8005630:	466f      	mov	r7, sp
 8005632:	e9cd 3400 	strd	r3, r4, [sp]
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	beab      	bkpt	0x00ab
 800563c:	4606      	mov	r6, r0
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff ffaa 	bl	8005598 <checkerror>
 8005644:	2800      	cmp	r0, #0
 8005646:	dbe1      	blt.n	800560c <_swilseek+0x16>
 8005648:	606c      	str	r4, [r5, #4]
 800564a:	e7e1      	b.n	8005610 <_swilseek+0x1a>
 800564c:	2e02      	cmp	r6, #2
 800564e:	6803      	ldr	r3, [r0, #0]
 8005650:	d1ec      	bne.n	800562c <_swilseek+0x36>
 8005652:	260c      	movs	r6, #12
 8005654:	466f      	mov	r7, sp
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	beab      	bkpt	0x00ab
 800565e:	4606      	mov	r6, r0
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff ff99 	bl	8005598 <checkerror>
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d0d0      	beq.n	800560c <_swilseek+0x16>
 800566a:	4404      	add	r4, r0
 800566c:	e7de      	b.n	800562c <_swilseek+0x36>

0800566e <_lseek>:
 800566e:	f7ff bfc2 	b.w	80055f6 <_swilseek>

08005672 <_swiwrite>:
 8005672:	b530      	push	{r4, r5, lr}
 8005674:	b085      	sub	sp, #20
 8005676:	2405      	movs	r4, #5
 8005678:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800567c:	9203      	str	r2, [sp, #12]
 800567e:	ad01      	add	r5, sp, #4
 8005680:	4620      	mov	r0, r4
 8005682:	4629      	mov	r1, r5
 8005684:	beab      	bkpt	0x00ab
 8005686:	4604      	mov	r4, r0
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff ff85 	bl	8005598 <checkerror>
 800568e:	b005      	add	sp, #20
 8005690:	bd30      	pop	{r4, r5, pc}

08005692 <_write>:
 8005692:	b570      	push	{r4, r5, r6, lr}
 8005694:	460e      	mov	r6, r1
 8005696:	4615      	mov	r5, r2
 8005698:	f7ff ff56 	bl	8005548 <findslot>
 800569c:	4604      	mov	r4, r0
 800569e:	b930      	cbnz	r0, 80056ae <_write+0x1c>
 80056a0:	f001 f9f4 	bl	8006a8c <__errno>
 80056a4:	2309      	movs	r3, #9
 80056a6:	6003      	str	r3, [r0, #0]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	462a      	mov	r2, r5
 80056b0:	4631      	mov	r1, r6
 80056b2:	6800      	ldr	r0, [r0, #0]
 80056b4:	f7ff ffdd 	bl	8005672 <_swiwrite>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	dbf5      	blt.n	80056a8 <_write+0x16>
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	1ae8      	subs	r0, r5, r3
 80056c0:	4402      	add	r2, r0
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	6062      	str	r2, [r4, #4]
 80056c6:	d1f1      	bne.n	80056ac <_write+0x1a>
 80056c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056cc:	2000      	movs	r0, #0
 80056ce:	f7ff bf55 	b.w	800557c <error>

080056d2 <_swiclose>:
 80056d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056d4:	2402      	movs	r4, #2
 80056d6:	9001      	str	r0, [sp, #4]
 80056d8:	ad01      	add	r5, sp, #4
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	beab      	bkpt	0x00ab
 80056e0:	4604      	mov	r4, r0
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7ff ff58 	bl	8005598 <checkerror>
 80056e8:	b003      	add	sp, #12
 80056ea:	bd30      	pop	{r4, r5, pc}

080056ec <_close>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4605      	mov	r5, r0
 80056f0:	f7ff ff2a 	bl	8005548 <findslot>
 80056f4:	4604      	mov	r4, r0
 80056f6:	b930      	cbnz	r0, 8005706 <_close+0x1a>
 80056f8:	f001 f9c8 	bl	8006a8c <__errno>
 80056fc:	2309      	movs	r3, #9
 80056fe:	6003      	str	r3, [r0, #0]
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	bd38      	pop	{r3, r4, r5, pc}
 8005706:	3d01      	subs	r5, #1
 8005708:	2d01      	cmp	r5, #1
 800570a:	d809      	bhi.n	8005720 <_close+0x34>
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <_close+0x48>)
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d104      	bne.n	8005720 <_close+0x34>
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	6003      	str	r3, [r0, #0]
 800571c:	2000      	movs	r0, #0
 800571e:	e7f1      	b.n	8005704 <_close+0x18>
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	f7ff ffd6 	bl	80056d2 <_swiclose>
 8005726:	2800      	cmp	r0, #0
 8005728:	d1ec      	bne.n	8005704 <_close+0x18>
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	e7e8      	b.n	8005704 <_close+0x18>
 8005732:	bf00      	nop
 8005734:	20003370 	.word	0x20003370

08005738 <_getpid>:
 8005738:	2001      	movs	r0, #1
 800573a:	4770      	bx	lr

0800573c <_swistat>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	460c      	mov	r4, r1
 8005740:	f7ff ff02 	bl	8005548 <findslot>
 8005744:	4605      	mov	r5, r0
 8005746:	b930      	cbnz	r0, 8005756 <_swistat+0x1a>
 8005748:	f001 f9a0 	bl	8006a8c <__errno>
 800574c:	2309      	movs	r3, #9
 800574e:	6003      	str	r3, [r0, #0]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	6863      	ldr	r3, [r4, #4]
 8005758:	260c      	movs	r6, #12
 800575a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005764:	64a3      	str	r3, [r4, #72]	; 0x48
 8005766:	4630      	mov	r0, r6
 8005768:	4629      	mov	r1, r5
 800576a:	beab      	bkpt	0x00ab
 800576c:	4605      	mov	r5, r0
 800576e:	4628      	mov	r0, r5
 8005770:	f7ff ff12 	bl	8005598 <checkerror>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	bf1c      	itt	ne
 8005778:	6120      	strne	r0, [r4, #16]
 800577a:	2000      	movne	r0, #0
 800577c:	e7ea      	b.n	8005754 <_swistat+0x18>

0800577e <_fstat>:
 800577e:	460b      	mov	r3, r1
 8005780:	b510      	push	{r4, lr}
 8005782:	2100      	movs	r1, #0
 8005784:	4604      	mov	r4, r0
 8005786:	2258      	movs	r2, #88	; 0x58
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f92d 	bl	80069e8 <memset>
 800578e:	4601      	mov	r1, r0
 8005790:	4620      	mov	r0, r4
 8005792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005796:	f7ff bfd1 	b.w	800573c <_swistat>

0800579a <_stat>:
 800579a:	b538      	push	{r3, r4, r5, lr}
 800579c:	460d      	mov	r5, r1
 800579e:	4604      	mov	r4, r0
 80057a0:	2258      	movs	r2, #88	; 0x58
 80057a2:	2100      	movs	r1, #0
 80057a4:	4628      	mov	r0, r5
 80057a6:	f001 f91f 	bl	80069e8 <memset>
 80057aa:	4620      	mov	r0, r4
 80057ac:	2100      	movs	r1, #0
 80057ae:	f000 f811 	bl	80057d4 <_swiopen>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	4604      	mov	r4, r0
 80057b6:	d00b      	beq.n	80057d0 <_stat+0x36>
 80057b8:	686b      	ldr	r3, [r5, #4]
 80057ba:	4629      	mov	r1, r5
 80057bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057c0:	606b      	str	r3, [r5, #4]
 80057c2:	f7ff ffbb 	bl	800573c <_swistat>
 80057c6:	4605      	mov	r5, r0
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff ff8f 	bl	80056ec <_close>
 80057ce:	462c      	mov	r4, r5
 80057d0:	4620      	mov	r0, r4
 80057d2:	bd38      	pop	{r3, r4, r5, pc}

080057d4 <_swiopen>:
 80057d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057d8:	4607      	mov	r7, r0
 80057da:	460e      	mov	r6, r1
 80057dc:	2500      	movs	r5, #0
 80057de:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005884 <_swiopen+0xb0>
 80057e2:	b097      	sub	sp, #92	; 0x5c
 80057e4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80057e8:	1c61      	adds	r1, r4, #1
 80057ea:	d037      	beq.n	800585c <_swiopen+0x88>
 80057ec:	3501      	adds	r5, #1
 80057ee:	2d14      	cmp	r5, #20
 80057f0:	d1f8      	bne.n	80057e4 <_swiopen+0x10>
 80057f2:	f001 f94b 	bl	8006a8c <__errno>
 80057f6:	2318      	movs	r3, #24
 80057f8:	f04f 34ff 	mov.w	r4, #4294967295
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	e03d      	b.n	800587c <_swiopen+0xa8>
 8005800:	f240 6301 	movw	r3, #1537	; 0x601
 8005804:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8005808:	07b2      	lsls	r2, r6, #30
 800580a:	bf48      	it	mi
 800580c:	f044 0402 	orrmi.w	r4, r4, #2
 8005810:	421e      	tst	r6, r3
 8005812:	bf18      	it	ne
 8005814:	f044 0404 	orrne.w	r4, r4, #4
 8005818:	0733      	lsls	r3, r6, #28
 800581a:	bf48      	it	mi
 800581c:	f024 0404 	bicmi.w	r4, r4, #4
 8005820:	4638      	mov	r0, r7
 8005822:	bf48      	it	mi
 8005824:	f044 0408 	orrmi.w	r4, r4, #8
 8005828:	9700      	str	r7, [sp, #0]
 800582a:	f7fa fc91 	bl	8000150 <strlen>
 800582e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8005832:	2401      	movs	r4, #1
 8005834:	4620      	mov	r0, r4
 8005836:	4649      	mov	r1, r9
 8005838:	beab      	bkpt	0x00ab
 800583a:	4604      	mov	r4, r0
 800583c:	2c00      	cmp	r4, #0
 800583e:	db08      	blt.n	8005852 <_swiopen+0x7e>
 8005840:	2300      	movs	r3, #0
 8005842:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8005846:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800584a:	462c      	mov	r4, r5
 800584c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005850:	e014      	b.n	800587c <_swiopen+0xa8>
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff fe92 	bl	800557c <error>
 8005858:	4604      	mov	r4, r0
 800585a:	e00f      	b.n	800587c <_swiopen+0xa8>
 800585c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8005860:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005864:	46e9      	mov	r9, sp
 8005866:	d1cb      	bne.n	8005800 <_swiopen+0x2c>
 8005868:	4649      	mov	r1, r9
 800586a:	4638      	mov	r0, r7
 800586c:	f7ff ff95 	bl	800579a <_stat>
 8005870:	3001      	adds	r0, #1
 8005872:	d0c5      	beq.n	8005800 <_swiopen+0x2c>
 8005874:	f001 f90a 	bl	8006a8c <__errno>
 8005878:	2311      	movs	r3, #17
 800587a:	6003      	str	r3, [r0, #0]
 800587c:	4620      	mov	r0, r4
 800587e:	b017      	add	sp, #92	; 0x5c
 8005880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005884:	20003370 	.word	0x20003370

08005888 <_get_semihosting_exts>:
 8005888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800588c:	4606      	mov	r6, r0
 800588e:	460f      	mov	r7, r1
 8005890:	482a      	ldr	r0, [pc, #168]	; (800593c <_get_semihosting_exts+0xb4>)
 8005892:	2100      	movs	r1, #0
 8005894:	4615      	mov	r5, r2
 8005896:	f7ff ff9d 	bl	80057d4 <_swiopen>
 800589a:	4604      	mov	r4, r0
 800589c:	462a      	mov	r2, r5
 800589e:	2100      	movs	r1, #0
 80058a0:	4630      	mov	r0, r6
 80058a2:	f001 f8a1 	bl	80069e8 <memset>
 80058a6:	1c63      	adds	r3, r4, #1
 80058a8:	d016      	beq.n	80058d8 <_get_semihosting_exts+0x50>
 80058aa:	4620      	mov	r0, r4
 80058ac:	f7ff fe4c 	bl	8005548 <findslot>
 80058b0:	f04f 080c 	mov.w	r8, #12
 80058b4:	4681      	mov	r9, r0
 80058b6:	4640      	mov	r0, r8
 80058b8:	4649      	mov	r1, r9
 80058ba:	beab      	bkpt	0x00ab
 80058bc:	4680      	mov	r8, r0
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fe6a 	bl	8005598 <checkerror>
 80058c4:	2803      	cmp	r0, #3
 80058c6:	dd02      	ble.n	80058ce <_get_semihosting_exts+0x46>
 80058c8:	1ec3      	subs	r3, r0, #3
 80058ca:	42ab      	cmp	r3, r5
 80058cc:	dc08      	bgt.n	80058e0 <_get_semihosting_exts+0x58>
 80058ce:	4620      	mov	r0, r4
 80058d0:	f7ff ff0c 	bl	80056ec <_close>
 80058d4:	f04f 34ff 	mov.w	r4, #4294967295
 80058d8:	4620      	mov	r0, r4
 80058da:	b003      	add	sp, #12
 80058dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058e0:	2204      	movs	r2, #4
 80058e2:	4620      	mov	r0, r4
 80058e4:	eb0d 0102 	add.w	r1, sp, r2
 80058e8:	f7ff fe6b 	bl	80055c2 <_read>
 80058ec:	2803      	cmp	r0, #3
 80058ee:	ddee      	ble.n	80058ce <_get_semihosting_exts+0x46>
 80058f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058f4:	2b53      	cmp	r3, #83	; 0x53
 80058f6:	d1ea      	bne.n	80058ce <_get_semihosting_exts+0x46>
 80058f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80058fc:	2b48      	cmp	r3, #72	; 0x48
 80058fe:	d1e6      	bne.n	80058ce <_get_semihosting_exts+0x46>
 8005900:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005904:	2b46      	cmp	r3, #70	; 0x46
 8005906:	d1e2      	bne.n	80058ce <_get_semihosting_exts+0x46>
 8005908:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800590c:	2b42      	cmp	r3, #66	; 0x42
 800590e:	d1de      	bne.n	80058ce <_get_semihosting_exts+0x46>
 8005910:	2201      	movs	r2, #1
 8005912:	4639      	mov	r1, r7
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff fe6e 	bl	80055f6 <_swilseek>
 800591a:	2800      	cmp	r0, #0
 800591c:	dbd7      	blt.n	80058ce <_get_semihosting_exts+0x46>
 800591e:	462a      	mov	r2, r5
 8005920:	4631      	mov	r1, r6
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff fe4d 	bl	80055c2 <_read>
 8005928:	4605      	mov	r5, r0
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff fede 	bl	80056ec <_close>
 8005930:	4628      	mov	r0, r5
 8005932:	f7ff fe31 	bl	8005598 <checkerror>
 8005936:	4604      	mov	r4, r0
 8005938:	e7ce      	b.n	80058d8 <_get_semihosting_exts+0x50>
 800593a:	bf00      	nop
 800593c:	0800a3aa 	.word	0x0800a3aa

08005940 <initialise_semihosting_exts>:
 8005940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005942:	2100      	movs	r1, #0
 8005944:	2201      	movs	r2, #1
 8005946:	4d09      	ldr	r5, [pc, #36]	; (800596c <initialise_semihosting_exts+0x2c>)
 8005948:	4c09      	ldr	r4, [pc, #36]	; (8005970 <initialise_semihosting_exts+0x30>)
 800594a:	a801      	add	r0, sp, #4
 800594c:	6029      	str	r1, [r5, #0]
 800594e:	6022      	str	r2, [r4, #0]
 8005950:	f7ff ff9a 	bl	8005888 <_get_semihosting_exts>
 8005954:	2800      	cmp	r0, #0
 8005956:	dd07      	ble.n	8005968 <initialise_semihosting_exts+0x28>
 8005958:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800595c:	f003 0201 	and.w	r2, r3, #1
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	b003      	add	sp, #12
 800596a:	bd30      	pop	{r4, r5, pc}
 800596c:	20000010 	.word	0x20000010
 8005970:	20000014 	.word	0x20000014

08005974 <_has_ext_stdout_stderr>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4c04      	ldr	r4, [pc, #16]	; (8005988 <_has_ext_stdout_stderr+0x14>)
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da01      	bge.n	8005982 <_has_ext_stdout_stderr+0xe>
 800597e:	f7ff ffdf 	bl	8005940 <initialise_semihosting_exts>
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	bd10      	pop	{r4, pc}
 8005986:	bf00      	nop
 8005988:	20000014 	.word	0x20000014

0800598c <initialise_monitor_handles>:
 800598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	2303      	movs	r3, #3
 8005992:	2400      	movs	r4, #0
 8005994:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8005a38 <initialise_monitor_handles+0xac>
 8005998:	b085      	sub	sp, #20
 800599a:	f8cd 9004 	str.w	r9, [sp, #4]
 800599e:	af01      	add	r7, sp, #4
 80059a0:	9303      	str	r3, [sp, #12]
 80059a2:	2501      	movs	r5, #1
 80059a4:	9402      	str	r4, [sp, #8]
 80059a6:	4628      	mov	r0, r5
 80059a8:	4639      	mov	r1, r7
 80059aa:	beab      	bkpt	0x00ab
 80059ac:	4605      	mov	r5, r0
 80059ae:	f04f 32ff 	mov.w	r2, #4294967295
 80059b2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005a3c <initialise_monitor_handles+0xb0>
 80059b6:	4623      	mov	r3, r4
 80059b8:	4c21      	ldr	r4, [pc, #132]	; (8005a40 <initialise_monitor_handles+0xb4>)
 80059ba:	f8c8 5000 	str.w	r5, [r8]
 80059be:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80059c2:	3301      	adds	r3, #1
 80059c4:	2b14      	cmp	r3, #20
 80059c6:	d1fa      	bne.n	80059be <initialise_monitor_handles+0x32>
 80059c8:	f7ff ffd4 	bl	8005974 <_has_ext_stdout_stderr>
 80059cc:	4d1d      	ldr	r5, [pc, #116]	; (8005a44 <initialise_monitor_handles+0xb8>)
 80059ce:	b1d0      	cbz	r0, 8005a06 <initialise_monitor_handles+0x7a>
 80059d0:	f04f 0a03 	mov.w	sl, #3
 80059d4:	2304      	movs	r3, #4
 80059d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80059da:	2601      	movs	r6, #1
 80059dc:	f8cd a00c 	str.w	sl, [sp, #12]
 80059e0:	9302      	str	r3, [sp, #8]
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	beab      	bkpt	0x00ab
 80059e8:	4683      	mov	fp, r0
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <initialise_monitor_handles+0xbc>)
 80059ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80059f0:	f8c3 b000 	str.w	fp, [r3]
 80059f4:	2308      	movs	r3, #8
 80059f6:	f8cd a00c 	str.w	sl, [sp, #12]
 80059fa:	9302      	str	r3, [sp, #8]
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	beab      	bkpt	0x00ab
 8005a02:	4606      	mov	r6, r0
 8005a04:	602e      	str	r6, [r5, #0]
 8005a06:	2600      	movs	r6, #0
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	6066      	str	r6, [r4, #4]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	bf02      	ittt	eq
 8005a10:	4b0d      	ldreq	r3, [pc, #52]	; (8005a48 <initialise_monitor_handles+0xbc>)
 8005a12:	681b      	ldreq	r3, [r3, #0]
 8005a14:	602b      	streq	r3, [r5, #0]
 8005a16:	f8d8 3000 	ldr.w	r3, [r8]
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	f7ff ffaa 	bl	8005974 <_has_ext_stdout_stderr>
 8005a20:	b130      	cbz	r0, 8005a30 <initialise_monitor_handles+0xa4>
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <initialise_monitor_handles+0xbc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005a30:	b005      	add	sp, #20
 8005a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a36:	bf00      	nop
 8005a38:	0800a3c0 	.word	0x0800a3c0
 8005a3c:	20003368 	.word	0x20003368
 8005a40:	20003370 	.word	0x20003370
 8005a44:	20003364 	.word	0x20003364
 8005a48:	2000336c 	.word	0x2000336c

08005a4c <_isatty>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	f7ff fd7b 	bl	8005548 <findslot>
 8005a52:	2509      	movs	r5, #9
 8005a54:	4604      	mov	r4, r0
 8005a56:	b920      	cbnz	r0, 8005a62 <_isatty+0x16>
 8005a58:	f001 f818 	bl	8006a8c <__errno>
 8005a5c:	6005      	str	r5, [r0, #0]
 8005a5e:	4620      	mov	r0, r4
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
 8005a62:	4628      	mov	r0, r5
 8005a64:	4621      	mov	r1, r4
 8005a66:	beab      	bkpt	0x00ab
 8005a68:	4604      	mov	r4, r0
 8005a6a:	2c01      	cmp	r4, #1
 8005a6c:	d0f7      	beq.n	8005a5e <_isatty+0x12>
 8005a6e:	f001 f80d 	bl	8006a8c <__errno>
 8005a72:	2400      	movs	r4, #0
 8005a74:	4605      	mov	r5, r0
 8005a76:	2613      	movs	r6, #19
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	beab      	bkpt	0x00ab
 8005a7e:	4606      	mov	r6, r0
 8005a80:	602e      	str	r6, [r5, #0]
 8005a82:	e7ec      	b.n	8005a5e <_isatty+0x12>

08005a84 <__cvt>:
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	bfbb      	ittet	lt
 8005a8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a92:	461f      	movlt	r7, r3
 8005a94:	2300      	movge	r3, #0
 8005a96:	232d      	movlt	r3, #45	; 0x2d
 8005a98:	b088      	sub	sp, #32
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005aa0:	7013      	strb	r3, [r2, #0]
 8005aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aa4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005aa8:	f023 0820 	bic.w	r8, r3, #32
 8005aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ab0:	d005      	beq.n	8005abe <__cvt+0x3a>
 8005ab2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ab6:	d100      	bne.n	8005aba <__cvt+0x36>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	2302      	movs	r3, #2
 8005abc:	e000      	b.n	8005ac0 <__cvt+0x3c>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	aa07      	add	r2, sp, #28
 8005ac2:	9204      	str	r2, [sp, #16]
 8005ac4:	aa06      	add	r2, sp, #24
 8005ac6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aca:	e9cd 3500 	strd	r3, r5, [sp]
 8005ace:	4622      	mov	r2, r4
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	f001 f8b5 	bl	8006c40 <_dtoa_r>
 8005ad6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ada:	4606      	mov	r6, r0
 8005adc:	d102      	bne.n	8005ae4 <__cvt+0x60>
 8005ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ae0:	07db      	lsls	r3, r3, #31
 8005ae2:	d522      	bpl.n	8005b2a <__cvt+0xa6>
 8005ae4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae8:	eb06 0905 	add.w	r9, r6, r5
 8005aec:	d110      	bne.n	8005b10 <__cvt+0x8c>
 8005aee:	7833      	ldrb	r3, [r6, #0]
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d10a      	bne.n	8005b0a <__cvt+0x86>
 8005af4:	2200      	movs	r2, #0
 8005af6:	2300      	movs	r3, #0
 8005af8:	4620      	mov	r0, r4
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8005b00:	b918      	cbnz	r0, 8005b0a <__cvt+0x86>
 8005b02:	f1c5 0501 	rsb	r5, r5, #1
 8005b06:	f8ca 5000 	str.w	r5, [sl]
 8005b0a:	f8da 3000 	ldr.w	r3, [sl]
 8005b0e:	4499      	add	r9, r3
 8005b10:	2200      	movs	r2, #0
 8005b12:	2300      	movs	r3, #0
 8005b14:	4620      	mov	r0, r4
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8005b1c:	b108      	cbz	r0, 8005b22 <__cvt+0x9e>
 8005b1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b22:	2230      	movs	r2, #48	; 0x30
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	454b      	cmp	r3, r9
 8005b28:	d307      	bcc.n	8005b3a <__cvt+0xb6>
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b30:	1b9b      	subs	r3, r3, r6
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	b008      	add	sp, #32
 8005b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	9107      	str	r1, [sp, #28]
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e7f0      	b.n	8005b24 <__cvt+0xa0>

08005b42 <__exponent>:
 8005b42:	4603      	mov	r3, r0
 8005b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b46:	2900      	cmp	r1, #0
 8005b48:	f803 2b02 	strb.w	r2, [r3], #2
 8005b4c:	bfb6      	itet	lt
 8005b4e:	222d      	movlt	r2, #45	; 0x2d
 8005b50:	222b      	movge	r2, #43	; 0x2b
 8005b52:	4249      	neglt	r1, r1
 8005b54:	2909      	cmp	r1, #9
 8005b56:	7042      	strb	r2, [r0, #1]
 8005b58:	dd2a      	ble.n	8005bb0 <__exponent+0x6e>
 8005b5a:	f10d 0207 	add.w	r2, sp, #7
 8005b5e:	4617      	mov	r7, r2
 8005b60:	260a      	movs	r6, #10
 8005b62:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b66:	4694      	mov	ip, r2
 8005b68:	fb06 1415 	mls	r4, r6, r5, r1
 8005b6c:	3430      	adds	r4, #48	; 0x30
 8005b6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b72:	460c      	mov	r4, r1
 8005b74:	2c63      	cmp	r4, #99	; 0x63
 8005b76:	4629      	mov	r1, r5
 8005b78:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b7c:	dcf1      	bgt.n	8005b62 <__exponent+0x20>
 8005b7e:	3130      	adds	r1, #48	; 0x30
 8005b80:	f1ac 0402 	sub.w	r4, ip, #2
 8005b84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b88:	4622      	mov	r2, r4
 8005b8a:	1c41      	adds	r1, r0, #1
 8005b8c:	42ba      	cmp	r2, r7
 8005b8e:	d30a      	bcc.n	8005ba6 <__exponent+0x64>
 8005b90:	f10d 0209 	add.w	r2, sp, #9
 8005b94:	eba2 020c 	sub.w	r2, r2, ip
 8005b98:	42bc      	cmp	r4, r7
 8005b9a:	bf88      	it	hi
 8005b9c:	2200      	movhi	r2, #0
 8005b9e:	4413      	add	r3, r2
 8005ba0:	1a18      	subs	r0, r3, r0
 8005ba2:	b003      	add	sp, #12
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005baa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bae:	e7ed      	b.n	8005b8c <__exponent+0x4a>
 8005bb0:	2330      	movs	r3, #48	; 0x30
 8005bb2:	3130      	adds	r1, #48	; 0x30
 8005bb4:	7083      	strb	r3, [r0, #2]
 8005bb6:	70c1      	strb	r1, [r0, #3]
 8005bb8:	1d03      	adds	r3, r0, #4
 8005bba:	e7f1      	b.n	8005ba0 <__exponent+0x5e>

08005bbc <_printf_float>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	b091      	sub	sp, #68	; 0x44
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bc8:	4616      	mov	r6, r2
 8005bca:	461f      	mov	r7, r3
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f000 ff13 	bl	80069f8 <_localeconv_r>
 8005bd2:	6803      	ldr	r3, [r0, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd8:	f7fa faba 	bl	8000150 <strlen>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930e      	str	r3, [sp, #56]	; 0x38
 8005be0:	f8d8 3000 	ldr.w	r3, [r8]
 8005be4:	900a      	str	r0, [sp, #40]	; 0x28
 8005be6:	3307      	adds	r3, #7
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bf4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bf8:	f8c8 2000 	str.w	r2, [r8]
 8005bfc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005c00:	4652      	mov	r2, sl
 8005c02:	4643      	mov	r3, r8
 8005c04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c08:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005c0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c12:	4650      	mov	r0, sl
 8005c14:	4b9c      	ldr	r3, [pc, #624]	; (8005e88 <_printf_float+0x2cc>)
 8005c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c18:	f7fa fef8 	bl	8000a0c <__aeabi_dcmpun>
 8005c1c:	bb70      	cbnz	r0, 8005c7c <_printf_float+0xc0>
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	4650      	mov	r0, sl
 8005c24:	4b98      	ldr	r3, [pc, #608]	; (8005e88 <_printf_float+0x2cc>)
 8005c26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c28:	f7fa fed2 	bl	80009d0 <__aeabi_dcmple>
 8005c2c:	bb30      	cbnz	r0, 8005c7c <_printf_float+0xc0>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4650      	mov	r0, sl
 8005c34:	4641      	mov	r1, r8
 8005c36:	f7fa fec1 	bl	80009bc <__aeabi_dcmplt>
 8005c3a:	b110      	cbz	r0, 8005c42 <_printf_float+0x86>
 8005c3c:	232d      	movs	r3, #45	; 0x2d
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	4a92      	ldr	r2, [pc, #584]	; (8005e8c <_printf_float+0x2d0>)
 8005c44:	4b92      	ldr	r3, [pc, #584]	; (8005e90 <_printf_float+0x2d4>)
 8005c46:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c4a:	bf94      	ite	ls
 8005c4c:	4690      	movls	r8, r2
 8005c4e:	4698      	movhi	r8, r3
 8005c50:	2303      	movs	r3, #3
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	f02b 0304 	bic.w	r3, fp, #4
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	4633      	mov	r3, r6
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	9700      	str	r7, [sp, #0]
 8005c66:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c68:	f000 f9d6 	bl	8006018 <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 8090 	bne.w	8005d92 <_printf_float+0x1d6>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b011      	add	sp, #68	; 0x44
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4643      	mov	r3, r8
 8005c80:	4650      	mov	r0, sl
 8005c82:	4641      	mov	r1, r8
 8005c84:	f7fa fec2 	bl	8000a0c <__aeabi_dcmpun>
 8005c88:	b148      	cbz	r0, 8005c9e <_printf_float+0xe2>
 8005c8a:	f1b8 0f00 	cmp.w	r8, #0
 8005c8e:	bfb8      	it	lt
 8005c90:	232d      	movlt	r3, #45	; 0x2d
 8005c92:	4a80      	ldr	r2, [pc, #512]	; (8005e94 <_printf_float+0x2d8>)
 8005c94:	bfb8      	it	lt
 8005c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c9a:	4b7f      	ldr	r3, [pc, #508]	; (8005e98 <_printf_float+0x2dc>)
 8005c9c:	e7d3      	b.n	8005c46 <_printf_float+0x8a>
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	d142      	bne.n	8005d2e <_printf_float+0x172>
 8005ca8:	2306      	movs	r3, #6
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	9206      	str	r2, [sp, #24]
 8005cb0:	aa0e      	add	r2, sp, #56	; 0x38
 8005cb2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005cb6:	aa0d      	add	r2, sp, #52	; 0x34
 8005cb8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005cbc:	9203      	str	r2, [sp, #12]
 8005cbe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cc2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	4652      	mov	r2, sl
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8005cd4:	f7ff fed6 	bl	8005a84 <__cvt>
 8005cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cda:	4680      	mov	r8, r0
 8005cdc:	2947      	cmp	r1, #71	; 0x47
 8005cde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ce0:	d108      	bne.n	8005cf4 <_printf_float+0x138>
 8005ce2:	1cc8      	adds	r0, r1, #3
 8005ce4:	db02      	blt.n	8005cec <_printf_float+0x130>
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	dd40      	ble.n	8005d6e <_printf_float+0x1b2>
 8005cec:	f1a9 0902 	sub.w	r9, r9, #2
 8005cf0:	fa5f f989 	uxtb.w	r9, r9
 8005cf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cf8:	d81f      	bhi.n	8005d3a <_printf_float+0x17e>
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	3901      	subs	r1, #1
 8005cfe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d02:	910d      	str	r1, [sp, #52]	; 0x34
 8005d04:	f7ff ff1d 	bl	8005b42 <__exponent>
 8005d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d0a:	4682      	mov	sl, r0
 8005d0c:	1813      	adds	r3, r2, r0
 8005d0e:	2a01      	cmp	r2, #1
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	dc02      	bgt.n	8005d1a <_printf_float+0x15e>
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	07d2      	lsls	r2, r2, #31
 8005d18:	d501      	bpl.n	8005d1e <_printf_float+0x162>
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d09b      	beq.n	8005c5e <_printf_float+0xa2>
 8005d26:	232d      	movs	r3, #45	; 0x2d
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	e797      	b.n	8005c5e <_printf_float+0xa2>
 8005d2e:	2947      	cmp	r1, #71	; 0x47
 8005d30:	d1bc      	bne.n	8005cac <_printf_float+0xf0>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ba      	bne.n	8005cac <_printf_float+0xf0>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b7      	b.n	8005caa <_printf_float+0xee>
 8005d3a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d3e:	d118      	bne.n	8005d72 <_printf_float+0x1b6>
 8005d40:	2900      	cmp	r1, #0
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	dd0b      	ble.n	8005d5e <_printf_float+0x1a2>
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	b913      	cbnz	r3, 8005d50 <_printf_float+0x194>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d502      	bpl.n	8005d56 <_printf_float+0x19a>
 8005d50:	3301      	adds	r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	f04f 0a00 	mov.w	sl, #0
 8005d5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d5c:	e7df      	b.n	8005d1e <_printf_float+0x162>
 8005d5e:	b913      	cbnz	r3, 8005d66 <_printf_float+0x1aa>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x1ae>
 8005d66:	3302      	adds	r3, #2
 8005d68:	e7f4      	b.n	8005d54 <_printf_float+0x198>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x198>
 8005d6e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d74:	4299      	cmp	r1, r3
 8005d76:	db05      	blt.n	8005d84 <_printf_float+0x1c8>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d5ea      	bpl.n	8005d56 <_printf_float+0x19a>
 8005d80:	1c4b      	adds	r3, r1, #1
 8005d82:	e7e7      	b.n	8005d54 <_printf_float+0x198>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfcc      	ite	gt
 8005d88:	2201      	movgt	r2, #1
 8005d8a:	f1c1 0202 	rsble	r2, r1, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	e7e0      	b.n	8005d54 <_printf_float+0x198>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	055a      	lsls	r2, r3, #21
 8005d96:	d407      	bmi.n	8005da8 <_printf_float+0x1ec>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d12b      	bne.n	8005dfe <_printf_float+0x242>
 8005da6:	e764      	b.n	8005c72 <_printf_float+0xb6>
 8005da8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005dac:	f240 80dd 	bls.w	8005f6a <_printf_float+0x3ae>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f7fa fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d033      	beq.n	8005e28 <_printf_float+0x26c>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <_printf_float+0x2e0>)
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af51 	beq.w	8005c72 <_printf_float+0xb6>
 8005dd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x222>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d8      	lsls	r0, r3, #31
 8005ddc:	d50f      	bpl.n	8005dfe <_printf_float+0x242>
 8005dde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f af42 	beq.w	8005c72 <_printf_float+0xb6>
 8005dee:	f04f 0800 	mov.w	r8, #0
 8005df2:	f104 091a 	add.w	r9, r4, #26
 8005df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	4543      	cmp	r3, r8
 8005dfc:	dc09      	bgt.n	8005e12 <_printf_float+0x256>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	079b      	lsls	r3, r3, #30
 8005e02:	f100 8104 	bmi.w	800600e <_printf_float+0x452>
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bfb8      	it	lt
 8005e0e:	4618      	movlt	r0, r3
 8005e10:	e731      	b.n	8005c76 <_printf_float+0xba>
 8005e12:	2301      	movs	r3, #1
 8005e14:	464a      	mov	r2, r9
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f af28 	beq.w	8005c72 <_printf_float+0xb6>
 8005e22:	f108 0801 	add.w	r8, r8, #1
 8005e26:	e7e6      	b.n	8005df6 <_printf_float+0x23a>
 8005e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dc38      	bgt.n	8005ea0 <_printf_float+0x2e4>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <_printf_float+0x2e0>)
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f af1a 	beq.w	8005c72 <_printf_float+0xb6>
 8005e3e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e42:	4313      	orrs	r3, r2
 8005e44:	d102      	bne.n	8005e4c <_printf_float+0x290>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	07d9      	lsls	r1, r3, #31
 8005e4a:	d5d8      	bpl.n	8005dfe <_printf_float+0x242>
 8005e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af0b 	beq.w	8005c72 <_printf_float+0xb6>
 8005e5c:	f04f 0900 	mov.w	r9, #0
 8005e60:	f104 0a1a 	add.w	sl, r4, #26
 8005e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e66:	425b      	negs	r3, r3
 8005e68:	454b      	cmp	r3, r9
 8005e6a:	dc01      	bgt.n	8005e70 <_printf_float+0x2b4>
 8005e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e6e:	e794      	b.n	8005d9a <_printf_float+0x1de>
 8005e70:	2301      	movs	r3, #1
 8005e72:	4652      	mov	r2, sl
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f aef9 	beq.w	8005c72 <_printf_float+0xb6>
 8005e80:	f109 0901 	add.w	r9, r9, #1
 8005e84:	e7ee      	b.n	8005e64 <_printf_float+0x2a8>
 8005e86:	bf00      	nop
 8005e88:	7fefffff 	.word	0x7fefffff
 8005e8c:	0800a3c4 	.word	0x0800a3c4
 8005e90:	0800a3c8 	.word	0x0800a3c8
 8005e94:	0800a3cc 	.word	0x0800a3cc
 8005e98:	0800a3d0 	.word	0x0800a3d0
 8005e9c:	0800a3d4 	.word	0x0800a3d4
 8005ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bfa8      	it	ge
 8005ea8:	461a      	movge	r2, r3
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	4691      	mov	r9, r2
 8005eae:	dc37      	bgt.n	8005f20 <_printf_float+0x364>
 8005eb0:	f04f 0b00 	mov.w	fp, #0
 8005eb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eb8:	f104 021a 	add.w	r2, r4, #26
 8005ebc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ec0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ec4:	455b      	cmp	r3, fp
 8005ec6:	dc33      	bgt.n	8005f30 <_printf_float+0x374>
 8005ec8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	db3b      	blt.n	8005f48 <_printf_float+0x38c>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07da      	lsls	r2, r3, #31
 8005ed4:	d438      	bmi.n	8005f48 <_printf_float+0x38c>
 8005ed6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005eda:	eba2 0903 	sub.w	r9, r2, r3
 8005ede:	eba2 020a 	sub.w	r2, r2, sl
 8005ee2:	4591      	cmp	r9, r2
 8005ee4:	bfa8      	it	ge
 8005ee6:	4691      	movge	r9, r2
 8005ee8:	f1b9 0f00 	cmp.w	r9, #0
 8005eec:	dc34      	bgt.n	8005f58 <_printf_float+0x39c>
 8005eee:	f04f 0800 	mov.w	r8, #0
 8005ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef6:	f104 0a1a 	add.w	sl, r4, #26
 8005efa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	eba3 0309 	sub.w	r3, r3, r9
 8005f04:	4543      	cmp	r3, r8
 8005f06:	f77f af7a 	ble.w	8005dfe <_printf_float+0x242>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4652      	mov	r2, sl
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f aeac 	beq.w	8005c72 <_printf_float+0xb6>
 8005f1a:	f108 0801 	add.w	r8, r8, #1
 8005f1e:	e7ec      	b.n	8005efa <_printf_float+0x33e>
 8005f20:	4613      	mov	r3, r2
 8005f22:	4631      	mov	r1, r6
 8005f24:	4642      	mov	r2, r8
 8005f26:	4628      	mov	r0, r5
 8005f28:	47b8      	blx	r7
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d1c0      	bne.n	8005eb0 <_printf_float+0x2f4>
 8005f2e:	e6a0      	b.n	8005c72 <_printf_float+0xb6>
 8005f30:	2301      	movs	r3, #1
 8005f32:	4631      	mov	r1, r6
 8005f34:	4628      	mov	r0, r5
 8005f36:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f ae99 	beq.w	8005c72 <_printf_float+0xb6>
 8005f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f42:	f10b 0b01 	add.w	fp, fp, #1
 8005f46:	e7b9      	b.n	8005ebc <_printf_float+0x300>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	d1bf      	bne.n	8005ed6 <_printf_float+0x31a>
 8005f56:	e68c      	b.n	8005c72 <_printf_float+0xb6>
 8005f58:	464b      	mov	r3, r9
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	eb08 020a 	add.w	r2, r8, sl
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1c2      	bne.n	8005eee <_printf_float+0x332>
 8005f68:	e683      	b.n	8005c72 <_printf_float+0xb6>
 8005f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f6c:	2a01      	cmp	r2, #1
 8005f6e:	dc01      	bgt.n	8005f74 <_printf_float+0x3b8>
 8005f70:	07db      	lsls	r3, r3, #31
 8005f72:	d539      	bpl.n	8005fe8 <_printf_float+0x42c>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4642      	mov	r2, r8
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f ae77 	beq.w	8005c72 <_printf_float+0xb6>
 8005f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f43f ae6f 	beq.w	8005c72 <_printf_float+0xb6>
 8005f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005fa0:	f7fa fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa4:	b9d8      	cbnz	r0, 8005fde <_printf_float+0x422>
 8005fa6:	f109 33ff 	add.w	r3, r9, #4294967295
 8005faa:	f108 0201 	add.w	r2, r8, #1
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d10e      	bne.n	8005fd6 <_printf_float+0x41a>
 8005fb8:	e65b      	b.n	8005c72 <_printf_float+0xb6>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	464a      	mov	r2, r9
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae54 	beq.w	8005c72 <_printf_float+0xb6>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	4543      	cmp	r3, r8
 8005fd4:	dcf1      	bgt.n	8005fba <_printf_float+0x3fe>
 8005fd6:	4653      	mov	r3, sl
 8005fd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fdc:	e6de      	b.n	8005d9c <_printf_float+0x1e0>
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	f104 091a 	add.w	r9, r4, #26
 8005fe6:	e7f2      	b.n	8005fce <_printf_float+0x412>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4642      	mov	r2, r8
 8005fec:	e7df      	b.n	8005fae <_printf_float+0x3f2>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	464a      	mov	r2, r9
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f43f ae3a 	beq.w	8005c72 <_printf_float+0xb6>
 8005ffe:	f108 0801 	add.w	r8, r8, #1
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006006:	1a5b      	subs	r3, r3, r1
 8006008:	4543      	cmp	r3, r8
 800600a:	dcf0      	bgt.n	8005fee <_printf_float+0x432>
 800600c:	e6fb      	b.n	8005e06 <_printf_float+0x24a>
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	f104 0919 	add.w	r9, r4, #25
 8006016:	e7f4      	b.n	8006002 <_printf_float+0x446>

08006018 <_printf_common>:
 8006018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	4616      	mov	r6, r2
 800601e:	4699      	mov	r9, r3
 8006020:	688a      	ldr	r2, [r1, #8]
 8006022:	690b      	ldr	r3, [r1, #16]
 8006024:	4607      	mov	r7, r0
 8006026:	4293      	cmp	r3, r2
 8006028:	bfb8      	it	lt
 800602a:	4613      	movlt	r3, r2
 800602c:	6033      	str	r3, [r6, #0]
 800602e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006032:	460c      	mov	r4, r1
 8006034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006038:	b10a      	cbz	r2, 800603e <_printf_common+0x26>
 800603a:	3301      	adds	r3, #1
 800603c:	6033      	str	r3, [r6, #0]
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	0699      	lsls	r1, r3, #26
 8006042:	bf42      	ittt	mi
 8006044:	6833      	ldrmi	r3, [r6, #0]
 8006046:	3302      	addmi	r3, #2
 8006048:	6033      	strmi	r3, [r6, #0]
 800604a:	6825      	ldr	r5, [r4, #0]
 800604c:	f015 0506 	ands.w	r5, r5, #6
 8006050:	d106      	bne.n	8006060 <_printf_common+0x48>
 8006052:	f104 0a19 	add.w	sl, r4, #25
 8006056:	68e3      	ldr	r3, [r4, #12]
 8006058:	6832      	ldr	r2, [r6, #0]
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	42ab      	cmp	r3, r5
 800605e:	dc2b      	bgt.n	80060b8 <_printf_common+0xa0>
 8006060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006064:	1e13      	subs	r3, r2, #0
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	bf18      	it	ne
 800606a:	2301      	movne	r3, #1
 800606c:	0692      	lsls	r2, r2, #26
 800606e:	d430      	bmi.n	80060d2 <_printf_common+0xba>
 8006070:	4649      	mov	r1, r9
 8006072:	4638      	mov	r0, r7
 8006074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006078:	47c0      	blx	r8
 800607a:	3001      	adds	r0, #1
 800607c:	d023      	beq.n	80060c6 <_printf_common+0xae>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	6922      	ldr	r2, [r4, #16]
 8006082:	f003 0306 	and.w	r3, r3, #6
 8006086:	2b04      	cmp	r3, #4
 8006088:	bf14      	ite	ne
 800608a:	2500      	movne	r5, #0
 800608c:	6833      	ldreq	r3, [r6, #0]
 800608e:	f04f 0600 	mov.w	r6, #0
 8006092:	bf08      	it	eq
 8006094:	68e5      	ldreq	r5, [r4, #12]
 8006096:	f104 041a 	add.w	r4, r4, #26
 800609a:	bf08      	it	eq
 800609c:	1aed      	subeq	r5, r5, r3
 800609e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060a2:	bf08      	it	eq
 80060a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bfc4      	itt	gt
 80060ac:	1a9b      	subgt	r3, r3, r2
 80060ae:	18ed      	addgt	r5, r5, r3
 80060b0:	42b5      	cmp	r5, r6
 80060b2:	d11a      	bne.n	80060ea <_printf_common+0xd2>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e008      	b.n	80060ca <_printf_common+0xb2>
 80060b8:	2301      	movs	r3, #1
 80060ba:	4652      	mov	r2, sl
 80060bc:	4649      	mov	r1, r9
 80060be:	4638      	mov	r0, r7
 80060c0:	47c0      	blx	r8
 80060c2:	3001      	adds	r0, #1
 80060c4:	d103      	bne.n	80060ce <_printf_common+0xb6>
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	3501      	adds	r5, #1
 80060d0:	e7c1      	b.n	8006056 <_printf_common+0x3e>
 80060d2:	2030      	movs	r0, #48	; 0x30
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e0:	4422      	add	r2, r4
 80060e2:	3302      	adds	r3, #2
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e8:	e7c2      	b.n	8006070 <_printf_common+0x58>
 80060ea:	2301      	movs	r3, #1
 80060ec:	4622      	mov	r2, r4
 80060ee:	4649      	mov	r1, r9
 80060f0:	4638      	mov	r0, r7
 80060f2:	47c0      	blx	r8
 80060f4:	3001      	adds	r0, #1
 80060f6:	d0e6      	beq.n	80060c6 <_printf_common+0xae>
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7d9      	b.n	80060b0 <_printf_common+0x98>

080060fc <_printf_i>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	7e0f      	ldrb	r7, [r1, #24]
 8006102:	4691      	mov	r9, r2
 8006104:	2f78      	cmp	r7, #120	; 0x78
 8006106:	4680      	mov	r8, r0
 8006108:	460c      	mov	r4, r1
 800610a:	469a      	mov	sl, r3
 800610c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800610e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006112:	d807      	bhi.n	8006124 <_printf_i+0x28>
 8006114:	2f62      	cmp	r7, #98	; 0x62
 8006116:	d80a      	bhi.n	800612e <_printf_i+0x32>
 8006118:	2f00      	cmp	r7, #0
 800611a:	f000 80d5 	beq.w	80062c8 <_printf_i+0x1cc>
 800611e:	2f58      	cmp	r7, #88	; 0x58
 8006120:	f000 80c1 	beq.w	80062a6 <_printf_i+0x1aa>
 8006124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800612c:	e03a      	b.n	80061a4 <_printf_i+0xa8>
 800612e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006132:	2b15      	cmp	r3, #21
 8006134:	d8f6      	bhi.n	8006124 <_printf_i+0x28>
 8006136:	a101      	add	r1, pc, #4	; (adr r1, 800613c <_printf_i+0x40>)
 8006138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800613c:	08006195 	.word	0x08006195
 8006140:	080061a9 	.word	0x080061a9
 8006144:	08006125 	.word	0x08006125
 8006148:	08006125 	.word	0x08006125
 800614c:	08006125 	.word	0x08006125
 8006150:	08006125 	.word	0x08006125
 8006154:	080061a9 	.word	0x080061a9
 8006158:	08006125 	.word	0x08006125
 800615c:	08006125 	.word	0x08006125
 8006160:	08006125 	.word	0x08006125
 8006164:	08006125 	.word	0x08006125
 8006168:	080062af 	.word	0x080062af
 800616c:	080061d5 	.word	0x080061d5
 8006170:	08006269 	.word	0x08006269
 8006174:	08006125 	.word	0x08006125
 8006178:	08006125 	.word	0x08006125
 800617c:	080062d1 	.word	0x080062d1
 8006180:	08006125 	.word	0x08006125
 8006184:	080061d5 	.word	0x080061d5
 8006188:	08006125 	.word	0x08006125
 800618c:	08006125 	.word	0x08006125
 8006190:	08006271 	.word	0x08006271
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a0      	b.n	80062ea <_printf_i+0x1ee>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	0607      	lsls	r7, r0, #24
 80061ae:	f103 0104 	add.w	r1, r3, #4
 80061b2:	6029      	str	r1, [r5, #0]
 80061b4:	d501      	bpl.n	80061ba <_printf_i+0xbe>
 80061b6:	681e      	ldr	r6, [r3, #0]
 80061b8:	e003      	b.n	80061c2 <_printf_i+0xc6>
 80061ba:	0646      	lsls	r6, r0, #25
 80061bc:	d5fb      	bpl.n	80061b6 <_printf_i+0xba>
 80061be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	da03      	bge.n	80061ce <_printf_i+0xd2>
 80061c6:	232d      	movs	r3, #45	; 0x2d
 80061c8:	4276      	negs	r6, r6
 80061ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ce:	230a      	movs	r3, #10
 80061d0:	4859      	ldr	r0, [pc, #356]	; (8006338 <_printf_i+0x23c>)
 80061d2:	e012      	b.n	80061fa <_printf_i+0xfe>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	1d19      	adds	r1, r3, #4
 80061da:	6029      	str	r1, [r5, #0]
 80061dc:	0605      	lsls	r5, r0, #24
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0xe8>
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0xee>
 80061e4:	0641      	lsls	r1, r0, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0xe4>
 80061e8:	881e      	ldrh	r6, [r3, #0]
 80061ea:	2f6f      	cmp	r7, #111	; 0x6f
 80061ec:	bf0c      	ite	eq
 80061ee:	2308      	moveq	r3, #8
 80061f0:	230a      	movne	r3, #10
 80061f2:	4851      	ldr	r0, [pc, #324]	; (8006338 <_printf_i+0x23c>)
 80061f4:	2100      	movs	r1, #0
 80061f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fa:	6865      	ldr	r5, [r4, #4]
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	bfa8      	it	ge
 8006200:	6821      	ldrge	r1, [r4, #0]
 8006202:	60a5      	str	r5, [r4, #8]
 8006204:	bfa4      	itt	ge
 8006206:	f021 0104 	bicge.w	r1, r1, #4
 800620a:	6021      	strge	r1, [r4, #0]
 800620c:	b90e      	cbnz	r6, 8006212 <_printf_i+0x116>
 800620e:	2d00      	cmp	r5, #0
 8006210:	d04b      	beq.n	80062aa <_printf_i+0x1ae>
 8006212:	4615      	mov	r5, r2
 8006214:	fbb6 f1f3 	udiv	r1, r6, r3
 8006218:	fb03 6711 	mls	r7, r3, r1, r6
 800621c:	5dc7      	ldrb	r7, [r0, r7]
 800621e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006222:	4637      	mov	r7, r6
 8006224:	42bb      	cmp	r3, r7
 8006226:	460e      	mov	r6, r1
 8006228:	d9f4      	bls.n	8006214 <_printf_i+0x118>
 800622a:	2b08      	cmp	r3, #8
 800622c:	d10b      	bne.n	8006246 <_printf_i+0x14a>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07de      	lsls	r6, r3, #31
 8006232:	d508      	bpl.n	8006246 <_printf_i+0x14a>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6861      	ldr	r1, [r4, #4]
 8006238:	4299      	cmp	r1, r3
 800623a:	bfde      	ittt	le
 800623c:	2330      	movle	r3, #48	; 0x30
 800623e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006242:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006246:	1b52      	subs	r2, r2, r5
 8006248:	6122      	str	r2, [r4, #16]
 800624a:	464b      	mov	r3, r9
 800624c:	4621      	mov	r1, r4
 800624e:	4640      	mov	r0, r8
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	aa03      	add	r2, sp, #12
 8006256:	f7ff fedf 	bl	8006018 <_printf_common>
 800625a:	3001      	adds	r0, #1
 800625c:	d14a      	bne.n	80062f4 <_printf_i+0x1f8>
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	b004      	add	sp, #16
 8006264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	2778      	movs	r7, #120	; 0x78
 8006272:	4832      	ldr	r0, [pc, #200]	; (800633c <_printf_i+0x240>)
 8006274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	6829      	ldr	r1, [r5, #0]
 800627c:	061f      	lsls	r7, r3, #24
 800627e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006282:	d402      	bmi.n	800628a <_printf_i+0x18e>
 8006284:	065f      	lsls	r7, r3, #25
 8006286:	bf48      	it	mi
 8006288:	b2b6      	uxthmi	r6, r6
 800628a:	07df      	lsls	r7, r3, #31
 800628c:	bf48      	it	mi
 800628e:	f043 0320 	orrmi.w	r3, r3, #32
 8006292:	6029      	str	r1, [r5, #0]
 8006294:	bf48      	it	mi
 8006296:	6023      	strmi	r3, [r4, #0]
 8006298:	b91e      	cbnz	r6, 80062a2 <_printf_i+0x1a6>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f023 0320 	bic.w	r3, r3, #32
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2310      	movs	r3, #16
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0xf8>
 80062a6:	4824      	ldr	r0, [pc, #144]	; (8006338 <_printf_i+0x23c>)
 80062a8:	e7e4      	b.n	8006274 <_printf_i+0x178>
 80062aa:	4615      	mov	r5, r2
 80062ac:	e7bd      	b.n	800622a <_printf_i+0x12e>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	6826      	ldr	r6, [r4, #0]
 80062b2:	1d18      	adds	r0, r3, #4
 80062b4:	6961      	ldr	r1, [r4, #20]
 80062b6:	6028      	str	r0, [r5, #0]
 80062b8:	0635      	lsls	r5, r6, #24
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	d501      	bpl.n	80062c2 <_printf_i+0x1c6>
 80062be:	6019      	str	r1, [r3, #0]
 80062c0:	e002      	b.n	80062c8 <_printf_i+0x1cc>
 80062c2:	0670      	lsls	r0, r6, #25
 80062c4:	d5fb      	bpl.n	80062be <_printf_i+0x1c2>
 80062c6:	8019      	strh	r1, [r3, #0]
 80062c8:	2300      	movs	r3, #0
 80062ca:	4615      	mov	r5, r2
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	e7bc      	b.n	800624a <_printf_i+0x14e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	2100      	movs	r1, #0
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	602a      	str	r2, [r5, #0]
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fc02 	bl	8006ae6 <memchr>
 80062e2:	b108      	cbz	r0, 80062e8 <_printf_i+0x1ec>
 80062e4:	1b40      	subs	r0, r0, r5
 80062e6:	6060      	str	r0, [r4, #4]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	2300      	movs	r3, #0
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f2:	e7aa      	b.n	800624a <_printf_i+0x14e>
 80062f4:	462a      	mov	r2, r5
 80062f6:	4649      	mov	r1, r9
 80062f8:	4640      	mov	r0, r8
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	47d0      	blx	sl
 80062fe:	3001      	adds	r0, #1
 8006300:	d0ad      	beq.n	800625e <_printf_i+0x162>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	079b      	lsls	r3, r3, #30
 8006306:	d413      	bmi.n	8006330 <_printf_i+0x234>
 8006308:	68e0      	ldr	r0, [r4, #12]
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	4298      	cmp	r0, r3
 800630e:	bfb8      	it	lt
 8006310:	4618      	movlt	r0, r3
 8006312:	e7a6      	b.n	8006262 <_printf_i+0x166>
 8006314:	2301      	movs	r3, #1
 8006316:	4632      	mov	r2, r6
 8006318:	4649      	mov	r1, r9
 800631a:	4640      	mov	r0, r8
 800631c:	47d0      	blx	sl
 800631e:	3001      	adds	r0, #1
 8006320:	d09d      	beq.n	800625e <_printf_i+0x162>
 8006322:	3501      	adds	r5, #1
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	9903      	ldr	r1, [sp, #12]
 8006328:	1a5b      	subs	r3, r3, r1
 800632a:	42ab      	cmp	r3, r5
 800632c:	dcf2      	bgt.n	8006314 <_printf_i+0x218>
 800632e:	e7eb      	b.n	8006308 <_printf_i+0x20c>
 8006330:	2500      	movs	r5, #0
 8006332:	f104 0619 	add.w	r6, r4, #25
 8006336:	e7f5      	b.n	8006324 <_printf_i+0x228>
 8006338:	0800a3d6 	.word	0x0800a3d6
 800633c:	0800a3e7 	.word	0x0800a3e7

08006340 <_scanf_float>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	b087      	sub	sp, #28
 8006346:	9303      	str	r3, [sp, #12]
 8006348:	688b      	ldr	r3, [r1, #8]
 800634a:	4617      	mov	r7, r2
 800634c:	1e5a      	subs	r2, r3, #1
 800634e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006352:	bf85      	ittet	hi
 8006354:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006358:	195b      	addhi	r3, r3, r5
 800635a:	2300      	movls	r3, #0
 800635c:	9302      	strhi	r3, [sp, #8]
 800635e:	bf88      	it	hi
 8006360:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006364:	468b      	mov	fp, r1
 8006366:	f04f 0500 	mov.w	r5, #0
 800636a:	bf8c      	ite	hi
 800636c:	608b      	strhi	r3, [r1, #8]
 800636e:	9302      	strls	r3, [sp, #8]
 8006370:	680b      	ldr	r3, [r1, #0]
 8006372:	4680      	mov	r8, r0
 8006374:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006378:	f84b 3b1c 	str.w	r3, [fp], #28
 800637c:	460c      	mov	r4, r1
 800637e:	465e      	mov	r6, fp
 8006380:	46aa      	mov	sl, r5
 8006382:	46a9      	mov	r9, r5
 8006384:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006388:	9501      	str	r5, [sp, #4]
 800638a:	68a2      	ldr	r2, [r4, #8]
 800638c:	b152      	cbz	r2, 80063a4 <_scanf_float+0x64>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b4e      	cmp	r3, #78	; 0x4e
 8006394:	d864      	bhi.n	8006460 <_scanf_float+0x120>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d83c      	bhi.n	8006414 <_scanf_float+0xd4>
 800639a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800639e:	b2c8      	uxtb	r0, r1
 80063a0:	280e      	cmp	r0, #14
 80063a2:	d93a      	bls.n	800641a <_scanf_float+0xda>
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	d003      	beq.n	80063b2 <_scanf_float+0x72>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063b6:	f1ba 0f01 	cmp.w	sl, #1
 80063ba:	f200 8113 	bhi.w	80065e4 <_scanf_float+0x2a4>
 80063be:	455e      	cmp	r6, fp
 80063c0:	f200 8105 	bhi.w	80065ce <_scanf_float+0x28e>
 80063c4:	2501      	movs	r5, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	b007      	add	sp, #28
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80063d2:	2a0d      	cmp	r2, #13
 80063d4:	d8e6      	bhi.n	80063a4 <_scanf_float+0x64>
 80063d6:	a101      	add	r1, pc, #4	; (adr r1, 80063dc <_scanf_float+0x9c>)
 80063d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063dc:	0800651b 	.word	0x0800651b
 80063e0:	080063a5 	.word	0x080063a5
 80063e4:	080063a5 	.word	0x080063a5
 80063e8:	080063a5 	.word	0x080063a5
 80063ec:	0800657b 	.word	0x0800657b
 80063f0:	08006553 	.word	0x08006553
 80063f4:	080063a5 	.word	0x080063a5
 80063f8:	080063a5 	.word	0x080063a5
 80063fc:	08006529 	.word	0x08006529
 8006400:	080063a5 	.word	0x080063a5
 8006404:	080063a5 	.word	0x080063a5
 8006408:	080063a5 	.word	0x080063a5
 800640c:	080063a5 	.word	0x080063a5
 8006410:	080064e1 	.word	0x080064e1
 8006414:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006418:	e7db      	b.n	80063d2 <_scanf_float+0x92>
 800641a:	290e      	cmp	r1, #14
 800641c:	d8c2      	bhi.n	80063a4 <_scanf_float+0x64>
 800641e:	a001      	add	r0, pc, #4	; (adr r0, 8006424 <_scanf_float+0xe4>)
 8006420:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006424:	080064d3 	.word	0x080064d3
 8006428:	080063a5 	.word	0x080063a5
 800642c:	080064d3 	.word	0x080064d3
 8006430:	08006567 	.word	0x08006567
 8006434:	080063a5 	.word	0x080063a5
 8006438:	08006481 	.word	0x08006481
 800643c:	080064bd 	.word	0x080064bd
 8006440:	080064bd 	.word	0x080064bd
 8006444:	080064bd 	.word	0x080064bd
 8006448:	080064bd 	.word	0x080064bd
 800644c:	080064bd 	.word	0x080064bd
 8006450:	080064bd 	.word	0x080064bd
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064bd 	.word	0x080064bd
 8006460:	2b6e      	cmp	r3, #110	; 0x6e
 8006462:	d809      	bhi.n	8006478 <_scanf_float+0x138>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d8b2      	bhi.n	80063ce <_scanf_float+0x8e>
 8006468:	2b54      	cmp	r3, #84	; 0x54
 800646a:	d077      	beq.n	800655c <_scanf_float+0x21c>
 800646c:	2b59      	cmp	r3, #89	; 0x59
 800646e:	d199      	bne.n	80063a4 <_scanf_float+0x64>
 8006470:	2d07      	cmp	r5, #7
 8006472:	d197      	bne.n	80063a4 <_scanf_float+0x64>
 8006474:	2508      	movs	r5, #8
 8006476:	e029      	b.n	80064cc <_scanf_float+0x18c>
 8006478:	2b74      	cmp	r3, #116	; 0x74
 800647a:	d06f      	beq.n	800655c <_scanf_float+0x21c>
 800647c:	2b79      	cmp	r3, #121	; 0x79
 800647e:	e7f6      	b.n	800646e <_scanf_float+0x12e>
 8006480:	6821      	ldr	r1, [r4, #0]
 8006482:	05c8      	lsls	r0, r1, #23
 8006484:	d51a      	bpl.n	80064bc <_scanf_float+0x17c>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800648c:	6021      	str	r1, [r4, #0]
 800648e:	f109 0901 	add.w	r9, r9, #1
 8006492:	b11b      	cbz	r3, 800649c <_scanf_float+0x15c>
 8006494:	3b01      	subs	r3, #1
 8006496:	3201      	adds	r2, #1
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	60a2      	str	r2, [r4, #8]
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	3b01      	subs	r3, #1
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	3301      	adds	r3, #1
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	f340 8084 	ble.w	80065bc <_scanf_float+0x27c>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	e766      	b.n	800638a <_scanf_float+0x4a>
 80064bc:	eb1a 0f05 	cmn.w	sl, r5
 80064c0:	f47f af70 	bne.w	80063a4 <_scanf_float+0x64>
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	e7e4      	b.n	800649c <_scanf_float+0x15c>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	0610      	lsls	r0, r2, #24
 80064d6:	f57f af65 	bpl.w	80063a4 <_scanf_float+0x64>
 80064da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064de:	e7f4      	b.n	80064ca <_scanf_float+0x18a>
 80064e0:	f1ba 0f00 	cmp.w	sl, #0
 80064e4:	d10e      	bne.n	8006504 <_scanf_float+0x1c4>
 80064e6:	f1b9 0f00 	cmp.w	r9, #0
 80064ea:	d10e      	bne.n	800650a <_scanf_float+0x1ca>
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064f6:	d108      	bne.n	800650a <_scanf_float+0x1ca>
 80064f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064fc:	f04f 0a01 	mov.w	sl, #1
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	e7e3      	b.n	80064cc <_scanf_float+0x18c>
 8006504:	f1ba 0f02 	cmp.w	sl, #2
 8006508:	d055      	beq.n	80065b6 <_scanf_float+0x276>
 800650a:	2d01      	cmp	r5, #1
 800650c:	d002      	beq.n	8006514 <_scanf_float+0x1d4>
 800650e:	2d04      	cmp	r5, #4
 8006510:	f47f af48 	bne.w	80063a4 <_scanf_float+0x64>
 8006514:	3501      	adds	r5, #1
 8006516:	b2ed      	uxtb	r5, r5
 8006518:	e7d8      	b.n	80064cc <_scanf_float+0x18c>
 800651a:	f1ba 0f01 	cmp.w	sl, #1
 800651e:	f47f af41 	bne.w	80063a4 <_scanf_float+0x64>
 8006522:	f04f 0a02 	mov.w	sl, #2
 8006526:	e7d1      	b.n	80064cc <_scanf_float+0x18c>
 8006528:	b97d      	cbnz	r5, 800654a <_scanf_float+0x20a>
 800652a:	f1b9 0f00 	cmp.w	r9, #0
 800652e:	f47f af3c 	bne.w	80063aa <_scanf_float+0x6a>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006538:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800653c:	f47f af39 	bne.w	80063b2 <_scanf_float+0x72>
 8006540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006544:	2501      	movs	r5, #1
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	e7c0      	b.n	80064cc <_scanf_float+0x18c>
 800654a:	2d03      	cmp	r5, #3
 800654c:	d0e2      	beq.n	8006514 <_scanf_float+0x1d4>
 800654e:	2d05      	cmp	r5, #5
 8006550:	e7de      	b.n	8006510 <_scanf_float+0x1d0>
 8006552:	2d02      	cmp	r5, #2
 8006554:	f47f af26 	bne.w	80063a4 <_scanf_float+0x64>
 8006558:	2503      	movs	r5, #3
 800655a:	e7b7      	b.n	80064cc <_scanf_float+0x18c>
 800655c:	2d06      	cmp	r5, #6
 800655e:	f47f af21 	bne.w	80063a4 <_scanf_float+0x64>
 8006562:	2507      	movs	r5, #7
 8006564:	e7b2      	b.n	80064cc <_scanf_float+0x18c>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	0591      	lsls	r1, r2, #22
 800656a:	f57f af1b 	bpl.w	80063a4 <_scanf_float+0x64>
 800656e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	f8cd 9004 	str.w	r9, [sp, #4]
 8006578:	e7a8      	b.n	80064cc <_scanf_float+0x18c>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006580:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006584:	d006      	beq.n	8006594 <_scanf_float+0x254>
 8006586:	0550      	lsls	r0, r2, #21
 8006588:	f57f af0c 	bpl.w	80063a4 <_scanf_float+0x64>
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	f43f af0f 	beq.w	80063b2 <_scanf_float+0x72>
 8006594:	0591      	lsls	r1, r2, #22
 8006596:	bf58      	it	pl
 8006598:	9901      	ldrpl	r1, [sp, #4]
 800659a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800659e:	bf58      	it	pl
 80065a0:	eba9 0101 	subpl.w	r1, r9, r1
 80065a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80065a8:	f04f 0900 	mov.w	r9, #0
 80065ac:	bf58      	it	pl
 80065ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065b2:	6022      	str	r2, [r4, #0]
 80065b4:	e78a      	b.n	80064cc <_scanf_float+0x18c>
 80065b6:	f04f 0a03 	mov.w	sl, #3
 80065ba:	e787      	b.n	80064cc <_scanf_float+0x18c>
 80065bc:	4639      	mov	r1, r7
 80065be:	4640      	mov	r0, r8
 80065c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065c4:	4798      	blx	r3
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f aedf 	beq.w	800638a <_scanf_float+0x4a>
 80065cc:	e6ea      	b.n	80063a4 <_scanf_float+0x64>
 80065ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d2:	463a      	mov	r2, r7
 80065d4:	4640      	mov	r0, r8
 80065d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065da:	4798      	blx	r3
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	e6ec      	b.n	80063be <_scanf_float+0x7e>
 80065e4:	1e6b      	subs	r3, r5, #1
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d825      	bhi.n	8006636 <_scanf_float+0x2f6>
 80065ea:	2d02      	cmp	r5, #2
 80065ec:	d836      	bhi.n	800665c <_scanf_float+0x31c>
 80065ee:	455e      	cmp	r6, fp
 80065f0:	f67f aee8 	bls.w	80063c4 <_scanf_float+0x84>
 80065f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065f8:	463a      	mov	r2, r7
 80065fa:	4640      	mov	r0, r8
 80065fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006600:	4798      	blx	r3
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	3b01      	subs	r3, #1
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	e7f1      	b.n	80065ee <_scanf_float+0x2ae>
 800660a:	9802      	ldr	r0, [sp, #8]
 800660c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006610:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006614:	463a      	mov	r2, r7
 8006616:	9002      	str	r0, [sp, #8]
 8006618:	4640      	mov	r0, r8
 800661a:	4798      	blx	r3
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	3b01      	subs	r3, #1
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006626:	fa5f fa8a 	uxtb.w	sl, sl
 800662a:	f1ba 0f02 	cmp.w	sl, #2
 800662e:	d1ec      	bne.n	800660a <_scanf_float+0x2ca>
 8006630:	3d03      	subs	r5, #3
 8006632:	b2ed      	uxtb	r5, r5
 8006634:	1b76      	subs	r6, r6, r5
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	05da      	lsls	r2, r3, #23
 800663a:	d52f      	bpl.n	800669c <_scanf_float+0x35c>
 800663c:	055b      	lsls	r3, r3, #21
 800663e:	d510      	bpl.n	8006662 <_scanf_float+0x322>
 8006640:	455e      	cmp	r6, fp
 8006642:	f67f aebf 	bls.w	80063c4 <_scanf_float+0x84>
 8006646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800664a:	463a      	mov	r2, r7
 800664c:	4640      	mov	r0, r8
 800664e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006652:	4798      	blx	r3
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	3b01      	subs	r3, #1
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	e7f1      	b.n	8006640 <_scanf_float+0x300>
 800665c:	46aa      	mov	sl, r5
 800665e:	9602      	str	r6, [sp, #8]
 8006660:	e7df      	b.n	8006622 <_scanf_float+0x2e2>
 8006662:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	2965      	cmp	r1, #101	; 0x65
 800666a:	f103 33ff 	add.w	r3, r3, #4294967295
 800666e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	d00c      	beq.n	8006690 <_scanf_float+0x350>
 8006676:	2945      	cmp	r1, #69	; 0x45
 8006678:	d00a      	beq.n	8006690 <_scanf_float+0x350>
 800667a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800667e:	463a      	mov	r2, r7
 8006680:	4640      	mov	r0, r8
 8006682:	4798      	blx	r3
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800668a:	3b01      	subs	r3, #1
 800668c:	1eb5      	subs	r5, r6, #2
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	463a      	mov	r2, r7
 8006692:	4640      	mov	r0, r8
 8006694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006698:	4798      	blx	r3
 800669a:	462e      	mov	r6, r5
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	f015 0510 	ands.w	r5, r5, #16
 80066a2:	d155      	bne.n	8006750 <_scanf_float+0x410>
 80066a4:	7035      	strb	r5, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d11d      	bne.n	80066ee <_scanf_float+0x3ae>
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	454b      	cmp	r3, r9
 80066b6:	eba3 0209 	sub.w	r2, r3, r9
 80066ba:	d125      	bne.n	8006708 <_scanf_float+0x3c8>
 80066bc:	2200      	movs	r2, #0
 80066be:	4659      	mov	r1, fp
 80066c0:	4640      	mov	r0, r8
 80066c2:	f002 fc51 	bl	8008f68 <_strtod_r>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	f8d4 c000 	ldr.w	ip, [r4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f01c 0f02 	tst.w	ip, #2
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	f103 0204 	add.w	r2, r3, #4
 80066da:	d020      	beq.n	800671e <_scanf_float+0x3de>
 80066dc:	9903      	ldr	r1, [sp, #12]
 80066de:	600a      	str	r2, [r1, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	e9c3 6700 	strd	r6, r7, [r3]
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60e3      	str	r3, [r4, #12]
 80066ec:	e66b      	b.n	80063c6 <_scanf_float+0x86>
 80066ee:	9b04      	ldr	r3, [sp, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0e3      	beq.n	80066bc <_scanf_float+0x37c>
 80066f4:	9905      	ldr	r1, [sp, #20]
 80066f6:	230a      	movs	r3, #10
 80066f8:	462a      	mov	r2, r5
 80066fa:	4640      	mov	r0, r8
 80066fc:	3101      	adds	r1, #1
 80066fe:	f002 fcb7 	bl	8009070 <_strtol_r>
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	9e05      	ldr	r6, [sp, #20]
 8006706:	1ac2      	subs	r2, r0, r3
 8006708:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800670c:	429e      	cmp	r6, r3
 800670e:	bf28      	it	cs
 8006710:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006714:	4630      	mov	r0, r6
 8006716:	490f      	ldr	r1, [pc, #60]	; (8006754 <_scanf_float+0x414>)
 8006718:	f000 f8e2 	bl	80068e0 <siprintf>
 800671c:	e7ce      	b.n	80066bc <_scanf_float+0x37c>
 800671e:	f01c 0f04 	tst.w	ip, #4
 8006722:	d1db      	bne.n	80066dc <_scanf_float+0x39c>
 8006724:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006728:	f8cc 2000 	str.w	r2, [ip]
 800672c:	f8d3 8000 	ldr.w	r8, [r3]
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	f7fa f96a 	bl	8000a0c <__aeabi_dcmpun>
 8006738:	b128      	cbz	r0, 8006746 <_scanf_float+0x406>
 800673a:	4807      	ldr	r0, [pc, #28]	; (8006758 <_scanf_float+0x418>)
 800673c:	f000 f9f0 	bl	8006b20 <nanf>
 8006740:	f8c8 0000 	str.w	r0, [r8]
 8006744:	e7cf      	b.n	80066e6 <_scanf_float+0x3a6>
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7fa f9bd 	bl	8000ac8 <__aeabi_d2f>
 800674e:	e7f7      	b.n	8006740 <_scanf_float+0x400>
 8006750:	2500      	movs	r5, #0
 8006752:	e638      	b.n	80063c6 <_scanf_float+0x86>
 8006754:	0800a3f8 	.word	0x0800a3f8
 8006758:	0800a78d 	.word	0x0800a78d

0800675c <std>:
 800675c:	2300      	movs	r3, #0
 800675e:	b510      	push	{r4, lr}
 8006760:	4604      	mov	r4, r0
 8006762:	e9c0 3300 	strd	r3, r3, [r0]
 8006766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800676a:	6083      	str	r3, [r0, #8]
 800676c:	8181      	strh	r1, [r0, #12]
 800676e:	6643      	str	r3, [r0, #100]	; 0x64
 8006770:	81c2      	strh	r2, [r0, #14]
 8006772:	6183      	str	r3, [r0, #24]
 8006774:	4619      	mov	r1, r3
 8006776:	2208      	movs	r2, #8
 8006778:	305c      	adds	r0, #92	; 0x5c
 800677a:	f000 f935 	bl	80069e8 <memset>
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <std+0x58>)
 8006780:	6224      	str	r4, [r4, #32]
 8006782:	6263      	str	r3, [r4, #36]	; 0x24
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <std+0x5c>)
 8006786:	62a3      	str	r3, [r4, #40]	; 0x28
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <std+0x60>)
 800678a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <std+0x64>)
 800678e:	6323      	str	r3, [r4, #48]	; 0x30
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <std+0x68>)
 8006792:	429c      	cmp	r4, r3
 8006794:	d006      	beq.n	80067a4 <std+0x48>
 8006796:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800679a:	4294      	cmp	r4, r2
 800679c:	d002      	beq.n	80067a4 <std+0x48>
 800679e:	33d0      	adds	r3, #208	; 0xd0
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d105      	bne.n	80067b0 <std+0x54>
 80067a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ac:	f000 b998 	b.w	8006ae0 <__retarget_lock_init_recursive>
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	08006921 	.word	0x08006921
 80067b8:	08006943 	.word	0x08006943
 80067bc:	0800697b 	.word	0x0800697b
 80067c0:	0800699f 	.word	0x0800699f
 80067c4:	20003410 	.word	0x20003410

080067c8 <stdio_exit_handler>:
 80067c8:	4a02      	ldr	r2, [pc, #8]	; (80067d4 <stdio_exit_handler+0xc>)
 80067ca:	4903      	ldr	r1, [pc, #12]	; (80067d8 <stdio_exit_handler+0x10>)
 80067cc:	4803      	ldr	r0, [pc, #12]	; (80067dc <stdio_exit_handler+0x14>)
 80067ce:	f000 b869 	b.w	80068a4 <_fwalk_sglue>
 80067d2:	bf00      	nop
 80067d4:	20000018 	.word	0x20000018
 80067d8:	08009429 	.word	0x08009429
 80067dc:	20000024 	.word	0x20000024

080067e0 <cleanup_stdio>:
 80067e0:	6841      	ldr	r1, [r0, #4]
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <cleanup_stdio+0x34>)
 80067e4:	b510      	push	{r4, lr}
 80067e6:	4299      	cmp	r1, r3
 80067e8:	4604      	mov	r4, r0
 80067ea:	d001      	beq.n	80067f0 <cleanup_stdio+0x10>
 80067ec:	f002 fe1c 	bl	8009428 <_fflush_r>
 80067f0:	68a1      	ldr	r1, [r4, #8]
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <cleanup_stdio+0x38>)
 80067f4:	4299      	cmp	r1, r3
 80067f6:	d002      	beq.n	80067fe <cleanup_stdio+0x1e>
 80067f8:	4620      	mov	r0, r4
 80067fa:	f002 fe15 	bl	8009428 <_fflush_r>
 80067fe:	68e1      	ldr	r1, [r4, #12]
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <cleanup_stdio+0x3c>)
 8006802:	4299      	cmp	r1, r3
 8006804:	d004      	beq.n	8006810 <cleanup_stdio+0x30>
 8006806:	4620      	mov	r0, r4
 8006808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800680c:	f002 be0c 	b.w	8009428 <_fflush_r>
 8006810:	bd10      	pop	{r4, pc}
 8006812:	bf00      	nop
 8006814:	20003410 	.word	0x20003410
 8006818:	20003478 	.word	0x20003478
 800681c:	200034e0 	.word	0x200034e0

08006820 <global_stdio_init.part.0>:
 8006820:	b510      	push	{r4, lr}
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <global_stdio_init.part.0+0x30>)
 8006824:	4c0b      	ldr	r4, [pc, #44]	; (8006854 <global_stdio_init.part.0+0x34>)
 8006826:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <global_stdio_init.part.0+0x38>)
 8006828:	4620      	mov	r0, r4
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	2104      	movs	r1, #4
 800682e:	2200      	movs	r2, #0
 8006830:	f7ff ff94 	bl	800675c <std>
 8006834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006838:	2201      	movs	r2, #1
 800683a:	2109      	movs	r1, #9
 800683c:	f7ff ff8e 	bl	800675c <std>
 8006840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006844:	2202      	movs	r2, #2
 8006846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800684a:	2112      	movs	r1, #18
 800684c:	f7ff bf86 	b.w	800675c <std>
 8006850:	20003548 	.word	0x20003548
 8006854:	20003410 	.word	0x20003410
 8006858:	080067c9 	.word	0x080067c9

0800685c <__sfp_lock_acquire>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__sfp_lock_acquire+0x8>)
 800685e:	f000 b940 	b.w	8006ae2 <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	20003551 	.word	0x20003551

08006868 <__sfp_lock_release>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__sfp_lock_release+0x8>)
 800686a:	f000 b93b 	b.w	8006ae4 <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	20003551 	.word	0x20003551

08006874 <__sinit>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4604      	mov	r4, r0
 8006878:	f7ff fff0 	bl	800685c <__sfp_lock_acquire>
 800687c:	6a23      	ldr	r3, [r4, #32]
 800687e:	b11b      	cbz	r3, 8006888 <__sinit+0x14>
 8006880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006884:	f7ff bff0 	b.w	8006868 <__sfp_lock_release>
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <__sinit+0x28>)
 800688a:	6223      	str	r3, [r4, #32]
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <__sinit+0x2c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f5      	bne.n	8006880 <__sinit+0xc>
 8006894:	f7ff ffc4 	bl	8006820 <global_stdio_init.part.0>
 8006898:	e7f2      	b.n	8006880 <__sinit+0xc>
 800689a:	bf00      	nop
 800689c:	080067e1 	.word	0x080067e1
 80068a0:	20003548 	.word	0x20003548

080068a4 <_fwalk_sglue>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	4607      	mov	r7, r0
 80068aa:	4688      	mov	r8, r1
 80068ac:	4614      	mov	r4, r2
 80068ae:	2600      	movs	r6, #0
 80068b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068b4:	f1b9 0901 	subs.w	r9, r9, #1
 80068b8:	d505      	bpl.n	80068c6 <_fwalk_sglue+0x22>
 80068ba:	6824      	ldr	r4, [r4, #0]
 80068bc:	2c00      	cmp	r4, #0
 80068be:	d1f7      	bne.n	80068b0 <_fwalk_sglue+0xc>
 80068c0:	4630      	mov	r0, r6
 80068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d907      	bls.n	80068dc <_fwalk_sglue+0x38>
 80068cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068d0:	3301      	adds	r3, #1
 80068d2:	d003      	beq.n	80068dc <_fwalk_sglue+0x38>
 80068d4:	4629      	mov	r1, r5
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	4306      	orrs	r6, r0
 80068dc:	3568      	adds	r5, #104	; 0x68
 80068de:	e7e9      	b.n	80068b4 <_fwalk_sglue+0x10>

080068e0 <siprintf>:
 80068e0:	b40e      	push	{r1, r2, r3}
 80068e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068e6:	b500      	push	{lr}
 80068e8:	b09c      	sub	sp, #112	; 0x70
 80068ea:	ab1d      	add	r3, sp, #116	; 0x74
 80068ec:	9002      	str	r0, [sp, #8]
 80068ee:	9006      	str	r0, [sp, #24]
 80068f0:	9107      	str	r1, [sp, #28]
 80068f2:	9104      	str	r1, [sp, #16]
 80068f4:	4808      	ldr	r0, [pc, #32]	; (8006918 <siprintf+0x38>)
 80068f6:	4909      	ldr	r1, [pc, #36]	; (800691c <siprintf+0x3c>)
 80068f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fc:	9105      	str	r1, [sp, #20]
 80068fe:	6800      	ldr	r0, [r0, #0]
 8006900:	a902      	add	r1, sp, #8
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	f002 fc10 	bl	8009128 <_svfiprintf_r>
 8006908:	2200      	movs	r2, #0
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	b01c      	add	sp, #112	; 0x70
 8006910:	f85d eb04 	ldr.w	lr, [sp], #4
 8006914:	b003      	add	sp, #12
 8006916:	4770      	bx	lr
 8006918:	20000070 	.word	0x20000070
 800691c:	ffff0208 	.word	0xffff0208

08006920 <__sread>:
 8006920:	b510      	push	{r4, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	f000 f88c 	bl	8006a44 <_read_r>
 800692c:	2800      	cmp	r0, #0
 800692e:	bfab      	itete	ge
 8006930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006932:	89a3      	ldrhlt	r3, [r4, #12]
 8006934:	181b      	addge	r3, r3, r0
 8006936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800693a:	bfac      	ite	ge
 800693c:	6563      	strge	r3, [r4, #84]	; 0x54
 800693e:	81a3      	strhlt	r3, [r4, #12]
 8006940:	bd10      	pop	{r4, pc}

08006942 <__swrite>:
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	461f      	mov	r7, r3
 8006948:	898b      	ldrh	r3, [r1, #12]
 800694a:	4605      	mov	r5, r0
 800694c:	05db      	lsls	r3, r3, #23
 800694e:	460c      	mov	r4, r1
 8006950:	4616      	mov	r6, r2
 8006952:	d505      	bpl.n	8006960 <__swrite+0x1e>
 8006954:	2302      	movs	r3, #2
 8006956:	2200      	movs	r2, #0
 8006958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695c:	f000 f860 	bl	8006a20 <_lseek_r>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	4632      	mov	r2, r6
 8006964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	4628      	mov	r0, r5
 800696c:	463b      	mov	r3, r7
 800696e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	f000 b877 	b.w	8006a68 <_write_r>

0800697a <__sseek>:
 800697a:	b510      	push	{r4, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006982:	f000 f84d 	bl	8006a20 <_lseek_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	bf15      	itete	ne
 800698c:	6560      	strne	r0, [r4, #84]	; 0x54
 800698e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006996:	81a3      	strheq	r3, [r4, #12]
 8006998:	bf18      	it	ne
 800699a:	81a3      	strhne	r3, [r4, #12]
 800699c:	bd10      	pop	{r4, pc}

0800699e <__sclose>:
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 b82d 	b.w	8006a00 <_close_r>
	...

080069a8 <_vsiprintf_r>:
 80069a8:	b500      	push	{lr}
 80069aa:	b09b      	sub	sp, #108	; 0x6c
 80069ac:	9100      	str	r1, [sp, #0]
 80069ae:	9104      	str	r1, [sp, #16]
 80069b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b4:	9105      	str	r1, [sp, #20]
 80069b6:	9102      	str	r1, [sp, #8]
 80069b8:	4905      	ldr	r1, [pc, #20]	; (80069d0 <_vsiprintf_r+0x28>)
 80069ba:	9103      	str	r1, [sp, #12]
 80069bc:	4669      	mov	r1, sp
 80069be:	f002 fbb3 	bl	8009128 <_svfiprintf_r>
 80069c2:	2200      	movs	r2, #0
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	b01b      	add	sp, #108	; 0x6c
 80069ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80069ce:	bf00      	nop
 80069d0:	ffff0208 	.word	0xffff0208

080069d4 <vsiprintf>:
 80069d4:	4613      	mov	r3, r2
 80069d6:	460a      	mov	r2, r1
 80069d8:	4601      	mov	r1, r0
 80069da:	4802      	ldr	r0, [pc, #8]	; (80069e4 <vsiprintf+0x10>)
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f7ff bfe3 	b.w	80069a8 <_vsiprintf_r>
 80069e2:	bf00      	nop
 80069e4:	20000070 	.word	0x20000070

080069e8 <memset>:
 80069e8:	4603      	mov	r3, r0
 80069ea:	4402      	add	r2, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	f803 1b01 	strb.w	r1, [r3], #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <_localeconv_r>:
 80069f8:	4800      	ldr	r0, [pc, #0]	; (80069fc <_localeconv_r+0x4>)
 80069fa:	4770      	bx	lr
 80069fc:	20000164 	.word	0x20000164

08006a00 <_close_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	2300      	movs	r3, #0
 8006a04:	4d05      	ldr	r5, [pc, #20]	; (8006a1c <_close_r+0x1c>)
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	f7fe fe6e 	bl	80056ec <_close>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_close_r+0x1a>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_close_r+0x1a>
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	2000354c 	.word	0x2000354c

08006a20 <_lseek_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4d05      	ldr	r5, [pc, #20]	; (8006a40 <_lseek_r+0x20>)
 8006a2c:	602a      	str	r2, [r5, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7fe fe1d 	bl	800566e <_lseek>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_lseek_r+0x1e>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_lseek_r+0x1e>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	2000354c 	.word	0x2000354c

08006a44 <_read_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4d05      	ldr	r5, [pc, #20]	; (8006a64 <_read_r+0x20>)
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fe fdb5 	bl	80055c2 <_read>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_read_r+0x1e>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_read_r+0x1e>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	2000354c 	.word	0x2000354c

08006a68 <_write_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	2200      	movs	r2, #0
 8006a72:	4d05      	ldr	r5, [pc, #20]	; (8006a88 <_write_r+0x20>)
 8006a74:	602a      	str	r2, [r5, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f7fe fe0b 	bl	8005692 <_write>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_write_r+0x1e>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_write_r+0x1e>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	2000354c 	.word	0x2000354c

08006a8c <__errno>:
 8006a8c:	4b01      	ldr	r3, [pc, #4]	; (8006a94 <__errno+0x8>)
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000070 	.word	0x20000070

08006a98 <__libc_init_array>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	4d0c      	ldr	r5, [pc, #48]	; (8006ad0 <__libc_init_array+0x38>)
 8006a9e:	4c0d      	ldr	r4, [pc, #52]	; (8006ad4 <__libc_init_array+0x3c>)
 8006aa0:	1b64      	subs	r4, r4, r5
 8006aa2:	10a4      	asrs	r4, r4, #2
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d109      	bne.n	8006abc <__libc_init_array+0x24>
 8006aa8:	f003 fbcc 	bl	800a244 <_init>
 8006aac:	2600      	movs	r6, #0
 8006aae:	4d0a      	ldr	r5, [pc, #40]	; (8006ad8 <__libc_init_array+0x40>)
 8006ab0:	4c0a      	ldr	r4, [pc, #40]	; (8006adc <__libc_init_array+0x44>)
 8006ab2:	1b64      	subs	r4, r4, r5
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	42a6      	cmp	r6, r4
 8006ab8:	d105      	bne.n	8006ac6 <__libc_init_array+0x2e>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac0:	4798      	blx	r3
 8006ac2:	3601      	adds	r6, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__libc_init_array+0xc>
 8006ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aca:	4798      	blx	r3
 8006acc:	3601      	adds	r6, #1
 8006ace:	e7f2      	b.n	8006ab6 <__libc_init_array+0x1e>
 8006ad0:	0800a7f0 	.word	0x0800a7f0
 8006ad4:	0800a7f0 	.word	0x0800a7f0
 8006ad8:	0800a7f0 	.word	0x0800a7f0
 8006adc:	0800a7f4 	.word	0x0800a7f4

08006ae0 <__retarget_lock_init_recursive>:
 8006ae0:	4770      	bx	lr

08006ae2 <__retarget_lock_acquire_recursive>:
 8006ae2:	4770      	bx	lr

08006ae4 <__retarget_lock_release_recursive>:
 8006ae4:	4770      	bx	lr

08006ae6 <memchr>:
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	b2c9      	uxtb	r1, r1
 8006aec:	4402      	add	r2, r0
 8006aee:	4293      	cmp	r3, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	d101      	bne.n	8006af8 <memchr+0x12>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e003      	b.n	8006b00 <memchr+0x1a>
 8006af8:	7804      	ldrb	r4, [r0, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	428c      	cmp	r4, r1
 8006afe:	d1f6      	bne.n	8006aee <memchr+0x8>
 8006b00:	bd10      	pop	{r4, pc}

08006b02 <memcpy>:
 8006b02:	440a      	add	r2, r1
 8006b04:	4291      	cmp	r1, r2
 8006b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b0a:	d100      	bne.n	8006b0e <memcpy+0xc>
 8006b0c:	4770      	bx	lr
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b14:	4291      	cmp	r1, r2
 8006b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b1a:	d1f9      	bne.n	8006b10 <memcpy+0xe>
 8006b1c:	bd10      	pop	{r4, pc}
	...

08006b20 <nanf>:
 8006b20:	4800      	ldr	r0, [pc, #0]	; (8006b24 <nanf+0x4>)
 8006b22:	4770      	bx	lr
 8006b24:	7fc00000 	.word	0x7fc00000

08006b28 <quorem>:
 8006b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	6903      	ldr	r3, [r0, #16]
 8006b2e:	690c      	ldr	r4, [r1, #16]
 8006b30:	4607      	mov	r7, r0
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	db7f      	blt.n	8006c36 <quorem+0x10e>
 8006b36:	3c01      	subs	r4, #1
 8006b38:	f100 0514 	add.w	r5, r0, #20
 8006b3c:	f101 0814 	add.w	r8, r1, #20
 8006b40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	429a      	cmp	r2, r3
 8006b52:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b5e:	d331      	bcc.n	8006bc4 <quorem+0x9c>
 8006b60:	f04f 0e00 	mov.w	lr, #0
 8006b64:	4640      	mov	r0, r8
 8006b66:	46ac      	mov	ip, r5
 8006b68:	46f2      	mov	sl, lr
 8006b6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b6e:	b293      	uxth	r3, r2
 8006b70:	fb06 e303 	mla	r3, r6, r3, lr
 8006b74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b78:	0c1a      	lsrs	r2, r3, #16
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	fb06 220e 	mla	r2, r6, lr, r2
 8006b80:	ebaa 0303 	sub.w	r3, sl, r3
 8006b84:	f8dc a000 	ldr.w	sl, [ip]
 8006b88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b8c:	fa1f fa8a 	uxth.w	sl, sl
 8006b90:	4453      	add	r3, sl
 8006b92:	f8dc a000 	ldr.w	sl, [ip]
 8006b96:	b292      	uxth	r2, r2
 8006b98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ba6:	4581      	cmp	r9, r0
 8006ba8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bac:	f84c 3b04 	str.w	r3, [ip], #4
 8006bb0:	d2db      	bcs.n	8006b6a <quorem+0x42>
 8006bb2:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bb6:	b92b      	cbnz	r3, 8006bc4 <quorem+0x9c>
 8006bb8:	9b01      	ldr	r3, [sp, #4]
 8006bba:	3b04      	subs	r3, #4
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	d32d      	bcc.n	8006c1e <quorem+0xf6>
 8006bc2:	613c      	str	r4, [r7, #16]
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f001 f9df 	bl	8007f88 <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	db23      	blt.n	8006c16 <quorem+0xee>
 8006bce:	4629      	mov	r1, r5
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bd8:	f8d1 c000 	ldr.w	ip, [r1]
 8006bdc:	b293      	uxth	r3, r2
 8006bde:	1ac3      	subs	r3, r0, r3
 8006be0:	0c12      	lsrs	r2, r2, #16
 8006be2:	fa1f f08c 	uxth.w	r0, ip
 8006be6:	4403      	add	r3, r0
 8006be8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf6:	45c1      	cmp	r9, r8
 8006bf8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bfc:	f841 3b04 	str.w	r3, [r1], #4
 8006c00:	d2e8      	bcs.n	8006bd4 <quorem+0xac>
 8006c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c0a:	b922      	cbnz	r2, 8006c16 <quorem+0xee>
 8006c0c:	3b04      	subs	r3, #4
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	d30a      	bcc.n	8006c2a <quorem+0x102>
 8006c14:	613c      	str	r4, [r7, #16]
 8006c16:	4630      	mov	r0, r6
 8006c18:	b003      	add	sp, #12
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1cd      	bne.n	8006bc2 <quorem+0x9a>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	e7c8      	b.n	8006bbc <quorem+0x94>
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1f0      	bne.n	8006c14 <quorem+0xec>
 8006c32:	3c01      	subs	r4, #1
 8006c34:	e7eb      	b.n	8006c0e <quorem+0xe6>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7ee      	b.n	8006c18 <quorem+0xf0>
 8006c3a:	0000      	movs	r0, r0
 8006c3c:	0000      	movs	r0, r0
	...

08006c40 <_dtoa_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4616      	mov	r6, r2
 8006c46:	461f      	mov	r7, r3
 8006c48:	69c4      	ldr	r4, [r0, #28]
 8006c4a:	b099      	sub	sp, #100	; 0x64
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c56:	b974      	cbnz	r4, 8006c76 <_dtoa_r+0x36>
 8006c58:	2010      	movs	r0, #16
 8006c5a:	f000 fe1d 	bl	8007898 <malloc>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	61e8      	str	r0, [r5, #28]
 8006c62:	b920      	cbnz	r0, 8006c6e <_dtoa_r+0x2e>
 8006c64:	21ef      	movs	r1, #239	; 0xef
 8006c66:	4bac      	ldr	r3, [pc, #688]	; (8006f18 <_dtoa_r+0x2d8>)
 8006c68:	48ac      	ldr	r0, [pc, #688]	; (8006f1c <_dtoa_r+0x2dc>)
 8006c6a:	f002 fc47 	bl	80094fc <__assert_func>
 8006c6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c72:	6004      	str	r4, [r0, #0]
 8006c74:	60c4      	str	r4, [r0, #12]
 8006c76:	69eb      	ldr	r3, [r5, #28]
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b151      	cbz	r1, 8006c92 <_dtoa_r+0x52>
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4093      	lsls	r3, r2
 8006c82:	604a      	str	r2, [r1, #4]
 8006c84:	608b      	str	r3, [r1, #8]
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fefa 	bl	8007a80 <_Bfree>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	69eb      	ldr	r3, [r5, #28]
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	1e3b      	subs	r3, r7, #0
 8006c94:	bfaf      	iteee	ge
 8006c96:	2300      	movge	r3, #0
 8006c98:	2201      	movlt	r2, #1
 8006c9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c9e:	9305      	strlt	r3, [sp, #20]
 8006ca0:	bfa8      	it	ge
 8006ca2:	f8c8 3000 	strge.w	r3, [r8]
 8006ca6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006caa:	4b9d      	ldr	r3, [pc, #628]	; (8006f20 <_dtoa_r+0x2e0>)
 8006cac:	bfb8      	it	lt
 8006cae:	f8c8 2000 	strlt.w	r2, [r8]
 8006cb2:	ea33 0309 	bics.w	r3, r3, r9
 8006cb6:	d119      	bne.n	8006cec <_dtoa_r+0xac>
 8006cb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cc4:	4333      	orrs	r3, r6
 8006cc6:	f000 8589 	beq.w	80077dc <_dtoa_r+0xb9c>
 8006cca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ccc:	b953      	cbnz	r3, 8006ce4 <_dtoa_r+0xa4>
 8006cce:	4b95      	ldr	r3, [pc, #596]	; (8006f24 <_dtoa_r+0x2e4>)
 8006cd0:	e023      	b.n	8006d1a <_dtoa_r+0xda>
 8006cd2:	4b95      	ldr	r3, [pc, #596]	; (8006f28 <_dtoa_r+0x2e8>)
 8006cd4:	9303      	str	r3, [sp, #12]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	9803      	ldr	r0, [sp, #12]
 8006cde:	b019      	add	sp, #100	; 0x64
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	4b8f      	ldr	r3, [pc, #572]	; (8006f24 <_dtoa_r+0x2e4>)
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	3303      	adds	r3, #3
 8006cea:	e7f5      	b.n	8006cd8 <_dtoa_r+0x98>
 8006cec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f7f9 fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8006d00:	4680      	mov	r8, r0
 8006d02:	b160      	cbz	r0, 8006d1e <_dtoa_r+0xde>
 8006d04:	2301      	movs	r3, #1
 8006d06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8562 	beq.w	80077d6 <_dtoa_r+0xb96>
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <_dtoa_r+0x2ec>)
 8006d14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	e7de      	b.n	8006cdc <_dtoa_r+0x9c>
 8006d1e:	ab16      	add	r3, sp, #88	; 0x58
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	ab17      	add	r3, sp, #92	; 0x5c
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4628      	mov	r0, r5
 8006d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d2c:	f001 fa3c 	bl	80081a8 <__d2b>
 8006d30:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d34:	4682      	mov	sl, r0
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	d07e      	beq.n	8006e38 <_dtoa_r+0x1f8>
 8006d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d48:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d50:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d54:	4619      	mov	r1, r3
 8006d56:	2200      	movs	r2, #0
 8006d58:	4b75      	ldr	r3, [pc, #468]	; (8006f30 <_dtoa_r+0x2f0>)
 8006d5a:	f7f9 fa05 	bl	8000168 <__aeabi_dsub>
 8006d5e:	a368      	add	r3, pc, #416	; (adr r3, 8006f00 <_dtoa_r+0x2c0>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 fbb8 	bl	80004d8 <__aeabi_dmul>
 8006d68:	a367      	add	r3, pc, #412	; (adr r3, 8006f08 <_dtoa_r+0x2c8>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f7f9 f9fd 	bl	800016c <__adddf3>
 8006d72:	4606      	mov	r6, r0
 8006d74:	4620      	mov	r0, r4
 8006d76:	460f      	mov	r7, r1
 8006d78:	f7f9 fb44 	bl	8000404 <__aeabi_i2d>
 8006d7c:	a364      	add	r3, pc, #400	; (adr r3, 8006f10 <_dtoa_r+0x2d0>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	f7f9 fba9 	bl	80004d8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 f9ed 	bl	800016c <__adddf3>
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	f7f9 fe4f 	bl	8000a38 <__aeabi_d2iz>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4683      	mov	fp, r0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4630      	mov	r0, r6
 8006da2:	4639      	mov	r1, r7
 8006da4:	f7f9 fe0a 	bl	80009bc <__aeabi_dcmplt>
 8006da8:	b148      	cbz	r0, 8006dbe <_dtoa_r+0x17e>
 8006daa:	4658      	mov	r0, fp
 8006dac:	f7f9 fb2a 	bl	8000404 <__aeabi_i2d>
 8006db0:	4632      	mov	r2, r6
 8006db2:	463b      	mov	r3, r7
 8006db4:	f7f9 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8006db8:	b908      	cbnz	r0, 8006dbe <_dtoa_r+0x17e>
 8006dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dbe:	f1bb 0f16 	cmp.w	fp, #22
 8006dc2:	d857      	bhi.n	8006e74 <_dtoa_r+0x234>
 8006dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dc8:	4b5a      	ldr	r3, [pc, #360]	; (8006f34 <_dtoa_r+0x2f4>)
 8006dca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fdf3 	bl	80009bc <__aeabi_dcmplt>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d04e      	beq.n	8006e78 <_dtoa_r+0x238>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006de4:	1b1b      	subs	r3, r3, r4
 8006de6:	1e5a      	subs	r2, r3, #1
 8006de8:	bf46      	itte	mi
 8006dea:	f1c3 0901 	rsbmi	r9, r3, #1
 8006dee:	2300      	movmi	r3, #0
 8006df0:	f04f 0900 	movpl.w	r9, #0
 8006df4:	9209      	str	r2, [sp, #36]	; 0x24
 8006df6:	bf48      	it	mi
 8006df8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006dfa:	f1bb 0f00 	cmp.w	fp, #0
 8006dfe:	db3d      	blt.n	8006e7c <_dtoa_r+0x23c>
 8006e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e02:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006e06:	445b      	add	r3, fp
 8006e08:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e10:	2b09      	cmp	r3, #9
 8006e12:	d867      	bhi.n	8006ee4 <_dtoa_r+0x2a4>
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	bfc4      	itt	gt
 8006e18:	3b04      	subgt	r3, #4
 8006e1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e1e:	bfc8      	it	gt
 8006e20:	2400      	movgt	r4, #0
 8006e22:	f1a3 0302 	sub.w	r3, r3, #2
 8006e26:	bfd8      	it	le
 8006e28:	2401      	movle	r4, #1
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	f200 8086 	bhi.w	8006f3c <_dtoa_r+0x2fc>
 8006e30:	e8df f003 	tbb	[pc, r3]
 8006e34:	5637392c 	.word	0x5637392c
 8006e38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e3c:	441c      	add	r4, r3
 8006e3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	bfc1      	itttt	gt
 8006e46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e4a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006e4e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006e52:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e56:	bfd6      	itet	le
 8006e58:	f1c3 0320 	rsble	r3, r3, #32
 8006e5c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006e60:	fa06 f003 	lslle.w	r0, r6, r3
 8006e64:	f7f9 fabe 	bl	80003e4 <__aeabi_ui2d>
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e6e:	3c01      	subs	r4, #1
 8006e70:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e72:	e76f      	b.n	8006d54 <_dtoa_r+0x114>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e7b3      	b.n	8006de0 <_dtoa_r+0x1a0>
 8006e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e7a:	e7b2      	b.n	8006de2 <_dtoa_r+0x1a2>
 8006e7c:	f1cb 0300 	rsb	r3, fp, #0
 8006e80:	930a      	str	r3, [sp, #40]	; 0x28
 8006e82:	2300      	movs	r3, #0
 8006e84:	eba9 090b 	sub.w	r9, r9, fp
 8006e88:	930e      	str	r3, [sp, #56]	; 0x38
 8006e8a:	e7c0      	b.n	8006e0e <_dtoa_r+0x1ce>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dc55      	bgt.n	8006f42 <_dtoa_r+0x302>
 8006e96:	2301      	movs	r3, #1
 8006e98:	461a      	mov	r2, r3
 8006e9a:	9306      	str	r3, [sp, #24]
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006ea0:	e00b      	b.n	8006eba <_dtoa_r+0x27a>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7f3      	b.n	8006e8e <_dtoa_r+0x24e>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eac:	445b      	add	r3, fp
 8006eae:	9306      	str	r3, [sp, #24]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	bfb8      	it	lt
 8006eb8:	2301      	movlt	r3, #1
 8006eba:	2100      	movs	r1, #0
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	69e8      	ldr	r0, [r5, #28]
 8006ec0:	f102 0614 	add.w	r6, r2, #20
 8006ec4:	429e      	cmp	r6, r3
 8006ec6:	d940      	bls.n	8006f4a <_dtoa_r+0x30a>
 8006ec8:	6041      	str	r1, [r0, #4]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 fd98 	bl	8007a00 <_Balloc>
 8006ed0:	9003      	str	r0, [sp, #12]
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d13c      	bne.n	8006f50 <_dtoa_r+0x310>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	f240 11af 	movw	r1, #431	; 0x1af
 8006edc:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <_dtoa_r+0x2f8>)
 8006ede:	e6c3      	b.n	8006c68 <_dtoa_r+0x28>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e7e1      	b.n	8006ea8 <_dtoa_r+0x268>
 8006ee4:	2401      	movs	r4, #1
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006eea:	9322      	str	r3, [sp, #136]	; 0x88
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	9306      	str	r3, [sp, #24]
 8006ef4:	9308      	str	r3, [sp, #32]
 8006ef6:	2312      	movs	r3, #18
 8006ef8:	e7d1      	b.n	8006e9e <_dtoa_r+0x25e>
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	0800a40a 	.word	0x0800a40a
 8006f1c:	0800a421 	.word	0x0800a421
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	0800a406 	.word	0x0800a406
 8006f28:	0800a3fd 	.word	0x0800a3fd
 8006f2c:	0800a3d5 	.word	0x0800a3d5
 8006f30:	3ff80000 	.word	0x3ff80000
 8006f34:	0800a510 	.word	0x0800a510
 8006f38:	0800a479 	.word	0x0800a479
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f40:	e7d4      	b.n	8006eec <_dtoa_r+0x2ac>
 8006f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f44:	9306      	str	r3, [sp, #24]
 8006f46:	9308      	str	r3, [sp, #32]
 8006f48:	e7b7      	b.n	8006eba <_dtoa_r+0x27a>
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	0052      	lsls	r2, r2, #1
 8006f4e:	e7b7      	b.n	8006ec0 <_dtoa_r+0x280>
 8006f50:	69eb      	ldr	r3, [r5, #28]
 8006f52:	9a03      	ldr	r2, [sp, #12]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	9b08      	ldr	r3, [sp, #32]
 8006f58:	2b0e      	cmp	r3, #14
 8006f5a:	f200 80a8 	bhi.w	80070ae <_dtoa_r+0x46e>
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	f000 80a5 	beq.w	80070ae <_dtoa_r+0x46e>
 8006f64:	f1bb 0f00 	cmp.w	fp, #0
 8006f68:	dd34      	ble.n	8006fd4 <_dtoa_r+0x394>
 8006f6a:	4b9a      	ldr	r3, [pc, #616]	; (80071d4 <_dtoa_r+0x594>)
 8006f6c:	f00b 020f 	and.w	r2, fp, #15
 8006f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f80:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006f84:	d016      	beq.n	8006fb4 <_dtoa_r+0x374>
 8006f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f8a:	4b93      	ldr	r3, [pc, #588]	; (80071d8 <_dtoa_r+0x598>)
 8006f8c:	2703      	movs	r7, #3
 8006f8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f92:	f7f9 fbcb 	bl	800072c <__aeabi_ddiv>
 8006f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f9a:	f004 040f 	and.w	r4, r4, #15
 8006f9e:	4e8e      	ldr	r6, [pc, #568]	; (80071d8 <_dtoa_r+0x598>)
 8006fa0:	b954      	cbnz	r4, 8006fb8 <_dtoa_r+0x378>
 8006fa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006faa:	f7f9 fbbf 	bl	800072c <__aeabi_ddiv>
 8006fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb2:	e029      	b.n	8007008 <_dtoa_r+0x3c8>
 8006fb4:	2702      	movs	r7, #2
 8006fb6:	e7f2      	b.n	8006f9e <_dtoa_r+0x35e>
 8006fb8:	07e1      	lsls	r1, r4, #31
 8006fba:	d508      	bpl.n	8006fce <_dtoa_r+0x38e>
 8006fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fc4:	f7f9 fa88 	bl	80004d8 <__aeabi_dmul>
 8006fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fcc:	3701      	adds	r7, #1
 8006fce:	1064      	asrs	r4, r4, #1
 8006fd0:	3608      	adds	r6, #8
 8006fd2:	e7e5      	b.n	8006fa0 <_dtoa_r+0x360>
 8006fd4:	f000 80a5 	beq.w	8007122 <_dtoa_r+0x4e2>
 8006fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fdc:	f1cb 0400 	rsb	r4, fp, #0
 8006fe0:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <_dtoa_r+0x594>)
 8006fe2:	f004 020f 	and.w	r2, r4, #15
 8006fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 fa73 	bl	80004d8 <__aeabi_dmul>
 8006ff2:	2702      	movs	r7, #2
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ffa:	4e77      	ldr	r6, [pc, #476]	; (80071d8 <_dtoa_r+0x598>)
 8006ffc:	1124      	asrs	r4, r4, #4
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	f040 8084 	bne.w	800710c <_dtoa_r+0x4cc>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1d2      	bne.n	8006fae <_dtoa_r+0x36e>
 8007008:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800700c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8087 	beq.w	8007126 <_dtoa_r+0x4e6>
 8007018:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800701c:	2200      	movs	r2, #0
 800701e:	4b6f      	ldr	r3, [pc, #444]	; (80071dc <_dtoa_r+0x59c>)
 8007020:	f7f9 fccc 	bl	80009bc <__aeabi_dcmplt>
 8007024:	2800      	cmp	r0, #0
 8007026:	d07e      	beq.n	8007126 <_dtoa_r+0x4e6>
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d07b      	beq.n	8007126 <_dtoa_r+0x4e6>
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dd38      	ble.n	80070a6 <_dtoa_r+0x466>
 8007034:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007038:	2200      	movs	r2, #0
 800703a:	4b69      	ldr	r3, [pc, #420]	; (80071e0 <_dtoa_r+0x5a0>)
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007044:	9c06      	ldr	r4, [sp, #24]
 8007046:	f10b 38ff 	add.w	r8, fp, #4294967295
 800704a:	3701      	adds	r7, #1
 800704c:	4638      	mov	r0, r7
 800704e:	f7f9 f9d9 	bl	8000404 <__aeabi_i2d>
 8007052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007056:	f7f9 fa3f 	bl	80004d8 <__aeabi_dmul>
 800705a:	2200      	movs	r2, #0
 800705c:	4b61      	ldr	r3, [pc, #388]	; (80071e4 <_dtoa_r+0x5a4>)
 800705e:	f7f9 f885 	bl	800016c <__adddf3>
 8007062:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800706a:	9611      	str	r6, [sp, #68]	; 0x44
 800706c:	2c00      	cmp	r4, #0
 800706e:	d15d      	bne.n	800712c <_dtoa_r+0x4ec>
 8007070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007074:	2200      	movs	r2, #0
 8007076:	4b5c      	ldr	r3, [pc, #368]	; (80071e8 <_dtoa_r+0x5a8>)
 8007078:	f7f9 f876 	bl	8000168 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007084:	4633      	mov	r3, r6
 8007086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007088:	f7f9 fcb6 	bl	80009f8 <__aeabi_dcmpgt>
 800708c:	2800      	cmp	r0, #0
 800708e:	f040 8295 	bne.w	80075bc <_dtoa_r+0x97c>
 8007092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007098:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800709c:	f7f9 fc8e 	bl	80009bc <__aeabi_dcmplt>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f040 8289 	bne.w	80075b8 <_dtoa_r+0x978>
 80070a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80070aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f2c0 8151 	blt.w	8007358 <_dtoa_r+0x718>
 80070b6:	f1bb 0f0e 	cmp.w	fp, #14
 80070ba:	f300 814d 	bgt.w	8007358 <_dtoa_r+0x718>
 80070be:	4b45      	ldr	r3, [pc, #276]	; (80071d4 <_dtoa_r+0x594>)
 80070c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f280 80da 	bge.w	8007288 <_dtoa_r+0x648>
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f300 80d6 	bgt.w	8007288 <_dtoa_r+0x648>
 80070dc:	f040 826b 	bne.w	80075b6 <_dtoa_r+0x976>
 80070e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b40      	ldr	r3, [pc, #256]	; (80071e8 <_dtoa_r+0x5a8>)
 80070e8:	f7f9 f9f6 	bl	80004d8 <__aeabi_dmul>
 80070ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070f0:	f7f9 fc78 	bl	80009e4 <__aeabi_dcmpge>
 80070f4:	9c08      	ldr	r4, [sp, #32]
 80070f6:	4626      	mov	r6, r4
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f040 8241 	bne.w	8007580 <_dtoa_r+0x940>
 80070fe:	2331      	movs	r3, #49	; 0x31
 8007100:	9f03      	ldr	r7, [sp, #12]
 8007102:	f10b 0b01 	add.w	fp, fp, #1
 8007106:	f807 3b01 	strb.w	r3, [r7], #1
 800710a:	e23d      	b.n	8007588 <_dtoa_r+0x948>
 800710c:	07e2      	lsls	r2, r4, #31
 800710e:	d505      	bpl.n	800711c <_dtoa_r+0x4dc>
 8007110:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007114:	f7f9 f9e0 	bl	80004d8 <__aeabi_dmul>
 8007118:	2301      	movs	r3, #1
 800711a:	3701      	adds	r7, #1
 800711c:	1064      	asrs	r4, r4, #1
 800711e:	3608      	adds	r6, #8
 8007120:	e76d      	b.n	8006ffe <_dtoa_r+0x3be>
 8007122:	2702      	movs	r7, #2
 8007124:	e770      	b.n	8007008 <_dtoa_r+0x3c8>
 8007126:	46d8      	mov	r8, fp
 8007128:	9c08      	ldr	r4, [sp, #32]
 800712a:	e78f      	b.n	800704c <_dtoa_r+0x40c>
 800712c:	9903      	ldr	r1, [sp, #12]
 800712e:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <_dtoa_r+0x594>)
 8007130:	4421      	add	r1, r4
 8007132:	9112      	str	r1, [sp, #72]	; 0x48
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800713a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800713e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007142:	2900      	cmp	r1, #0
 8007144:	d054      	beq.n	80071f0 <_dtoa_r+0x5b0>
 8007146:	2000      	movs	r0, #0
 8007148:	4928      	ldr	r1, [pc, #160]	; (80071ec <_dtoa_r+0x5ac>)
 800714a:	f7f9 faef 	bl	800072c <__aeabi_ddiv>
 800714e:	463b      	mov	r3, r7
 8007150:	4632      	mov	r2, r6
 8007152:	f7f9 f809 	bl	8000168 <__aeabi_dsub>
 8007156:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800715a:	9f03      	ldr	r7, [sp, #12]
 800715c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007160:	f7f9 fc6a 	bl	8000a38 <__aeabi_d2iz>
 8007164:	4604      	mov	r4, r0
 8007166:	f7f9 f94d 	bl	8000404 <__aeabi_i2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007172:	f7f8 fff9 	bl	8000168 <__aeabi_dsub>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	3430      	adds	r4, #48	; 0x30
 800717c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007180:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007184:	f807 4b01 	strb.w	r4, [r7], #1
 8007188:	f7f9 fc18 	bl	80009bc <__aeabi_dcmplt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d173      	bne.n	8007278 <_dtoa_r+0x638>
 8007190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007194:	2000      	movs	r0, #0
 8007196:	4911      	ldr	r1, [pc, #68]	; (80071dc <_dtoa_r+0x59c>)
 8007198:	f7f8 ffe6 	bl	8000168 <__aeabi_dsub>
 800719c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071a0:	f7f9 fc0c 	bl	80009bc <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 80b6 	bne.w	8007316 <_dtoa_r+0x6d6>
 80071aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071ac:	429f      	cmp	r7, r3
 80071ae:	f43f af7a 	beq.w	80070a6 <_dtoa_r+0x466>
 80071b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <_dtoa_r+0x5a0>)
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	2200      	movs	r2, #0
 80071c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c8:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <_dtoa_r+0x5a0>)
 80071ca:	f7f9 f985 	bl	80004d8 <__aeabi_dmul>
 80071ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d2:	e7c3      	b.n	800715c <_dtoa_r+0x51c>
 80071d4:	0800a510 	.word	0x0800a510
 80071d8:	0800a4e8 	.word	0x0800a4e8
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	40240000 	.word	0x40240000
 80071e4:	401c0000 	.word	0x401c0000
 80071e8:	40140000 	.word	0x40140000
 80071ec:	3fe00000 	.word	0x3fe00000
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 f970 	bl	80004d8 <__aeabi_dmul>
 80071f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071fe:	9c03      	ldr	r4, [sp, #12]
 8007200:	9314      	str	r3, [sp, #80]	; 0x50
 8007202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007206:	f7f9 fc17 	bl	8000a38 <__aeabi_d2iz>
 800720a:	9015      	str	r0, [sp, #84]	; 0x54
 800720c:	f7f9 f8fa 	bl	8000404 <__aeabi_i2d>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007218:	f7f8 ffa6 	bl	8000168 <__aeabi_dsub>
 800721c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800721e:	4606      	mov	r6, r0
 8007220:	3330      	adds	r3, #48	; 0x30
 8007222:	f804 3b01 	strb.w	r3, [r4], #1
 8007226:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007228:	460f      	mov	r7, r1
 800722a:	429c      	cmp	r4, r3
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	d124      	bne.n	800727c <_dtoa_r+0x63c>
 8007232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007236:	4baf      	ldr	r3, [pc, #700]	; (80074f4 <_dtoa_r+0x8b4>)
 8007238:	f7f8 ff98 	bl	800016c <__adddf3>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 fbd8 	bl	80009f8 <__aeabi_dcmpgt>
 8007248:	2800      	cmp	r0, #0
 800724a:	d163      	bne.n	8007314 <_dtoa_r+0x6d4>
 800724c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007250:	2000      	movs	r0, #0
 8007252:	49a8      	ldr	r1, [pc, #672]	; (80074f4 <_dtoa_r+0x8b4>)
 8007254:	f7f8 ff88 	bl	8000168 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	f43f af1e 	beq.w	80070a6 <_dtoa_r+0x466>
 800726a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800726c:	1e7b      	subs	r3, r7, #1
 800726e:	9314      	str	r3, [sp, #80]	; 0x50
 8007270:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007274:	2b30      	cmp	r3, #48	; 0x30
 8007276:	d0f8      	beq.n	800726a <_dtoa_r+0x62a>
 8007278:	46c3      	mov	fp, r8
 800727a:	e03b      	b.n	80072f4 <_dtoa_r+0x6b4>
 800727c:	4b9e      	ldr	r3, [pc, #632]	; (80074f8 <_dtoa_r+0x8b8>)
 800727e:	f7f9 f92b 	bl	80004d8 <__aeabi_dmul>
 8007282:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007286:	e7bc      	b.n	8007202 <_dtoa_r+0x5c2>
 8007288:	9f03      	ldr	r7, [sp, #12]
 800728a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800728e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007292:	4640      	mov	r0, r8
 8007294:	4649      	mov	r1, r9
 8007296:	f7f9 fa49 	bl	800072c <__aeabi_ddiv>
 800729a:	f7f9 fbcd 	bl	8000a38 <__aeabi_d2iz>
 800729e:	4604      	mov	r4, r0
 80072a0:	f7f9 f8b0 	bl	8000404 <__aeabi_i2d>
 80072a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072a8:	f7f9 f916 	bl	80004d8 <__aeabi_dmul>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4640      	mov	r0, r8
 80072b2:	4649      	mov	r1, r9
 80072b4:	f7f8 ff58 	bl	8000168 <__aeabi_dsub>
 80072b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80072bc:	f807 6b01 	strb.w	r6, [r7], #1
 80072c0:	9e03      	ldr	r6, [sp, #12]
 80072c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80072c6:	1bbe      	subs	r6, r7, r6
 80072c8:	45b4      	cmp	ip, r6
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	d136      	bne.n	800733e <_dtoa_r+0x6fe>
 80072d0:	f7f8 ff4c 	bl	800016c <__adddf3>
 80072d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d8:	4680      	mov	r8, r0
 80072da:	4689      	mov	r9, r1
 80072dc:	f7f9 fb8c 	bl	80009f8 <__aeabi_dcmpgt>
 80072e0:	bb58      	cbnz	r0, 800733a <_dtoa_r+0x6fa>
 80072e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072e6:	4640      	mov	r0, r8
 80072e8:	4649      	mov	r1, r9
 80072ea:	f7f9 fb5d 	bl	80009a8 <__aeabi_dcmpeq>
 80072ee:	b108      	cbz	r0, 80072f4 <_dtoa_r+0x6b4>
 80072f0:	07e3      	lsls	r3, r4, #31
 80072f2:	d422      	bmi.n	800733a <_dtoa_r+0x6fa>
 80072f4:	4651      	mov	r1, sl
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fbc2 	bl	8007a80 <_Bfree>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007300:	703b      	strb	r3, [r7, #0]
 8007302:	f10b 0301 	add.w	r3, fp, #1
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800730a:	2b00      	cmp	r3, #0
 800730c:	f43f ace6 	beq.w	8006cdc <_dtoa_r+0x9c>
 8007310:	601f      	str	r7, [r3, #0]
 8007312:	e4e3      	b.n	8006cdc <_dtoa_r+0x9c>
 8007314:	4627      	mov	r7, r4
 8007316:	463b      	mov	r3, r7
 8007318:	461f      	mov	r7, r3
 800731a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800731e:	2a39      	cmp	r2, #57	; 0x39
 8007320:	d107      	bne.n	8007332 <_dtoa_r+0x6f2>
 8007322:	9a03      	ldr	r2, [sp, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d1f7      	bne.n	8007318 <_dtoa_r+0x6d8>
 8007328:	2230      	movs	r2, #48	; 0x30
 800732a:	9903      	ldr	r1, [sp, #12]
 800732c:	f108 0801 	add.w	r8, r8, #1
 8007330:	700a      	strb	r2, [r1, #0]
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	3201      	adds	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	e79e      	b.n	8007278 <_dtoa_r+0x638>
 800733a:	46d8      	mov	r8, fp
 800733c:	e7eb      	b.n	8007316 <_dtoa_r+0x6d6>
 800733e:	2200      	movs	r2, #0
 8007340:	4b6d      	ldr	r3, [pc, #436]	; (80074f8 <_dtoa_r+0x8b8>)
 8007342:	f7f9 f8c9 	bl	80004d8 <__aeabi_dmul>
 8007346:	2200      	movs	r2, #0
 8007348:	2300      	movs	r3, #0
 800734a:	4680      	mov	r8, r0
 800734c:	4689      	mov	r9, r1
 800734e:	f7f9 fb2b 	bl	80009a8 <__aeabi_dcmpeq>
 8007352:	2800      	cmp	r0, #0
 8007354:	d09b      	beq.n	800728e <_dtoa_r+0x64e>
 8007356:	e7cd      	b.n	80072f4 <_dtoa_r+0x6b4>
 8007358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800735a:	2a00      	cmp	r2, #0
 800735c:	f000 80c4 	beq.w	80074e8 <_dtoa_r+0x8a8>
 8007360:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007362:	2a01      	cmp	r2, #1
 8007364:	f300 80a8 	bgt.w	80074b8 <_dtoa_r+0x878>
 8007368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800736a:	2a00      	cmp	r2, #0
 800736c:	f000 80a0 	beq.w	80074b0 <_dtoa_r+0x870>
 8007370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007374:	464f      	mov	r7, r9
 8007376:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737a:	2101      	movs	r1, #1
 800737c:	441a      	add	r2, r3
 800737e:	4628      	mov	r0, r5
 8007380:	4499      	add	r9, r3
 8007382:	9209      	str	r2, [sp, #36]	; 0x24
 8007384:	f000 fc7c 	bl	8007c80 <__i2b>
 8007388:	4606      	mov	r6, r0
 800738a:	b15f      	cbz	r7, 80073a4 <_dtoa_r+0x764>
 800738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	dd08      	ble.n	80073a4 <_dtoa_r+0x764>
 8007392:	42bb      	cmp	r3, r7
 8007394:	bfa8      	it	ge
 8007396:	463b      	movge	r3, r7
 8007398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800739a:	eba9 0903 	sub.w	r9, r9, r3
 800739e:	1aff      	subs	r7, r7, r3
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	9309      	str	r3, [sp, #36]	; 0x24
 80073a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a6:	b1f3      	cbz	r3, 80073e6 <_dtoa_r+0x7a6>
 80073a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80a0 	beq.w	80074f0 <_dtoa_r+0x8b0>
 80073b0:	2c00      	cmp	r4, #0
 80073b2:	dd10      	ble.n	80073d6 <_dtoa_r+0x796>
 80073b4:	4631      	mov	r1, r6
 80073b6:	4622      	mov	r2, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 fd1f 	bl	8007dfc <__pow5mult>
 80073be:	4652      	mov	r2, sl
 80073c0:	4601      	mov	r1, r0
 80073c2:	4606      	mov	r6, r0
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fc71 	bl	8007cac <__multiply>
 80073ca:	4680      	mov	r8, r0
 80073cc:	4651      	mov	r1, sl
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fb56 	bl	8007a80 <_Bfree>
 80073d4:	46c2      	mov	sl, r8
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	1b1a      	subs	r2, r3, r4
 80073da:	d004      	beq.n	80073e6 <_dtoa_r+0x7a6>
 80073dc:	4651      	mov	r1, sl
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 fd0c 	bl	8007dfc <__pow5mult>
 80073e4:	4682      	mov	sl, r0
 80073e6:	2101      	movs	r1, #1
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 fc49 	bl	8007c80 <__i2b>
 80073ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f0:	4604      	mov	r4, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f340 8082 	ble.w	80074fc <_dtoa_r+0x8bc>
 80073f8:	461a      	mov	r2, r3
 80073fa:	4601      	mov	r1, r0
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 fcfd 	bl	8007dfc <__pow5mult>
 8007402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007404:	4604      	mov	r4, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	dd7b      	ble.n	8007502 <_dtoa_r+0x8c2>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	6923      	ldr	r3, [r4, #16]
 8007410:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007414:	6918      	ldr	r0, [r3, #16]
 8007416:	f000 fbe5 	bl	8007be4 <__hi0bits>
 800741a:	f1c0 0020 	rsb	r0, r0, #32
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	4418      	add	r0, r3
 8007422:	f010 001f 	ands.w	r0, r0, #31
 8007426:	f000 8092 	beq.w	800754e <_dtoa_r+0x90e>
 800742a:	f1c0 0320 	rsb	r3, r0, #32
 800742e:	2b04      	cmp	r3, #4
 8007430:	f340 8085 	ble.w	800753e <_dtoa_r+0x8fe>
 8007434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007436:	f1c0 001c 	rsb	r0, r0, #28
 800743a:	4403      	add	r3, r0
 800743c:	4481      	add	r9, r0
 800743e:	4407      	add	r7, r0
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	f1b9 0f00 	cmp.w	r9, #0
 8007446:	dd05      	ble.n	8007454 <_dtoa_r+0x814>
 8007448:	4651      	mov	r1, sl
 800744a:	464a      	mov	r2, r9
 800744c:	4628      	mov	r0, r5
 800744e:	f000 fd2f 	bl	8007eb0 <__lshift>
 8007452:	4682      	mov	sl, r0
 8007454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	dd05      	ble.n	8007466 <_dtoa_r+0x826>
 800745a:	4621      	mov	r1, r4
 800745c:	461a      	mov	r2, r3
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fd26 	bl	8007eb0 <__lshift>
 8007464:	4604      	mov	r4, r0
 8007466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d072      	beq.n	8007552 <_dtoa_r+0x912>
 800746c:	4621      	mov	r1, r4
 800746e:	4650      	mov	r0, sl
 8007470:	f000 fd8a 	bl	8007f88 <__mcmp>
 8007474:	2800      	cmp	r0, #0
 8007476:	da6c      	bge.n	8007552 <_dtoa_r+0x912>
 8007478:	2300      	movs	r3, #0
 800747a:	4651      	mov	r1, sl
 800747c:	220a      	movs	r2, #10
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fb20 	bl	8007ac4 <__multadd>
 8007484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007486:	4682      	mov	sl, r0
 8007488:	f10b 3bff 	add.w	fp, fp, #4294967295
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 81ac 	beq.w	80077ea <_dtoa_r+0xbaa>
 8007492:	2300      	movs	r3, #0
 8007494:	4631      	mov	r1, r6
 8007496:	220a      	movs	r2, #10
 8007498:	4628      	mov	r0, r5
 800749a:	f000 fb13 	bl	8007ac4 <__multadd>
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	4606      	mov	r6, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f300 8093 	bgt.w	80075ce <_dtoa_r+0x98e>
 80074a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	dc59      	bgt.n	8007562 <_dtoa_r+0x922>
 80074ae:	e08e      	b.n	80075ce <_dtoa_r+0x98e>
 80074b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074b6:	e75d      	b.n	8007374 <_dtoa_r+0x734>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	1e5c      	subs	r4, r3, #1
 80074bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074be:	42a3      	cmp	r3, r4
 80074c0:	bfbf      	itttt	lt
 80074c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80074c6:	1ae3      	sublt	r3, r4, r3
 80074c8:	18d2      	addlt	r2, r2, r3
 80074ca:	bfa8      	it	ge
 80074cc:	1b1c      	subge	r4, r3, r4
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	bfbe      	ittt	lt
 80074d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80074d6:	2400      	movlt	r4, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfb5      	itete	lt
 80074dc:	eba9 0703 	sublt.w	r7, r9, r3
 80074e0:	464f      	movge	r7, r9
 80074e2:	2300      	movlt	r3, #0
 80074e4:	9b08      	ldrge	r3, [sp, #32]
 80074e6:	e747      	b.n	8007378 <_dtoa_r+0x738>
 80074e8:	464f      	mov	r7, r9
 80074ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074ee:	e74c      	b.n	800738a <_dtoa_r+0x74a>
 80074f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f2:	e773      	b.n	80073dc <_dtoa_r+0x79c>
 80074f4:	3fe00000 	.word	0x3fe00000
 80074f8:	40240000 	.word	0x40240000
 80074fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074fe:	2b01      	cmp	r3, #1
 8007500:	dc18      	bgt.n	8007534 <_dtoa_r+0x8f4>
 8007502:	9b04      	ldr	r3, [sp, #16]
 8007504:	b9b3      	cbnz	r3, 8007534 <_dtoa_r+0x8f4>
 8007506:	9b05      	ldr	r3, [sp, #20]
 8007508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800750c:	b993      	cbnz	r3, 8007534 <_dtoa_r+0x8f4>
 800750e:	9b05      	ldr	r3, [sp, #20]
 8007510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007514:	0d1b      	lsrs	r3, r3, #20
 8007516:	051b      	lsls	r3, r3, #20
 8007518:	b17b      	cbz	r3, 800753a <_dtoa_r+0x8fa>
 800751a:	f04f 0801 	mov.w	r8, #1
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	f109 0901 	add.w	r9, r9, #1
 8007524:	3301      	adds	r3, #1
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af6f 	bne.w	800740e <_dtoa_r+0x7ce>
 8007530:	2001      	movs	r0, #1
 8007532:	e774      	b.n	800741e <_dtoa_r+0x7de>
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	e7f6      	b.n	8007528 <_dtoa_r+0x8e8>
 800753a:	4698      	mov	r8, r3
 800753c:	e7f4      	b.n	8007528 <_dtoa_r+0x8e8>
 800753e:	d080      	beq.n	8007442 <_dtoa_r+0x802>
 8007540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007542:	331c      	adds	r3, #28
 8007544:	441a      	add	r2, r3
 8007546:	4499      	add	r9, r3
 8007548:	441f      	add	r7, r3
 800754a:	9209      	str	r2, [sp, #36]	; 0x24
 800754c:	e779      	b.n	8007442 <_dtoa_r+0x802>
 800754e:	4603      	mov	r3, r0
 8007550:	e7f6      	b.n	8007540 <_dtoa_r+0x900>
 8007552:	9b08      	ldr	r3, [sp, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc34      	bgt.n	80075c2 <_dtoa_r+0x982>
 8007558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800755a:	2b02      	cmp	r3, #2
 800755c:	dd31      	ble.n	80075c2 <_dtoa_r+0x982>
 800755e:	9b08      	ldr	r3, [sp, #32]
 8007560:	9306      	str	r3, [sp, #24]
 8007562:	9b06      	ldr	r3, [sp, #24]
 8007564:	b963      	cbnz	r3, 8007580 <_dtoa_r+0x940>
 8007566:	4621      	mov	r1, r4
 8007568:	2205      	movs	r2, #5
 800756a:	4628      	mov	r0, r5
 800756c:	f000 faaa 	bl	8007ac4 <__multadd>
 8007570:	4601      	mov	r1, r0
 8007572:	4604      	mov	r4, r0
 8007574:	4650      	mov	r0, sl
 8007576:	f000 fd07 	bl	8007f88 <__mcmp>
 800757a:	2800      	cmp	r0, #0
 800757c:	f73f adbf 	bgt.w	80070fe <_dtoa_r+0x4be>
 8007580:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007582:	9f03      	ldr	r7, [sp, #12]
 8007584:	ea6f 0b03 	mvn.w	fp, r3
 8007588:	f04f 0800 	mov.w	r8, #0
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fa76 	bl	8007a80 <_Bfree>
 8007594:	2e00      	cmp	r6, #0
 8007596:	f43f aead 	beq.w	80072f4 <_dtoa_r+0x6b4>
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	d005      	beq.n	80075ac <_dtoa_r+0x96c>
 80075a0:	45b0      	cmp	r8, r6
 80075a2:	d003      	beq.n	80075ac <_dtoa_r+0x96c>
 80075a4:	4641      	mov	r1, r8
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 fa6a 	bl	8007a80 <_Bfree>
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 fa66 	bl	8007a80 <_Bfree>
 80075b4:	e69e      	b.n	80072f4 <_dtoa_r+0x6b4>
 80075b6:	2400      	movs	r4, #0
 80075b8:	4626      	mov	r6, r4
 80075ba:	e7e1      	b.n	8007580 <_dtoa_r+0x940>
 80075bc:	46c3      	mov	fp, r8
 80075be:	4626      	mov	r6, r4
 80075c0:	e59d      	b.n	80070fe <_dtoa_r+0x4be>
 80075c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80c8 	beq.w	800775a <_dtoa_r+0xb1a>
 80075ca:	9b08      	ldr	r3, [sp, #32]
 80075cc:	9306      	str	r3, [sp, #24]
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	dd05      	ble.n	80075de <_dtoa_r+0x99e>
 80075d2:	4631      	mov	r1, r6
 80075d4:	463a      	mov	r2, r7
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 fc6a 	bl	8007eb0 <__lshift>
 80075dc:	4606      	mov	r6, r0
 80075de:	f1b8 0f00 	cmp.w	r8, #0
 80075e2:	d05b      	beq.n	800769c <_dtoa_r+0xa5c>
 80075e4:	4628      	mov	r0, r5
 80075e6:	6871      	ldr	r1, [r6, #4]
 80075e8:	f000 fa0a 	bl	8007a00 <_Balloc>
 80075ec:	4607      	mov	r7, r0
 80075ee:	b928      	cbnz	r0, 80075fc <_dtoa_r+0x9bc>
 80075f0:	4602      	mov	r2, r0
 80075f2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80075f6:	4b81      	ldr	r3, [pc, #516]	; (80077fc <_dtoa_r+0xbbc>)
 80075f8:	f7ff bb36 	b.w	8006c68 <_dtoa_r+0x28>
 80075fc:	6932      	ldr	r2, [r6, #16]
 80075fe:	f106 010c 	add.w	r1, r6, #12
 8007602:	3202      	adds	r2, #2
 8007604:	0092      	lsls	r2, r2, #2
 8007606:	300c      	adds	r0, #12
 8007608:	f7ff fa7b 	bl	8006b02 <memcpy>
 800760c:	2201      	movs	r2, #1
 800760e:	4639      	mov	r1, r7
 8007610:	4628      	mov	r0, r5
 8007612:	f000 fc4d 	bl	8007eb0 <__lshift>
 8007616:	46b0      	mov	r8, r6
 8007618:	4606      	mov	r6, r0
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	9a03      	ldr	r2, [sp, #12]
 800761e:	3301      	adds	r3, #1
 8007620:	9308      	str	r3, [sp, #32]
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	4413      	add	r3, r2
 8007626:	930b      	str	r3, [sp, #44]	; 0x2c
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	930a      	str	r3, [sp, #40]	; 0x28
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	4621      	mov	r1, r4
 8007634:	3b01      	subs	r3, #1
 8007636:	4650      	mov	r0, sl
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	f7ff fa75 	bl	8006b28 <quorem>
 800763e:	4641      	mov	r1, r8
 8007640:	9006      	str	r0, [sp, #24]
 8007642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007646:	4650      	mov	r0, sl
 8007648:	f000 fc9e 	bl	8007f88 <__mcmp>
 800764c:	4632      	mov	r2, r6
 800764e:	9009      	str	r0, [sp, #36]	; 0x24
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 fcb4 	bl	8007fc0 <__mdiff>
 8007658:	68c2      	ldr	r2, [r0, #12]
 800765a:	4607      	mov	r7, r0
 800765c:	bb02      	cbnz	r2, 80076a0 <_dtoa_r+0xa60>
 800765e:	4601      	mov	r1, r0
 8007660:	4650      	mov	r0, sl
 8007662:	f000 fc91 	bl	8007f88 <__mcmp>
 8007666:	4602      	mov	r2, r0
 8007668:	4639      	mov	r1, r7
 800766a:	4628      	mov	r0, r5
 800766c:	920c      	str	r2, [sp, #48]	; 0x30
 800766e:	f000 fa07 	bl	8007a80 <_Bfree>
 8007672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007676:	9f08      	ldr	r7, [sp, #32]
 8007678:	ea43 0102 	orr.w	r1, r3, r2
 800767c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767e:	4319      	orrs	r1, r3
 8007680:	d110      	bne.n	80076a4 <_dtoa_r+0xa64>
 8007682:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007686:	d029      	beq.n	80076dc <_dtoa_r+0xa9c>
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd02      	ble.n	8007694 <_dtoa_r+0xa54>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	f883 9000 	strb.w	r9, [r3]
 800769a:	e777      	b.n	800758c <_dtoa_r+0x94c>
 800769c:	4630      	mov	r0, r6
 800769e:	e7ba      	b.n	8007616 <_dtoa_r+0x9d6>
 80076a0:	2201      	movs	r2, #1
 80076a2:	e7e1      	b.n	8007668 <_dtoa_r+0xa28>
 80076a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db04      	blt.n	80076b4 <_dtoa_r+0xa74>
 80076aa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076ac:	430b      	orrs	r3, r1
 80076ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076b0:	430b      	orrs	r3, r1
 80076b2:	d120      	bne.n	80076f6 <_dtoa_r+0xab6>
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	dded      	ble.n	8007694 <_dtoa_r+0xa54>
 80076b8:	4651      	mov	r1, sl
 80076ba:	2201      	movs	r2, #1
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 fbf7 	bl	8007eb0 <__lshift>
 80076c2:	4621      	mov	r1, r4
 80076c4:	4682      	mov	sl, r0
 80076c6:	f000 fc5f 	bl	8007f88 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	dc03      	bgt.n	80076d6 <_dtoa_r+0xa96>
 80076ce:	d1e1      	bne.n	8007694 <_dtoa_r+0xa54>
 80076d0:	f019 0f01 	tst.w	r9, #1
 80076d4:	d0de      	beq.n	8007694 <_dtoa_r+0xa54>
 80076d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076da:	d1d8      	bne.n	800768e <_dtoa_r+0xa4e>
 80076dc:	2339      	movs	r3, #57	; 0x39
 80076de:	9a04      	ldr	r2, [sp, #16]
 80076e0:	7013      	strb	r3, [r2, #0]
 80076e2:	463b      	mov	r3, r7
 80076e4:	461f      	mov	r7, r3
 80076e6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	2a39      	cmp	r2, #57	; 0x39
 80076ee:	d06b      	beq.n	80077c8 <_dtoa_r+0xb88>
 80076f0:	3201      	adds	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e74a      	b.n	800758c <_dtoa_r+0x94c>
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	dd07      	ble.n	800770a <_dtoa_r+0xaca>
 80076fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076fe:	d0ed      	beq.n	80076dc <_dtoa_r+0xa9c>
 8007700:	9a04      	ldr	r2, [sp, #16]
 8007702:	f109 0301 	add.w	r3, r9, #1
 8007706:	7013      	strb	r3, [r2, #0]
 8007708:	e740      	b.n	800758c <_dtoa_r+0x94c>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800770e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007712:	4293      	cmp	r3, r2
 8007714:	d042      	beq.n	800779c <_dtoa_r+0xb5c>
 8007716:	4651      	mov	r1, sl
 8007718:	2300      	movs	r3, #0
 800771a:	220a      	movs	r2, #10
 800771c:	4628      	mov	r0, r5
 800771e:	f000 f9d1 	bl	8007ac4 <__multadd>
 8007722:	45b0      	cmp	r8, r6
 8007724:	4682      	mov	sl, r0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	f04f 020a 	mov.w	r2, #10
 800772e:	4641      	mov	r1, r8
 8007730:	4628      	mov	r0, r5
 8007732:	d107      	bne.n	8007744 <_dtoa_r+0xb04>
 8007734:	f000 f9c6 	bl	8007ac4 <__multadd>
 8007738:	4680      	mov	r8, r0
 800773a:	4606      	mov	r6, r0
 800773c:	9b08      	ldr	r3, [sp, #32]
 800773e:	3301      	adds	r3, #1
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	e775      	b.n	8007630 <_dtoa_r+0x9f0>
 8007744:	f000 f9be 	bl	8007ac4 <__multadd>
 8007748:	4631      	mov	r1, r6
 800774a:	4680      	mov	r8, r0
 800774c:	2300      	movs	r3, #0
 800774e:	220a      	movs	r2, #10
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f9b7 	bl	8007ac4 <__multadd>
 8007756:	4606      	mov	r6, r0
 8007758:	e7f0      	b.n	800773c <_dtoa_r+0xafc>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	9306      	str	r3, [sp, #24]
 800775e:	9f03      	ldr	r7, [sp, #12]
 8007760:	4621      	mov	r1, r4
 8007762:	4650      	mov	r0, sl
 8007764:	f7ff f9e0 	bl	8006b28 <quorem>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800776e:	f807 9b01 	strb.w	r9, [r7], #1
 8007772:	1afa      	subs	r2, r7, r3
 8007774:	9b06      	ldr	r3, [sp, #24]
 8007776:	4293      	cmp	r3, r2
 8007778:	dd07      	ble.n	800778a <_dtoa_r+0xb4a>
 800777a:	4651      	mov	r1, sl
 800777c:	2300      	movs	r3, #0
 800777e:	220a      	movs	r2, #10
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f99f 	bl	8007ac4 <__multadd>
 8007786:	4682      	mov	sl, r0
 8007788:	e7ea      	b.n	8007760 <_dtoa_r+0xb20>
 800778a:	9b06      	ldr	r3, [sp, #24]
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	bfcc      	ite	gt
 8007794:	461f      	movgt	r7, r3
 8007796:	2701      	movle	r7, #1
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	441f      	add	r7, r3
 800779c:	4651      	mov	r1, sl
 800779e:	2201      	movs	r2, #1
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 fb85 	bl	8007eb0 <__lshift>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4682      	mov	sl, r0
 80077aa:	f000 fbed 	bl	8007f88 <__mcmp>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	dc97      	bgt.n	80076e2 <_dtoa_r+0xaa2>
 80077b2:	d102      	bne.n	80077ba <_dtoa_r+0xb7a>
 80077b4:	f019 0f01 	tst.w	r9, #1
 80077b8:	d193      	bne.n	80076e2 <_dtoa_r+0xaa2>
 80077ba:	463b      	mov	r3, r7
 80077bc:	461f      	mov	r7, r3
 80077be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c2:	2a30      	cmp	r2, #48	; 0x30
 80077c4:	d0fa      	beq.n	80077bc <_dtoa_r+0xb7c>
 80077c6:	e6e1      	b.n	800758c <_dtoa_r+0x94c>
 80077c8:	9a03      	ldr	r2, [sp, #12]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d18a      	bne.n	80076e4 <_dtoa_r+0xaa4>
 80077ce:	2331      	movs	r3, #49	; 0x31
 80077d0:	f10b 0b01 	add.w	fp, fp, #1
 80077d4:	e797      	b.n	8007706 <_dtoa_r+0xac6>
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <_dtoa_r+0xbc0>)
 80077d8:	f7ff ba9f 	b.w	8006d1a <_dtoa_r+0xda>
 80077dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f47f aa77 	bne.w	8006cd2 <_dtoa_r+0x92>
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <_dtoa_r+0xbc4>)
 80077e6:	f7ff ba98 	b.w	8006d1a <_dtoa_r+0xda>
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dcb6      	bgt.n	800775e <_dtoa_r+0xb1e>
 80077f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	f73f aeb5 	bgt.w	8007562 <_dtoa_r+0x922>
 80077f8:	e7b1      	b.n	800775e <_dtoa_r+0xb1e>
 80077fa:	bf00      	nop
 80077fc:	0800a479 	.word	0x0800a479
 8007800:	0800a3d4 	.word	0x0800a3d4
 8007804:	0800a3fd 	.word	0x0800a3fd

08007808 <_free_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	d040      	beq.n	8007892 <_free_r+0x8a>
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	18e4      	addlt	r4, r4, r3
 800781c:	f000 f8e4 	bl	80079e8 <__malloc_lock>
 8007820:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <_free_r+0x8c>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x2c>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	4628      	mov	r0, r5
 800782c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007830:	f000 b8e0 	b.w	80079f4 <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x42>
 8007838:	6820      	ldr	r0, [r4, #0]
 800783a:	1821      	adds	r1, r4, r0
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1809      	addeq	r1, r1, r0
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x1e>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x4c>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x42>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1850      	adds	r0, r2, r1
 8007858:	42a0      	cmp	r0, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x6c>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4401      	add	r1, r0
 8007860:	1850      	adds	r0, r2, r1
 8007862:	4283      	cmp	r3, r0
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x22>
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4408      	add	r0, r1
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	6053      	str	r3, [r2, #4]
 8007872:	e7da      	b.n	800782a <_free_r+0x22>
 8007874:	d902      	bls.n	800787c <_free_r+0x74>
 8007876:	230c      	movs	r3, #12
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x22>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf01      	itttt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	1809      	addeq	r1, r1, r0
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6054      	str	r4, [r2, #4]
 8007890:	e7cb      	b.n	800782a <_free_r+0x22>
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	20003554 	.word	0x20003554

08007898 <malloc>:
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <malloc+0xc>)
 800789a:	4601      	mov	r1, r0
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f000 b823 	b.w	80078e8 <_malloc_r>
 80078a2:	bf00      	nop
 80078a4:	20000070 	.word	0x20000070

080078a8 <sbrk_aligned>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4e0e      	ldr	r6, [pc, #56]	; (80078e4 <sbrk_aligned+0x3c>)
 80078ac:	460c      	mov	r4, r1
 80078ae:	6831      	ldr	r1, [r6, #0]
 80078b0:	4605      	mov	r5, r0
 80078b2:	b911      	cbnz	r1, 80078ba <sbrk_aligned+0x12>
 80078b4:	f001 fe0c 	bl	80094d0 <_sbrk_r>
 80078b8:	6030      	str	r0, [r6, #0]
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f001 fe07 	bl	80094d0 <_sbrk_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	d00a      	beq.n	80078dc <sbrk_aligned+0x34>
 80078c6:	1cc4      	adds	r4, r0, #3
 80078c8:	f024 0403 	bic.w	r4, r4, #3
 80078cc:	42a0      	cmp	r0, r4
 80078ce:	d007      	beq.n	80078e0 <sbrk_aligned+0x38>
 80078d0:	1a21      	subs	r1, r4, r0
 80078d2:	4628      	mov	r0, r5
 80078d4:	f001 fdfc 	bl	80094d0 <_sbrk_r>
 80078d8:	3001      	adds	r0, #1
 80078da:	d101      	bne.n	80078e0 <sbrk_aligned+0x38>
 80078dc:	f04f 34ff 	mov.w	r4, #4294967295
 80078e0:	4620      	mov	r0, r4
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	20003558 	.word	0x20003558

080078e8 <_malloc_r>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	1ccd      	adds	r5, r1, #3
 80078ee:	f025 0503 	bic.w	r5, r5, #3
 80078f2:	3508      	adds	r5, #8
 80078f4:	2d0c      	cmp	r5, #12
 80078f6:	bf38      	it	cc
 80078f8:	250c      	movcc	r5, #12
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	4607      	mov	r7, r0
 80078fe:	db01      	blt.n	8007904 <_malloc_r+0x1c>
 8007900:	42a9      	cmp	r1, r5
 8007902:	d905      	bls.n	8007910 <_malloc_r+0x28>
 8007904:	230c      	movs	r3, #12
 8007906:	2600      	movs	r6, #0
 8007908:	603b      	str	r3, [r7, #0]
 800790a:	4630      	mov	r0, r6
 800790c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007910:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079e4 <_malloc_r+0xfc>
 8007914:	f000 f868 	bl	80079e8 <__malloc_lock>
 8007918:	f8d8 3000 	ldr.w	r3, [r8]
 800791c:	461c      	mov	r4, r3
 800791e:	bb5c      	cbnz	r4, 8007978 <_malloc_r+0x90>
 8007920:	4629      	mov	r1, r5
 8007922:	4638      	mov	r0, r7
 8007924:	f7ff ffc0 	bl	80078a8 <sbrk_aligned>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	4604      	mov	r4, r0
 800792c:	d155      	bne.n	80079da <_malloc_r+0xf2>
 800792e:	f8d8 4000 	ldr.w	r4, [r8]
 8007932:	4626      	mov	r6, r4
 8007934:	2e00      	cmp	r6, #0
 8007936:	d145      	bne.n	80079c4 <_malloc_r+0xdc>
 8007938:	2c00      	cmp	r4, #0
 800793a:	d048      	beq.n	80079ce <_malloc_r+0xe6>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	4631      	mov	r1, r6
 8007940:	4638      	mov	r0, r7
 8007942:	eb04 0903 	add.w	r9, r4, r3
 8007946:	f001 fdc3 	bl	80094d0 <_sbrk_r>
 800794a:	4581      	cmp	r9, r0
 800794c:	d13f      	bne.n	80079ce <_malloc_r+0xe6>
 800794e:	6821      	ldr	r1, [r4, #0]
 8007950:	4638      	mov	r0, r7
 8007952:	1a6d      	subs	r5, r5, r1
 8007954:	4629      	mov	r1, r5
 8007956:	f7ff ffa7 	bl	80078a8 <sbrk_aligned>
 800795a:	3001      	adds	r0, #1
 800795c:	d037      	beq.n	80079ce <_malloc_r+0xe6>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	442b      	add	r3, r5
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	f8d8 3000 	ldr.w	r3, [r8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d038      	beq.n	80079de <_malloc_r+0xf6>
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	42a2      	cmp	r2, r4
 8007970:	d12b      	bne.n	80079ca <_malloc_r+0xe2>
 8007972:	2200      	movs	r2, #0
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	e00f      	b.n	8007998 <_malloc_r+0xb0>
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	1b52      	subs	r2, r2, r5
 800797c:	d41f      	bmi.n	80079be <_malloc_r+0xd6>
 800797e:	2a0b      	cmp	r2, #11
 8007980:	d917      	bls.n	80079b2 <_malloc_r+0xca>
 8007982:	1961      	adds	r1, r4, r5
 8007984:	42a3      	cmp	r3, r4
 8007986:	6025      	str	r5, [r4, #0]
 8007988:	bf18      	it	ne
 800798a:	6059      	strne	r1, [r3, #4]
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	bf08      	it	eq
 8007990:	f8c8 1000 	streq.w	r1, [r8]
 8007994:	5162      	str	r2, [r4, r5]
 8007996:	604b      	str	r3, [r1, #4]
 8007998:	4638      	mov	r0, r7
 800799a:	f104 060b 	add.w	r6, r4, #11
 800799e:	f000 f829 	bl	80079f4 <__malloc_unlock>
 80079a2:	f026 0607 	bic.w	r6, r6, #7
 80079a6:	1d23      	adds	r3, r4, #4
 80079a8:	1af2      	subs	r2, r6, r3
 80079aa:	d0ae      	beq.n	800790a <_malloc_r+0x22>
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	50a3      	str	r3, [r4, r2]
 80079b0:	e7ab      	b.n	800790a <_malloc_r+0x22>
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	6862      	ldr	r2, [r4, #4]
 80079b6:	d1dd      	bne.n	8007974 <_malloc_r+0x8c>
 80079b8:	f8c8 2000 	str.w	r2, [r8]
 80079bc:	e7ec      	b.n	8007998 <_malloc_r+0xb0>
 80079be:	4623      	mov	r3, r4
 80079c0:	6864      	ldr	r4, [r4, #4]
 80079c2:	e7ac      	b.n	800791e <_malloc_r+0x36>
 80079c4:	4634      	mov	r4, r6
 80079c6:	6876      	ldr	r6, [r6, #4]
 80079c8:	e7b4      	b.n	8007934 <_malloc_r+0x4c>
 80079ca:	4613      	mov	r3, r2
 80079cc:	e7cc      	b.n	8007968 <_malloc_r+0x80>
 80079ce:	230c      	movs	r3, #12
 80079d0:	4638      	mov	r0, r7
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	f000 f80e 	bl	80079f4 <__malloc_unlock>
 80079d8:	e797      	b.n	800790a <_malloc_r+0x22>
 80079da:	6025      	str	r5, [r4, #0]
 80079dc:	e7dc      	b.n	8007998 <_malloc_r+0xb0>
 80079de:	605b      	str	r3, [r3, #4]
 80079e0:	deff      	udf	#255	; 0xff
 80079e2:	bf00      	nop
 80079e4:	20003554 	.word	0x20003554

080079e8 <__malloc_lock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__malloc_lock+0x8>)
 80079ea:	f7ff b87a 	b.w	8006ae2 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	20003550 	.word	0x20003550

080079f4 <__malloc_unlock>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__malloc_unlock+0x8>)
 80079f6:	f7ff b875 	b.w	8006ae4 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	20003550 	.word	0x20003550

08007a00 <_Balloc>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	69c6      	ldr	r6, [r0, #28]
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	b976      	cbnz	r6, 8007a28 <_Balloc+0x28>
 8007a0a:	2010      	movs	r0, #16
 8007a0c:	f7ff ff44 	bl	8007898 <malloc>
 8007a10:	4602      	mov	r2, r0
 8007a12:	61e0      	str	r0, [r4, #28]
 8007a14:	b920      	cbnz	r0, 8007a20 <_Balloc+0x20>
 8007a16:	216b      	movs	r1, #107	; 0x6b
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <_Balloc+0x78>)
 8007a1a:	4818      	ldr	r0, [pc, #96]	; (8007a7c <_Balloc+0x7c>)
 8007a1c:	f001 fd6e 	bl	80094fc <__assert_func>
 8007a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a24:	6006      	str	r6, [r0, #0]
 8007a26:	60c6      	str	r6, [r0, #12]
 8007a28:	69e6      	ldr	r6, [r4, #28]
 8007a2a:	68f3      	ldr	r3, [r6, #12]
 8007a2c:	b183      	cbz	r3, 8007a50 <_Balloc+0x50>
 8007a2e:	69e3      	ldr	r3, [r4, #28]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a36:	b9b8      	cbnz	r0, 8007a68 <_Balloc+0x68>
 8007a38:	2101      	movs	r1, #1
 8007a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a3e:	1d72      	adds	r2, r6, #5
 8007a40:	4620      	mov	r0, r4
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	f001 fd78 	bl	8009538 <_calloc_r>
 8007a48:	b160      	cbz	r0, 8007a64 <_Balloc+0x64>
 8007a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a4e:	e00e      	b.n	8007a6e <_Balloc+0x6e>
 8007a50:	2221      	movs	r2, #33	; 0x21
 8007a52:	2104      	movs	r1, #4
 8007a54:	4620      	mov	r0, r4
 8007a56:	f001 fd6f 	bl	8009538 <_calloc_r>
 8007a5a:	69e3      	ldr	r3, [r4, #28]
 8007a5c:	60f0      	str	r0, [r6, #12]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e4      	bne.n	8007a2e <_Balloc+0x2e>
 8007a64:	2000      	movs	r0, #0
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	6802      	ldr	r2, [r0, #0]
 8007a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a74:	e7f7      	b.n	8007a66 <_Balloc+0x66>
 8007a76:	bf00      	nop
 8007a78:	0800a40a 	.word	0x0800a40a
 8007a7c:	0800a48a 	.word	0x0800a48a

08007a80 <_Bfree>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	69c6      	ldr	r6, [r0, #28]
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	b976      	cbnz	r6, 8007aa8 <_Bfree+0x28>
 8007a8a:	2010      	movs	r0, #16
 8007a8c:	f7ff ff04 	bl	8007898 <malloc>
 8007a90:	4602      	mov	r2, r0
 8007a92:	61e8      	str	r0, [r5, #28]
 8007a94:	b920      	cbnz	r0, 8007aa0 <_Bfree+0x20>
 8007a96:	218f      	movs	r1, #143	; 0x8f
 8007a98:	4b08      	ldr	r3, [pc, #32]	; (8007abc <_Bfree+0x3c>)
 8007a9a:	4809      	ldr	r0, [pc, #36]	; (8007ac0 <_Bfree+0x40>)
 8007a9c:	f001 fd2e 	bl	80094fc <__assert_func>
 8007aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aa4:	6006      	str	r6, [r0, #0]
 8007aa6:	60c6      	str	r6, [r0, #12]
 8007aa8:	b13c      	cbz	r4, 8007aba <_Bfree+0x3a>
 8007aaa:	69eb      	ldr	r3, [r5, #28]
 8007aac:	6862      	ldr	r2, [r4, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ab4:	6021      	str	r1, [r4, #0]
 8007ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	0800a40a 	.word	0x0800a40a
 8007ac0:	0800a48a 	.word	0x0800a48a

08007ac4 <__multadd>:
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	4607      	mov	r7, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	461e      	mov	r6, r3
 8007ace:	2000      	movs	r0, #0
 8007ad0:	690d      	ldr	r5, [r1, #16]
 8007ad2:	f101 0c14 	add.w	ip, r1, #20
 8007ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8007ada:	3001      	adds	r0, #1
 8007adc:	b299      	uxth	r1, r3
 8007ade:	fb02 6101 	mla	r1, r2, r1, r6
 8007ae2:	0c1e      	lsrs	r6, r3, #16
 8007ae4:	0c0b      	lsrs	r3, r1, #16
 8007ae6:	fb02 3306 	mla	r3, r2, r6, r3
 8007aea:	b289      	uxth	r1, r1
 8007aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007af0:	4285      	cmp	r5, r0
 8007af2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007af6:	f84c 1b04 	str.w	r1, [ip], #4
 8007afa:	dcec      	bgt.n	8007ad6 <__multadd+0x12>
 8007afc:	b30e      	cbz	r6, 8007b42 <__multadd+0x7e>
 8007afe:	68a3      	ldr	r3, [r4, #8]
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	dc19      	bgt.n	8007b38 <__multadd+0x74>
 8007b04:	6861      	ldr	r1, [r4, #4]
 8007b06:	4638      	mov	r0, r7
 8007b08:	3101      	adds	r1, #1
 8007b0a:	f7ff ff79 	bl	8007a00 <_Balloc>
 8007b0e:	4680      	mov	r8, r0
 8007b10:	b928      	cbnz	r0, 8007b1e <__multadd+0x5a>
 8007b12:	4602      	mov	r2, r0
 8007b14:	21ba      	movs	r1, #186	; 0xba
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <__multadd+0x84>)
 8007b18:	480c      	ldr	r0, [pc, #48]	; (8007b4c <__multadd+0x88>)
 8007b1a:	f001 fcef 	bl	80094fc <__assert_func>
 8007b1e:	6922      	ldr	r2, [r4, #16]
 8007b20:	f104 010c 	add.w	r1, r4, #12
 8007b24:	3202      	adds	r2, #2
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	300c      	adds	r0, #12
 8007b2a:	f7fe ffea 	bl	8006b02 <memcpy>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ffa5 	bl	8007a80 <_Bfree>
 8007b36:	4644      	mov	r4, r8
 8007b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b3c:	3501      	adds	r5, #1
 8007b3e:	615e      	str	r6, [r3, #20]
 8007b40:	6125      	str	r5, [r4, #16]
 8007b42:	4620      	mov	r0, r4
 8007b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b48:	0800a479 	.word	0x0800a479
 8007b4c:	0800a48a 	.word	0x0800a48a

08007b50 <__s2b>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4615      	mov	r5, r2
 8007b56:	2209      	movs	r2, #9
 8007b58:	461f      	mov	r7, r3
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b62:	4606      	mov	r6, r0
 8007b64:	2201      	movs	r2, #1
 8007b66:	2100      	movs	r1, #0
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	db09      	blt.n	8007b80 <__s2b+0x30>
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ff47 	bl	8007a00 <_Balloc>
 8007b72:	b940      	cbnz	r0, 8007b86 <__s2b+0x36>
 8007b74:	4602      	mov	r2, r0
 8007b76:	21d3      	movs	r1, #211	; 0xd3
 8007b78:	4b18      	ldr	r3, [pc, #96]	; (8007bdc <__s2b+0x8c>)
 8007b7a:	4819      	ldr	r0, [pc, #100]	; (8007be0 <__s2b+0x90>)
 8007b7c:	f001 fcbe 	bl	80094fc <__assert_func>
 8007b80:	0052      	lsls	r2, r2, #1
 8007b82:	3101      	adds	r1, #1
 8007b84:	e7f0      	b.n	8007b68 <__s2b+0x18>
 8007b86:	9b08      	ldr	r3, [sp, #32]
 8007b88:	2d09      	cmp	r5, #9
 8007b8a:	6143      	str	r3, [r0, #20]
 8007b8c:	f04f 0301 	mov.w	r3, #1
 8007b90:	6103      	str	r3, [r0, #16]
 8007b92:	dd16      	ble.n	8007bc2 <__s2b+0x72>
 8007b94:	f104 0909 	add.w	r9, r4, #9
 8007b98:	46c8      	mov	r8, r9
 8007b9a:	442c      	add	r4, r5
 8007b9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	3b30      	subs	r3, #48	; 0x30
 8007ba8:	f7ff ff8c 	bl	8007ac4 <__multadd>
 8007bac:	45a0      	cmp	r8, r4
 8007bae:	d1f5      	bne.n	8007b9c <__s2b+0x4c>
 8007bb0:	f1a5 0408 	sub.w	r4, r5, #8
 8007bb4:	444c      	add	r4, r9
 8007bb6:	1b2d      	subs	r5, r5, r4
 8007bb8:	1963      	adds	r3, r4, r5
 8007bba:	42bb      	cmp	r3, r7
 8007bbc:	db04      	blt.n	8007bc8 <__s2b+0x78>
 8007bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	2509      	movs	r5, #9
 8007bc4:	340a      	adds	r4, #10
 8007bc6:	e7f6      	b.n	8007bb6 <__s2b+0x66>
 8007bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bcc:	4601      	mov	r1, r0
 8007bce:	220a      	movs	r2, #10
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	3b30      	subs	r3, #48	; 0x30
 8007bd4:	f7ff ff76 	bl	8007ac4 <__multadd>
 8007bd8:	e7ee      	b.n	8007bb8 <__s2b+0x68>
 8007bda:	bf00      	nop
 8007bdc:	0800a479 	.word	0x0800a479
 8007be0:	0800a48a 	.word	0x0800a48a

08007be4 <__hi0bits>:
 8007be4:	0c02      	lsrs	r2, r0, #16
 8007be6:	0412      	lsls	r2, r2, #16
 8007be8:	4603      	mov	r3, r0
 8007bea:	b9ca      	cbnz	r2, 8007c20 <__hi0bits+0x3c>
 8007bec:	0403      	lsls	r3, r0, #16
 8007bee:	2010      	movs	r0, #16
 8007bf0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bf4:	bf04      	itt	eq
 8007bf6:	021b      	lsleq	r3, r3, #8
 8007bf8:	3008      	addeq	r0, #8
 8007bfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bfe:	bf04      	itt	eq
 8007c00:	011b      	lsleq	r3, r3, #4
 8007c02:	3004      	addeq	r0, #4
 8007c04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c08:	bf04      	itt	eq
 8007c0a:	009b      	lsleq	r3, r3, #2
 8007c0c:	3002      	addeq	r0, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db05      	blt.n	8007c1e <__hi0bits+0x3a>
 8007c12:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c16:	f100 0001 	add.w	r0, r0, #1
 8007c1a:	bf08      	it	eq
 8007c1c:	2020      	moveq	r0, #32
 8007c1e:	4770      	bx	lr
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7e5      	b.n	8007bf0 <__hi0bits+0xc>

08007c24 <__lo0bits>:
 8007c24:	6803      	ldr	r3, [r0, #0]
 8007c26:	4602      	mov	r2, r0
 8007c28:	f013 0007 	ands.w	r0, r3, #7
 8007c2c:	d00b      	beq.n	8007c46 <__lo0bits+0x22>
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	d421      	bmi.n	8007c76 <__lo0bits+0x52>
 8007c32:	0798      	lsls	r0, r3, #30
 8007c34:	bf49      	itett	mi
 8007c36:	085b      	lsrmi	r3, r3, #1
 8007c38:	089b      	lsrpl	r3, r3, #2
 8007c3a:	2001      	movmi	r0, #1
 8007c3c:	6013      	strmi	r3, [r2, #0]
 8007c3e:	bf5c      	itt	pl
 8007c40:	2002      	movpl	r0, #2
 8007c42:	6013      	strpl	r3, [r2, #0]
 8007c44:	4770      	bx	lr
 8007c46:	b299      	uxth	r1, r3
 8007c48:	b909      	cbnz	r1, 8007c4e <__lo0bits+0x2a>
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	0c1b      	lsrs	r3, r3, #16
 8007c4e:	b2d9      	uxtb	r1, r3
 8007c50:	b909      	cbnz	r1, 8007c56 <__lo0bits+0x32>
 8007c52:	3008      	adds	r0, #8
 8007c54:	0a1b      	lsrs	r3, r3, #8
 8007c56:	0719      	lsls	r1, r3, #28
 8007c58:	bf04      	itt	eq
 8007c5a:	091b      	lsreq	r3, r3, #4
 8007c5c:	3004      	addeq	r0, #4
 8007c5e:	0799      	lsls	r1, r3, #30
 8007c60:	bf04      	itt	eq
 8007c62:	089b      	lsreq	r3, r3, #2
 8007c64:	3002      	addeq	r0, #2
 8007c66:	07d9      	lsls	r1, r3, #31
 8007c68:	d403      	bmi.n	8007c72 <__lo0bits+0x4e>
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	f100 0001 	add.w	r0, r0, #1
 8007c70:	d003      	beq.n	8007c7a <__lo0bits+0x56>
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	4770      	bx	lr
 8007c76:	2000      	movs	r0, #0
 8007c78:	4770      	bx	lr
 8007c7a:	2020      	movs	r0, #32
 8007c7c:	4770      	bx	lr
	...

08007c80 <__i2b>:
 8007c80:	b510      	push	{r4, lr}
 8007c82:	460c      	mov	r4, r1
 8007c84:	2101      	movs	r1, #1
 8007c86:	f7ff febb 	bl	8007a00 <_Balloc>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	b928      	cbnz	r0, 8007c9a <__i2b+0x1a>
 8007c8e:	f240 1145 	movw	r1, #325	; 0x145
 8007c92:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__i2b+0x24>)
 8007c94:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <__i2b+0x28>)
 8007c96:	f001 fc31 	bl	80094fc <__assert_func>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	6144      	str	r4, [r0, #20]
 8007c9e:	6103      	str	r3, [r0, #16]
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	bf00      	nop
 8007ca4:	0800a479 	.word	0x0800a479
 8007ca8:	0800a48a 	.word	0x0800a48a

08007cac <__multiply>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	4691      	mov	r9, r2
 8007cb2:	690a      	ldr	r2, [r1, #16]
 8007cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cb8:	460c      	mov	r4, r1
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	bfbe      	ittt	lt
 8007cbe:	460b      	movlt	r3, r1
 8007cc0:	464c      	movlt	r4, r9
 8007cc2:	4699      	movlt	r9, r3
 8007cc4:	6927      	ldr	r7, [r4, #16]
 8007cc6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	6861      	ldr	r1, [r4, #4]
 8007cce:	eb07 060a 	add.w	r6, r7, sl
 8007cd2:	42b3      	cmp	r3, r6
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	bfb8      	it	lt
 8007cd8:	3101      	addlt	r1, #1
 8007cda:	f7ff fe91 	bl	8007a00 <_Balloc>
 8007cde:	b930      	cbnz	r0, 8007cee <__multiply+0x42>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ce6:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <__multiply+0x148>)
 8007ce8:	4843      	ldr	r0, [pc, #268]	; (8007df8 <__multiply+0x14c>)
 8007cea:	f001 fc07 	bl	80094fc <__assert_func>
 8007cee:	f100 0514 	add.w	r5, r0, #20
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cfa:	4543      	cmp	r3, r8
 8007cfc:	d321      	bcc.n	8007d42 <__multiply+0x96>
 8007cfe:	f104 0314 	add.w	r3, r4, #20
 8007d02:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d06:	f109 0314 	add.w	r3, r9, #20
 8007d0a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d0e:	9202      	str	r2, [sp, #8]
 8007d10:	1b3a      	subs	r2, r7, r4
 8007d12:	3a15      	subs	r2, #21
 8007d14:	f022 0203 	bic.w	r2, r2, #3
 8007d18:	3204      	adds	r2, #4
 8007d1a:	f104 0115 	add.w	r1, r4, #21
 8007d1e:	428f      	cmp	r7, r1
 8007d20:	bf38      	it	cc
 8007d22:	2204      	movcc	r2, #4
 8007d24:	9201      	str	r2, [sp, #4]
 8007d26:	9a02      	ldr	r2, [sp, #8]
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d80c      	bhi.n	8007d48 <__multiply+0x9c>
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	dd03      	ble.n	8007d3a <__multiply+0x8e>
 8007d32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d05a      	beq.n	8007df0 <__multiply+0x144>
 8007d3a:	6106      	str	r6, [r0, #16]
 8007d3c:	b005      	add	sp, #20
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	f843 2b04 	str.w	r2, [r3], #4
 8007d46:	e7d8      	b.n	8007cfa <__multiply+0x4e>
 8007d48:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d4c:	f1ba 0f00 	cmp.w	sl, #0
 8007d50:	d023      	beq.n	8007d9a <__multiply+0xee>
 8007d52:	46a9      	mov	r9, r5
 8007d54:	f04f 0c00 	mov.w	ip, #0
 8007d58:	f104 0e14 	add.w	lr, r4, #20
 8007d5c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d60:	f8d9 1000 	ldr.w	r1, [r9]
 8007d64:	fa1f fb82 	uxth.w	fp, r2
 8007d68:	b289      	uxth	r1, r1
 8007d6a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d6e:	4461      	add	r1, ip
 8007d70:	f8d9 c000 	ldr.w	ip, [r9]
 8007d74:	0c12      	lsrs	r2, r2, #16
 8007d76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d7a:	fb0a c202 	mla	r2, sl, r2, ip
 8007d7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d82:	b289      	uxth	r1, r1
 8007d84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d88:	4577      	cmp	r7, lr
 8007d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d8e:	f849 1b04 	str.w	r1, [r9], #4
 8007d92:	d8e3      	bhi.n	8007d5c <__multiply+0xb0>
 8007d94:	9a01      	ldr	r2, [sp, #4]
 8007d96:	f845 c002 	str.w	ip, [r5, r2]
 8007d9a:	9a03      	ldr	r2, [sp, #12]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007da2:	f1b9 0f00 	cmp.w	r9, #0
 8007da6:	d021      	beq.n	8007dec <__multiply+0x140>
 8007da8:	46ae      	mov	lr, r5
 8007daa:	f04f 0a00 	mov.w	sl, #0
 8007dae:	6829      	ldr	r1, [r5, #0]
 8007db0:	f104 0c14 	add.w	ip, r4, #20
 8007db4:	f8bc b000 	ldrh.w	fp, [ip]
 8007db8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007dbc:	b289      	uxth	r1, r1
 8007dbe:	fb09 220b 	mla	r2, r9, fp, r2
 8007dc2:	4452      	add	r2, sl
 8007dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dc8:	f84e 1b04 	str.w	r1, [lr], #4
 8007dcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007dd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dd4:	f8be 1000 	ldrh.w	r1, [lr]
 8007dd8:	4567      	cmp	r7, ip
 8007dda:	fb09 110a 	mla	r1, r9, sl, r1
 8007dde:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007de2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007de6:	d8e5      	bhi.n	8007db4 <__multiply+0x108>
 8007de8:	9a01      	ldr	r2, [sp, #4]
 8007dea:	50a9      	str	r1, [r5, r2]
 8007dec:	3504      	adds	r5, #4
 8007dee:	e79a      	b.n	8007d26 <__multiply+0x7a>
 8007df0:	3e01      	subs	r6, #1
 8007df2:	e79c      	b.n	8007d2e <__multiply+0x82>
 8007df4:	0800a479 	.word	0x0800a479
 8007df8:	0800a48a 	.word	0x0800a48a

08007dfc <__pow5mult>:
 8007dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e00:	4615      	mov	r5, r2
 8007e02:	f012 0203 	ands.w	r2, r2, #3
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	d007      	beq.n	8007e1c <__pow5mult+0x20>
 8007e0c:	4c25      	ldr	r4, [pc, #148]	; (8007ea4 <__pow5mult+0xa8>)
 8007e0e:	3a01      	subs	r2, #1
 8007e10:	2300      	movs	r3, #0
 8007e12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e16:	f7ff fe55 	bl	8007ac4 <__multadd>
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	10ad      	asrs	r5, r5, #2
 8007e1e:	d03d      	beq.n	8007e9c <__pow5mult+0xa0>
 8007e20:	69f4      	ldr	r4, [r6, #28]
 8007e22:	b97c      	cbnz	r4, 8007e44 <__pow5mult+0x48>
 8007e24:	2010      	movs	r0, #16
 8007e26:	f7ff fd37 	bl	8007898 <malloc>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	61f0      	str	r0, [r6, #28]
 8007e2e:	b928      	cbnz	r0, 8007e3c <__pow5mult+0x40>
 8007e30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e34:	4b1c      	ldr	r3, [pc, #112]	; (8007ea8 <__pow5mult+0xac>)
 8007e36:	481d      	ldr	r0, [pc, #116]	; (8007eac <__pow5mult+0xb0>)
 8007e38:	f001 fb60 	bl	80094fc <__assert_func>
 8007e3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e40:	6004      	str	r4, [r0, #0]
 8007e42:	60c4      	str	r4, [r0, #12]
 8007e44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e4c:	b94c      	cbnz	r4, 8007e62 <__pow5mult+0x66>
 8007e4e:	f240 2171 	movw	r1, #625	; 0x271
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7ff ff14 	bl	8007c80 <__i2b>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e60:	6003      	str	r3, [r0, #0]
 8007e62:	f04f 0900 	mov.w	r9, #0
 8007e66:	07eb      	lsls	r3, r5, #31
 8007e68:	d50a      	bpl.n	8007e80 <__pow5mult+0x84>
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff1c 	bl	8007cac <__multiply>
 8007e74:	4680      	mov	r8, r0
 8007e76:	4639      	mov	r1, r7
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff fe01 	bl	8007a80 <_Bfree>
 8007e7e:	4647      	mov	r7, r8
 8007e80:	106d      	asrs	r5, r5, #1
 8007e82:	d00b      	beq.n	8007e9c <__pow5mult+0xa0>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	b938      	cbnz	r0, 8007e98 <__pow5mult+0x9c>
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff ff0d 	bl	8007cac <__multiply>
 8007e92:	6020      	str	r0, [r4, #0]
 8007e94:	f8c0 9000 	str.w	r9, [r0]
 8007e98:	4604      	mov	r4, r0
 8007e9a:	e7e4      	b.n	8007e66 <__pow5mult+0x6a>
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800a5d8 	.word	0x0800a5d8
 8007ea8:	0800a40a 	.word	0x0800a40a
 8007eac:	0800a48a 	.word	0x0800a48a

08007eb0 <__lshift>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	4691      	mov	r9, r2
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6849      	ldr	r1, [r1, #4]
 8007ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec8:	f108 0601 	add.w	r6, r8, #1
 8007ecc:	42b3      	cmp	r3, r6
 8007ece:	db0b      	blt.n	8007ee8 <__lshift+0x38>
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f7ff fd95 	bl	8007a00 <_Balloc>
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	b948      	cbnz	r0, 8007eee <__lshift+0x3e>
 8007eda:	4602      	mov	r2, r0
 8007edc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007ee0:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <__lshift+0xd0>)
 8007ee2:	4828      	ldr	r0, [pc, #160]	; (8007f84 <__lshift+0xd4>)
 8007ee4:	f001 fb0a 	bl	80094fc <__assert_func>
 8007ee8:	3101      	adds	r1, #1
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	e7ee      	b.n	8007ecc <__lshift+0x1c>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f100 0114 	add.w	r1, r0, #20
 8007ef4:	f100 0210 	add.w	r2, r0, #16
 8007ef8:	4618      	mov	r0, r3
 8007efa:	4553      	cmp	r3, sl
 8007efc:	db33      	blt.n	8007f66 <__lshift+0xb6>
 8007efe:	6920      	ldr	r0, [r4, #16]
 8007f00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f04:	f104 0314 	add.w	r3, r4, #20
 8007f08:	f019 091f 	ands.w	r9, r9, #31
 8007f0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f14:	d02b      	beq.n	8007f6e <__lshift+0xbe>
 8007f16:	468a      	mov	sl, r1
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	fa00 f009 	lsl.w	r0, r0, r9
 8007f24:	4310      	orrs	r0, r2
 8007f26:	f84a 0b04 	str.w	r0, [sl], #4
 8007f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f2e:	459c      	cmp	ip, r3
 8007f30:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f34:	d8f3      	bhi.n	8007f1e <__lshift+0x6e>
 8007f36:	ebac 0304 	sub.w	r3, ip, r4
 8007f3a:	3b15      	subs	r3, #21
 8007f3c:	f023 0303 	bic.w	r3, r3, #3
 8007f40:	3304      	adds	r3, #4
 8007f42:	f104 0015 	add.w	r0, r4, #21
 8007f46:	4584      	cmp	ip, r0
 8007f48:	bf38      	it	cc
 8007f4a:	2304      	movcc	r3, #4
 8007f4c:	50ca      	str	r2, [r1, r3]
 8007f4e:	b10a      	cbz	r2, 8007f54 <__lshift+0xa4>
 8007f50:	f108 0602 	add.w	r6, r8, #2
 8007f54:	3e01      	subs	r6, #1
 8007f56:	4638      	mov	r0, r7
 8007f58:	4621      	mov	r1, r4
 8007f5a:	612e      	str	r6, [r5, #16]
 8007f5c:	f7ff fd90 	bl	8007a80 <_Bfree>
 8007f60:	4628      	mov	r0, r5
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	e7c5      	b.n	8007efa <__lshift+0x4a>
 8007f6e:	3904      	subs	r1, #4
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	459c      	cmp	ip, r3
 8007f76:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f7a:	d8f9      	bhi.n	8007f70 <__lshift+0xc0>
 8007f7c:	e7ea      	b.n	8007f54 <__lshift+0xa4>
 8007f7e:	bf00      	nop
 8007f80:	0800a479 	.word	0x0800a479
 8007f84:	0800a48a 	.word	0x0800a48a

08007f88 <__mcmp>:
 8007f88:	4603      	mov	r3, r0
 8007f8a:	690a      	ldr	r2, [r1, #16]
 8007f8c:	6900      	ldr	r0, [r0, #16]
 8007f8e:	b530      	push	{r4, r5, lr}
 8007f90:	1a80      	subs	r0, r0, r2
 8007f92:	d10d      	bne.n	8007fb0 <__mcmp+0x28>
 8007f94:	3314      	adds	r3, #20
 8007f96:	3114      	adds	r1, #20
 8007f98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fa8:	4295      	cmp	r5, r2
 8007faa:	d002      	beq.n	8007fb2 <__mcmp+0x2a>
 8007fac:	d304      	bcc.n	8007fb8 <__mcmp+0x30>
 8007fae:	2001      	movs	r0, #1
 8007fb0:	bd30      	pop	{r4, r5, pc}
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	d3f4      	bcc.n	8007fa0 <__mcmp+0x18>
 8007fb6:	e7fb      	b.n	8007fb0 <__mcmp+0x28>
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	e7f8      	b.n	8007fb0 <__mcmp+0x28>
	...

08007fc0 <__mdiff>:
 8007fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	460d      	mov	r5, r1
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4628      	mov	r0, r5
 8007fcc:	4614      	mov	r4, r2
 8007fce:	f7ff ffdb 	bl	8007f88 <__mcmp>
 8007fd2:	1e06      	subs	r6, r0, #0
 8007fd4:	d111      	bne.n	8007ffa <__mdiff+0x3a>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff fd11 	bl	8007a00 <_Balloc>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <__mdiff+0x2e>
 8007fe2:	f240 2137 	movw	r1, #567	; 0x237
 8007fe6:	4b3a      	ldr	r3, [pc, #232]	; (80080d0 <__mdiff+0x110>)
 8007fe8:	483a      	ldr	r0, [pc, #232]	; (80080d4 <__mdiff+0x114>)
 8007fea:	f001 fa87 	bl	80094fc <__assert_func>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	bfa4      	itt	ge
 8007ffc:	4623      	movge	r3, r4
 8007ffe:	462c      	movge	r4, r5
 8008000:	4638      	mov	r0, r7
 8008002:	6861      	ldr	r1, [r4, #4]
 8008004:	bfa6      	itte	ge
 8008006:	461d      	movge	r5, r3
 8008008:	2600      	movge	r6, #0
 800800a:	2601      	movlt	r6, #1
 800800c:	f7ff fcf8 	bl	8007a00 <_Balloc>
 8008010:	4602      	mov	r2, r0
 8008012:	b918      	cbnz	r0, 800801c <__mdiff+0x5c>
 8008014:	f240 2145 	movw	r1, #581	; 0x245
 8008018:	4b2d      	ldr	r3, [pc, #180]	; (80080d0 <__mdiff+0x110>)
 800801a:	e7e5      	b.n	8007fe8 <__mdiff+0x28>
 800801c:	f102 0814 	add.w	r8, r2, #20
 8008020:	46c2      	mov	sl, r8
 8008022:	f04f 0c00 	mov.w	ip, #0
 8008026:	6927      	ldr	r7, [r4, #16]
 8008028:	60c6      	str	r6, [r0, #12]
 800802a:	692e      	ldr	r6, [r5, #16]
 800802c:	f104 0014 	add.w	r0, r4, #20
 8008030:	f105 0914 	add.w	r9, r5, #20
 8008034:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800803c:	3410      	adds	r4, #16
 800803e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008042:	f859 3b04 	ldr.w	r3, [r9], #4
 8008046:	fa1f f18b 	uxth.w	r1, fp
 800804a:	4461      	add	r1, ip
 800804c:	fa1f fc83 	uxth.w	ip, r3
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	eba1 010c 	sub.w	r1, r1, ip
 8008056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800805a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800805e:	b289      	uxth	r1, r1
 8008060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008064:	454e      	cmp	r6, r9
 8008066:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800806a:	f84a 1b04 	str.w	r1, [sl], #4
 800806e:	d8e6      	bhi.n	800803e <__mdiff+0x7e>
 8008070:	1b73      	subs	r3, r6, r5
 8008072:	3b15      	subs	r3, #21
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	3515      	adds	r5, #21
 800807a:	3304      	adds	r3, #4
 800807c:	42ae      	cmp	r6, r5
 800807e:	bf38      	it	cc
 8008080:	2304      	movcc	r3, #4
 8008082:	4418      	add	r0, r3
 8008084:	4443      	add	r3, r8
 8008086:	461e      	mov	r6, r3
 8008088:	4605      	mov	r5, r0
 800808a:	4575      	cmp	r5, lr
 800808c:	d30e      	bcc.n	80080ac <__mdiff+0xec>
 800808e:	f10e 0103 	add.w	r1, lr, #3
 8008092:	1a09      	subs	r1, r1, r0
 8008094:	f021 0103 	bic.w	r1, r1, #3
 8008098:	3803      	subs	r0, #3
 800809a:	4586      	cmp	lr, r0
 800809c:	bf38      	it	cc
 800809e:	2100      	movcc	r1, #0
 80080a0:	440b      	add	r3, r1
 80080a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080a6:	b189      	cbz	r1, 80080cc <__mdiff+0x10c>
 80080a8:	6117      	str	r7, [r2, #16]
 80080aa:	e7a3      	b.n	8007ff4 <__mdiff+0x34>
 80080ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80080b0:	fa1f f188 	uxth.w	r1, r8
 80080b4:	4461      	add	r1, ip
 80080b6:	140c      	asrs	r4, r1, #16
 80080b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080bc:	b289      	uxth	r1, r1
 80080be:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080c2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080c6:	f846 1b04 	str.w	r1, [r6], #4
 80080ca:	e7de      	b.n	800808a <__mdiff+0xca>
 80080cc:	3f01      	subs	r7, #1
 80080ce:	e7e8      	b.n	80080a2 <__mdiff+0xe2>
 80080d0:	0800a479 	.word	0x0800a479
 80080d4:	0800a48a 	.word	0x0800a48a

080080d8 <__ulp>:
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <__ulp+0x3c>)
 80080da:	400b      	ands	r3, r1
 80080dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dc08      	bgt.n	80080f6 <__ulp+0x1e>
 80080e4:	425b      	negs	r3, r3
 80080e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80080ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80080ee:	da04      	bge.n	80080fa <__ulp+0x22>
 80080f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80080f4:	4113      	asrs	r3, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	e008      	b.n	800810c <__ulp+0x34>
 80080fa:	f1a2 0314 	sub.w	r3, r2, #20
 80080fe:	2b1e      	cmp	r3, #30
 8008100:	bfd6      	itet	le
 8008102:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008106:	2201      	movgt	r2, #1
 8008108:	40da      	lsrle	r2, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4619      	mov	r1, r3
 800810e:	4610      	mov	r0, r2
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	7ff00000 	.word	0x7ff00000

08008118 <__b2d>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	6905      	ldr	r5, [r0, #16]
 800811c:	f100 0714 	add.w	r7, r0, #20
 8008120:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008124:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008128:	1f2e      	subs	r6, r5, #4
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff fd5a 	bl	8007be4 <__hi0bits>
 8008130:	f1c0 0220 	rsb	r2, r0, #32
 8008134:	280a      	cmp	r0, #10
 8008136:	4603      	mov	r3, r0
 8008138:	f8df c068 	ldr.w	ip, [pc, #104]	; 80081a4 <__b2d+0x8c>
 800813c:	600a      	str	r2, [r1, #0]
 800813e:	dc12      	bgt.n	8008166 <__b2d+0x4e>
 8008140:	f1c0 0e0b 	rsb	lr, r0, #11
 8008144:	fa24 f20e 	lsr.w	r2, r4, lr
 8008148:	42b7      	cmp	r7, r6
 800814a:	ea42 010c 	orr.w	r1, r2, ip
 800814e:	bf2c      	ite	cs
 8008150:	2200      	movcs	r2, #0
 8008152:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008156:	3315      	adds	r3, #21
 8008158:	fa04 f303 	lsl.w	r3, r4, r3
 800815c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008160:	431a      	orrs	r2, r3
 8008162:	4610      	mov	r0, r2
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008166:	42b7      	cmp	r7, r6
 8008168:	bf2e      	itee	cs
 800816a:	2200      	movcs	r2, #0
 800816c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008170:	f1a5 0608 	subcc.w	r6, r5, #8
 8008174:	3b0b      	subs	r3, #11
 8008176:	d012      	beq.n	800819e <__b2d+0x86>
 8008178:	f1c3 0520 	rsb	r5, r3, #32
 800817c:	fa22 f105 	lsr.w	r1, r2, r5
 8008180:	409c      	lsls	r4, r3
 8008182:	430c      	orrs	r4, r1
 8008184:	42be      	cmp	r6, r7
 8008186:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800818a:	bf94      	ite	ls
 800818c:	2400      	movls	r4, #0
 800818e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008192:	409a      	lsls	r2, r3
 8008194:	40ec      	lsrs	r4, r5
 8008196:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800819a:	4322      	orrs	r2, r4
 800819c:	e7e1      	b.n	8008162 <__b2d+0x4a>
 800819e:	ea44 010c 	orr.w	r1, r4, ip
 80081a2:	e7de      	b.n	8008162 <__b2d+0x4a>
 80081a4:	3ff00000 	.word	0x3ff00000

080081a8 <__d2b>:
 80081a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081aa:	2101      	movs	r1, #1
 80081ac:	4617      	mov	r7, r2
 80081ae:	461c      	mov	r4, r3
 80081b0:	9e08      	ldr	r6, [sp, #32]
 80081b2:	f7ff fc25 	bl	8007a00 <_Balloc>
 80081b6:	4605      	mov	r5, r0
 80081b8:	b930      	cbnz	r0, 80081c8 <__d2b+0x20>
 80081ba:	4602      	mov	r2, r0
 80081bc:	f240 310f 	movw	r1, #783	; 0x30f
 80081c0:	4b22      	ldr	r3, [pc, #136]	; (800824c <__d2b+0xa4>)
 80081c2:	4823      	ldr	r0, [pc, #140]	; (8008250 <__d2b+0xa8>)
 80081c4:	f001 f99a 	bl	80094fc <__assert_func>
 80081c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80081cc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80081d0:	bb24      	cbnz	r4, 800821c <__d2b+0x74>
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	d026      	beq.n	8008226 <__d2b+0x7e>
 80081d8:	4668      	mov	r0, sp
 80081da:	9700      	str	r7, [sp, #0]
 80081dc:	f7ff fd22 	bl	8007c24 <__lo0bits>
 80081e0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081e4:	b1e8      	cbz	r0, 8008222 <__d2b+0x7a>
 80081e6:	f1c0 0320 	rsb	r3, r0, #32
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	430b      	orrs	r3, r1
 80081f0:	40c2      	lsrs	r2, r0
 80081f2:	616b      	str	r3, [r5, #20]
 80081f4:	9201      	str	r2, [sp, #4]
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf14      	ite	ne
 80081fc:	2102      	movne	r1, #2
 80081fe:	2101      	moveq	r1, #1
 8008200:	61ab      	str	r3, [r5, #24]
 8008202:	6129      	str	r1, [r5, #16]
 8008204:	b1bc      	cbz	r4, 8008236 <__d2b+0x8e>
 8008206:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800820a:	4404      	add	r4, r0
 800820c:	6034      	str	r4, [r6, #0]
 800820e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008214:	6018      	str	r0, [r3, #0]
 8008216:	4628      	mov	r0, r5
 8008218:	b003      	add	sp, #12
 800821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008220:	e7d7      	b.n	80081d2 <__d2b+0x2a>
 8008222:	6169      	str	r1, [r5, #20]
 8008224:	e7e7      	b.n	80081f6 <__d2b+0x4e>
 8008226:	a801      	add	r0, sp, #4
 8008228:	f7ff fcfc 	bl	8007c24 <__lo0bits>
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	2101      	movs	r1, #1
 8008230:	616b      	str	r3, [r5, #20]
 8008232:	3020      	adds	r0, #32
 8008234:	e7e5      	b.n	8008202 <__d2b+0x5a>
 8008236:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800823a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800823e:	6030      	str	r0, [r6, #0]
 8008240:	6918      	ldr	r0, [r3, #16]
 8008242:	f7ff fccf 	bl	8007be4 <__hi0bits>
 8008246:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800824a:	e7e2      	b.n	8008212 <__d2b+0x6a>
 800824c:	0800a479 	.word	0x0800a479
 8008250:	0800a48a 	.word	0x0800a48a

08008254 <__ratio>:
 8008254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	4688      	mov	r8, r1
 800825a:	4669      	mov	r1, sp
 800825c:	4681      	mov	r9, r0
 800825e:	f7ff ff5b 	bl	8008118 <__b2d>
 8008262:	460f      	mov	r7, r1
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	4640      	mov	r0, r8
 800826a:	a901      	add	r1, sp, #4
 800826c:	f7ff ff54 	bl	8008118 <__b2d>
 8008270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008274:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008278:	468b      	mov	fp, r1
 800827a:	eba3 0c02 	sub.w	ip, r3, r2
 800827e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfd5      	itete	le
 800828c:	460a      	movle	r2, r1
 800828e:	462a      	movgt	r2, r5
 8008290:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008294:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008298:	bfd8      	it	le
 800829a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800829e:	465b      	mov	r3, fp
 80082a0:	4602      	mov	r2, r0
 80082a2:	4639      	mov	r1, r7
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7f8 fa41 	bl	800072c <__aeabi_ddiv>
 80082aa:	b003      	add	sp, #12
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082b0 <__copybits>:
 80082b0:	3901      	subs	r1, #1
 80082b2:	b570      	push	{r4, r5, r6, lr}
 80082b4:	1149      	asrs	r1, r1, #5
 80082b6:	6914      	ldr	r4, [r2, #16]
 80082b8:	3101      	adds	r1, #1
 80082ba:	f102 0314 	add.w	r3, r2, #20
 80082be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082c6:	1f05      	subs	r5, r0, #4
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d30c      	bcc.n	80082e6 <__copybits+0x36>
 80082cc:	1aa3      	subs	r3, r4, r2
 80082ce:	3b11      	subs	r3, #17
 80082d0:	f023 0303 	bic.w	r3, r3, #3
 80082d4:	3211      	adds	r2, #17
 80082d6:	42a2      	cmp	r2, r4
 80082d8:	bf88      	it	hi
 80082da:	2300      	movhi	r3, #0
 80082dc:	4418      	add	r0, r3
 80082de:	2300      	movs	r3, #0
 80082e0:	4288      	cmp	r0, r1
 80082e2:	d305      	bcc.n	80082f0 <__copybits+0x40>
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80082ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80082ee:	e7eb      	b.n	80082c8 <__copybits+0x18>
 80082f0:	f840 3b04 	str.w	r3, [r0], #4
 80082f4:	e7f4      	b.n	80082e0 <__copybits+0x30>

080082f6 <__any_on>:
 80082f6:	f100 0214 	add.w	r2, r0, #20
 80082fa:	6900      	ldr	r0, [r0, #16]
 80082fc:	114b      	asrs	r3, r1, #5
 80082fe:	4298      	cmp	r0, r3
 8008300:	b510      	push	{r4, lr}
 8008302:	db11      	blt.n	8008328 <__any_on+0x32>
 8008304:	dd0a      	ble.n	800831c <__any_on+0x26>
 8008306:	f011 011f 	ands.w	r1, r1, #31
 800830a:	d007      	beq.n	800831c <__any_on+0x26>
 800830c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008310:	fa24 f001 	lsr.w	r0, r4, r1
 8008314:	fa00 f101 	lsl.w	r1, r0, r1
 8008318:	428c      	cmp	r4, r1
 800831a:	d10b      	bne.n	8008334 <__any_on+0x3e>
 800831c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008320:	4293      	cmp	r3, r2
 8008322:	d803      	bhi.n	800832c <__any_on+0x36>
 8008324:	2000      	movs	r0, #0
 8008326:	bd10      	pop	{r4, pc}
 8008328:	4603      	mov	r3, r0
 800832a:	e7f7      	b.n	800831c <__any_on+0x26>
 800832c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008330:	2900      	cmp	r1, #0
 8008332:	d0f5      	beq.n	8008320 <__any_on+0x2a>
 8008334:	2001      	movs	r0, #1
 8008336:	e7f6      	b.n	8008326 <__any_on+0x30>

08008338 <sulp>:
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	460f      	mov	r7, r1
 800833e:	4690      	mov	r8, r2
 8008340:	f7ff feca 	bl	80080d8 <__ulp>
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	f1b8 0f00 	cmp.w	r8, #0
 800834c:	d011      	beq.n	8008372 <sulp+0x3a>
 800834e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008356:	2b00      	cmp	r3, #0
 8008358:	dd0b      	ble.n	8008372 <sulp+0x3a>
 800835a:	2400      	movs	r4, #0
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008362:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	f7f8 f8b5 	bl	80004d8 <__aeabi_dmul>
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	4620      	mov	r0, r4
 8008374:	4629      	mov	r1, r5
 8008376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837a:	0000      	movs	r0, r0
 800837c:	0000      	movs	r0, r0
	...

08008380 <_strtod_l>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	b09f      	sub	sp, #124	; 0x7c
 8008386:	9217      	str	r2, [sp, #92]	; 0x5c
 8008388:	2200      	movs	r2, #0
 800838a:	4604      	mov	r4, r0
 800838c:	921a      	str	r2, [sp, #104]	; 0x68
 800838e:	460d      	mov	r5, r1
 8008390:	f04f 0800 	mov.w	r8, #0
 8008394:	f04f 0900 	mov.w	r9, #0
 8008398:	460a      	mov	r2, r1
 800839a:	9219      	str	r2, [sp, #100]	; 0x64
 800839c:	7811      	ldrb	r1, [r2, #0]
 800839e:	292b      	cmp	r1, #43	; 0x2b
 80083a0:	d04a      	beq.n	8008438 <_strtod_l+0xb8>
 80083a2:	d838      	bhi.n	8008416 <_strtod_l+0x96>
 80083a4:	290d      	cmp	r1, #13
 80083a6:	d832      	bhi.n	800840e <_strtod_l+0x8e>
 80083a8:	2908      	cmp	r1, #8
 80083aa:	d832      	bhi.n	8008412 <_strtod_l+0x92>
 80083ac:	2900      	cmp	r1, #0
 80083ae:	d03b      	beq.n	8008428 <_strtod_l+0xa8>
 80083b0:	2200      	movs	r2, #0
 80083b2:	920e      	str	r2, [sp, #56]	; 0x38
 80083b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80083b6:	7832      	ldrb	r2, [r6, #0]
 80083b8:	2a30      	cmp	r2, #48	; 0x30
 80083ba:	f040 80b2 	bne.w	8008522 <_strtod_l+0x1a2>
 80083be:	7872      	ldrb	r2, [r6, #1]
 80083c0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80083c4:	2a58      	cmp	r2, #88	; 0x58
 80083c6:	d16e      	bne.n	80084a6 <_strtod_l+0x126>
 80083c8:	9302      	str	r3, [sp, #8]
 80083ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083cc:	4620      	mov	r0, r4
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	ab1a      	add	r3, sp, #104	; 0x68
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4a8c      	ldr	r2, [pc, #560]	; (8008608 <_strtod_l+0x288>)
 80083d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80083d8:	a919      	add	r1, sp, #100	; 0x64
 80083da:	f001 f929 	bl	8009630 <__gethex>
 80083de:	f010 070f 	ands.w	r7, r0, #15
 80083e2:	4605      	mov	r5, r0
 80083e4:	d005      	beq.n	80083f2 <_strtod_l+0x72>
 80083e6:	2f06      	cmp	r7, #6
 80083e8:	d128      	bne.n	800843c <_strtod_l+0xbc>
 80083ea:	2300      	movs	r3, #0
 80083ec:	3601      	adds	r6, #1
 80083ee:	9619      	str	r6, [sp, #100]	; 0x64
 80083f0:	930e      	str	r3, [sp, #56]	; 0x38
 80083f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 85a0 	bne.w	8008f3a <_strtod_l+0xbba>
 80083fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fc:	b1cb      	cbz	r3, 8008432 <_strtod_l+0xb2>
 80083fe:	4642      	mov	r2, r8
 8008400:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	b01f      	add	sp, #124	; 0x7c
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	2920      	cmp	r1, #32
 8008410:	d1ce      	bne.n	80083b0 <_strtod_l+0x30>
 8008412:	3201      	adds	r2, #1
 8008414:	e7c1      	b.n	800839a <_strtod_l+0x1a>
 8008416:	292d      	cmp	r1, #45	; 0x2d
 8008418:	d1ca      	bne.n	80083b0 <_strtod_l+0x30>
 800841a:	2101      	movs	r1, #1
 800841c:	910e      	str	r1, [sp, #56]	; 0x38
 800841e:	1c51      	adds	r1, r2, #1
 8008420:	9119      	str	r1, [sp, #100]	; 0x64
 8008422:	7852      	ldrb	r2, [r2, #1]
 8008424:	2a00      	cmp	r2, #0
 8008426:	d1c5      	bne.n	80083b4 <_strtod_l+0x34>
 8008428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800842a:	9519      	str	r5, [sp, #100]	; 0x64
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8582 	bne.w	8008f36 <_strtod_l+0xbb6>
 8008432:	4642      	mov	r2, r8
 8008434:	464b      	mov	r3, r9
 8008436:	e7e5      	b.n	8008404 <_strtod_l+0x84>
 8008438:	2100      	movs	r1, #0
 800843a:	e7ef      	b.n	800841c <_strtod_l+0x9c>
 800843c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800843e:	b13a      	cbz	r2, 8008450 <_strtod_l+0xd0>
 8008440:	2135      	movs	r1, #53	; 0x35
 8008442:	a81c      	add	r0, sp, #112	; 0x70
 8008444:	f7ff ff34 	bl	80082b0 <__copybits>
 8008448:	4620      	mov	r0, r4
 800844a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800844c:	f7ff fb18 	bl	8007a80 <_Bfree>
 8008450:	3f01      	subs	r7, #1
 8008452:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008454:	2f04      	cmp	r7, #4
 8008456:	d806      	bhi.n	8008466 <_strtod_l+0xe6>
 8008458:	e8df f007 	tbb	[pc, r7]
 800845c:	201d0314 	.word	0x201d0314
 8008460:	14          	.byte	0x14
 8008461:	00          	.byte	0x00
 8008462:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008466:	05e9      	lsls	r1, r5, #23
 8008468:	bf48      	it	mi
 800846a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800846e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008472:	0d1b      	lsrs	r3, r3, #20
 8008474:	051b      	lsls	r3, r3, #20
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1bb      	bne.n	80083f2 <_strtod_l+0x72>
 800847a:	f7fe fb07 	bl	8006a8c <__errno>
 800847e:	2322      	movs	r3, #34	; 0x22
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	e7b6      	b.n	80083f2 <_strtod_l+0x72>
 8008484:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008488:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800848c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008490:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008494:	e7e7      	b.n	8008466 <_strtod_l+0xe6>
 8008496:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800860c <_strtod_l+0x28c>
 800849a:	e7e4      	b.n	8008466 <_strtod_l+0xe6>
 800849c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80084a0:	f04f 38ff 	mov.w	r8, #4294967295
 80084a4:	e7df      	b.n	8008466 <_strtod_l+0xe6>
 80084a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	9219      	str	r2, [sp, #100]	; 0x64
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b30      	cmp	r3, #48	; 0x30
 80084b0:	d0f9      	beq.n	80084a6 <_strtod_l+0x126>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d09d      	beq.n	80083f2 <_strtod_l+0x72>
 80084b6:	2301      	movs	r3, #1
 80084b8:	f04f 0a00 	mov.w	sl, #0
 80084bc:	220a      	movs	r2, #10
 80084be:	46d3      	mov	fp, sl
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084c4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80084c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80084cc:	7806      	ldrb	r6, [r0, #0]
 80084ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80084d2:	b2d9      	uxtb	r1, r3
 80084d4:	2909      	cmp	r1, #9
 80084d6:	d926      	bls.n	8008526 <_strtod_l+0x1a6>
 80084d8:	2201      	movs	r2, #1
 80084da:	494d      	ldr	r1, [pc, #308]	; (8008610 <_strtod_l+0x290>)
 80084dc:	f000 ffe6 	bl	80094ac <strncmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d030      	beq.n	8008546 <_strtod_l+0x1c6>
 80084e4:	2000      	movs	r0, #0
 80084e6:	4632      	mov	r2, r6
 80084e8:	4603      	mov	r3, r0
 80084ea:	465e      	mov	r6, fp
 80084ec:	9008      	str	r0, [sp, #32]
 80084ee:	2a65      	cmp	r2, #101	; 0x65
 80084f0:	d001      	beq.n	80084f6 <_strtod_l+0x176>
 80084f2:	2a45      	cmp	r2, #69	; 0x45
 80084f4:	d113      	bne.n	800851e <_strtod_l+0x19e>
 80084f6:	b91e      	cbnz	r6, 8008500 <_strtod_l+0x180>
 80084f8:	9a05      	ldr	r2, [sp, #20]
 80084fa:	4302      	orrs	r2, r0
 80084fc:	d094      	beq.n	8008428 <_strtod_l+0xa8>
 80084fe:	2600      	movs	r6, #0
 8008500:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008502:	1c6a      	adds	r2, r5, #1
 8008504:	9219      	str	r2, [sp, #100]	; 0x64
 8008506:	786a      	ldrb	r2, [r5, #1]
 8008508:	2a2b      	cmp	r2, #43	; 0x2b
 800850a:	d074      	beq.n	80085f6 <_strtod_l+0x276>
 800850c:	2a2d      	cmp	r2, #45	; 0x2d
 800850e:	d078      	beq.n	8008602 <_strtod_l+0x282>
 8008510:	f04f 0c00 	mov.w	ip, #0
 8008514:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008518:	2909      	cmp	r1, #9
 800851a:	d97f      	bls.n	800861c <_strtod_l+0x29c>
 800851c:	9519      	str	r5, [sp, #100]	; 0x64
 800851e:	2700      	movs	r7, #0
 8008520:	e09e      	b.n	8008660 <_strtod_l+0x2e0>
 8008522:	2300      	movs	r3, #0
 8008524:	e7c8      	b.n	80084b8 <_strtod_l+0x138>
 8008526:	f1bb 0f08 	cmp.w	fp, #8
 800852a:	bfd8      	it	le
 800852c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800852e:	f100 0001 	add.w	r0, r0, #1
 8008532:	bfd6      	itet	le
 8008534:	fb02 3301 	mlale	r3, r2, r1, r3
 8008538:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800853c:	930a      	strle	r3, [sp, #40]	; 0x28
 800853e:	f10b 0b01 	add.w	fp, fp, #1
 8008542:	9019      	str	r0, [sp, #100]	; 0x64
 8008544:	e7c1      	b.n	80084ca <_strtod_l+0x14a>
 8008546:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	9219      	str	r2, [sp, #100]	; 0x64
 800854c:	785a      	ldrb	r2, [r3, #1]
 800854e:	f1bb 0f00 	cmp.w	fp, #0
 8008552:	d037      	beq.n	80085c4 <_strtod_l+0x244>
 8008554:	465e      	mov	r6, fp
 8008556:	9008      	str	r0, [sp, #32]
 8008558:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800855c:	2b09      	cmp	r3, #9
 800855e:	d912      	bls.n	8008586 <_strtod_l+0x206>
 8008560:	2301      	movs	r3, #1
 8008562:	e7c4      	b.n	80084ee <_strtod_l+0x16e>
 8008564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008566:	3001      	adds	r0, #1
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	9219      	str	r2, [sp, #100]	; 0x64
 800856c:	785a      	ldrb	r2, [r3, #1]
 800856e:	2a30      	cmp	r2, #48	; 0x30
 8008570:	d0f8      	beq.n	8008564 <_strtod_l+0x1e4>
 8008572:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008576:	2b08      	cmp	r3, #8
 8008578:	f200 84e4 	bhi.w	8008f44 <_strtod_l+0xbc4>
 800857c:	9008      	str	r0, [sp, #32]
 800857e:	2000      	movs	r0, #0
 8008580:	4606      	mov	r6, r0
 8008582:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008584:	930b      	str	r3, [sp, #44]	; 0x2c
 8008586:	3a30      	subs	r2, #48	; 0x30
 8008588:	f100 0301 	add.w	r3, r0, #1
 800858c:	d014      	beq.n	80085b8 <_strtod_l+0x238>
 800858e:	9908      	ldr	r1, [sp, #32]
 8008590:	eb00 0c06 	add.w	ip, r0, r6
 8008594:	4419      	add	r1, r3
 8008596:	9108      	str	r1, [sp, #32]
 8008598:	4633      	mov	r3, r6
 800859a:	210a      	movs	r1, #10
 800859c:	4563      	cmp	r3, ip
 800859e:	d113      	bne.n	80085c8 <_strtod_l+0x248>
 80085a0:	1833      	adds	r3, r6, r0
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	f106 0601 	add.w	r6, r6, #1
 80085a8:	4406      	add	r6, r0
 80085aa:	dc1a      	bgt.n	80085e2 <_strtod_l+0x262>
 80085ac:	230a      	movs	r3, #10
 80085ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085b0:	fb03 2301 	mla	r3, r3, r1, r2
 80085b4:	930a      	str	r3, [sp, #40]	; 0x28
 80085b6:	2300      	movs	r3, #0
 80085b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085ba:	4618      	mov	r0, r3
 80085bc:	1c51      	adds	r1, r2, #1
 80085be:	9119      	str	r1, [sp, #100]	; 0x64
 80085c0:	7852      	ldrb	r2, [r2, #1]
 80085c2:	e7c9      	b.n	8008558 <_strtod_l+0x1d8>
 80085c4:	4658      	mov	r0, fp
 80085c6:	e7d2      	b.n	800856e <_strtod_l+0x1ee>
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	f103 0301 	add.w	r3, r3, #1
 80085ce:	dc03      	bgt.n	80085d8 <_strtod_l+0x258>
 80085d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80085d2:	434f      	muls	r7, r1
 80085d4:	970a      	str	r7, [sp, #40]	; 0x28
 80085d6:	e7e1      	b.n	800859c <_strtod_l+0x21c>
 80085d8:	2b10      	cmp	r3, #16
 80085da:	bfd8      	it	le
 80085dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80085e0:	e7dc      	b.n	800859c <_strtod_l+0x21c>
 80085e2:	2e10      	cmp	r6, #16
 80085e4:	bfdc      	itt	le
 80085e6:	230a      	movle	r3, #10
 80085e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80085ec:	e7e3      	b.n	80085b6 <_strtod_l+0x236>
 80085ee:	2300      	movs	r3, #0
 80085f0:	9308      	str	r3, [sp, #32]
 80085f2:	2301      	movs	r3, #1
 80085f4:	e780      	b.n	80084f8 <_strtod_l+0x178>
 80085f6:	f04f 0c00 	mov.w	ip, #0
 80085fa:	1caa      	adds	r2, r5, #2
 80085fc:	9219      	str	r2, [sp, #100]	; 0x64
 80085fe:	78aa      	ldrb	r2, [r5, #2]
 8008600:	e788      	b.n	8008514 <_strtod_l+0x194>
 8008602:	f04f 0c01 	mov.w	ip, #1
 8008606:	e7f8      	b.n	80085fa <_strtod_l+0x27a>
 8008608:	0800a5e8 	.word	0x0800a5e8
 800860c:	7ff00000 	.word	0x7ff00000
 8008610:	0800a5e4 	.word	0x0800a5e4
 8008614:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008616:	1c51      	adds	r1, r2, #1
 8008618:	9119      	str	r1, [sp, #100]	; 0x64
 800861a:	7852      	ldrb	r2, [r2, #1]
 800861c:	2a30      	cmp	r2, #48	; 0x30
 800861e:	d0f9      	beq.n	8008614 <_strtod_l+0x294>
 8008620:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008624:	2908      	cmp	r1, #8
 8008626:	f63f af7a 	bhi.w	800851e <_strtod_l+0x19e>
 800862a:	3a30      	subs	r2, #48	; 0x30
 800862c:	9209      	str	r2, [sp, #36]	; 0x24
 800862e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008630:	920c      	str	r2, [sp, #48]	; 0x30
 8008632:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008634:	1c57      	adds	r7, r2, #1
 8008636:	9719      	str	r7, [sp, #100]	; 0x64
 8008638:	7852      	ldrb	r2, [r2, #1]
 800863a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800863e:	f1be 0f09 	cmp.w	lr, #9
 8008642:	d938      	bls.n	80086b6 <_strtod_l+0x336>
 8008644:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008646:	1a7f      	subs	r7, r7, r1
 8008648:	2f08      	cmp	r7, #8
 800864a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800864e:	dc03      	bgt.n	8008658 <_strtod_l+0x2d8>
 8008650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008652:	428f      	cmp	r7, r1
 8008654:	bfa8      	it	ge
 8008656:	460f      	movge	r7, r1
 8008658:	f1bc 0f00 	cmp.w	ip, #0
 800865c:	d000      	beq.n	8008660 <_strtod_l+0x2e0>
 800865e:	427f      	negs	r7, r7
 8008660:	2e00      	cmp	r6, #0
 8008662:	d14f      	bne.n	8008704 <_strtod_l+0x384>
 8008664:	9905      	ldr	r1, [sp, #20]
 8008666:	4301      	orrs	r1, r0
 8008668:	f47f aec3 	bne.w	80083f2 <_strtod_l+0x72>
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f aedb 	bne.w	8008428 <_strtod_l+0xa8>
 8008672:	2a69      	cmp	r2, #105	; 0x69
 8008674:	d029      	beq.n	80086ca <_strtod_l+0x34a>
 8008676:	dc26      	bgt.n	80086c6 <_strtod_l+0x346>
 8008678:	2a49      	cmp	r2, #73	; 0x49
 800867a:	d026      	beq.n	80086ca <_strtod_l+0x34a>
 800867c:	2a4e      	cmp	r2, #78	; 0x4e
 800867e:	f47f aed3 	bne.w	8008428 <_strtod_l+0xa8>
 8008682:	499a      	ldr	r1, [pc, #616]	; (80088ec <_strtod_l+0x56c>)
 8008684:	a819      	add	r0, sp, #100	; 0x64
 8008686:	f001 fa15 	bl	8009ab4 <__match>
 800868a:	2800      	cmp	r0, #0
 800868c:	f43f aecc 	beq.w	8008428 <_strtod_l+0xa8>
 8008690:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b28      	cmp	r3, #40	; 0x28
 8008696:	d12f      	bne.n	80086f8 <_strtod_l+0x378>
 8008698:	4995      	ldr	r1, [pc, #596]	; (80088f0 <_strtod_l+0x570>)
 800869a:	aa1c      	add	r2, sp, #112	; 0x70
 800869c:	a819      	add	r0, sp, #100	; 0x64
 800869e:	f001 fa1d 	bl	8009adc <__hexnan>
 80086a2:	2805      	cmp	r0, #5
 80086a4:	d128      	bne.n	80086f8 <_strtod_l+0x378>
 80086a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80086ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80086b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80086b4:	e69d      	b.n	80083f2 <_strtod_l+0x72>
 80086b6:	210a      	movs	r1, #10
 80086b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086ba:	fb01 2107 	mla	r1, r1, r7, r2
 80086be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80086c2:	9209      	str	r2, [sp, #36]	; 0x24
 80086c4:	e7b5      	b.n	8008632 <_strtod_l+0x2b2>
 80086c6:	2a6e      	cmp	r2, #110	; 0x6e
 80086c8:	e7d9      	b.n	800867e <_strtod_l+0x2fe>
 80086ca:	498a      	ldr	r1, [pc, #552]	; (80088f4 <_strtod_l+0x574>)
 80086cc:	a819      	add	r0, sp, #100	; 0x64
 80086ce:	f001 f9f1 	bl	8009ab4 <__match>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f43f aea8 	beq.w	8008428 <_strtod_l+0xa8>
 80086d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086da:	4987      	ldr	r1, [pc, #540]	; (80088f8 <_strtod_l+0x578>)
 80086dc:	3b01      	subs	r3, #1
 80086de:	a819      	add	r0, sp, #100	; 0x64
 80086e0:	9319      	str	r3, [sp, #100]	; 0x64
 80086e2:	f001 f9e7 	bl	8009ab4 <__match>
 80086e6:	b910      	cbnz	r0, 80086ee <_strtod_l+0x36e>
 80086e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086ea:	3301      	adds	r3, #1
 80086ec:	9319      	str	r3, [sp, #100]	; 0x64
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80088fc <_strtod_l+0x57c>
 80086f6:	e67c      	b.n	80083f2 <_strtod_l+0x72>
 80086f8:	4881      	ldr	r0, [pc, #516]	; (8008900 <_strtod_l+0x580>)
 80086fa:	f000 fef9 	bl	80094f0 <nan>
 80086fe:	4680      	mov	r8, r0
 8008700:	4689      	mov	r9, r1
 8008702:	e676      	b.n	80083f2 <_strtod_l+0x72>
 8008704:	9b08      	ldr	r3, [sp, #32]
 8008706:	f1bb 0f00 	cmp.w	fp, #0
 800870a:	bf08      	it	eq
 800870c:	46b3      	moveq	fp, r6
 800870e:	1afb      	subs	r3, r7, r3
 8008710:	2e10      	cmp	r6, #16
 8008712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008714:	4635      	mov	r5, r6
 8008716:	9309      	str	r3, [sp, #36]	; 0x24
 8008718:	bfa8      	it	ge
 800871a:	2510      	movge	r5, #16
 800871c:	f7f7 fe62 	bl	80003e4 <__aeabi_ui2d>
 8008720:	2e09      	cmp	r6, #9
 8008722:	4680      	mov	r8, r0
 8008724:	4689      	mov	r9, r1
 8008726:	dd13      	ble.n	8008750 <_strtod_l+0x3d0>
 8008728:	4b76      	ldr	r3, [pc, #472]	; (8008904 <_strtod_l+0x584>)
 800872a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800872e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008732:	f7f7 fed1 	bl	80004d8 <__aeabi_dmul>
 8008736:	4680      	mov	r8, r0
 8008738:	4650      	mov	r0, sl
 800873a:	4689      	mov	r9, r1
 800873c:	f7f7 fe52 	bl	80003e4 <__aeabi_ui2d>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	f7f7 fd10 	bl	800016c <__adddf3>
 800874c:	4680      	mov	r8, r0
 800874e:	4689      	mov	r9, r1
 8008750:	2e0f      	cmp	r6, #15
 8008752:	dc36      	bgt.n	80087c2 <_strtod_l+0x442>
 8008754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	f43f ae4b 	beq.w	80083f2 <_strtod_l+0x72>
 800875c:	dd22      	ble.n	80087a4 <_strtod_l+0x424>
 800875e:	2b16      	cmp	r3, #22
 8008760:	dc09      	bgt.n	8008776 <_strtod_l+0x3f6>
 8008762:	4968      	ldr	r1, [pc, #416]	; (8008904 <_strtod_l+0x584>)
 8008764:	4642      	mov	r2, r8
 8008766:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800876a:	464b      	mov	r3, r9
 800876c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008770:	f7f7 feb2 	bl	80004d8 <__aeabi_dmul>
 8008774:	e7c3      	b.n	80086fe <_strtod_l+0x37e>
 8008776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008778:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800877c:	4293      	cmp	r3, r2
 800877e:	db20      	blt.n	80087c2 <_strtod_l+0x442>
 8008780:	4c60      	ldr	r4, [pc, #384]	; (8008904 <_strtod_l+0x584>)
 8008782:	f1c6 060f 	rsb	r6, r6, #15
 8008786:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800878a:	4642      	mov	r2, r8
 800878c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008790:	464b      	mov	r3, r9
 8008792:	f7f7 fea1 	bl	80004d8 <__aeabi_dmul>
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	1b9e      	subs	r6, r3, r6
 800879a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800879e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087a2:	e7e5      	b.n	8008770 <_strtod_l+0x3f0>
 80087a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a6:	3316      	adds	r3, #22
 80087a8:	db0b      	blt.n	80087c2 <_strtod_l+0x442>
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	4640      	mov	r0, r8
 80087ae:	1bdf      	subs	r7, r3, r7
 80087b0:	4b54      	ldr	r3, [pc, #336]	; (8008904 <_strtod_l+0x584>)
 80087b2:	4649      	mov	r1, r9
 80087b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	f7f7 ffb6 	bl	800072c <__aeabi_ddiv>
 80087c0:	e79d      	b.n	80086fe <_strtod_l+0x37e>
 80087c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c4:	1b75      	subs	r5, r6, r5
 80087c6:	441d      	add	r5, r3
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	dd70      	ble.n	80088ae <_strtod_l+0x52e>
 80087cc:	f015 030f 	ands.w	r3, r5, #15
 80087d0:	d00a      	beq.n	80087e8 <_strtod_l+0x468>
 80087d2:	494c      	ldr	r1, [pc, #304]	; (8008904 <_strtod_l+0x584>)
 80087d4:	4642      	mov	r2, r8
 80087d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087de:	464b      	mov	r3, r9
 80087e0:	f7f7 fe7a 	bl	80004d8 <__aeabi_dmul>
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	f035 050f 	bics.w	r5, r5, #15
 80087ec:	d04d      	beq.n	800888a <_strtod_l+0x50a>
 80087ee:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80087f2:	dd22      	ble.n	800883a <_strtod_l+0x4ba>
 80087f4:	2600      	movs	r6, #0
 80087f6:	46b3      	mov	fp, r6
 80087f8:	960b      	str	r6, [sp, #44]	; 0x2c
 80087fa:	9608      	str	r6, [sp, #32]
 80087fc:	2322      	movs	r3, #34	; 0x22
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80088fc <_strtod_l+0x57c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800880a:	2b00      	cmp	r3, #0
 800880c:	f43f adf1 	beq.w	80083f2 <_strtod_l+0x72>
 8008810:	4620      	mov	r0, r4
 8008812:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008814:	f7ff f934 	bl	8007a80 <_Bfree>
 8008818:	4620      	mov	r0, r4
 800881a:	9908      	ldr	r1, [sp, #32]
 800881c:	f7ff f930 	bl	8007a80 <_Bfree>
 8008820:	4659      	mov	r1, fp
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff f92c 	bl	8007a80 <_Bfree>
 8008828:	4620      	mov	r0, r4
 800882a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800882c:	f7ff f928 	bl	8007a80 <_Bfree>
 8008830:	4631      	mov	r1, r6
 8008832:	4620      	mov	r0, r4
 8008834:	f7ff f924 	bl	8007a80 <_Bfree>
 8008838:	e5db      	b.n	80083f2 <_strtod_l+0x72>
 800883a:	4b33      	ldr	r3, [pc, #204]	; (8008908 <_strtod_l+0x588>)
 800883c:	4640      	mov	r0, r8
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	2300      	movs	r3, #0
 8008842:	4649      	mov	r1, r9
 8008844:	469a      	mov	sl, r3
 8008846:	112d      	asrs	r5, r5, #4
 8008848:	2d01      	cmp	r5, #1
 800884a:	dc21      	bgt.n	8008890 <_strtod_l+0x510>
 800884c:	b10b      	cbz	r3, 8008852 <_strtod_l+0x4d2>
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	492d      	ldr	r1, [pc, #180]	; (8008908 <_strtod_l+0x588>)
 8008854:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008858:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800885c:	4642      	mov	r2, r8
 800885e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008862:	464b      	mov	r3, r9
 8008864:	f7f7 fe38 	bl	80004d8 <__aeabi_dmul>
 8008868:	4b24      	ldr	r3, [pc, #144]	; (80088fc <_strtod_l+0x57c>)
 800886a:	460a      	mov	r2, r1
 800886c:	400b      	ands	r3, r1
 800886e:	4927      	ldr	r1, [pc, #156]	; (800890c <_strtod_l+0x58c>)
 8008870:	4680      	mov	r8, r0
 8008872:	428b      	cmp	r3, r1
 8008874:	d8be      	bhi.n	80087f4 <_strtod_l+0x474>
 8008876:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800887a:	428b      	cmp	r3, r1
 800887c:	bf86      	itte	hi
 800887e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008882:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008910 <_strtod_l+0x590>
 8008886:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800888a:	2300      	movs	r3, #0
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	e07b      	b.n	8008988 <_strtod_l+0x608>
 8008890:	07ea      	lsls	r2, r5, #31
 8008892:	d505      	bpl.n	80088a0 <_strtod_l+0x520>
 8008894:	9b05      	ldr	r3, [sp, #20]
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fe1d 	bl	80004d8 <__aeabi_dmul>
 800889e:	2301      	movs	r3, #1
 80088a0:	9a05      	ldr	r2, [sp, #20]
 80088a2:	f10a 0a01 	add.w	sl, sl, #1
 80088a6:	3208      	adds	r2, #8
 80088a8:	106d      	asrs	r5, r5, #1
 80088aa:	9205      	str	r2, [sp, #20]
 80088ac:	e7cc      	b.n	8008848 <_strtod_l+0x4c8>
 80088ae:	d0ec      	beq.n	800888a <_strtod_l+0x50a>
 80088b0:	426d      	negs	r5, r5
 80088b2:	f015 020f 	ands.w	r2, r5, #15
 80088b6:	d00a      	beq.n	80088ce <_strtod_l+0x54e>
 80088b8:	4b12      	ldr	r3, [pc, #72]	; (8008904 <_strtod_l+0x584>)
 80088ba:	4640      	mov	r0, r8
 80088bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c0:	4649      	mov	r1, r9
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f7f7 ff31 	bl	800072c <__aeabi_ddiv>
 80088ca:	4680      	mov	r8, r0
 80088cc:	4689      	mov	r9, r1
 80088ce:	112d      	asrs	r5, r5, #4
 80088d0:	d0db      	beq.n	800888a <_strtod_l+0x50a>
 80088d2:	2d1f      	cmp	r5, #31
 80088d4:	dd1e      	ble.n	8008914 <_strtod_l+0x594>
 80088d6:	2600      	movs	r6, #0
 80088d8:	46b3      	mov	fp, r6
 80088da:	960b      	str	r6, [sp, #44]	; 0x2c
 80088dc:	9608      	str	r6, [sp, #32]
 80088de:	2322      	movs	r3, #34	; 0x22
 80088e0:	f04f 0800 	mov.w	r8, #0
 80088e4:	f04f 0900 	mov.w	r9, #0
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	e78d      	b.n	8008808 <_strtod_l+0x488>
 80088ec:	0800a3d1 	.word	0x0800a3d1
 80088f0:	0800a5fc 	.word	0x0800a5fc
 80088f4:	0800a3c9 	.word	0x0800a3c9
 80088f8:	0800a400 	.word	0x0800a400
 80088fc:	7ff00000 	.word	0x7ff00000
 8008900:	0800a78d 	.word	0x0800a78d
 8008904:	0800a510 	.word	0x0800a510
 8008908:	0800a4e8 	.word	0x0800a4e8
 800890c:	7ca00000 	.word	0x7ca00000
 8008910:	7fefffff 	.word	0x7fefffff
 8008914:	f015 0310 	ands.w	r3, r5, #16
 8008918:	bf18      	it	ne
 800891a:	236a      	movne	r3, #106	; 0x6a
 800891c:	4640      	mov	r0, r8
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	4649      	mov	r1, r9
 8008922:	2300      	movs	r3, #0
 8008924:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008bf0 <_strtod_l+0x870>
 8008928:	07ea      	lsls	r2, r5, #31
 800892a:	d504      	bpl.n	8008936 <_strtod_l+0x5b6>
 800892c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008930:	f7f7 fdd2 	bl	80004d8 <__aeabi_dmul>
 8008934:	2301      	movs	r3, #1
 8008936:	106d      	asrs	r5, r5, #1
 8008938:	f10a 0a08 	add.w	sl, sl, #8
 800893c:	d1f4      	bne.n	8008928 <_strtod_l+0x5a8>
 800893e:	b10b      	cbz	r3, 8008944 <_strtod_l+0x5c4>
 8008940:	4680      	mov	r8, r0
 8008942:	4689      	mov	r9, r1
 8008944:	9b05      	ldr	r3, [sp, #20]
 8008946:	b1bb      	cbz	r3, 8008978 <_strtod_l+0x5f8>
 8008948:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800894c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008950:	2b00      	cmp	r3, #0
 8008952:	4649      	mov	r1, r9
 8008954:	dd10      	ble.n	8008978 <_strtod_l+0x5f8>
 8008956:	2b1f      	cmp	r3, #31
 8008958:	f340 8128 	ble.w	8008bac <_strtod_l+0x82c>
 800895c:	2b34      	cmp	r3, #52	; 0x34
 800895e:	bfd8      	it	le
 8008960:	f04f 33ff 	movle.w	r3, #4294967295
 8008964:	f04f 0800 	mov.w	r8, #0
 8008968:	bfcf      	iteee	gt
 800896a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800896e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008972:	4093      	lslle	r3, r2
 8008974:	ea03 0901 	andle.w	r9, r3, r1
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	f7f8 f812 	bl	80009a8 <__aeabi_dcmpeq>
 8008984:	2800      	cmp	r0, #0
 8008986:	d1a6      	bne.n	80088d6 <_strtod_l+0x556>
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	465a      	mov	r2, fp
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4620      	mov	r0, r4
 8008990:	4633      	mov	r3, r6
 8008992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008994:	f7ff f8dc 	bl	8007b50 <__s2b>
 8008998:	900b      	str	r0, [sp, #44]	; 0x2c
 800899a:	2800      	cmp	r0, #0
 800899c:	f43f af2a 	beq.w	80087f4 <_strtod_l+0x474>
 80089a0:	2600      	movs	r6, #0
 80089a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a4:	9b08      	ldr	r3, [sp, #32]
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	eba3 0307 	sub.w	r3, r3, r7
 80089ac:	bfa8      	it	ge
 80089ae:	2300      	movge	r3, #0
 80089b0:	46b3      	mov	fp, r6
 80089b2:	9312      	str	r3, [sp, #72]	; 0x48
 80089b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089b8:	9316      	str	r3, [sp, #88]	; 0x58
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	4620      	mov	r0, r4
 80089be:	6859      	ldr	r1, [r3, #4]
 80089c0:	f7ff f81e 	bl	8007a00 <_Balloc>
 80089c4:	9008      	str	r0, [sp, #32]
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f af18 	beq.w	80087fc <_strtod_l+0x47c>
 80089cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ce:	300c      	adds	r0, #12
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	f103 010c 	add.w	r1, r3, #12
 80089d6:	3202      	adds	r2, #2
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	f7fe f892 	bl	8006b02 <memcpy>
 80089de:	ab1c      	add	r3, sp, #112	; 0x70
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	ab1b      	add	r3, sp, #108	; 0x6c
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	4642      	mov	r2, r8
 80089e8:	464b      	mov	r3, r9
 80089ea:	4620      	mov	r0, r4
 80089ec:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80089f0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80089f4:	f7ff fbd8 	bl	80081a8 <__d2b>
 80089f8:	901a      	str	r0, [sp, #104]	; 0x68
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f43f aefe 	beq.w	80087fc <_strtod_l+0x47c>
 8008a00:	2101      	movs	r1, #1
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff f93c 	bl	8007c80 <__i2b>
 8008a08:	4683      	mov	fp, r0
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f43f aef6 	beq.w	80087fc <_strtod_l+0x47c>
 8008a10:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008a12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a14:	2f00      	cmp	r7, #0
 8008a16:	bfab      	itete	ge
 8008a18:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008a1a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008a1c:	eb07 0a03 	addge.w	sl, r7, r3
 8008a20:	1bdd      	sublt	r5, r3, r7
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	bfa8      	it	ge
 8008a26:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008a28:	eba7 0703 	sub.w	r7, r7, r3
 8008a2c:	4417      	add	r7, r2
 8008a2e:	4b71      	ldr	r3, [pc, #452]	; (8008bf4 <_strtod_l+0x874>)
 8008a30:	f107 37ff 	add.w	r7, r7, #4294967295
 8008a34:	bfb8      	it	lt
 8008a36:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008a3a:	429f      	cmp	r7, r3
 8008a3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a40:	f280 80c7 	bge.w	8008bd2 <_strtod_l+0x852>
 8008a44:	1bdb      	subs	r3, r3, r7
 8008a46:	2b1f      	cmp	r3, #31
 8008a48:	f04f 0101 	mov.w	r1, #1
 8008a4c:	eba2 0203 	sub.w	r2, r2, r3
 8008a50:	f300 80b3 	bgt.w	8008bba <_strtod_l+0x83a>
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8008a5e:	eb0a 0702 	add.w	r7, sl, r2
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	45ba      	cmp	sl, r7
 8008a66:	4415      	add	r5, r2
 8008a68:	441d      	add	r5, r3
 8008a6a:	4653      	mov	r3, sl
 8008a6c:	bfa8      	it	ge
 8008a6e:	463b      	movge	r3, r7
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	bfa8      	it	ge
 8008a74:	462b      	movge	r3, r5
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfc2      	ittt	gt
 8008a7a:	1aff      	subgt	r7, r7, r3
 8008a7c:	1aed      	subgt	r5, r5, r3
 8008a7e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	dd17      	ble.n	8008ab8 <_strtod_l+0x738>
 8008a88:	4659      	mov	r1, fp
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7ff f9b5 	bl	8007dfc <__pow5mult>
 8008a92:	4683      	mov	fp, r0
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f aeb1 	beq.w	80087fc <_strtod_l+0x47c>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff f904 	bl	8007cac <__multiply>
 8008aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f aea8 	beq.w	80087fc <_strtod_l+0x47c>
 8008aac:	4620      	mov	r0, r4
 8008aae:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008ab0:	f7fe ffe6 	bl	8007a80 <_Bfree>
 8008ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ab8:	2f00      	cmp	r7, #0
 8008aba:	f300 808f 	bgt.w	8008bdc <_strtod_l+0x85c>
 8008abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd08      	ble.n	8008ad6 <_strtod_l+0x756>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ac8:	9908      	ldr	r1, [sp, #32]
 8008aca:	f7ff f997 	bl	8007dfc <__pow5mult>
 8008ace:	9008      	str	r0, [sp, #32]
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f43f ae93 	beq.w	80087fc <_strtod_l+0x47c>
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	dd08      	ble.n	8008aec <_strtod_l+0x76c>
 8008ada:	462a      	mov	r2, r5
 8008adc:	4620      	mov	r0, r4
 8008ade:	9908      	ldr	r1, [sp, #32]
 8008ae0:	f7ff f9e6 	bl	8007eb0 <__lshift>
 8008ae4:	9008      	str	r0, [sp, #32]
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	f43f ae88 	beq.w	80087fc <_strtod_l+0x47c>
 8008aec:	f1ba 0f00 	cmp.w	sl, #0
 8008af0:	dd08      	ble.n	8008b04 <_strtod_l+0x784>
 8008af2:	4659      	mov	r1, fp
 8008af4:	4652      	mov	r2, sl
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff f9da 	bl	8007eb0 <__lshift>
 8008afc:	4683      	mov	fp, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f ae7c 	beq.w	80087fc <_strtod_l+0x47c>
 8008b04:	4620      	mov	r0, r4
 8008b06:	9a08      	ldr	r2, [sp, #32]
 8008b08:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b0a:	f7ff fa59 	bl	8007fc0 <__mdiff>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f43f ae73 	beq.w	80087fc <_strtod_l+0x47c>
 8008b16:	2500      	movs	r5, #0
 8008b18:	68c3      	ldr	r3, [r0, #12]
 8008b1a:	4659      	mov	r1, fp
 8008b1c:	60c5      	str	r5, [r0, #12]
 8008b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b20:	f7ff fa32 	bl	8007f88 <__mcmp>
 8008b24:	42a8      	cmp	r0, r5
 8008b26:	da6b      	bge.n	8008c00 <_strtod_l+0x880>
 8008b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2a:	ea53 0308 	orrs.w	r3, r3, r8
 8008b2e:	f040 808f 	bne.w	8008c50 <_strtod_l+0x8d0>
 8008b32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 808a 	bne.w	8008c50 <_strtod_l+0x8d0>
 8008b3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b40:	0d1b      	lsrs	r3, r3, #20
 8008b42:	051b      	lsls	r3, r3, #20
 8008b44:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b48:	f240 8082 	bls.w	8008c50 <_strtod_l+0x8d0>
 8008b4c:	6973      	ldr	r3, [r6, #20]
 8008b4e:	b913      	cbnz	r3, 8008b56 <_strtod_l+0x7d6>
 8008b50:	6933      	ldr	r3, [r6, #16]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	dd7c      	ble.n	8008c50 <_strtod_l+0x8d0>
 8008b56:	4631      	mov	r1, r6
 8008b58:	2201      	movs	r2, #1
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff f9a8 	bl	8007eb0 <__lshift>
 8008b60:	4659      	mov	r1, fp
 8008b62:	4606      	mov	r6, r0
 8008b64:	f7ff fa10 	bl	8007f88 <__mcmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	dd71      	ble.n	8008c50 <_strtod_l+0x8d0>
 8008b6c:	9905      	ldr	r1, [sp, #20]
 8008b6e:	464b      	mov	r3, r9
 8008b70:	4a21      	ldr	r2, [pc, #132]	; (8008bf8 <_strtod_l+0x878>)
 8008b72:	2900      	cmp	r1, #0
 8008b74:	f000 808d 	beq.w	8008c92 <_strtod_l+0x912>
 8008b78:	ea02 0109 	and.w	r1, r2, r9
 8008b7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b80:	f300 8087 	bgt.w	8008c92 <_strtod_l+0x912>
 8008b84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b88:	f77f aea9 	ble.w	80088de <_strtod_l+0x55e>
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4b1a      	ldr	r3, [pc, #104]	; (8008bfc <_strtod_l+0x87c>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7f7 fca0 	bl	80004d8 <__aeabi_dmul>
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <_strtod_l+0x878>)
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	400b      	ands	r3, r1
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f47f ae35 	bne.w	8008810 <_strtod_l+0x490>
 8008ba6:	2322      	movs	r3, #34	; 0x22
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	e631      	b.n	8008810 <_strtod_l+0x490>
 8008bac:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	ea03 0808 	and.w	r8, r3, r8
 8008bb8:	e6de      	b.n	8008978 <_strtod_l+0x5f8>
 8008bba:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008bbe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008bc2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008bc6:	37e2      	adds	r7, #226	; 0xe2
 8008bc8:	fa01 f307 	lsl.w	r3, r1, r7
 8008bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8008bce:	9113      	str	r1, [sp, #76]	; 0x4c
 8008bd0:	e745      	b.n	8008a5e <_strtod_l+0x6de>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bda:	e740      	b.n	8008a5e <_strtod_l+0x6de>
 8008bdc:	463a      	mov	r2, r7
 8008bde:	4620      	mov	r0, r4
 8008be0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008be2:	f7ff f965 	bl	8007eb0 <__lshift>
 8008be6:	901a      	str	r0, [sp, #104]	; 0x68
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f47f af68 	bne.w	8008abe <_strtod_l+0x73e>
 8008bee:	e605      	b.n	80087fc <_strtod_l+0x47c>
 8008bf0:	0800a610 	.word	0x0800a610
 8008bf4:	fffffc02 	.word	0xfffffc02
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	39500000 	.word	0x39500000
 8008c00:	46ca      	mov	sl, r9
 8008c02:	d165      	bne.n	8008cd0 <_strtod_l+0x950>
 8008c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c0a:	b352      	cbz	r2, 8008c62 <_strtod_l+0x8e2>
 8008c0c:	4a9e      	ldr	r2, [pc, #632]	; (8008e88 <_strtod_l+0xb08>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d12a      	bne.n	8008c68 <_strtod_l+0x8e8>
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	4641      	mov	r1, r8
 8008c16:	b1fb      	cbz	r3, 8008c58 <_strtod_l+0x8d8>
 8008c18:	4b9c      	ldr	r3, [pc, #624]	; (8008e8c <_strtod_l+0xb0c>)
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1e:	ea09 0303 	and.w	r3, r9, r3
 8008c22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c26:	d81a      	bhi.n	8008c5e <_strtod_l+0x8de>
 8008c28:	0d1b      	lsrs	r3, r3, #20
 8008c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	4299      	cmp	r1, r3
 8008c34:	d118      	bne.n	8008c68 <_strtod_l+0x8e8>
 8008c36:	4b96      	ldr	r3, [pc, #600]	; (8008e90 <_strtod_l+0xb10>)
 8008c38:	459a      	cmp	sl, r3
 8008c3a:	d102      	bne.n	8008c42 <_strtod_l+0x8c2>
 8008c3c:	3101      	adds	r1, #1
 8008c3e:	f43f addd 	beq.w	80087fc <_strtod_l+0x47c>
 8008c42:	f04f 0800 	mov.w	r8, #0
 8008c46:	4b91      	ldr	r3, [pc, #580]	; (8008e8c <_strtod_l+0xb0c>)
 8008c48:	ea0a 0303 	and.w	r3, sl, r3
 8008c4c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d19a      	bne.n	8008b8c <_strtod_l+0x80c>
 8008c56:	e5db      	b.n	8008810 <_strtod_l+0x490>
 8008c58:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5c:	e7e9      	b.n	8008c32 <_strtod_l+0x8b2>
 8008c5e:	4613      	mov	r3, r2
 8008c60:	e7e7      	b.n	8008c32 <_strtod_l+0x8b2>
 8008c62:	ea53 0308 	orrs.w	r3, r3, r8
 8008c66:	d081      	beq.n	8008b6c <_strtod_l+0x7ec>
 8008c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6a:	b1e3      	cbz	r3, 8008ca6 <_strtod_l+0x926>
 8008c6c:	ea13 0f0a 	tst.w	r3, sl
 8008c70:	d0ee      	beq.n	8008c50 <_strtod_l+0x8d0>
 8008c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	9a05      	ldr	r2, [sp, #20]
 8008c7a:	b1c3      	cbz	r3, 8008cae <_strtod_l+0x92e>
 8008c7c:	f7ff fb5c 	bl	8008338 <sulp>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c88:	f7f7 fa70 	bl	800016c <__adddf3>
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	e7de      	b.n	8008c50 <_strtod_l+0x8d0>
 8008c92:	4013      	ands	r3, r2
 8008c94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c9c:	f04f 38ff 	mov.w	r8, #4294967295
 8008ca0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ca4:	e7d4      	b.n	8008c50 <_strtod_l+0x8d0>
 8008ca6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ca8:	ea13 0f08 	tst.w	r3, r8
 8008cac:	e7e0      	b.n	8008c70 <_strtod_l+0x8f0>
 8008cae:	f7ff fb43 	bl	8008338 <sulp>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008cb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cba:	f7f7 fa55 	bl	8000168 <__aeabi_dsub>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	4689      	mov	r9, r1
 8008cc6:	f7f7 fe6f 	bl	80009a8 <__aeabi_dcmpeq>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d0c0      	beq.n	8008c50 <_strtod_l+0x8d0>
 8008cce:	e606      	b.n	80088de <_strtod_l+0x55e>
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff fabe 	bl	8008254 <__ratio>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ce6:	f7f7 fe73 	bl	80009d0 <__aeabi_dcmple>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d06f      	beq.n	8008dce <_strtod_l+0xa4e>
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d17c      	bne.n	8008dee <_strtod_l+0xa6e>
 8008cf4:	f1b8 0f00 	cmp.w	r8, #0
 8008cf8:	d159      	bne.n	8008dae <_strtod_l+0xa2e>
 8008cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d17b      	bne.n	8008dfa <_strtod_l+0xa7a>
 8008d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d06:	2200      	movs	r2, #0
 8008d08:	4b62      	ldr	r3, [pc, #392]	; (8008e94 <_strtod_l+0xb14>)
 8008d0a:	f7f7 fe57 	bl	80009bc <__aeabi_dcmplt>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d15a      	bne.n	8008dc8 <_strtod_l+0xa48>
 8008d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d16:	2200      	movs	r2, #0
 8008d18:	4b5f      	ldr	r3, [pc, #380]	; (8008e98 <_strtod_l+0xb18>)
 8008d1a:	f7f7 fbdd 	bl	80004d8 <__aeabi_dmul>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d26:	9506      	str	r5, [sp, #24]
 8008d28:	9307      	str	r3, [sp, #28]
 8008d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008d32:	4b56      	ldr	r3, [pc, #344]	; (8008e8c <_strtod_l+0xb0c>)
 8008d34:	4a55      	ldr	r2, [pc, #340]	; (8008e8c <_strtod_l+0xb0c>)
 8008d36:	ea0a 0303 	and.w	r3, sl, r3
 8008d3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d3c:	4b57      	ldr	r3, [pc, #348]	; (8008e9c <_strtod_l+0xb1c>)
 8008d3e:	ea0a 0202 	and.w	r2, sl, r2
 8008d42:	429a      	cmp	r2, r3
 8008d44:	f040 80b0 	bne.w	8008ea8 <_strtod_l+0xb28>
 8008d48:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7ff f9c2 	bl	80080d8 <__ulp>
 8008d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d58:	f7f7 fbbe 	bl	80004d8 <__aeabi_dmul>
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	f7f7 fa04 	bl	800016c <__adddf3>
 8008d64:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008e8c <_strtod_l+0xb0c>
 8008d68:	4a4d      	ldr	r2, [pc, #308]	; (8008ea0 <_strtod_l+0xb20>)
 8008d6a:	ea01 0a0a 	and.w	sl, r1, sl
 8008d6e:	4592      	cmp	sl, r2
 8008d70:	4680      	mov	r8, r0
 8008d72:	d948      	bls.n	8008e06 <_strtod_l+0xa86>
 8008d74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d76:	4b46      	ldr	r3, [pc, #280]	; (8008e90 <_strtod_l+0xb10>)
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d103      	bne.n	8008d84 <_strtod_l+0xa04>
 8008d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d7e:	3301      	adds	r3, #1
 8008d80:	f43f ad3c 	beq.w	80087fc <_strtod_l+0x47c>
 8008d84:	f04f 38ff 	mov.w	r8, #4294967295
 8008d88:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008e90 <_strtod_l+0xb10>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d90:	f7fe fe76 	bl	8007a80 <_Bfree>
 8008d94:	4620      	mov	r0, r4
 8008d96:	9908      	ldr	r1, [sp, #32]
 8008d98:	f7fe fe72 	bl	8007a80 <_Bfree>
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7fe fe6e 	bl	8007a80 <_Bfree>
 8008da4:	4631      	mov	r1, r6
 8008da6:	4620      	mov	r0, r4
 8008da8:	f7fe fe6a 	bl	8007a80 <_Bfree>
 8008dac:	e605      	b.n	80089ba <_strtod_l+0x63a>
 8008dae:	f1b8 0f01 	cmp.w	r8, #1
 8008db2:	d103      	bne.n	8008dbc <_strtod_l+0xa3c>
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	f43f ad91 	beq.w	80088de <_strtod_l+0x55e>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <_strtod_l+0xb24>)
 8008dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dc6:	e016      	b.n	8008df6 <_strtod_l+0xa76>
 8008dc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008dca:	4f33      	ldr	r7, [pc, #204]	; (8008e98 <_strtod_l+0xb18>)
 8008dcc:	e7a9      	b.n	8008d22 <_strtod_l+0x9a2>
 8008dce:	4b32      	ldr	r3, [pc, #200]	; (8008e98 <_strtod_l+0xb18>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dd6:	f7f7 fb7f 	bl	80004d8 <__aeabi_dmul>
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	4605      	mov	r5, r0
 8008dde:	460f      	mov	r7, r1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d09e      	beq.n	8008d22 <_strtod_l+0x9a2>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dec:	e79d      	b.n	8008d2a <_strtod_l+0x9aa>
 8008dee:	2200      	movs	r2, #0
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <_strtod_l+0xb14>)
 8008df2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008df6:	4f27      	ldr	r7, [pc, #156]	; (8008e94 <_strtod_l+0xb14>)
 8008df8:	e797      	b.n	8008d2a <_strtod_l+0x9aa>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b29      	ldr	r3, [pc, #164]	; (8008ea4 <_strtod_l+0xb24>)
 8008dfe:	4645      	mov	r5, r8
 8008e00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e04:	e7f7      	b.n	8008df6 <_strtod_l+0xa76>
 8008e06:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	46ca      	mov	sl, r9
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1bc      	bne.n	8008d8c <_strtod_l+0xa0c>
 8008e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e18:	0d1b      	lsrs	r3, r3, #20
 8008e1a:	051b      	lsls	r3, r3, #20
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d1b5      	bne.n	8008d8c <_strtod_l+0xa0c>
 8008e20:	4628      	mov	r0, r5
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fea0 	bl	8000b68 <__aeabi_d2lz>
 8008e28:	f7f7 fb28 	bl	800047c <__aeabi_l2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4628      	mov	r0, r5
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 f998 	bl	8000168 <__aeabi_dsub>
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008e40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e46:	ea4a 0a08 	orr.w	sl, sl, r8
 8008e4a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008e4e:	d06c      	beq.n	8008f2a <_strtod_l+0xbaa>
 8008e50:	a309      	add	r3, pc, #36	; (adr r3, 8008e78 <_strtod_l+0xaf8>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fdb1 	bl	80009bc <__aeabi_dcmplt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	f47f acd8 	bne.w	8008810 <_strtod_l+0x490>
 8008e60:	a307      	add	r3, pc, #28	; (adr r3, 8008e80 <_strtod_l+0xb00>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e6a:	f7f7 fdc5 	bl	80009f8 <__aeabi_dcmpgt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d08c      	beq.n	8008d8c <_strtod_l+0xa0c>
 8008e72:	e4cd      	b.n	8008810 <_strtod_l+0x490>
 8008e74:	f3af 8000 	nop.w
 8008e78:	94a03595 	.word	0x94a03595
 8008e7c:	3fdfffff 	.word	0x3fdfffff
 8008e80:	35afe535 	.word	0x35afe535
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	000fffff 	.word	0x000fffff
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	7fefffff 	.word	0x7fefffff
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	3fe00000 	.word	0x3fe00000
 8008e9c:	7fe00000 	.word	0x7fe00000
 8008ea0:	7c9fffff 	.word	0x7c9fffff
 8008ea4:	bff00000 	.word	0xbff00000
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	b333      	cbz	r3, 8008efa <_strtod_l+0xb7a>
 8008eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008eb2:	d822      	bhi.n	8008efa <_strtod_l+0xb7a>
 8008eb4:	a328      	add	r3, pc, #160	; (adr r3, 8008f58 <_strtod_l+0xbd8>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	4628      	mov	r0, r5
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 fd87 	bl	80009d0 <__aeabi_dcmple>
 8008ec2:	b1a0      	cbz	r0, 8008eee <_strtod_l+0xb6e>
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f7f7 fdde 	bl	8000a88 <__aeabi_d2uiz>
 8008ecc:	2801      	cmp	r0, #1
 8008ece:	bf38      	it	cc
 8008ed0:	2001      	movcc	r0, #1
 8008ed2:	f7f7 fa87 	bl	80003e4 <__aeabi_ui2d>
 8008ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed8:	4605      	mov	r5, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	bb03      	cbnz	r3, 8008f20 <_strtod_l+0xba0>
 8008ede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee2:	9014      	str	r0, [sp, #80]	; 0x50
 8008ee4:	9315      	str	r3, [sp, #84]	; 0x54
 8008ee6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008eea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ef2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8008efa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008efc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008efe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008f02:	f7ff f8e9 	bl	80080d8 <__ulp>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 fae3 	bl	80004d8 <__aeabi_dmul>
 8008f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f16:	f7f7 f929 	bl	800016c <__adddf3>
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	e774      	b.n	8008e0a <_strtod_l+0xa8a>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008f28:	e7dd      	b.n	8008ee6 <_strtod_l+0xb66>
 8008f2a:	a30d      	add	r3, pc, #52	; (adr r3, 8008f60 <_strtod_l+0xbe0>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 fd44 	bl	80009bc <__aeabi_dcmplt>
 8008f34:	e79b      	b.n	8008e6e <_strtod_l+0xaee>
 8008f36:	2300      	movs	r3, #0
 8008f38:	930e      	str	r3, [sp, #56]	; 0x38
 8008f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f7ff ba5b 	b.w	80083fa <_strtod_l+0x7a>
 8008f44:	2a65      	cmp	r2, #101	; 0x65
 8008f46:	f43f ab52 	beq.w	80085ee <_strtod_l+0x26e>
 8008f4a:	2a45      	cmp	r2, #69	; 0x45
 8008f4c:	f43f ab4f 	beq.w	80085ee <_strtod_l+0x26e>
 8008f50:	2301      	movs	r3, #1
 8008f52:	f7ff bb87 	b.w	8008664 <_strtod_l+0x2e4>
 8008f56:	bf00      	nop
 8008f58:	ffc00000 	.word	0xffc00000
 8008f5c:	41dfffff 	.word	0x41dfffff
 8008f60:	94a03595 	.word	0x94a03595
 8008f64:	3fcfffff 	.word	0x3fcfffff

08008f68 <_strtod_r>:
 8008f68:	4b01      	ldr	r3, [pc, #4]	; (8008f70 <_strtod_r+0x8>)
 8008f6a:	f7ff ba09 	b.w	8008380 <_strtod_l>
 8008f6e:	bf00      	nop
 8008f70:	20000074 	.word	0x20000074

08008f74 <_strtol_l.constprop.0>:
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7a:	4686      	mov	lr, r0
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	d001      	beq.n	8008f84 <_strtol_l.constprop.0+0x10>
 8008f80:	2b24      	cmp	r3, #36	; 0x24
 8008f82:	d906      	bls.n	8008f92 <_strtol_l.constprop.0+0x1e>
 8008f84:	f7fd fd82 	bl	8006a8c <__errno>
 8008f88:	2316      	movs	r3, #22
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	460d      	mov	r5, r1
 8008f94:	4835      	ldr	r0, [pc, #212]	; (800906c <_strtol_l.constprop.0+0xf8>)
 8008f96:	462a      	mov	r2, r5
 8008f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f9c:	5d06      	ldrb	r6, [r0, r4]
 8008f9e:	f016 0608 	ands.w	r6, r6, #8
 8008fa2:	d1f8      	bne.n	8008f96 <_strtol_l.constprop.0+0x22>
 8008fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8008fa6:	d12e      	bne.n	8009006 <_strtol_l.constprop.0+0x92>
 8008fa8:	2601      	movs	r6, #1
 8008faa:	782c      	ldrb	r4, [r5, #0]
 8008fac:	1c95      	adds	r5, r2, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d057      	beq.n	8009062 <_strtol_l.constprop.0+0xee>
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d109      	bne.n	8008fca <_strtol_l.constprop.0+0x56>
 8008fb6:	2c30      	cmp	r4, #48	; 0x30
 8008fb8:	d107      	bne.n	8008fca <_strtol_l.constprop.0+0x56>
 8008fba:	782a      	ldrb	r2, [r5, #0]
 8008fbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008fc0:	2a58      	cmp	r2, #88	; 0x58
 8008fc2:	d149      	bne.n	8009058 <_strtol_l.constprop.0+0xe4>
 8008fc4:	2310      	movs	r3, #16
 8008fc6:	786c      	ldrb	r4, [r5, #1]
 8008fc8:	3502      	adds	r5, #2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008fd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fd4:	fbbc f9f3 	udiv	r9, ip, r3
 8008fd8:	4610      	mov	r0, r2
 8008fda:	fb03 ca19 	mls	sl, r3, r9, ip
 8008fde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008fe2:	2f09      	cmp	r7, #9
 8008fe4:	d814      	bhi.n	8009010 <_strtol_l.constprop.0+0x9c>
 8008fe6:	463c      	mov	r4, r7
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	dd20      	ble.n	800902e <_strtol_l.constprop.0+0xba>
 8008fec:	1c57      	adds	r7, r2, #1
 8008fee:	d007      	beq.n	8009000 <_strtol_l.constprop.0+0x8c>
 8008ff0:	4581      	cmp	r9, r0
 8008ff2:	d319      	bcc.n	8009028 <_strtol_l.constprop.0+0xb4>
 8008ff4:	d101      	bne.n	8008ffa <_strtol_l.constprop.0+0x86>
 8008ff6:	45a2      	cmp	sl, r4
 8008ff8:	db16      	blt.n	8009028 <_strtol_l.constprop.0+0xb4>
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8009000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009004:	e7eb      	b.n	8008fde <_strtol_l.constprop.0+0x6a>
 8009006:	2c2b      	cmp	r4, #43	; 0x2b
 8009008:	bf04      	itt	eq
 800900a:	782c      	ldrbeq	r4, [r5, #0]
 800900c:	1c95      	addeq	r5, r2, #2
 800900e:	e7ce      	b.n	8008fae <_strtol_l.constprop.0+0x3a>
 8009010:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009014:	2f19      	cmp	r7, #25
 8009016:	d801      	bhi.n	800901c <_strtol_l.constprop.0+0xa8>
 8009018:	3c37      	subs	r4, #55	; 0x37
 800901a:	e7e5      	b.n	8008fe8 <_strtol_l.constprop.0+0x74>
 800901c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009020:	2f19      	cmp	r7, #25
 8009022:	d804      	bhi.n	800902e <_strtol_l.constprop.0+0xba>
 8009024:	3c57      	subs	r4, #87	; 0x57
 8009026:	e7df      	b.n	8008fe8 <_strtol_l.constprop.0+0x74>
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e7e8      	b.n	8009000 <_strtol_l.constprop.0+0x8c>
 800902e:	1c53      	adds	r3, r2, #1
 8009030:	d108      	bne.n	8009044 <_strtol_l.constprop.0+0xd0>
 8009032:	2322      	movs	r3, #34	; 0x22
 8009034:	4660      	mov	r0, ip
 8009036:	f8ce 3000 	str.w	r3, [lr]
 800903a:	f1b8 0f00 	cmp.w	r8, #0
 800903e:	d0a6      	beq.n	8008f8e <_strtol_l.constprop.0+0x1a>
 8009040:	1e69      	subs	r1, r5, #1
 8009042:	e006      	b.n	8009052 <_strtol_l.constprop.0+0xde>
 8009044:	b106      	cbz	r6, 8009048 <_strtol_l.constprop.0+0xd4>
 8009046:	4240      	negs	r0, r0
 8009048:	f1b8 0f00 	cmp.w	r8, #0
 800904c:	d09f      	beq.n	8008f8e <_strtol_l.constprop.0+0x1a>
 800904e:	2a00      	cmp	r2, #0
 8009050:	d1f6      	bne.n	8009040 <_strtol_l.constprop.0+0xcc>
 8009052:	f8c8 1000 	str.w	r1, [r8]
 8009056:	e79a      	b.n	8008f8e <_strtol_l.constprop.0+0x1a>
 8009058:	2430      	movs	r4, #48	; 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1b5      	bne.n	8008fca <_strtol_l.constprop.0+0x56>
 800905e:	2308      	movs	r3, #8
 8009060:	e7b3      	b.n	8008fca <_strtol_l.constprop.0+0x56>
 8009062:	2c30      	cmp	r4, #48	; 0x30
 8009064:	d0a9      	beq.n	8008fba <_strtol_l.constprop.0+0x46>
 8009066:	230a      	movs	r3, #10
 8009068:	e7af      	b.n	8008fca <_strtol_l.constprop.0+0x56>
 800906a:	bf00      	nop
 800906c:	0800a639 	.word	0x0800a639

08009070 <_strtol_r>:
 8009070:	f7ff bf80 	b.w	8008f74 <_strtol_l.constprop.0>

08009074 <__ssputs_r>:
 8009074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	461f      	mov	r7, r3
 800907a:	688e      	ldr	r6, [r1, #8]
 800907c:	4682      	mov	sl, r0
 800907e:	42be      	cmp	r6, r7
 8009080:	460c      	mov	r4, r1
 8009082:	4690      	mov	r8, r2
 8009084:	680b      	ldr	r3, [r1, #0]
 8009086:	d82c      	bhi.n	80090e2 <__ssputs_r+0x6e>
 8009088:	898a      	ldrh	r2, [r1, #12]
 800908a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800908e:	d026      	beq.n	80090de <__ssputs_r+0x6a>
 8009090:	6965      	ldr	r5, [r4, #20]
 8009092:	6909      	ldr	r1, [r1, #16]
 8009094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009098:	eba3 0901 	sub.w	r9, r3, r1
 800909c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a0:	1c7b      	adds	r3, r7, #1
 80090a2:	444b      	add	r3, r9
 80090a4:	106d      	asrs	r5, r5, #1
 80090a6:	429d      	cmp	r5, r3
 80090a8:	bf38      	it	cc
 80090aa:	461d      	movcc	r5, r3
 80090ac:	0553      	lsls	r3, r2, #21
 80090ae:	d527      	bpl.n	8009100 <__ssputs_r+0x8c>
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7fe fc19 	bl	80078e8 <_malloc_r>
 80090b6:	4606      	mov	r6, r0
 80090b8:	b360      	cbz	r0, 8009114 <__ssputs_r+0xa0>
 80090ba:	464a      	mov	r2, r9
 80090bc:	6921      	ldr	r1, [r4, #16]
 80090be:	f7fd fd20 	bl	8006b02 <memcpy>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	6126      	str	r6, [r4, #16]
 80090d0:	444e      	add	r6, r9
 80090d2:	6026      	str	r6, [r4, #0]
 80090d4:	463e      	mov	r6, r7
 80090d6:	6165      	str	r5, [r4, #20]
 80090d8:	eba5 0509 	sub.w	r5, r5, r9
 80090dc:	60a5      	str	r5, [r4, #8]
 80090de:	42be      	cmp	r6, r7
 80090e0:	d900      	bls.n	80090e4 <__ssputs_r+0x70>
 80090e2:	463e      	mov	r6, r7
 80090e4:	4632      	mov	r2, r6
 80090e6:	4641      	mov	r1, r8
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	f000 f9c5 	bl	8009478 <memmove>
 80090ee:	2000      	movs	r0, #0
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	1b9b      	subs	r3, r3, r6
 80090f4:	60a3      	str	r3, [r4, #8]
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4433      	add	r3, r6
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	462a      	mov	r2, r5
 8009102:	f000 fd98 	bl	8009c36 <_realloc_r>
 8009106:	4606      	mov	r6, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d1e0      	bne.n	80090ce <__ssputs_r+0x5a>
 800910c:	4650      	mov	r0, sl
 800910e:	6921      	ldr	r1, [r4, #16]
 8009110:	f7fe fb7a 	bl	8007808 <_free_r>
 8009114:	230c      	movs	r3, #12
 8009116:	f8ca 3000 	str.w	r3, [sl]
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	e7e9      	b.n	80090fc <__ssputs_r+0x88>

08009128 <_svfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	4698      	mov	r8, r3
 800912e:	898b      	ldrh	r3, [r1, #12]
 8009130:	4607      	mov	r7, r0
 8009132:	061b      	lsls	r3, r3, #24
 8009134:	460d      	mov	r5, r1
 8009136:	4614      	mov	r4, r2
 8009138:	b09d      	sub	sp, #116	; 0x74
 800913a:	d50e      	bpl.n	800915a <_svfiprintf_r+0x32>
 800913c:	690b      	ldr	r3, [r1, #16]
 800913e:	b963      	cbnz	r3, 800915a <_svfiprintf_r+0x32>
 8009140:	2140      	movs	r1, #64	; 0x40
 8009142:	f7fe fbd1 	bl	80078e8 <_malloc_r>
 8009146:	6028      	str	r0, [r5, #0]
 8009148:	6128      	str	r0, [r5, #16]
 800914a:	b920      	cbnz	r0, 8009156 <_svfiprintf_r+0x2e>
 800914c:	230c      	movs	r3, #12
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e0d0      	b.n	80092f8 <_svfiprintf_r+0x1d0>
 8009156:	2340      	movs	r3, #64	; 0x40
 8009158:	616b      	str	r3, [r5, #20]
 800915a:	2300      	movs	r3, #0
 800915c:	9309      	str	r3, [sp, #36]	; 0x24
 800915e:	2320      	movs	r3, #32
 8009160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009164:	2330      	movs	r3, #48	; 0x30
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	f8cd 800c 	str.w	r8, [sp, #12]
 800916e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009310 <_svfiprintf_r+0x1e8>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009176:	4623      	mov	r3, r4
 8009178:	469a      	mov	sl, r3
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	b10a      	cbz	r2, 8009184 <_svfiprintf_r+0x5c>
 8009180:	2a25      	cmp	r2, #37	; 0x25
 8009182:	d1f9      	bne.n	8009178 <_svfiprintf_r+0x50>
 8009184:	ebba 0b04 	subs.w	fp, sl, r4
 8009188:	d00b      	beq.n	80091a2 <_svfiprintf_r+0x7a>
 800918a:	465b      	mov	r3, fp
 800918c:	4622      	mov	r2, r4
 800918e:	4629      	mov	r1, r5
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff6f 	bl	8009074 <__ssputs_r>
 8009196:	3001      	adds	r0, #1
 8009198:	f000 80a9 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 800919c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800919e:	445a      	add	r2, fp
 80091a0:	9209      	str	r2, [sp, #36]	; 0x24
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80a1 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b6:	f10a 0a01 	add.w	sl, sl, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c2:	931a      	str	r3, [sp, #104]	; 0x68
 80091c4:	4654      	mov	r4, sl
 80091c6:	2205      	movs	r2, #5
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	4850      	ldr	r0, [pc, #320]	; (8009310 <_svfiprintf_r+0x1e8>)
 80091ce:	f7fd fc8a 	bl	8006ae6 <memchr>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	b9d8      	cbnz	r0, 800920e <_svfiprintf_r+0xe6>
 80091d6:	06d0      	lsls	r0, r2, #27
 80091d8:	bf44      	itt	mi
 80091da:	2320      	movmi	r3, #32
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e0:	0711      	lsls	r1, r2, #28
 80091e2:	bf44      	itt	mi
 80091e4:	232b      	movmi	r3, #43	; 0x2b
 80091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b2a      	cmp	r3, #42	; 0x2a
 80091f0:	d015      	beq.n	800921e <_svfiprintf_r+0xf6>
 80091f2:	4654      	mov	r4, sl
 80091f4:	2000      	movs	r0, #0
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	4621      	mov	r1, r4
 80091fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009202:	3b30      	subs	r3, #48	; 0x30
 8009204:	2b09      	cmp	r3, #9
 8009206:	d94d      	bls.n	80092a4 <_svfiprintf_r+0x17c>
 8009208:	b1b0      	cbz	r0, 8009238 <_svfiprintf_r+0x110>
 800920a:	9207      	str	r2, [sp, #28]
 800920c:	e014      	b.n	8009238 <_svfiprintf_r+0x110>
 800920e:	eba0 0308 	sub.w	r3, r0, r8
 8009212:	fa09 f303 	lsl.w	r3, r9, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	46a2      	mov	sl, r4
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	e7d2      	b.n	80091c4 <_svfiprintf_r+0x9c>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbb      	ittet	lt
 800922a:	425b      	neglt	r3, r3
 800922c:	f042 0202 	orrlt.w	r2, r2, #2
 8009230:	9307      	strge	r3, [sp, #28]
 8009232:	9307      	strlt	r3, [sp, #28]
 8009234:	bfb8      	it	lt
 8009236:	9204      	strlt	r2, [sp, #16]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	2b2e      	cmp	r3, #46	; 0x2e
 800923c:	d10c      	bne.n	8009258 <_svfiprintf_r+0x130>
 800923e:	7863      	ldrb	r3, [r4, #1]
 8009240:	2b2a      	cmp	r3, #42	; 0x2a
 8009242:	d134      	bne.n	80092ae <_svfiprintf_r+0x186>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	3402      	adds	r4, #2
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	9203      	str	r2, [sp, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bfb8      	it	lt
 8009252:	f04f 33ff 	movlt.w	r3, #4294967295
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009314 <_svfiprintf_r+0x1ec>
 800925c:	2203      	movs	r2, #3
 800925e:	4650      	mov	r0, sl
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	f7fd fc40 	bl	8006ae6 <memchr>
 8009266:	b138      	cbz	r0, 8009278 <_svfiprintf_r+0x150>
 8009268:	2240      	movs	r2, #64	; 0x40
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	eba0 000a 	sub.w	r0, r0, sl
 8009270:	4082      	lsls	r2, r0
 8009272:	4313      	orrs	r3, r2
 8009274:	3401      	adds	r4, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	2206      	movs	r2, #6
 800927e:	4826      	ldr	r0, [pc, #152]	; (8009318 <_svfiprintf_r+0x1f0>)
 8009280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009284:	f7fd fc2f 	bl	8006ae6 <memchr>
 8009288:	2800      	cmp	r0, #0
 800928a:	d038      	beq.n	80092fe <_svfiprintf_r+0x1d6>
 800928c:	4b23      	ldr	r3, [pc, #140]	; (800931c <_svfiprintf_r+0x1f4>)
 800928e:	bb1b      	cbnz	r3, 80092d8 <_svfiprintf_r+0x1b0>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	3307      	adds	r3, #7
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	3308      	adds	r3, #8
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929e:	4433      	add	r3, r6
 80092a0:	9309      	str	r3, [sp, #36]	; 0x24
 80092a2:	e768      	b.n	8009176 <_svfiprintf_r+0x4e>
 80092a4:	460c      	mov	r4, r1
 80092a6:	2001      	movs	r0, #1
 80092a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ac:	e7a6      	b.n	80091fc <_svfiprintf_r+0xd4>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f04f 0c0a 	mov.w	ip, #10
 80092b4:	4619      	mov	r1, r3
 80092b6:	3401      	adds	r4, #1
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	4620      	mov	r0, r4
 80092bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c0:	3a30      	subs	r2, #48	; 0x30
 80092c2:	2a09      	cmp	r2, #9
 80092c4:	d903      	bls.n	80092ce <_svfiprintf_r+0x1a6>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c6      	beq.n	8009258 <_svfiprintf_r+0x130>
 80092ca:	9105      	str	r1, [sp, #20]
 80092cc:	e7c4      	b.n	8009258 <_svfiprintf_r+0x130>
 80092ce:	4604      	mov	r4, r0
 80092d0:	2301      	movs	r3, #1
 80092d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d6:	e7f0      	b.n	80092ba <_svfiprintf_r+0x192>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4638      	mov	r0, r7
 80092e0:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <_svfiprintf_r+0x1f8>)
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	f7fc fc6a 	bl	8005bbc <_printf_float>
 80092e8:	1c42      	adds	r2, r0, #1
 80092ea:	4606      	mov	r6, r0
 80092ec:	d1d6      	bne.n	800929c <_svfiprintf_r+0x174>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	065b      	lsls	r3, r3, #25
 80092f2:	f53f af2d 	bmi.w	8009150 <_svfiprintf_r+0x28>
 80092f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f8:	b01d      	add	sp, #116	; 0x74
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4638      	mov	r0, r7
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <_svfiprintf_r+0x1f8>)
 8009308:	a904      	add	r1, sp, #16
 800930a:	f7fc fef7 	bl	80060fc <_printf_i>
 800930e:	e7eb      	b.n	80092e8 <_svfiprintf_r+0x1c0>
 8009310:	0800a739 	.word	0x0800a739
 8009314:	0800a73f 	.word	0x0800a73f
 8009318:	0800a743 	.word	0x0800a743
 800931c:	08005bbd 	.word	0x08005bbd
 8009320:	08009075 	.word	0x08009075

08009324 <__sflush_r>:
 8009324:	898a      	ldrh	r2, [r1, #12]
 8009326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009328:	4605      	mov	r5, r0
 800932a:	0710      	lsls	r0, r2, #28
 800932c:	460c      	mov	r4, r1
 800932e:	d457      	bmi.n	80093e0 <__sflush_r+0xbc>
 8009330:	684b      	ldr	r3, [r1, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dc04      	bgt.n	8009340 <__sflush_r+0x1c>
 8009336:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	dc01      	bgt.n	8009340 <__sflush_r+0x1c>
 800933c:	2000      	movs	r0, #0
 800933e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009342:	2e00      	cmp	r6, #0
 8009344:	d0fa      	beq.n	800933c <__sflush_r+0x18>
 8009346:	2300      	movs	r3, #0
 8009348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800934c:	682f      	ldr	r7, [r5, #0]
 800934e:	6a21      	ldr	r1, [r4, #32]
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	d032      	beq.n	80093ba <__sflush_r+0x96>
 8009354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	075a      	lsls	r2, r3, #29
 800935a:	d505      	bpl.n	8009368 <__sflush_r+0x44>
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	1ac0      	subs	r0, r0, r3
 8009360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009362:	b10b      	cbz	r3, 8009368 <__sflush_r+0x44>
 8009364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009366:	1ac0      	subs	r0, r0, r3
 8009368:	2300      	movs	r3, #0
 800936a:	4602      	mov	r2, r0
 800936c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800936e:	4628      	mov	r0, r5
 8009370:	6a21      	ldr	r1, [r4, #32]
 8009372:	47b0      	blx	r6
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	d106      	bne.n	8009388 <__sflush_r+0x64>
 800937a:	6829      	ldr	r1, [r5, #0]
 800937c:	291d      	cmp	r1, #29
 800937e:	d82b      	bhi.n	80093d8 <__sflush_r+0xb4>
 8009380:	4a28      	ldr	r2, [pc, #160]	; (8009424 <__sflush_r+0x100>)
 8009382:	410a      	asrs	r2, r1
 8009384:	07d6      	lsls	r6, r2, #31
 8009386:	d427      	bmi.n	80093d8 <__sflush_r+0xb4>
 8009388:	2200      	movs	r2, #0
 800938a:	6062      	str	r2, [r4, #4]
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	04d9      	lsls	r1, r3, #19
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	d504      	bpl.n	800939e <__sflush_r+0x7a>
 8009394:	1c42      	adds	r2, r0, #1
 8009396:	d101      	bne.n	800939c <__sflush_r+0x78>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b903      	cbnz	r3, 800939e <__sflush_r+0x7a>
 800939c:	6560      	str	r0, [r4, #84]	; 0x54
 800939e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a0:	602f      	str	r7, [r5, #0]
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d0ca      	beq.n	800933c <__sflush_r+0x18>
 80093a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093aa:	4299      	cmp	r1, r3
 80093ac:	d002      	beq.n	80093b4 <__sflush_r+0x90>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7fe fa2a 	bl	8007808 <_free_r>
 80093b4:	2000      	movs	r0, #0
 80093b6:	6360      	str	r0, [r4, #52]	; 0x34
 80093b8:	e7c1      	b.n	800933e <__sflush_r+0x1a>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4628      	mov	r0, r5
 80093be:	47b0      	blx	r6
 80093c0:	1c41      	adds	r1, r0, #1
 80093c2:	d1c8      	bne.n	8009356 <__sflush_r+0x32>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0c5      	beq.n	8009356 <__sflush_r+0x32>
 80093ca:	2b1d      	cmp	r3, #29
 80093cc:	d001      	beq.n	80093d2 <__sflush_r+0xae>
 80093ce:	2b16      	cmp	r3, #22
 80093d0:	d101      	bne.n	80093d6 <__sflush_r+0xb2>
 80093d2:	602f      	str	r7, [r5, #0]
 80093d4:	e7b2      	b.n	800933c <__sflush_r+0x18>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	e7ae      	b.n	800933e <__sflush_r+0x1a>
 80093e0:	690f      	ldr	r7, [r1, #16]
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	d0aa      	beq.n	800933c <__sflush_r+0x18>
 80093e6:	0793      	lsls	r3, r2, #30
 80093e8:	bf18      	it	ne
 80093ea:	2300      	movne	r3, #0
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	bf08      	it	eq
 80093f0:	694b      	ldreq	r3, [r1, #20]
 80093f2:	1bf6      	subs	r6, r6, r7
 80093f4:	600f      	str	r7, [r1, #0]
 80093f6:	608b      	str	r3, [r1, #8]
 80093f8:	2e00      	cmp	r6, #0
 80093fa:	dd9f      	ble.n	800933c <__sflush_r+0x18>
 80093fc:	4633      	mov	r3, r6
 80093fe:	463a      	mov	r2, r7
 8009400:	4628      	mov	r0, r5
 8009402:	6a21      	ldr	r1, [r4, #32]
 8009404:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009408:	47e0      	blx	ip
 800940a:	2800      	cmp	r0, #0
 800940c:	dc06      	bgt.n	800941c <__sflush_r+0xf8>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	e790      	b.n	800933e <__sflush_r+0x1a>
 800941c:	4407      	add	r7, r0
 800941e:	1a36      	subs	r6, r6, r0
 8009420:	e7ea      	b.n	80093f8 <__sflush_r+0xd4>
 8009422:	bf00      	nop
 8009424:	dfbffffe 	.word	0xdfbffffe

08009428 <_fflush_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	690b      	ldr	r3, [r1, #16]
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b913      	cbnz	r3, 8009438 <_fflush_r+0x10>
 8009432:	2500      	movs	r5, #0
 8009434:	4628      	mov	r0, r5
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	b118      	cbz	r0, 8009442 <_fflush_r+0x1a>
 800943a:	6a03      	ldr	r3, [r0, #32]
 800943c:	b90b      	cbnz	r3, 8009442 <_fflush_r+0x1a>
 800943e:	f7fd fa19 	bl	8006874 <__sinit>
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0f3      	beq.n	8009432 <_fflush_r+0xa>
 800944a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800944c:	07d0      	lsls	r0, r2, #31
 800944e:	d404      	bmi.n	800945a <_fflush_r+0x32>
 8009450:	0599      	lsls	r1, r3, #22
 8009452:	d402      	bmi.n	800945a <_fflush_r+0x32>
 8009454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009456:	f7fd fb44 	bl	8006ae2 <__retarget_lock_acquire_recursive>
 800945a:	4628      	mov	r0, r5
 800945c:	4621      	mov	r1, r4
 800945e:	f7ff ff61 	bl	8009324 <__sflush_r>
 8009462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009464:	4605      	mov	r5, r0
 8009466:	07da      	lsls	r2, r3, #31
 8009468:	d4e4      	bmi.n	8009434 <_fflush_r+0xc>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	059b      	lsls	r3, r3, #22
 800946e:	d4e1      	bmi.n	8009434 <_fflush_r+0xc>
 8009470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009472:	f7fd fb37 	bl	8006ae4 <__retarget_lock_release_recursive>
 8009476:	e7dd      	b.n	8009434 <_fflush_r+0xc>

08009478 <memmove>:
 8009478:	4288      	cmp	r0, r1
 800947a:	b510      	push	{r4, lr}
 800947c:	eb01 0402 	add.w	r4, r1, r2
 8009480:	d902      	bls.n	8009488 <memmove+0x10>
 8009482:	4284      	cmp	r4, r0
 8009484:	4623      	mov	r3, r4
 8009486:	d807      	bhi.n	8009498 <memmove+0x20>
 8009488:	1e43      	subs	r3, r0, #1
 800948a:	42a1      	cmp	r1, r4
 800948c:	d008      	beq.n	80094a0 <memmove+0x28>
 800948e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009496:	e7f8      	b.n	800948a <memmove+0x12>
 8009498:	4601      	mov	r1, r0
 800949a:	4402      	add	r2, r0
 800949c:	428a      	cmp	r2, r1
 800949e:	d100      	bne.n	80094a2 <memmove+0x2a>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094aa:	e7f7      	b.n	800949c <memmove+0x24>

080094ac <strncmp>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	b16a      	cbz	r2, 80094cc <strncmp+0x20>
 80094b0:	3901      	subs	r1, #1
 80094b2:	1884      	adds	r4, r0, r2
 80094b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094bc:	429a      	cmp	r2, r3
 80094be:	d103      	bne.n	80094c8 <strncmp+0x1c>
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d001      	beq.n	80094c8 <strncmp+0x1c>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	d1f5      	bne.n	80094b4 <strncmp+0x8>
 80094c8:	1ad0      	subs	r0, r2, r3
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	4610      	mov	r0, r2
 80094ce:	e7fc      	b.n	80094ca <strncmp+0x1e>

080094d0 <_sbrk_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	2300      	movs	r3, #0
 80094d4:	4d05      	ldr	r5, [pc, #20]	; (80094ec <_sbrk_r+0x1c>)
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f7 fd7c 	bl	8000fd8 <_sbrk>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_sbrk_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_sbrk_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	2000354c 	.word	0x2000354c

080094f0 <nan>:
 80094f0:	2000      	movs	r0, #0
 80094f2:	4901      	ldr	r1, [pc, #4]	; (80094f8 <nan+0x8>)
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	7ff80000 	.word	0x7ff80000

080094fc <__assert_func>:
 80094fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094fe:	4614      	mov	r4, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <__assert_func+0x2c>)
 8009504:	4605      	mov	r5, r0
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68d8      	ldr	r0, [r3, #12]
 800950a:	b14c      	cbz	r4, 8009520 <__assert_func+0x24>
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <__assert_func+0x30>)
 800950e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009512:	9100      	str	r1, [sp, #0]
 8009514:	462b      	mov	r3, r5
 8009516:	4906      	ldr	r1, [pc, #24]	; (8009530 <__assert_func+0x34>)
 8009518:	f000 fbca 	bl	8009cb0 <fiprintf>
 800951c:	f000 fbda 	bl	8009cd4 <abort>
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <__assert_func+0x38>)
 8009522:	461c      	mov	r4, r3
 8009524:	e7f3      	b.n	800950e <__assert_func+0x12>
 8009526:	bf00      	nop
 8009528:	20000070 	.word	0x20000070
 800952c:	0800a752 	.word	0x0800a752
 8009530:	0800a75f 	.word	0x0800a75f
 8009534:	0800a78d 	.word	0x0800a78d

08009538 <_calloc_r>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	fba1 5402 	umull	r5, r4, r1, r2
 800953e:	b934      	cbnz	r4, 800954e <_calloc_r+0x16>
 8009540:	4629      	mov	r1, r5
 8009542:	f7fe f9d1 	bl	80078e8 <_malloc_r>
 8009546:	4606      	mov	r6, r0
 8009548:	b928      	cbnz	r0, 8009556 <_calloc_r+0x1e>
 800954a:	4630      	mov	r0, r6
 800954c:	bd70      	pop	{r4, r5, r6, pc}
 800954e:	220c      	movs	r2, #12
 8009550:	2600      	movs	r6, #0
 8009552:	6002      	str	r2, [r0, #0]
 8009554:	e7f9      	b.n	800954a <_calloc_r+0x12>
 8009556:	462a      	mov	r2, r5
 8009558:	4621      	mov	r1, r4
 800955a:	f7fd fa45 	bl	80069e8 <memset>
 800955e:	e7f4      	b.n	800954a <_calloc_r+0x12>

08009560 <rshift>:
 8009560:	6903      	ldr	r3, [r0, #16]
 8009562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009566:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800956a:	f100 0414 	add.w	r4, r0, #20
 800956e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009572:	dd46      	ble.n	8009602 <rshift+0xa2>
 8009574:	f011 011f 	ands.w	r1, r1, #31
 8009578:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800957c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009580:	d10c      	bne.n	800959c <rshift+0x3c>
 8009582:	4629      	mov	r1, r5
 8009584:	f100 0710 	add.w	r7, r0, #16
 8009588:	42b1      	cmp	r1, r6
 800958a:	d335      	bcc.n	80095f8 <rshift+0x98>
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	1eea      	subs	r2, r5, #3
 8009592:	4296      	cmp	r6, r2
 8009594:	bf38      	it	cc
 8009596:	2300      	movcc	r3, #0
 8009598:	4423      	add	r3, r4
 800959a:	e015      	b.n	80095c8 <rshift+0x68>
 800959c:	46a1      	mov	r9, r4
 800959e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095a2:	f1c1 0820 	rsb	r8, r1, #32
 80095a6:	40cf      	lsrs	r7, r1
 80095a8:	f105 0e04 	add.w	lr, r5, #4
 80095ac:	4576      	cmp	r6, lr
 80095ae:	46f4      	mov	ip, lr
 80095b0:	d816      	bhi.n	80095e0 <rshift+0x80>
 80095b2:	1a9a      	subs	r2, r3, r2
 80095b4:	0092      	lsls	r2, r2, #2
 80095b6:	3a04      	subs	r2, #4
 80095b8:	3501      	adds	r5, #1
 80095ba:	42ae      	cmp	r6, r5
 80095bc:	bf38      	it	cc
 80095be:	2200      	movcc	r2, #0
 80095c0:	18a3      	adds	r3, r4, r2
 80095c2:	50a7      	str	r7, [r4, r2]
 80095c4:	b107      	cbz	r7, 80095c8 <rshift+0x68>
 80095c6:	3304      	adds	r3, #4
 80095c8:	42a3      	cmp	r3, r4
 80095ca:	eba3 0204 	sub.w	r2, r3, r4
 80095ce:	bf08      	it	eq
 80095d0:	2300      	moveq	r3, #0
 80095d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095d6:	6102      	str	r2, [r0, #16]
 80095d8:	bf08      	it	eq
 80095da:	6143      	streq	r3, [r0, #20]
 80095dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e0:	f8dc c000 	ldr.w	ip, [ip]
 80095e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80095e8:	ea4c 0707 	orr.w	r7, ip, r7
 80095ec:	f849 7b04 	str.w	r7, [r9], #4
 80095f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095f4:	40cf      	lsrs	r7, r1
 80095f6:	e7d9      	b.n	80095ac <rshift+0x4c>
 80095f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80095fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8009600:	e7c2      	b.n	8009588 <rshift+0x28>
 8009602:	4623      	mov	r3, r4
 8009604:	e7e0      	b.n	80095c8 <rshift+0x68>

08009606 <__hexdig_fun>:
 8009606:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800960a:	2b09      	cmp	r3, #9
 800960c:	d802      	bhi.n	8009614 <__hexdig_fun+0xe>
 800960e:	3820      	subs	r0, #32
 8009610:	b2c0      	uxtb	r0, r0
 8009612:	4770      	bx	lr
 8009614:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009618:	2b05      	cmp	r3, #5
 800961a:	d801      	bhi.n	8009620 <__hexdig_fun+0x1a>
 800961c:	3847      	subs	r0, #71	; 0x47
 800961e:	e7f7      	b.n	8009610 <__hexdig_fun+0xa>
 8009620:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009624:	2b05      	cmp	r3, #5
 8009626:	d801      	bhi.n	800962c <__hexdig_fun+0x26>
 8009628:	3827      	subs	r0, #39	; 0x27
 800962a:	e7f1      	b.n	8009610 <__hexdig_fun+0xa>
 800962c:	2000      	movs	r0, #0
 800962e:	4770      	bx	lr

08009630 <__gethex>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	4681      	mov	r9, r0
 8009636:	468a      	mov	sl, r1
 8009638:	4617      	mov	r7, r2
 800963a:	680a      	ldr	r2, [r1, #0]
 800963c:	b085      	sub	sp, #20
 800963e:	f102 0b02 	add.w	fp, r2, #2
 8009642:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009646:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	32fe      	adds	r2, #254	; 0xfe
 800964e:	eb02 030b 	add.w	r3, r2, fp
 8009652:	46d8      	mov	r8, fp
 8009654:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	2830      	cmp	r0, #48	; 0x30
 800965c:	d0f7      	beq.n	800964e <__gethex+0x1e>
 800965e:	f7ff ffd2 	bl	8009606 <__hexdig_fun>
 8009662:	4604      	mov	r4, r0
 8009664:	2800      	cmp	r0, #0
 8009666:	d138      	bne.n	80096da <__gethex+0xaa>
 8009668:	2201      	movs	r2, #1
 800966a:	4640      	mov	r0, r8
 800966c:	49a7      	ldr	r1, [pc, #668]	; (800990c <__gethex+0x2dc>)
 800966e:	f7ff ff1d 	bl	80094ac <strncmp>
 8009672:	4606      	mov	r6, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	d169      	bne.n	800974c <__gethex+0x11c>
 8009678:	f898 0001 	ldrb.w	r0, [r8, #1]
 800967c:	465d      	mov	r5, fp
 800967e:	f7ff ffc2 	bl	8009606 <__hexdig_fun>
 8009682:	2800      	cmp	r0, #0
 8009684:	d064      	beq.n	8009750 <__gethex+0x120>
 8009686:	465a      	mov	r2, fp
 8009688:	7810      	ldrb	r0, [r2, #0]
 800968a:	4690      	mov	r8, r2
 800968c:	2830      	cmp	r0, #48	; 0x30
 800968e:	f102 0201 	add.w	r2, r2, #1
 8009692:	d0f9      	beq.n	8009688 <__gethex+0x58>
 8009694:	f7ff ffb7 	bl	8009606 <__hexdig_fun>
 8009698:	2301      	movs	r3, #1
 800969a:	fab0 f480 	clz	r4, r0
 800969e:	465e      	mov	r6, fp
 80096a0:	0964      	lsrs	r4, r4, #5
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	4642      	mov	r2, r8
 80096a6:	4615      	mov	r5, r2
 80096a8:	7828      	ldrb	r0, [r5, #0]
 80096aa:	3201      	adds	r2, #1
 80096ac:	f7ff ffab 	bl	8009606 <__hexdig_fun>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d1f8      	bne.n	80096a6 <__gethex+0x76>
 80096b4:	2201      	movs	r2, #1
 80096b6:	4628      	mov	r0, r5
 80096b8:	4994      	ldr	r1, [pc, #592]	; (800990c <__gethex+0x2dc>)
 80096ba:	f7ff fef7 	bl	80094ac <strncmp>
 80096be:	b978      	cbnz	r0, 80096e0 <__gethex+0xb0>
 80096c0:	b946      	cbnz	r6, 80096d4 <__gethex+0xa4>
 80096c2:	1c6e      	adds	r6, r5, #1
 80096c4:	4632      	mov	r2, r6
 80096c6:	4615      	mov	r5, r2
 80096c8:	7828      	ldrb	r0, [r5, #0]
 80096ca:	3201      	adds	r2, #1
 80096cc:	f7ff ff9b 	bl	8009606 <__hexdig_fun>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1f8      	bne.n	80096c6 <__gethex+0x96>
 80096d4:	1b73      	subs	r3, r6, r5
 80096d6:	009e      	lsls	r6, r3, #2
 80096d8:	e004      	b.n	80096e4 <__gethex+0xb4>
 80096da:	2400      	movs	r4, #0
 80096dc:	4626      	mov	r6, r4
 80096de:	e7e1      	b.n	80096a4 <__gethex+0x74>
 80096e0:	2e00      	cmp	r6, #0
 80096e2:	d1f7      	bne.n	80096d4 <__gethex+0xa4>
 80096e4:	782b      	ldrb	r3, [r5, #0]
 80096e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096ea:	2b50      	cmp	r3, #80	; 0x50
 80096ec:	d13d      	bne.n	800976a <__gethex+0x13a>
 80096ee:	786b      	ldrb	r3, [r5, #1]
 80096f0:	2b2b      	cmp	r3, #43	; 0x2b
 80096f2:	d02f      	beq.n	8009754 <__gethex+0x124>
 80096f4:	2b2d      	cmp	r3, #45	; 0x2d
 80096f6:	d031      	beq.n	800975c <__gethex+0x12c>
 80096f8:	f04f 0b00 	mov.w	fp, #0
 80096fc:	1c69      	adds	r1, r5, #1
 80096fe:	7808      	ldrb	r0, [r1, #0]
 8009700:	f7ff ff81 	bl	8009606 <__hexdig_fun>
 8009704:	1e42      	subs	r2, r0, #1
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	2a18      	cmp	r2, #24
 800970a:	d82e      	bhi.n	800976a <__gethex+0x13a>
 800970c:	f1a0 0210 	sub.w	r2, r0, #16
 8009710:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009714:	f7ff ff77 	bl	8009606 <__hexdig_fun>
 8009718:	f100 3cff 	add.w	ip, r0, #4294967295
 800971c:	fa5f fc8c 	uxtb.w	ip, ip
 8009720:	f1bc 0f18 	cmp.w	ip, #24
 8009724:	d91d      	bls.n	8009762 <__gethex+0x132>
 8009726:	f1bb 0f00 	cmp.w	fp, #0
 800972a:	d000      	beq.n	800972e <__gethex+0xfe>
 800972c:	4252      	negs	r2, r2
 800972e:	4416      	add	r6, r2
 8009730:	f8ca 1000 	str.w	r1, [sl]
 8009734:	b1dc      	cbz	r4, 800976e <__gethex+0x13e>
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf14      	ite	ne
 800973c:	f04f 0800 	movne.w	r8, #0
 8009740:	f04f 0806 	moveq.w	r8, #6
 8009744:	4640      	mov	r0, r8
 8009746:	b005      	add	sp, #20
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	4645      	mov	r5, r8
 800974e:	4626      	mov	r6, r4
 8009750:	2401      	movs	r4, #1
 8009752:	e7c7      	b.n	80096e4 <__gethex+0xb4>
 8009754:	f04f 0b00 	mov.w	fp, #0
 8009758:	1ca9      	adds	r1, r5, #2
 800975a:	e7d0      	b.n	80096fe <__gethex+0xce>
 800975c:	f04f 0b01 	mov.w	fp, #1
 8009760:	e7fa      	b.n	8009758 <__gethex+0x128>
 8009762:	230a      	movs	r3, #10
 8009764:	fb03 0002 	mla	r0, r3, r2, r0
 8009768:	e7d0      	b.n	800970c <__gethex+0xdc>
 800976a:	4629      	mov	r1, r5
 800976c:	e7e0      	b.n	8009730 <__gethex+0x100>
 800976e:	4621      	mov	r1, r4
 8009770:	eba5 0308 	sub.w	r3, r5, r8
 8009774:	3b01      	subs	r3, #1
 8009776:	2b07      	cmp	r3, #7
 8009778:	dc0a      	bgt.n	8009790 <__gethex+0x160>
 800977a:	4648      	mov	r0, r9
 800977c:	f7fe f940 	bl	8007a00 <_Balloc>
 8009780:	4604      	mov	r4, r0
 8009782:	b940      	cbnz	r0, 8009796 <__gethex+0x166>
 8009784:	4602      	mov	r2, r0
 8009786:	21e4      	movs	r1, #228	; 0xe4
 8009788:	4b61      	ldr	r3, [pc, #388]	; (8009910 <__gethex+0x2e0>)
 800978a:	4862      	ldr	r0, [pc, #392]	; (8009914 <__gethex+0x2e4>)
 800978c:	f7ff feb6 	bl	80094fc <__assert_func>
 8009790:	3101      	adds	r1, #1
 8009792:	105b      	asrs	r3, r3, #1
 8009794:	e7ef      	b.n	8009776 <__gethex+0x146>
 8009796:	2300      	movs	r3, #0
 8009798:	469b      	mov	fp, r3
 800979a:	f100 0a14 	add.w	sl, r0, #20
 800979e:	f8cd a004 	str.w	sl, [sp, #4]
 80097a2:	45a8      	cmp	r8, r5
 80097a4:	d344      	bcc.n	8009830 <__gethex+0x200>
 80097a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80097aa:	4658      	mov	r0, fp
 80097ac:	f848 bb04 	str.w	fp, [r8], #4
 80097b0:	eba8 080a 	sub.w	r8, r8, sl
 80097b4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80097b8:	6122      	str	r2, [r4, #16]
 80097ba:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80097be:	f7fe fa11 	bl	8007be4 <__hi0bits>
 80097c2:	683d      	ldr	r5, [r7, #0]
 80097c4:	eba8 0800 	sub.w	r8, r8, r0
 80097c8:	45a8      	cmp	r8, r5
 80097ca:	dd59      	ble.n	8009880 <__gethex+0x250>
 80097cc:	eba8 0805 	sub.w	r8, r8, r5
 80097d0:	4641      	mov	r1, r8
 80097d2:	4620      	mov	r0, r4
 80097d4:	f7fe fd8f 	bl	80082f6 <__any_on>
 80097d8:	4683      	mov	fp, r0
 80097da:	b1b8      	cbz	r0, 800980c <__gethex+0x1dc>
 80097dc:	f04f 0b01 	mov.w	fp, #1
 80097e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80097e4:	1159      	asrs	r1, r3, #5
 80097e6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097ea:	f003 021f 	and.w	r2, r3, #31
 80097ee:	fa0b f202 	lsl.w	r2, fp, r2
 80097f2:	420a      	tst	r2, r1
 80097f4:	d00a      	beq.n	800980c <__gethex+0x1dc>
 80097f6:	455b      	cmp	r3, fp
 80097f8:	dd06      	ble.n	8009808 <__gethex+0x1d8>
 80097fa:	4620      	mov	r0, r4
 80097fc:	f1a8 0102 	sub.w	r1, r8, #2
 8009800:	f7fe fd79 	bl	80082f6 <__any_on>
 8009804:	2800      	cmp	r0, #0
 8009806:	d138      	bne.n	800987a <__gethex+0x24a>
 8009808:	f04f 0b02 	mov.w	fp, #2
 800980c:	4641      	mov	r1, r8
 800980e:	4620      	mov	r0, r4
 8009810:	f7ff fea6 	bl	8009560 <rshift>
 8009814:	4446      	add	r6, r8
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	42b3      	cmp	r3, r6
 800981a:	da41      	bge.n	80098a0 <__gethex+0x270>
 800981c:	4621      	mov	r1, r4
 800981e:	4648      	mov	r0, r9
 8009820:	f7fe f92e 	bl	8007a80 <_Bfree>
 8009824:	2300      	movs	r3, #0
 8009826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009828:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	e789      	b.n	8009744 <__gethex+0x114>
 8009830:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009834:	2a2e      	cmp	r2, #46	; 0x2e
 8009836:	d014      	beq.n	8009862 <__gethex+0x232>
 8009838:	2b20      	cmp	r3, #32
 800983a:	d106      	bne.n	800984a <__gethex+0x21a>
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	f843 bb04 	str.w	fp, [r3], #4
 8009842:	f04f 0b00 	mov.w	fp, #0
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	465b      	mov	r3, fp
 800984a:	7828      	ldrb	r0, [r5, #0]
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	f7ff feda 	bl	8009606 <__hexdig_fun>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	f000 000f 	and.w	r0, r0, #15
 8009858:	4098      	lsls	r0, r3
 800985a:	ea4b 0b00 	orr.w	fp, fp, r0
 800985e:	3304      	adds	r3, #4
 8009860:	e79f      	b.n	80097a2 <__gethex+0x172>
 8009862:	45a8      	cmp	r8, r5
 8009864:	d8e8      	bhi.n	8009838 <__gethex+0x208>
 8009866:	2201      	movs	r2, #1
 8009868:	4628      	mov	r0, r5
 800986a:	4928      	ldr	r1, [pc, #160]	; (800990c <__gethex+0x2dc>)
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	f7ff fe1d 	bl	80094ac <strncmp>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	2800      	cmp	r0, #0
 8009876:	d1df      	bne.n	8009838 <__gethex+0x208>
 8009878:	e793      	b.n	80097a2 <__gethex+0x172>
 800987a:	f04f 0b03 	mov.w	fp, #3
 800987e:	e7c5      	b.n	800980c <__gethex+0x1dc>
 8009880:	da0b      	bge.n	800989a <__gethex+0x26a>
 8009882:	eba5 0808 	sub.w	r8, r5, r8
 8009886:	4621      	mov	r1, r4
 8009888:	4642      	mov	r2, r8
 800988a:	4648      	mov	r0, r9
 800988c:	f7fe fb10 	bl	8007eb0 <__lshift>
 8009890:	4604      	mov	r4, r0
 8009892:	eba6 0608 	sub.w	r6, r6, r8
 8009896:	f100 0a14 	add.w	sl, r0, #20
 800989a:	f04f 0b00 	mov.w	fp, #0
 800989e:	e7ba      	b.n	8009816 <__gethex+0x1e6>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	42b3      	cmp	r3, r6
 80098a4:	dd74      	ble.n	8009990 <__gethex+0x360>
 80098a6:	1b9e      	subs	r6, r3, r6
 80098a8:	42b5      	cmp	r5, r6
 80098aa:	dc35      	bgt.n	8009918 <__gethex+0x2e8>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d023      	beq.n	80098fa <__gethex+0x2ca>
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d025      	beq.n	8009902 <__gethex+0x2d2>
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d115      	bne.n	80098e6 <__gethex+0x2b6>
 80098ba:	42b5      	cmp	r5, r6
 80098bc:	d113      	bne.n	80098e6 <__gethex+0x2b6>
 80098be:	2d01      	cmp	r5, #1
 80098c0:	d10b      	bne.n	80098da <__gethex+0x2aa>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	9a02      	ldr	r2, [sp, #8]
 80098c6:	f04f 0862 	mov.w	r8, #98	; 0x62
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	2301      	movs	r3, #1
 80098ce:	6123      	str	r3, [r4, #16]
 80098d0:	f8ca 3000 	str.w	r3, [sl]
 80098d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098d6:	601c      	str	r4, [r3, #0]
 80098d8:	e734      	b.n	8009744 <__gethex+0x114>
 80098da:	4620      	mov	r0, r4
 80098dc:	1e69      	subs	r1, r5, #1
 80098de:	f7fe fd0a 	bl	80082f6 <__any_on>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d1ed      	bne.n	80098c2 <__gethex+0x292>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4648      	mov	r0, r9
 80098ea:	f7fe f8c9 	bl	8007a80 <_Bfree>
 80098ee:	2300      	movs	r3, #0
 80098f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	e724      	b.n	8009744 <__gethex+0x114>
 80098fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f2      	bne.n	80098e6 <__gethex+0x2b6>
 8009900:	e7df      	b.n	80098c2 <__gethex+0x292>
 8009902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1dc      	bne.n	80098c2 <__gethex+0x292>
 8009908:	e7ed      	b.n	80098e6 <__gethex+0x2b6>
 800990a:	bf00      	nop
 800990c:	0800a5e4 	.word	0x0800a5e4
 8009910:	0800a479 	.word	0x0800a479
 8009914:	0800a78e 	.word	0x0800a78e
 8009918:	f106 38ff 	add.w	r8, r6, #4294967295
 800991c:	f1bb 0f00 	cmp.w	fp, #0
 8009920:	d133      	bne.n	800998a <__gethex+0x35a>
 8009922:	f1b8 0f00 	cmp.w	r8, #0
 8009926:	d004      	beq.n	8009932 <__gethex+0x302>
 8009928:	4641      	mov	r1, r8
 800992a:	4620      	mov	r0, r4
 800992c:	f7fe fce3 	bl	80082f6 <__any_on>
 8009930:	4683      	mov	fp, r0
 8009932:	2301      	movs	r3, #1
 8009934:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009938:	f008 081f 	and.w	r8, r8, #31
 800993c:	fa03 f308 	lsl.w	r3, r3, r8
 8009940:	f04f 0802 	mov.w	r8, #2
 8009944:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009948:	4631      	mov	r1, r6
 800994a:	4213      	tst	r3, r2
 800994c:	4620      	mov	r0, r4
 800994e:	bf18      	it	ne
 8009950:	f04b 0b02 	orrne.w	fp, fp, #2
 8009954:	1bad      	subs	r5, r5, r6
 8009956:	f7ff fe03 	bl	8009560 <rshift>
 800995a:	687e      	ldr	r6, [r7, #4]
 800995c:	f1bb 0f00 	cmp.w	fp, #0
 8009960:	d04a      	beq.n	80099f8 <__gethex+0x3c8>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d016      	beq.n	8009996 <__gethex+0x366>
 8009968:	2b03      	cmp	r3, #3
 800996a:	d018      	beq.n	800999e <__gethex+0x36e>
 800996c:	2b01      	cmp	r3, #1
 800996e:	d109      	bne.n	8009984 <__gethex+0x354>
 8009970:	f01b 0f02 	tst.w	fp, #2
 8009974:	d006      	beq.n	8009984 <__gethex+0x354>
 8009976:	f8da 3000 	ldr.w	r3, [sl]
 800997a:	ea4b 0b03 	orr.w	fp, fp, r3
 800997e:	f01b 0f01 	tst.w	fp, #1
 8009982:	d10f      	bne.n	80099a4 <__gethex+0x374>
 8009984:	f048 0810 	orr.w	r8, r8, #16
 8009988:	e036      	b.n	80099f8 <__gethex+0x3c8>
 800998a:	f04f 0b01 	mov.w	fp, #1
 800998e:	e7d0      	b.n	8009932 <__gethex+0x302>
 8009990:	f04f 0801 	mov.w	r8, #1
 8009994:	e7e2      	b.n	800995c <__gethex+0x32c>
 8009996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009998:	f1c3 0301 	rsb	r3, r3, #1
 800999c:	930f      	str	r3, [sp, #60]	; 0x3c
 800999e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ef      	beq.n	8009984 <__gethex+0x354>
 80099a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099a8:	f104 0214 	add.w	r2, r4, #20
 80099ac:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	2300      	movs	r3, #0
 80099b4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80099b8:	4694      	mov	ip, r2
 80099ba:	f852 1b04 	ldr.w	r1, [r2], #4
 80099be:	f1b1 3fff 	cmp.w	r1, #4294967295
 80099c2:	d01e      	beq.n	8009a02 <__gethex+0x3d2>
 80099c4:	3101      	adds	r1, #1
 80099c6:	f8cc 1000 	str.w	r1, [ip]
 80099ca:	f1b8 0f02 	cmp.w	r8, #2
 80099ce:	f104 0214 	add.w	r2, r4, #20
 80099d2:	d13d      	bne.n	8009a50 <__gethex+0x420>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	42ab      	cmp	r3, r5
 80099da:	d10b      	bne.n	80099f4 <__gethex+0x3c4>
 80099dc:	2301      	movs	r3, #1
 80099de:	1169      	asrs	r1, r5, #5
 80099e0:	f005 051f 	and.w	r5, r5, #31
 80099e4:	fa03 f505 	lsl.w	r5, r3, r5
 80099e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ec:	421d      	tst	r5, r3
 80099ee:	bf18      	it	ne
 80099f0:	f04f 0801 	movne.w	r8, #1
 80099f4:	f048 0820 	orr.w	r8, r8, #32
 80099f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fa:	601c      	str	r4, [r3, #0]
 80099fc:	9b02      	ldr	r3, [sp, #8]
 80099fe:	601e      	str	r6, [r3, #0]
 8009a00:	e6a0      	b.n	8009744 <__gethex+0x114>
 8009a02:	4290      	cmp	r0, r2
 8009a04:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a08:	d8d6      	bhi.n	80099b8 <__gethex+0x388>
 8009a0a:	68a2      	ldr	r2, [r4, #8]
 8009a0c:	4593      	cmp	fp, r2
 8009a0e:	db17      	blt.n	8009a40 <__gethex+0x410>
 8009a10:	6861      	ldr	r1, [r4, #4]
 8009a12:	4648      	mov	r0, r9
 8009a14:	3101      	adds	r1, #1
 8009a16:	f7fd fff3 	bl	8007a00 <_Balloc>
 8009a1a:	4682      	mov	sl, r0
 8009a1c:	b918      	cbnz	r0, 8009a26 <__gethex+0x3f6>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	2184      	movs	r1, #132	; 0x84
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <__gethex+0x45c>)
 8009a24:	e6b1      	b.n	800978a <__gethex+0x15a>
 8009a26:	6922      	ldr	r2, [r4, #16]
 8009a28:	f104 010c 	add.w	r1, r4, #12
 8009a2c:	3202      	adds	r2, #2
 8009a2e:	0092      	lsls	r2, r2, #2
 8009a30:	300c      	adds	r0, #12
 8009a32:	f7fd f866 	bl	8006b02 <memcpy>
 8009a36:	4621      	mov	r1, r4
 8009a38:	4648      	mov	r0, r9
 8009a3a:	f7fe f821 	bl	8007a80 <_Bfree>
 8009a3e:	4654      	mov	r4, sl
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	1c51      	adds	r1, r2, #1
 8009a44:	6121      	str	r1, [r4, #16]
 8009a46:	2101      	movs	r1, #1
 8009a48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a4c:	6151      	str	r1, [r2, #20]
 8009a4e:	e7bc      	b.n	80099ca <__gethex+0x39a>
 8009a50:	6921      	ldr	r1, [r4, #16]
 8009a52:	4559      	cmp	r1, fp
 8009a54:	dd0b      	ble.n	8009a6e <__gethex+0x43e>
 8009a56:	2101      	movs	r1, #1
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7ff fd81 	bl	8009560 <rshift>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	3601      	adds	r6, #1
 8009a62:	42b3      	cmp	r3, r6
 8009a64:	f6ff aeda 	blt.w	800981c <__gethex+0x1ec>
 8009a68:	f04f 0801 	mov.w	r8, #1
 8009a6c:	e7c2      	b.n	80099f4 <__gethex+0x3c4>
 8009a6e:	f015 051f 	ands.w	r5, r5, #31
 8009a72:	d0f9      	beq.n	8009a68 <__gethex+0x438>
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	f1c5 0520 	rsb	r5, r5, #32
 8009a7a:	441a      	add	r2, r3
 8009a7c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009a80:	f7fe f8b0 	bl	8007be4 <__hi0bits>
 8009a84:	42a8      	cmp	r0, r5
 8009a86:	dbe6      	blt.n	8009a56 <__gethex+0x426>
 8009a88:	e7ee      	b.n	8009a68 <__gethex+0x438>
 8009a8a:	bf00      	nop
 8009a8c:	0800a479 	.word	0x0800a479

08009a90 <L_shift>:
 8009a90:	f1c2 0208 	rsb	r2, r2, #8
 8009a94:	0092      	lsls	r2, r2, #2
 8009a96:	b570      	push	{r4, r5, r6, lr}
 8009a98:	f1c2 0620 	rsb	r6, r2, #32
 8009a9c:	6843      	ldr	r3, [r0, #4]
 8009a9e:	6804      	ldr	r4, [r0, #0]
 8009aa0:	fa03 f506 	lsl.w	r5, r3, r6
 8009aa4:	432c      	orrs	r4, r5
 8009aa6:	40d3      	lsrs	r3, r2
 8009aa8:	6004      	str	r4, [r0, #0]
 8009aaa:	f840 3f04 	str.w	r3, [r0, #4]!
 8009aae:	4288      	cmp	r0, r1
 8009ab0:	d3f4      	bcc.n	8009a9c <L_shift+0xc>
 8009ab2:	bd70      	pop	{r4, r5, r6, pc}

08009ab4 <__match>:
 8009ab4:	b530      	push	{r4, r5, lr}
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009abe:	b914      	cbnz	r4, 8009ac6 <__match+0x12>
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	bd30      	pop	{r4, r5, pc}
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ace:	2d19      	cmp	r5, #25
 8009ad0:	bf98      	it	ls
 8009ad2:	3220      	addls	r2, #32
 8009ad4:	42a2      	cmp	r2, r4
 8009ad6:	d0f0      	beq.n	8009aba <__match+0x6>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f3      	b.n	8009ac4 <__match+0x10>

08009adc <__hexnan>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	2500      	movs	r5, #0
 8009ae2:	680b      	ldr	r3, [r1, #0]
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	115e      	asrs	r6, r3, #5
 8009ae8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009aec:	f013 031f 	ands.w	r3, r3, #31
 8009af0:	bf18      	it	ne
 8009af2:	3604      	addne	r6, #4
 8009af4:	1f37      	subs	r7, r6, #4
 8009af6:	4690      	mov	r8, r2
 8009af8:	46b9      	mov	r9, r7
 8009afa:	463c      	mov	r4, r7
 8009afc:	46ab      	mov	fp, r5
 8009afe:	b087      	sub	sp, #28
 8009b00:	6801      	ldr	r1, [r0, #0]
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b08:	9502      	str	r5, [sp, #8]
 8009b0a:	784a      	ldrb	r2, [r1, #1]
 8009b0c:	1c4b      	adds	r3, r1, #1
 8009b0e:	9303      	str	r3, [sp, #12]
 8009b10:	b342      	cbz	r2, 8009b64 <__hexnan+0x88>
 8009b12:	4610      	mov	r0, r2
 8009b14:	9105      	str	r1, [sp, #20]
 8009b16:	9204      	str	r2, [sp, #16]
 8009b18:	f7ff fd75 	bl	8009606 <__hexdig_fun>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d14f      	bne.n	8009bc0 <__hexnan+0xe4>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	9905      	ldr	r1, [sp, #20]
 8009b24:	2a20      	cmp	r2, #32
 8009b26:	d818      	bhi.n	8009b5a <__hexnan+0x7e>
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	459b      	cmp	fp, r3
 8009b2c:	dd13      	ble.n	8009b56 <__hexnan+0x7a>
 8009b2e:	454c      	cmp	r4, r9
 8009b30:	d206      	bcs.n	8009b40 <__hexnan+0x64>
 8009b32:	2d07      	cmp	r5, #7
 8009b34:	dc04      	bgt.n	8009b40 <__hexnan+0x64>
 8009b36:	462a      	mov	r2, r5
 8009b38:	4649      	mov	r1, r9
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff ffa8 	bl	8009a90 <L_shift>
 8009b40:	4544      	cmp	r4, r8
 8009b42:	d950      	bls.n	8009be6 <__hexnan+0x10a>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f1a4 0904 	sub.w	r9, r4, #4
 8009b4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b4e:	461d      	mov	r5, r3
 8009b50:	464c      	mov	r4, r9
 8009b52:	f8cd b008 	str.w	fp, [sp, #8]
 8009b56:	9903      	ldr	r1, [sp, #12]
 8009b58:	e7d7      	b.n	8009b0a <__hexnan+0x2e>
 8009b5a:	2a29      	cmp	r2, #41	; 0x29
 8009b5c:	d155      	bne.n	8009c0a <__hexnan+0x12e>
 8009b5e:	3102      	adds	r1, #2
 8009b60:	f8ca 1000 	str.w	r1, [sl]
 8009b64:	f1bb 0f00 	cmp.w	fp, #0
 8009b68:	d04f      	beq.n	8009c0a <__hexnan+0x12e>
 8009b6a:	454c      	cmp	r4, r9
 8009b6c:	d206      	bcs.n	8009b7c <__hexnan+0xa0>
 8009b6e:	2d07      	cmp	r5, #7
 8009b70:	dc04      	bgt.n	8009b7c <__hexnan+0xa0>
 8009b72:	462a      	mov	r2, r5
 8009b74:	4649      	mov	r1, r9
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7ff ff8a 	bl	8009a90 <L_shift>
 8009b7c:	4544      	cmp	r4, r8
 8009b7e:	d934      	bls.n	8009bea <__hexnan+0x10e>
 8009b80:	4623      	mov	r3, r4
 8009b82:	f1a8 0204 	sub.w	r2, r8, #4
 8009b86:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b8a:	429f      	cmp	r7, r3
 8009b8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b90:	d2f9      	bcs.n	8009b86 <__hexnan+0xaa>
 8009b92:	1b3b      	subs	r3, r7, r4
 8009b94:	f023 0303 	bic.w	r3, r3, #3
 8009b98:	3304      	adds	r3, #4
 8009b9a:	3e03      	subs	r6, #3
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	42a6      	cmp	r6, r4
 8009ba0:	bf38      	it	cc
 8009ba2:	2304      	movcc	r3, #4
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4443      	add	r3, r8
 8009ba8:	f843 2b04 	str.w	r2, [r3], #4
 8009bac:	429f      	cmp	r7, r3
 8009bae:	d2fb      	bcs.n	8009ba8 <__hexnan+0xcc>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	b91b      	cbnz	r3, 8009bbc <__hexnan+0xe0>
 8009bb4:	4547      	cmp	r7, r8
 8009bb6:	d126      	bne.n	8009c06 <__hexnan+0x12a>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	2005      	movs	r0, #5
 8009bbe:	e025      	b.n	8009c0c <__hexnan+0x130>
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	2d08      	cmp	r5, #8
 8009bc4:	f10b 0b01 	add.w	fp, fp, #1
 8009bc8:	dd06      	ble.n	8009bd8 <__hexnan+0xfc>
 8009bca:	4544      	cmp	r4, r8
 8009bcc:	d9c3      	bls.n	8009b56 <__hexnan+0x7a>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2501      	movs	r5, #1
 8009bd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bd6:	3c04      	subs	r4, #4
 8009bd8:	6822      	ldr	r2, [r4, #0]
 8009bda:	f000 000f 	and.w	r0, r0, #15
 8009bde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009be2:	6020      	str	r0, [r4, #0]
 8009be4:	e7b7      	b.n	8009b56 <__hexnan+0x7a>
 8009be6:	2508      	movs	r5, #8
 8009be8:	e7b5      	b.n	8009b56 <__hexnan+0x7a>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0df      	beq.n	8009bb0 <__hexnan+0xd4>
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf4:	f1c3 0320 	rsb	r3, r3, #32
 8009bf8:	40da      	lsrs	r2, r3
 8009bfa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c04:	e7d4      	b.n	8009bb0 <__hexnan+0xd4>
 8009c06:	3f04      	subs	r7, #4
 8009c08:	e7d2      	b.n	8009bb0 <__hexnan+0xd4>
 8009c0a:	2004      	movs	r0, #4
 8009c0c:	b007      	add	sp, #28
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c12 <__ascii_mbtowc>:
 8009c12:	b082      	sub	sp, #8
 8009c14:	b901      	cbnz	r1, 8009c18 <__ascii_mbtowc+0x6>
 8009c16:	a901      	add	r1, sp, #4
 8009c18:	b142      	cbz	r2, 8009c2c <__ascii_mbtowc+0x1a>
 8009c1a:	b14b      	cbz	r3, 8009c30 <__ascii_mbtowc+0x1e>
 8009c1c:	7813      	ldrb	r3, [r2, #0]
 8009c1e:	600b      	str	r3, [r1, #0]
 8009c20:	7812      	ldrb	r2, [r2, #0]
 8009c22:	1e10      	subs	r0, r2, #0
 8009c24:	bf18      	it	ne
 8009c26:	2001      	movne	r0, #1
 8009c28:	b002      	add	sp, #8
 8009c2a:	4770      	bx	lr
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	e7fb      	b.n	8009c28 <__ascii_mbtowc+0x16>
 8009c30:	f06f 0001 	mvn.w	r0, #1
 8009c34:	e7f8      	b.n	8009c28 <__ascii_mbtowc+0x16>

08009c36 <_realloc_r>:
 8009c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	4680      	mov	r8, r0
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	460e      	mov	r6, r1
 8009c40:	b921      	cbnz	r1, 8009c4c <_realloc_r+0x16>
 8009c42:	4611      	mov	r1, r2
 8009c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	f7fd be4e 	b.w	80078e8 <_malloc_r>
 8009c4c:	b92a      	cbnz	r2, 8009c5a <_realloc_r+0x24>
 8009c4e:	f7fd fddb 	bl	8007808 <_free_r>
 8009c52:	4625      	mov	r5, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5a:	f000 f842 	bl	8009ce2 <_malloc_usable_size_r>
 8009c5e:	4284      	cmp	r4, r0
 8009c60:	4607      	mov	r7, r0
 8009c62:	d802      	bhi.n	8009c6a <_realloc_r+0x34>
 8009c64:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c68:	d812      	bhi.n	8009c90 <_realloc_r+0x5a>
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	f7fd fe3b 	bl	80078e8 <_malloc_r>
 8009c72:	4605      	mov	r5, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d0ed      	beq.n	8009c54 <_realloc_r+0x1e>
 8009c78:	42bc      	cmp	r4, r7
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	bf28      	it	cs
 8009c80:	463a      	movcs	r2, r7
 8009c82:	f7fc ff3e 	bl	8006b02 <memcpy>
 8009c86:	4631      	mov	r1, r6
 8009c88:	4640      	mov	r0, r8
 8009c8a:	f7fd fdbd 	bl	8007808 <_free_r>
 8009c8e:	e7e1      	b.n	8009c54 <_realloc_r+0x1e>
 8009c90:	4635      	mov	r5, r6
 8009c92:	e7df      	b.n	8009c54 <_realloc_r+0x1e>

08009c94 <__ascii_wctomb>:
 8009c94:	4603      	mov	r3, r0
 8009c96:	4608      	mov	r0, r1
 8009c98:	b141      	cbz	r1, 8009cac <__ascii_wctomb+0x18>
 8009c9a:	2aff      	cmp	r2, #255	; 0xff
 8009c9c:	d904      	bls.n	8009ca8 <__ascii_wctomb+0x14>
 8009c9e:	228a      	movs	r2, #138	; 0x8a
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	4770      	bx	lr
 8009ca8:	2001      	movs	r0, #1
 8009caa:	700a      	strb	r2, [r1, #0]
 8009cac:	4770      	bx	lr
	...

08009cb0 <fiprintf>:
 8009cb0:	b40e      	push	{r1, r2, r3}
 8009cb2:	b503      	push	{r0, r1, lr}
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	ab03      	add	r3, sp, #12
 8009cb8:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <fiprintf+0x20>)
 8009cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbe:	6800      	ldr	r0, [r0, #0]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	f000 f83d 	bl	8009d40 <_vfiprintf_r>
 8009cc6:	b002      	add	sp, #8
 8009cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ccc:	b003      	add	sp, #12
 8009cce:	4770      	bx	lr
 8009cd0:	20000070 	.word	0x20000070

08009cd4 <abort>:
 8009cd4:	2006      	movs	r0, #6
 8009cd6:	b508      	push	{r3, lr}
 8009cd8:	f000 fa0a 	bl	800a0f0 <raise>
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f000 faaf 	bl	800a240 <_exit>

08009ce2 <_malloc_usable_size_r>:
 8009ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce6:	1f18      	subs	r0, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bfbc      	itt	lt
 8009cec:	580b      	ldrlt	r3, [r1, r0]
 8009cee:	18c0      	addlt	r0, r0, r3
 8009cf0:	4770      	bx	lr

08009cf2 <__sfputc_r>:
 8009cf2:	6893      	ldr	r3, [r2, #8]
 8009cf4:	b410      	push	{r4}
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	6093      	str	r3, [r2, #8]
 8009cfc:	da07      	bge.n	8009d0e <__sfputc_r+0x1c>
 8009cfe:	6994      	ldr	r4, [r2, #24]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	db01      	blt.n	8009d08 <__sfputc_r+0x16>
 8009d04:	290a      	cmp	r1, #10
 8009d06:	d102      	bne.n	8009d0e <__sfputc_r+0x1c>
 8009d08:	bc10      	pop	{r4}
 8009d0a:	f000 b933 	b.w	8009f74 <__swbuf_r>
 8009d0e:	6813      	ldr	r3, [r2, #0]
 8009d10:	1c58      	adds	r0, r3, #1
 8009d12:	6010      	str	r0, [r2, #0]
 8009d14:	7019      	strb	r1, [r3, #0]
 8009d16:	4608      	mov	r0, r1
 8009d18:	bc10      	pop	{r4}
 8009d1a:	4770      	bx	lr

08009d1c <__sfputs_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	4614      	mov	r4, r2
 8009d24:	18d5      	adds	r5, r2, r3
 8009d26:	42ac      	cmp	r4, r5
 8009d28:	d101      	bne.n	8009d2e <__sfputs_r+0x12>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e007      	b.n	8009d3e <__sfputs_r+0x22>
 8009d2e:	463a      	mov	r2, r7
 8009d30:	4630      	mov	r0, r6
 8009d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d36:	f7ff ffdc 	bl	8009cf2 <__sfputc_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d1f3      	bne.n	8009d26 <__sfputs_r+0xa>
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d40 <_vfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	460d      	mov	r5, r1
 8009d46:	4614      	mov	r4, r2
 8009d48:	4698      	mov	r8, r3
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	b09d      	sub	sp, #116	; 0x74
 8009d4e:	b118      	cbz	r0, 8009d58 <_vfiprintf_r+0x18>
 8009d50:	6a03      	ldr	r3, [r0, #32]
 8009d52:	b90b      	cbnz	r3, 8009d58 <_vfiprintf_r+0x18>
 8009d54:	f7fc fd8e 	bl	8006874 <__sinit>
 8009d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d66:	f7fc febc 	bl	8006ae2 <__retarget_lock_acquire_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	071b      	lsls	r3, r3, #28
 8009d6e:	d501      	bpl.n	8009d74 <_vfiprintf_r+0x34>
 8009d70:	692b      	ldr	r3, [r5, #16]
 8009d72:	b99b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x5c>
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f000 f93a 	bl	8009ff0 <__swsetup_r>
 8009d7c:	b170      	cbz	r0, 8009d9c <_vfiprintf_r+0x5c>
 8009d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d80:	07dc      	lsls	r4, r3, #31
 8009d82:	d504      	bpl.n	8009d8e <_vfiprintf_r+0x4e>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	b01d      	add	sp, #116	; 0x74
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	0598      	lsls	r0, r3, #22
 8009d92:	d4f7      	bmi.n	8009d84 <_vfiprintf_r+0x44>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f7fc fea5 	bl	8006ae4 <__retarget_lock_release_recursive>
 8009d9a:	e7f3      	b.n	8009d84 <_vfiprintf_r+0x44>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009da0:	2320      	movs	r3, #32
 8009da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da6:	2330      	movs	r3, #48	; 0x30
 8009da8:	f04f 0901 	mov.w	r9, #1
 8009dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009f60 <_vfiprintf_r+0x220>
 8009db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db8:	4623      	mov	r3, r4
 8009dba:	469a      	mov	sl, r3
 8009dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_vfiprintf_r+0x86>
 8009dc2:	2a25      	cmp	r2, #37	; 0x25
 8009dc4:	d1f9      	bne.n	8009dba <_vfiprintf_r+0x7a>
 8009dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dca:	d00b      	beq.n	8009de4 <_vfiprintf_r+0xa4>
 8009dcc:	465b      	mov	r3, fp
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ffa2 	bl	8009d1c <__sfputs_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f000 80a9 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de0:	445a      	add	r2, fp
 8009de2:	9209      	str	r2, [sp, #36]	; 0x24
 8009de4:	f89a 3000 	ldrb.w	r3, [sl]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80a1 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e04:	931a      	str	r3, [sp, #104]	; 0x68
 8009e06:	4654      	mov	r4, sl
 8009e08:	2205      	movs	r2, #5
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	4854      	ldr	r0, [pc, #336]	; (8009f60 <_vfiprintf_r+0x220>)
 8009e10:	f7fc fe69 	bl	8006ae6 <memchr>
 8009e14:	9a04      	ldr	r2, [sp, #16]
 8009e16:	b9d8      	cbnz	r0, 8009e50 <_vfiprintf_r+0x110>
 8009e18:	06d1      	lsls	r1, r2, #27
 8009e1a:	bf44      	itt	mi
 8009e1c:	2320      	movmi	r3, #32
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e22:	0713      	lsls	r3, r2, #28
 8009e24:	bf44      	itt	mi
 8009e26:	232b      	movmi	r3, #43	; 0x2b
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d015      	beq.n	8009e60 <_vfiprintf_r+0x120>
 8009e34:	4654      	mov	r4, sl
 8009e36:	2000      	movs	r0, #0
 8009e38:	f04f 0c0a 	mov.w	ip, #10
 8009e3c:	9a07      	ldr	r2, [sp, #28]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e44:	3b30      	subs	r3, #48	; 0x30
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d94d      	bls.n	8009ee6 <_vfiprintf_r+0x1a6>
 8009e4a:	b1b0      	cbz	r0, 8009e7a <_vfiprintf_r+0x13a>
 8009e4c:	9207      	str	r2, [sp, #28]
 8009e4e:	e014      	b.n	8009e7a <_vfiprintf_r+0x13a>
 8009e50:	eba0 0308 	sub.w	r3, r0, r8
 8009e54:	fa09 f303 	lsl.w	r3, r9, r3
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	46a2      	mov	sl, r4
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	e7d2      	b.n	8009e06 <_vfiprintf_r+0xc6>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	1d19      	adds	r1, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbb      	ittet	lt
 8009e6c:	425b      	neglt	r3, r3
 8009e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e72:	9307      	strge	r3, [sp, #28]
 8009e74:	9307      	strlt	r3, [sp, #28]
 8009e76:	bfb8      	it	lt
 8009e78:	9204      	strlt	r2, [sp, #16]
 8009e7a:	7823      	ldrb	r3, [r4, #0]
 8009e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7e:	d10c      	bne.n	8009e9a <_vfiprintf_r+0x15a>
 8009e80:	7863      	ldrb	r3, [r4, #1]
 8009e82:	2b2a      	cmp	r3, #42	; 0x2a
 8009e84:	d134      	bne.n	8009ef0 <_vfiprintf_r+0x1b0>
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	3402      	adds	r4, #2
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	9203      	str	r2, [sp, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfb8      	it	lt
 8009e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f64 <_vfiprintf_r+0x224>
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	7821      	ldrb	r1, [r4, #0]
 8009ea4:	f7fc fe1f 	bl	8006ae6 <memchr>
 8009ea8:	b138      	cbz	r0, 8009eba <_vfiprintf_r+0x17a>
 8009eaa:	2240      	movs	r2, #64	; 0x40
 8009eac:	9b04      	ldr	r3, [sp, #16]
 8009eae:	eba0 000a 	sub.w	r0, r0, sl
 8009eb2:	4082      	lsls	r2, r0
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	2206      	movs	r2, #6
 8009ec0:	4829      	ldr	r0, [pc, #164]	; (8009f68 <_vfiprintf_r+0x228>)
 8009ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec6:	f7fc fe0e 	bl	8006ae6 <memchr>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d03f      	beq.n	8009f4e <_vfiprintf_r+0x20e>
 8009ece:	4b27      	ldr	r3, [pc, #156]	; (8009f6c <_vfiprintf_r+0x22c>)
 8009ed0:	bb1b      	cbnz	r3, 8009f1a <_vfiprintf_r+0x1da>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	3307      	adds	r3, #7
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	3308      	adds	r3, #8
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee0:	443b      	add	r3, r7
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	e768      	b.n	8009db8 <_vfiprintf_r+0x78>
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	2001      	movs	r0, #1
 8009eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eee:	e7a6      	b.n	8009e3e <_vfiprintf_r+0xfe>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f04f 0c0a 	mov.w	ip, #10
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	3401      	adds	r4, #1
 8009efa:	9305      	str	r3, [sp, #20]
 8009efc:	4620      	mov	r0, r4
 8009efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f02:	3a30      	subs	r2, #48	; 0x30
 8009f04:	2a09      	cmp	r2, #9
 8009f06:	d903      	bls.n	8009f10 <_vfiprintf_r+0x1d0>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0c6      	beq.n	8009e9a <_vfiprintf_r+0x15a>
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	e7c4      	b.n	8009e9a <_vfiprintf_r+0x15a>
 8009f10:	4604      	mov	r4, r0
 8009f12:	2301      	movs	r3, #1
 8009f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f18:	e7f0      	b.n	8009efc <_vfiprintf_r+0x1bc>
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4630      	mov	r0, r6
 8009f22:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <_vfiprintf_r+0x230>)
 8009f24:	a904      	add	r1, sp, #16
 8009f26:	f7fb fe49 	bl	8005bbc <_printf_float>
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	1c78      	adds	r0, r7, #1
 8009f2e:	d1d6      	bne.n	8009ede <_vfiprintf_r+0x19e>
 8009f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3e:	f7fc fdd1 	bl	8006ae4 <__retarget_lock_release_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af1d 	bmi.w	8009d84 <_vfiprintf_r+0x44>
 8009f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4c:	e71c      	b.n	8009d88 <_vfiprintf_r+0x48>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4630      	mov	r0, r6
 8009f56:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <_vfiprintf_r+0x230>)
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	f7fc f8cf 	bl	80060fc <_printf_i>
 8009f5e:	e7e4      	b.n	8009f2a <_vfiprintf_r+0x1ea>
 8009f60:	0800a739 	.word	0x0800a739
 8009f64:	0800a73f 	.word	0x0800a73f
 8009f68:	0800a743 	.word	0x0800a743
 8009f6c:	08005bbd 	.word	0x08005bbd
 8009f70:	08009d1d 	.word	0x08009d1d

08009f74 <__swbuf_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	460e      	mov	r6, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	b118      	cbz	r0, 8009f86 <__swbuf_r+0x12>
 8009f7e:	6a03      	ldr	r3, [r0, #32]
 8009f80:	b90b      	cbnz	r3, 8009f86 <__swbuf_r+0x12>
 8009f82:	f7fc fc77 	bl	8006874 <__sinit>
 8009f86:	69a3      	ldr	r3, [r4, #24]
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	071a      	lsls	r2, r3, #28
 8009f8e:	d525      	bpl.n	8009fdc <__swbuf_r+0x68>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b31b      	cbz	r3, 8009fdc <__swbuf_r+0x68>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	6922      	ldr	r2, [r4, #16]
 8009f98:	b2f6      	uxtb	r6, r6
 8009f9a:	1a98      	subs	r0, r3, r2
 8009f9c:	6963      	ldr	r3, [r4, #20]
 8009f9e:	4637      	mov	r7, r6
 8009fa0:	4283      	cmp	r3, r0
 8009fa2:	dc04      	bgt.n	8009fae <__swbuf_r+0x3a>
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f7ff fa3e 	bl	8009428 <_fflush_r>
 8009fac:	b9e0      	cbnz	r0, 8009fe8 <__swbuf_r+0x74>
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	701e      	strb	r6, [r3, #0]
 8009fbc:	6962      	ldr	r2, [r4, #20]
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d004      	beq.n	8009fce <__swbuf_r+0x5a>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	07db      	lsls	r3, r3, #31
 8009fc8:	d506      	bpl.n	8009fd8 <__swbuf_r+0x64>
 8009fca:	2e0a      	cmp	r6, #10
 8009fcc:	d104      	bne.n	8009fd8 <__swbuf_r+0x64>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f7ff fa29 	bl	8009428 <_fflush_r>
 8009fd6:	b938      	cbnz	r0, 8009fe8 <__swbuf_r+0x74>
 8009fd8:	4638      	mov	r0, r7
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	4621      	mov	r1, r4
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 f806 	bl	8009ff0 <__swsetup_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d0d5      	beq.n	8009f94 <__swbuf_r+0x20>
 8009fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8009fec:	e7f4      	b.n	8009fd8 <__swbuf_r+0x64>
	...

08009ff0 <__swsetup_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <__swsetup_r+0xac>)
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	b118      	cbz	r0, 800a004 <__swsetup_r+0x14>
 8009ffc:	6a03      	ldr	r3, [r0, #32]
 8009ffe:	b90b      	cbnz	r3, 800a004 <__swsetup_r+0x14>
 800a000:	f7fc fc38 	bl	8006874 <__sinit>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00a:	0718      	lsls	r0, r3, #28
 800a00c:	d422      	bmi.n	800a054 <__swsetup_r+0x64>
 800a00e:	06d9      	lsls	r1, r3, #27
 800a010:	d407      	bmi.n	800a022 <__swsetup_r+0x32>
 800a012:	2309      	movs	r3, #9
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a01a:	f04f 30ff 	mov.w	r0, #4294967295
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	e034      	b.n	800a08c <__swsetup_r+0x9c>
 800a022:	0758      	lsls	r0, r3, #29
 800a024:	d512      	bpl.n	800a04c <__swsetup_r+0x5c>
 800a026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a028:	b141      	cbz	r1, 800a03c <__swsetup_r+0x4c>
 800a02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a02e:	4299      	cmp	r1, r3
 800a030:	d002      	beq.n	800a038 <__swsetup_r+0x48>
 800a032:	4628      	mov	r0, r5
 800a034:	f7fd fbe8 	bl	8007808 <_free_r>
 800a038:	2300      	movs	r3, #0
 800a03a:	6363      	str	r3, [r4, #52]	; 0x34
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	2300      	movs	r3, #0
 800a046:	6063      	str	r3, [r4, #4]
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f043 0308 	orr.w	r3, r3, #8
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	b94b      	cbnz	r3, 800a06c <__swsetup_r+0x7c>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a062:	d003      	beq.n	800a06c <__swsetup_r+0x7c>
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f883 	bl	800a172 <__smakebuf_r>
 800a06c:	89a0      	ldrh	r0, [r4, #12]
 800a06e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a072:	f010 0301 	ands.w	r3, r0, #1
 800a076:	d00a      	beq.n	800a08e <__swsetup_r+0x9e>
 800a078:	2300      	movs	r3, #0
 800a07a:	60a3      	str	r3, [r4, #8]
 800a07c:	6963      	ldr	r3, [r4, #20]
 800a07e:	425b      	negs	r3, r3
 800a080:	61a3      	str	r3, [r4, #24]
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	b943      	cbnz	r3, 800a098 <__swsetup_r+0xa8>
 800a086:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a08a:	d1c4      	bne.n	800a016 <__swsetup_r+0x26>
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	0781      	lsls	r1, r0, #30
 800a090:	bf58      	it	pl
 800a092:	6963      	ldrpl	r3, [r4, #20]
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	e7f4      	b.n	800a082 <__swsetup_r+0x92>
 800a098:	2000      	movs	r0, #0
 800a09a:	e7f7      	b.n	800a08c <__swsetup_r+0x9c>
 800a09c:	20000070 	.word	0x20000070

0800a0a0 <_raise_r>:
 800a0a0:	291f      	cmp	r1, #31
 800a0a2:	b538      	push	{r3, r4, r5, lr}
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	460d      	mov	r5, r1
 800a0a8:	d904      	bls.n	800a0b4 <_raise_r+0x14>
 800a0aa:	2316      	movs	r3, #22
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a0b6:	b112      	cbz	r2, 800a0be <_raise_r+0x1e>
 800a0b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0bc:	b94b      	cbnz	r3, 800a0d2 <_raise_r+0x32>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 f830 	bl	800a124 <_getpid_r>
 800a0c4:	462a      	mov	r2, r5
 800a0c6:	4601      	mov	r1, r0
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ce:	f000 b817 	b.w	800a100 <_kill_r>
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d00a      	beq.n	800a0ec <_raise_r+0x4c>
 800a0d6:	1c59      	adds	r1, r3, #1
 800a0d8:	d103      	bne.n	800a0e2 <_raise_r+0x42>
 800a0da:	2316      	movs	r3, #22
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	2001      	movs	r0, #1
 800a0e0:	e7e7      	b.n	800a0b2 <_raise_r+0x12>
 800a0e2:	2400      	movs	r4, #0
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0ea:	4798      	blx	r3
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e7e0      	b.n	800a0b2 <_raise_r+0x12>

0800a0f0 <raise>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <raise+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f7ff bfd3 	b.w	800a0a0 <_raise_r>
 800a0fa:	bf00      	nop
 800a0fc:	20000070 	.word	0x20000070

0800a100 <_kill_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	2300      	movs	r3, #0
 800a104:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_kill_r+0x20>)
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f000 f88f 	bl	800a230 <_kill>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d102      	bne.n	800a11c <_kill_r+0x1c>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b103      	cbz	r3, 800a11c <_kill_r+0x1c>
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	2000354c 	.word	0x2000354c

0800a124 <_getpid_r>:
 800a124:	f7fb bb08 	b.w	8005738 <_getpid>

0800a128 <__swhatbuf_r>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	4615      	mov	r5, r2
 800a132:	2900      	cmp	r1, #0
 800a134:	461e      	mov	r6, r3
 800a136:	b096      	sub	sp, #88	; 0x58
 800a138:	da0c      	bge.n	800a154 <__swhatbuf_r+0x2c>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	2100      	movs	r1, #0
 800a13e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a142:	bf0c      	ite	eq
 800a144:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a148:	2340      	movne	r3, #64	; 0x40
 800a14a:	2000      	movs	r0, #0
 800a14c:	6031      	str	r1, [r6, #0]
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	b016      	add	sp, #88	; 0x58
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	466a      	mov	r2, sp
 800a156:	f000 f849 	bl	800a1ec <_fstat_r>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	dbed      	blt.n	800a13a <__swhatbuf_r+0x12>
 800a15e:	9901      	ldr	r1, [sp, #4]
 800a160:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a164:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a168:	4259      	negs	r1, r3
 800a16a:	4159      	adcs	r1, r3
 800a16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a170:	e7eb      	b.n	800a14a <__swhatbuf_r+0x22>

0800a172 <__smakebuf_r>:
 800a172:	898b      	ldrh	r3, [r1, #12]
 800a174:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a176:	079d      	lsls	r5, r3, #30
 800a178:	4606      	mov	r6, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	d507      	bpl.n	800a18e <__smakebuf_r+0x1c>
 800a17e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	6123      	str	r3, [r4, #16]
 800a186:	2301      	movs	r3, #1
 800a188:	6163      	str	r3, [r4, #20]
 800a18a:	b002      	add	sp, #8
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	466a      	mov	r2, sp
 800a190:	ab01      	add	r3, sp, #4
 800a192:	f7ff ffc9 	bl	800a128 <__swhatbuf_r>
 800a196:	9900      	ldr	r1, [sp, #0]
 800a198:	4605      	mov	r5, r0
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7fd fba4 	bl	80078e8 <_malloc_r>
 800a1a0:	b948      	cbnz	r0, 800a1b6 <__smakebuf_r+0x44>
 800a1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a6:	059a      	lsls	r2, r3, #22
 800a1a8:	d4ef      	bmi.n	800a18a <__smakebuf_r+0x18>
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	e7e3      	b.n	800a17e <__smakebuf_r+0xc>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	6020      	str	r0, [r4, #0]
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	6120      	str	r0, [r4, #16]
 800a1c4:	6163      	str	r3, [r4, #20]
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	b15b      	cbz	r3, 800a1e2 <__smakebuf_r+0x70>
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d0:	f000 f81e 	bl	800a210 <_isatty_r>
 800a1d4:	b128      	cbz	r0, 800a1e2 <__smakebuf_r+0x70>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f023 0303 	bic.w	r3, r3, #3
 800a1dc:	f043 0301 	orr.w	r3, r3, #1
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	431d      	orrs	r5, r3
 800a1e6:	81a5      	strh	r5, [r4, #12]
 800a1e8:	e7cf      	b.n	800a18a <__smakebuf_r+0x18>
	...

0800a1ec <_fstat_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4d06      	ldr	r5, [pc, #24]	; (800a20c <_fstat_r+0x20>)
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	f7fb fac0 	bl	800577e <_fstat>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	d102      	bne.n	800a208 <_fstat_r+0x1c>
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	b103      	cbz	r3, 800a208 <_fstat_r+0x1c>
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	bd38      	pop	{r3, r4, r5, pc}
 800a20a:	bf00      	nop
 800a20c:	2000354c 	.word	0x2000354c

0800a210 <_isatty_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	2300      	movs	r3, #0
 800a214:	4d05      	ldr	r5, [pc, #20]	; (800a22c <_isatty_r+0x1c>)
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	f7fb fc16 	bl	8005a4c <_isatty>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_isatty_r+0x1a>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_isatty_r+0x1a>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	2000354c 	.word	0x2000354c

0800a230 <_kill>:
 800a230:	2258      	movs	r2, #88	; 0x58
 800a232:	4b02      	ldr	r3, [pc, #8]	; (800a23c <_kill+0xc>)
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	4770      	bx	lr
 800a23c:	2000354c 	.word	0x2000354c

0800a240 <_exit>:
 800a240:	e7fe      	b.n	800a240 <_exit>
	...

0800a244 <_init>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr

0800a250 <_fini>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr
