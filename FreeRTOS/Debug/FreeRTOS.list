
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a12c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800a240  0800a240  0000b240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d0  0800a7d0  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7d0  0800a7d0  0000b7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7d8  0800a7d8  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d8  0800a7d8  0000b7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7dc  0800a7dc  0000b7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a7e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000337c  200001e0  0800a9c0  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000355c  0800a9c0  0000c55c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c875  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a7  00000000  00000000  00018a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0001b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b2  00000000  00000000  0001bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000326a  00000000  00000000  0001c46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7d8  00000000  00000000  0001f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008951d  00000000  00000000  0002ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b63c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000b640c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000baa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a224 	.word	0x0800a224

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a224 	.word	0x0800a224

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <leds_init>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GPIOB_BASE_ARR 0x40010C00
void leds_init()
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	//set PB12 in output push-pull
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <leds_init+0x44>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <leds_init+0x44>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <leds_init+0x44>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
	uint32_t * GPIOB_CRH = (uint32_t *) (GPIOB_BASE_ARR + 0x04);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <leds_init+0x48>)
 8000bf4:	607b      	str	r3, [r7, #4]
	*GPIOB_CRH |= (0b11 << 16);// set PB12 in OUTPUT mode speed 50MHz
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f443 3240 	orr.w	r2, r3, #196608	@ 0x30000
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]

	*GPIOB_CRH &= ~(0b11 << 18); //set PB12 output push-pull
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]

}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010c04 	.word	0x40010c04

08000c20 <led_toggle>:
void led_toggle(){
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
	uint32_t * GPIOB_ODR = (uint32_t *) (GPIOB_BASE_ARR + 0x0C);
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <led_toggle+0x3c>)
 8000c28:	607b      	str	r3, [r7, #4]

	if(((* GPIOB_ODR >> 12)&1)==0)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <led_toggle+0x24>
	{

		*GPIOB_ODR |= (1<<12);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*GPIOB_ODR &= ~(1<<12);
	}
}
 8000c42:	e005      	b.n	8000c50 <led_toggle+0x30>
		*GPIOB_ODR &= ~(1<<12);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40010c0c 	.word	0x40010c0c

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000c64:	f004 feda 	bl	8005a1c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 fa1e 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f858 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f89c 	bl	8000dac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	UART1_init();
 8000c74:	f004 fbe8 	bl	8005448 <UART1_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c78:	f000 ff3a 	bl	8001af0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of log */
  logHandle = osMutexNew(&log_attributes);
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <main+0x80>)
 8000c7e:	f001 f875 	bl	8001d6c <osMutexNew>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <main+0x84>)
 8000c86:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp */
  tempHandle = osMessageQueueNew (32, sizeof(float), &temp_attributes);
 8000c88:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <main+0x88>)
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	2020      	movs	r0, #32
 8000c8e:	f001 f9b5 	bl	8001ffc <osMessageQueueNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <main+0x8c>)
 8000c96:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(func1, NULL, &task1_attributes);
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <main+0x90>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <main+0x94>)
 8000c9e:	f000 ff8d 	bl	8001bbc <osThreadNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <main+0x98>)
 8000ca6:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(func2, NULL, &task2_attributes);
 8000ca8:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <main+0x9c>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4814      	ldr	r0, [pc, #80]	@ (8000d00 <main+0xa0>)
 8000cae:	f000 ff85 	bl	8001bbc <osThreadNew>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <main+0xa4>)
 8000cb6:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(func3, NULL, &task3_attributes);
 8000cb8:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <main+0xa8>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <main+0xac>)
 8000cbe:	f000 ff7d 	bl	8001bbc <osThreadNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <main+0xb0>)
 8000cc6:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(func4, NULL, &task4_attributes);
 8000cc8:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <main+0xb4>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <main+0xb8>)
 8000cce:	f000 ff75 	bl	8001bbc <osThreadNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <main+0xbc>)
 8000cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f000 ff3c 	bl	8001b54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//initialise_monitor_handles();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <main+0x7c>
 8000ce0:	0800a358 	.word	0x0800a358
 8000ce4:	20000210 	.word	0x20000210
 8000ce8:	0800a340 	.word	0x0800a340
 8000cec:	2000020c 	.word	0x2000020c
 8000cf0:	0800a2b0 	.word	0x0800a2b0
 8000cf4:	08000df1 	.word	0x08000df1
 8000cf8:	200001fc 	.word	0x200001fc
 8000cfc:	0800a2d4 	.word	0x0800a2d4
 8000d00:	08000e2d 	.word	0x08000e2d
 8000d04:	20000200 	.word	0x20000200
 8000d08:	0800a2f8 	.word	0x0800a2f8
 8000d0c:	08000e49 	.word	0x08000e49
 8000d10:	20000204 	.word	0x20000204
 8000d14:	0800a31c 	.word	0x0800a31c
 8000d18:	08000edd 	.word	0x08000edd
 8000d1c:	20000208 	.word	0x20000208

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b090      	sub	sp, #64	@ 0x40
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	2228      	movs	r2, #40	@ 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fea4 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d54:	2302      	movs	r3, #2
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d5e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fae3 	bl	8001334 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d74:	f000 f8d0 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd50 	bl	8001838 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d9e:	f000 f8bb 	bl	8000f18 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	@ 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <MX_GPIO_Init+0x40>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000

08000df0 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <func1+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 f84d 	bl	8001ea0 <osMutexAcquire>
	uart_printf("xin chao");
 8000e06:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <func1+0x38>)
 8000e08:	f004 fbbd 	bl	8005586 <uart_printf>
	osMutexRelease(logHandle);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <func1+0x34>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 f8a3 	bl	8001f5c <osMutexRelease>
    osDelay(1000);
 8000e16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e1a:	f000 ff79 	bl	8001d10 <osDelay>
	  osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000e1e:	bf00      	nop
 8000e20:	e7ea      	b.n	8000df8 <func1+0x8>
 8000e22:	bf00      	nop
 8000e24:	20000210 	.word	0x20000210
 8000e28:	0800a26c 	.word	0x0800a26c

08000e2c <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
	leds_init();
 8000e34:	f7ff fece 	bl	8000bd4 <leds_init>
  /* Infinite loop */
  for(;;)
  {
	  led_toggle();
 8000e38:	f7ff fef2 	bl	8000c20 <led_toggle>
    osDelay(1000);
 8000e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e40:	f000 ff66 	bl	8001d10 <osDelay>
	  led_toggle();
 8000e44:	bf00      	nop
 8000e46:	e7f7      	b.n	8000e38 <func2+0xc>

08000e48 <func3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func3 */
void func3(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func3 */
	float temp =0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	uint32_t num_msg = osMessageQueueGetCount(tempHandle);
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <func3+0x80>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fa3a 	bl	80022d4 <osMessageQueueGetCount>
 8000e60:	6138      	str	r0, [r7, #16]
	osMutexAcquire(logHandle, HAL_MAX_DELAY);
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <func3+0x84>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 f818 	bl	8001ea0 <osMutexAcquire>
	uart_printf("device temp:[");
 8000e70:	4817      	ldr	r0, [pc, #92]	@ (8000ed0 <func3+0x88>)
 8000e72:	f004 fb88 	bl	8005586 <uart_printf>
	for(int i=0;i<num_msg;i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e014      	b.n	8000ea6 <func3+0x5e>
		osMessageQueueGet(tempHandle, &temp, 0, HAL_MAX_DELAY);
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <func3+0x80>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	f107 010c 	add.w	r1, r7, #12
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f001 f9b1 	bl	80021f0 <osMessageQueueGet>
		uart_printf("%.2f, ",temp);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fac9 	bl	8000428 <__aeabi_f2d>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <func3+0x8c>)
 8000e9c:	f004 fb73 	bl	8005586 <uart_printf>
	for(int i=0;i<num_msg;i++){
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d8e6      	bhi.n	8000e7c <func3+0x34>
	}
	uart_printf("\b\b]\r\n");
 8000eae:	480a      	ldr	r0, [pc, #40]	@ (8000ed8 <func3+0x90>)
 8000eb0:	f004 fb69 	bl	8005586 <uart_printf>
	osMutexRelease(logHandle);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <func3+0x84>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f84f 	bl	8001f5c <osMutexRelease>
    osDelay(3000);
 8000ebe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ec2:	f000 ff25 	bl	8001d10 <osDelay>
  {
 8000ec6:	e7c6      	b.n	8000e56 <func3+0xe>
 8000ec8:	2000020c 	.word	0x2000020c
 8000ecc:	20000210 	.word	0x20000210
 8000ed0:	0800a278 	.word	0x0800a278
 8000ed4:	0800a288 	.word	0x0800a288
 8000ed8:	0800a290 	.word	0x0800a290

08000edc <func4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func4 */
void func4(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func4 */
	read_temp_init();
 8000ee4:	f004 f9f2 	bl	80052cc <read_temp_init>
	float temp =0;
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	temp = adc_get_temp_ss();
 8000eee:	f004 fa27 	bl	8005340 <adc_get_temp_ss>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60fb      	str	r3, [r7, #12]
	osMessageQueuePut(tempHandle, &temp, 0, HAL_MAX_DELAY);
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <func4+0x38>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f107 010c 	add.w	r1, r7, #12
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2200      	movs	r2, #0
 8000f04:	f001 f900 	bl	8002108 <osMessageQueuePut>
    osDelay(1000);
 8000f08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f0c:	f000 ff00 	bl	8001d10 <osDelay>
	temp = adc_get_temp_ss();
 8000f10:	bf00      	nop
 8000f12:	e7ec      	b.n	8000eee <func4+0x12>
 8000f14:	2000020c 	.word	0x2000020c

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <Error_Handler+0x8>

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x68>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f06f 0001 	mvn.w	r0, #1
 8000f62:	f000 f9be 	bl	80012e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x6c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_MspInit+0x6c>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f8b2 	bl	8001134 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fd0:	f003 f89c 	bl	800410c <xTaskGetSchedulerState>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d001      	beq.n	8000fde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fda:	f003 ff15 	bl	8004e08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f005 fd84 	bl	8006b20 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20005000 	.word	0x20005000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000214 	.word	0x20000214
 800104c:	20003560 	.word	0x20003560

08001050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff fff8 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001062:	490c      	ldr	r1, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001064:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a09      	ldr	r2, [pc, #36]	@ (800109c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001078:	4c09      	ldr	r4, [pc, #36]	@ (80010a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f005 fd51 	bl	8006b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff fde9 	bl	8000c60 <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001098:	0800a7e0 	.word	0x0800a7e0
  ldr r2, =_sbss
 800109c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80010a0:	2000355c 	.word	0x2000355c

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f907 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff ff2e 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f911 	bl	800131a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f8e7 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000008 	.word	0x20000008
 8001154:	20000218 	.word	0x20000218

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000218 	.word	0x20000218

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff90 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff49 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb0 	bl	8001288 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e272      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 800136c:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e24c      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7f      	ldr	r2, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7a      	ldr	r2, [pc, #488]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a71      	ldr	r2, [pc, #452]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fea2 	bl	8001158 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fe9e 	bl	8001158 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e200      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fe8e 	bl	8001158 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fe8a 	bl	8001158 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1ec      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c0      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4939      	ldr	r1, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fe43 	bl	8001158 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fe3f 	bl	8001158 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4927      	ldr	r1, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fe22 	bl	8001158 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fe1e 	bl	8001158 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e180      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fe02 	bl	8001158 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fdfe 	bl	8001158 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e160      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fa9c 	bl	8001ab4 <RCC_Delay>
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fde8 	bl	8001158 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00f      	b.n	80015ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fde4 	bl	8001158 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e146      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	42420000 	.word	0x42420000
 80015a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b92      	ldr	r3, [pc, #584]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e9      	bne.n	800158c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a6 	beq.w	8001712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b8b      	ldr	r3, [pc, #556]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a87      	ldr	r2, [pc, #540]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b85      	ldr	r3, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fda5 	bl	8001158 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fda1 	bl	8001158 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	@ 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e103      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b75      	ldr	r3, [pc, #468]	@ (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 8001638:	4b6f      	ldr	r3, [pc, #444]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a6e      	ldr	r2, [pc, #440]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x334>
 800164e:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a69      	ldr	r2, [pc, #420]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a66      	ldr	r2, [pc, #408]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x356>
 8001670:	4b61      	ldr	r3, [pc, #388]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b5e      	ldr	r3, [pc, #376]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a5d      	ldr	r2, [pc, #372]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 800168a:	4b5b      	ldr	r3, [pc, #364]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a5a      	ldr	r2, [pc, #360]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b58      	ldr	r3, [pc, #352]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a57      	ldr	r2, [pc, #348]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fd55 	bl	8001158 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fd51 	bl	8001158 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0b1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fd3f 	bl	8001158 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fd3b 	bl	8001158 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e09b      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a3b      	ldr	r2, [pc, #236]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d061      	beq.n	80017ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d146      	bne.n	80017be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fd0f 	bl	8001158 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fd0b 	bl	8001158 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e06d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4921      	ldr	r1, [pc, #132]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a19      	ldr	r1, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	430b      	orrs	r3, r1
 800178a:	491b      	ldr	r1, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fcdf 	bl	8001158 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fcdb 	bl	8001158 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x46a>
 80017bc:	e035      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fcc8 	bl	8001158 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fcc4 	bl	8001158 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e026      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x498>
 80017ea:	e01e      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e019      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40007000 	.word	0x40007000
 8001800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x500>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b67      	ldr	r3, [pc, #412]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4965      	ldr	r1, [pc, #404]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a58      	ldr	r2, [pc, #352]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800189e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a52      	ldr	r2, [pc, #328]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d040      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d115      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e073      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4b39      	ldr	r3, [pc, #228]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4936      	ldr	r1, [pc, #216]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fc16 	bl	8001158 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff fc12 	bl	8001158 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e053      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d210      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4922      	ldr	r1, [pc, #136]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb74 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	0800a368 	.word	0x0800a368
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x30>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3a:	e027      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	e027      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6e:	fb03 f202 	mul.w	r2, r3, r2
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e004      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	613b      	str	r3, [r7, #16]
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	693b      	ldr	r3, [r7, #16]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	0800a378 	.word	0x0800a378
 8001aac:	0800a388 	.word	0x0800a388
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <RCC_Delay+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <RCC_Delay+0x38>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad0:	bf00      	nop
  }
  while (Delay --);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <RCC_Delay+0x1c>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001af6:	f3ef 8305 	mrs	r3, IPSR
 8001afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001afc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b02:	f3ef 8310 	mrs	r3, PRIMASK
 8001b06:	607b      	str	r3, [r7, #4]
  return(result);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <osKernelInitialize+0x32>
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <osKernelInitialize+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d109      	bne.n	8001b2a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b16:	f3ef 8311 	mrs	r3, BASEPRI
 8001b1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001b22:	f06f 0305 	mvn.w	r3, #5
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e00c      	b.n	8001b44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <osKernelInitialize+0x60>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <osKernelInitialize+0x60>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e002      	b.n	8001b44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	2000021c 	.word	0x2000021c

08001b54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b5a:	f3ef 8305 	mrs	r3, IPSR
 8001b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b66:	f3ef 8310 	mrs	r3, PRIMASK
 8001b6a:	607b      	str	r3, [r7, #4]
  return(result);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <osKernelStart+0x32>
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <osKernelStart+0x64>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d109      	bne.n	8001b8e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001b86:	f06f 0305 	mvn.w	r3, #5
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e00e      	b.n	8001bac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <osKernelStart+0x64>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <osKernelStart+0x64>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001b9c:	f001 fe52 	bl	8003844 <vTaskStartScheduler>
      stat = osOK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e002      	b.n	8001bac <osKernelStart+0x58>
    } else {
      stat = osError;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001bac:	68fb      	ldr	r3, [r7, #12]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000021c 	.word	0x2000021c

08001bbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b092      	sub	sp, #72	@ 0x48
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bcc:	f3ef 8305 	mrs	r3, IPSR
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 8094 	bne.w	8001d02 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bda:	f3ef 8310 	mrs	r3, PRIMASK
 8001bde:	623b      	str	r3, [r7, #32]
  return(result);
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 808d 	bne.w	8001d02 <osThreadNew+0x146>
 8001be8:	4b48      	ldr	r3, [pc, #288]	@ (8001d0c <osThreadNew+0x150>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d106      	bne.n	8001bfe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8001bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8082 	bne.w	8001d02 <osThreadNew+0x146>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07e      	beq.n	8001d02 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001c08:	2318      	movs	r3, #24
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001c10:	f107 031b 	add.w	r3, r7, #27
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d045      	beq.n	8001cae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <osThreadNew+0x74>
        name = attr->name;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <osThreadNew+0x9a>
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	2b38      	cmp	r3, #56	@ 0x38
 8001c48:	d805      	bhi.n	8001c56 <osThreadNew+0x9a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <osThreadNew+0x9e>
        return (NULL);
 8001c56:	2300      	movs	r3, #0
 8001c58:	e054      	b.n	8001d04 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <osThreadNew+0xd4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c78:	d90a      	bls.n	8001c90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <osThreadNew+0xd4>
        mem = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8e:	e010      	b.n	8001cb2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <osThreadNew+0xf6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <osThreadNew+0xf6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <osThreadNew+0xf6>
          mem = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cac:	e001      	b.n	8001cb2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d110      	bne.n	8001cda <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cc0:	9202      	str	r2, [sp, #8]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ccc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f001 fbe6 	bl	80034a0 <xTaskCreateStatic>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e013      	b.n	8001d02 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d110      	bne.n	8001d02 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f001 fc33 	bl	800355e <xTaskCreate>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <osThreadNew+0x146>
          hTask = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d02:	697b      	ldr	r3, [r7, #20]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3738      	adds	r7, #56	@ 0x38
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000021c 	.word	0x2000021c

08001d10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d18:	f3ef 8305 	mrs	r3, IPSR
 8001d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8001d1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10f      	bne.n	8001d44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d24:	f3ef 8310 	mrs	r3, PRIMASK
 8001d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <osDelay+0x34>
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <osDelay+0x58>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d109      	bne.n	8001d4c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d38:	f3ef 8311 	mrs	r3, BASEPRI
 8001d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <osDelay+0x3c>
    stat = osErrorISR;
 8001d44:	f06f 0305 	mvn.w	r3, #5
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e007      	b.n	8001d5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fd3e 	bl	80037d8 <vTaskDelay>
    }
  }

  return (stat);
 8001d5c:	697b      	ldr	r3, [r7, #20]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000021c 	.word	0x2000021c

08001d6c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d78:	f3ef 8305 	mrs	r3, IPSR
 8001d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8001d7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 8085 	bne.w	8001e90 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d86:	f3ef 8310 	mrs	r3, PRIMASK
 8001d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d17e      	bne.n	8001e90 <osMutexNew+0x124>
 8001d92:	4b42      	ldr	r3, [pc, #264]	@ (8001e9c <osMutexNew+0x130>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d105      	bne.n	8001da6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8001d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d174      	bne.n	8001e90 <osMutexNew+0x124>
    if (attr != NULL) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	623b      	str	r3, [r7, #32]
 8001db2:	e001      	b.n	8001db8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <osMutexNew+0x5c>
      rmtx = 1U;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e001      	b.n	8001dcc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d15c      	bne.n	8001e90 <osMutexNew+0x124>
      mem = -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <osMutexNew+0x8c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b4f      	cmp	r3, #79	@ 0x4f
 8001df0:	d902      	bls.n	8001df8 <osMutexNew+0x8c>
          mem = 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e00c      	b.n	8001e12 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d108      	bne.n	8001e12 <osMutexNew+0xa6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <osMutexNew+0xa6>
            mem = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e001      	b.n	8001e12 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d112      	bne.n	8001e3e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4619      	mov	r1, r3
 8001e24:	2004      	movs	r0, #4
 8001e26:	f000 fce3 	bl	80027f0 <xQueueCreateMutexStatic>
 8001e2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e2c:	e016      	b.n	8001e5c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4619      	mov	r1, r3
 8001e34:	2001      	movs	r0, #1
 8001e36:	f000 fcdb 	bl	80027f0 <xQueueCreateMutexStatic>
 8001e3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e3c:	e00e      	b.n	8001e5c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8001e4a:	2004      	movs	r0, #4
 8001e4c:	f000 fcb8 	bl	80027c0 <xQueueCreateMutex>
 8001e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e52:	e003      	b.n	8001e5c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8001e54:	2001      	movs	r0, #1
 8001e56:	f000 fcb3 	bl	80027c0 <xQueueCreateMutex>
 8001e5a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <osMutexNew+0x110>
        if (attr != NULL) {
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <osMutexNew+0x104>
          name = attr->name;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e001      	b.n	8001e74 <osMutexNew+0x108>
        } else {
          name = NULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8001e74:	6979      	ldr	r1, [r7, #20]
 8001e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e78:	f001 fab6 	bl	80033e8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <osMutexNew+0x124>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3728      	adds	r7, #40	@ 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000021c 	.word	0x2000021c

08001ea0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ebe:	f3ef 8305 	mrs	r3, IPSR
 8001ec2:	613b      	str	r3, [r7, #16]
  return(result);
 8001ec4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eca:	f3ef 8310 	mrs	r3, PRIMASK
 8001ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <osMutexAcquire+0x4a>
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <osMutexAcquire+0xb8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d109      	bne.n	8001ef2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ede:	f3ef 8311 	mrs	r3, BASEPRI
 8001ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8001eea:	f06f 0305 	mvn.w	r3, #5
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	e02c      	b.n	8001f4c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8001ef8:	f06f 0303 	mvn.w	r3, #3
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e025      	b.n	8001f4c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d011      	beq.n	8001f2a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	69b8      	ldr	r0, [r7, #24]
 8001f0a:	f000 fcc1 	bl	8002890 <xQueueTakeMutexRecursive>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d01b      	beq.n	8001f4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8001f1a:	f06f 0301 	mvn.w	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	e014      	b.n	8001f4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001f22:	f06f 0302 	mvn.w	r3, #2
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e010      	b.n	8001f4c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	69b8      	ldr	r0, [r7, #24]
 8001f2e:	f000 ff67 	bl	8002e00 <xQueueSemaphoreTake>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d009      	beq.n	8001f4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8001f3e:	f06f 0301 	mvn.w	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e002      	b.n	8001f4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8001f46:	f06f 0302 	mvn.w	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000021c 	.word	0x2000021c

08001f5c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f78:	f3ef 8305 	mrs	r3, IPSR
 8001f7c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f7e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10f      	bne.n	8001fa4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f84:	f3ef 8310 	mrs	r3, PRIMASK
 8001f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <osMutexRelease+0x48>
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <osMutexRelease+0x9c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d109      	bne.n	8001fac <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f98:	f3ef 8311 	mrs	r3, BASEPRI
 8001f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <osMutexRelease+0x50>
    stat = osErrorISR;
 8001fa4:	f06f 0305 	mvn.w	r3, #5
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e01f      	b.n	8001fec <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8001fb2:	f06f 0303 	mvn.w	r3, #3
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e018      	b.n	8001fec <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8001fc0:	69b8      	ldr	r0, [r7, #24]
 8001fc2:	f000 fc30 	bl	8002826 <xQueueGiveMutexRecursive>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d00f      	beq.n	8001fec <osMutexRelease+0x90>
        stat = osErrorResource;
 8001fcc:	f06f 0302 	mvn.w	r3, #2
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e00b      	b.n	8001fec <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	69b8      	ldr	r0, [r7, #24]
 8001fdc:	f000 fc90 	bl	8002900 <xQueueGenericSend>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d002      	beq.n	8001fec <osMutexRelease+0x90>
        stat = osErrorResource;
 8001fe6:	f06f 0302 	mvn.w	r3, #2
 8001fea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8001fec:	69fb      	ldr	r3, [r7, #28]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000021c 	.word	0x2000021c

08001ffc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	@ 0x30
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200c:	f3ef 8305 	mrs	r3, IPSR
 8002010:	61bb      	str	r3, [r7, #24]
  return(result);
 8002012:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002014:	2b00      	cmp	r3, #0
 8002016:	d16f      	bne.n	80020f8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002018:	f3ef 8310 	mrs	r3, PRIMASK
 800201c:	617b      	str	r3, [r7, #20]
  return(result);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d169      	bne.n	80020f8 <osMessageQueueNew+0xfc>
 8002024:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <osMessageQueueNew+0x108>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d105      	bne.n	8002038 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202c:	f3ef 8311 	mrs	r3, BASEPRI
 8002030:	613b      	str	r3, [r7, #16]
  return(result);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d15f      	bne.n	80020f8 <osMessageQueueNew+0xfc>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d05c      	beq.n	80020f8 <osMessageQueueNew+0xfc>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d059      	beq.n	80020f8 <osMessageQueueNew+0xfc>
    mem = -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d029      	beq.n	80020a4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <osMessageQueueNew+0x82>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b4f      	cmp	r3, #79	@ 0x4f
 800205e:	d90e      	bls.n	800207e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <osMessageQueueNew+0x82>
        mem = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	e014      	b.n	80020a8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d110      	bne.n	80020a8 <osMessageQueueNew+0xac>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <osMessageQueueNew+0xac>
          mem = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	e001      	b.n	80020a8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10b      	bne.n	80020c6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2100      	movs	r1, #0
 80020b8:	9100      	str	r1, [sp, #0]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fa87 	bl	80025d0 <xQueueGenericCreateStatic>
 80020c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80020c4:	e008      	b.n	80020d8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80020cc:	2200      	movs	r2, #0
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 faf9 	bl	80026c8 <xQueueGenericCreate>
 80020d6:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <osMessageQueueNew+0xf0>
        name = attr->name;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e001      	b.n	80020f0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80020f0:	69f9      	ldr	r1, [r7, #28]
 80020f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020f4:	f001 f978 	bl	80033e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3728      	adds	r7, #40	@ 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000021c 	.word	0x2000021c

08002108 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002120:	f3ef 8305 	mrs	r3, IPSR
 8002124:	61fb      	str	r3, [r7, #28]
  return(result);
 8002126:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212c:	f3ef 8310 	mrs	r3, PRIMASK
 8002130:	61bb      	str	r3, [r7, #24]
  return(result);
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <osMessageQueuePut+0x44>
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <osMessageQueuePut+0xe0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d12e      	bne.n	800219e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002140:	f3ef 8311 	mrs	r3, BASEPRI
 8002144:	617b      	str	r3, [r7, #20]
  return(result);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d028      	beq.n	800219e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <osMessageQueuePut+0x56>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <osMessageQueuePut+0x56>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800215e:	f06f 0303 	mvn.w	r3, #3
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002164:	e039      	b.n	80021da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800216a:	f107 0210 	add.w	r2, r7, #16
 800216e:	2300      	movs	r3, #0
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6a38      	ldr	r0, [r7, #32]
 8002174:	f000 fcc6 	bl	8002b04 <xQueueGenericSendFromISR>
 8002178:	4603      	mov	r3, r0
 800217a:	2b01      	cmp	r3, #1
 800217c:	d003      	beq.n	8002186 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800217e:	f06f 0302 	mvn.w	r3, #2
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002184:	e029      	b.n	80021da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d026      	beq.n	80021da <osMessageQueuePut+0xd2>
 800218c:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <osMessageQueuePut+0xe4>)
 800218e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800219c:	e01d      	b.n	80021da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <osMessageQueuePut+0xa2>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80021aa:	f06f 0303 	mvn.w	r3, #3
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	e014      	b.n	80021dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80021b2:	2300      	movs	r3, #0
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	6a38      	ldr	r0, [r7, #32]
 80021ba:	f000 fba1 	bl	8002900 <xQueueGenericSend>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00b      	beq.n	80021dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80021ca:	f06f 0301 	mvn.w	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d0:	e004      	b.n	80021dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80021d2:	f06f 0302 	mvn.w	r3, #2
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d8:	e000      	b.n	80021dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3728      	adds	r7, #40	@ 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000021c 	.word	0x2000021c
 80021ec:	e000ed04 	.word	0xe000ed04

080021f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002206:	f3ef 8305 	mrs	r3, IPSR
 800220a:	61fb      	str	r3, [r7, #28]
  return(result);
 800220c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002212:	f3ef 8310 	mrs	r3, PRIMASK
 8002216:	61bb      	str	r3, [r7, #24]
  return(result);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <osMessageQueueGet+0x42>
 800221e:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <osMessageQueueGet+0xdc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d12e      	bne.n	8002284 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002226:	f3ef 8311 	mrs	r3, BASEPRI
 800222a:	617b      	str	r3, [r7, #20]
  return(result);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <osMessageQueueGet+0x54>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <osMessageQueueGet+0x54>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002244:	f06f 0303 	mvn.w	r3, #3
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800224a:	e038      	b.n	80022be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	461a      	mov	r2, r3
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6a38      	ldr	r0, [r7, #32]
 800225a:	f000 fee1 	bl	8003020 <xQueueReceiveFromISR>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d003      	beq.n	800226c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002264:	f06f 0302 	mvn.w	r3, #2
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800226a:	e028      	b.n	80022be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d025      	beq.n	80022be <osMessageQueueGet+0xce>
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <osMessageQueueGet+0xe0>)
 8002274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002282:	e01c      	b.n	80022be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <osMessageQueueGet+0xa0>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d103      	bne.n	8002298 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002290:	f06f 0303 	mvn.w	r3, #3
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
 8002296:	e013      	b.n	80022c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	6a38      	ldr	r0, [r7, #32]
 800229e:	f000 fccd 	bl	8002c3c <xQueueReceive>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d00b      	beq.n	80022c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80022ae:	f06f 0301 	mvn.w	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b4:	e004      	b.n	80022c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80022b6:	f06f 0302 	mvn.w	r3, #2
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80022bc:	e000      	b.n	80022c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80022be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3728      	adds	r7, #40	@ 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000021c 	.word	0x2000021c
 80022d0:	e000ed04 	.word	0xe000ed04

080022d4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <osMessageQueueGetCount+0x18>
    count = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e01e      	b.n	800232a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ec:	f3ef 8305 	mrs	r3, IPSR
 80022f0:	617b      	str	r3, [r7, #20]
  return(result);
 80022f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f8:	f3ef 8310 	mrs	r3, PRIMASK
 80022fc:	613b      	str	r3, [r7, #16]
  return(result);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <osMessageQueueGetCount+0x44>
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <osMessageQueueGetCount+0x60>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d10a      	bne.n	8002322 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800230c:	f3ef 8311 	mrs	r3, BASEPRI
 8002310:	60fb      	str	r3, [r7, #12]
  return(result);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002318:	69b8      	ldr	r0, [r7, #24]
 800231a:	f000 ff22 	bl	8003162 <uxQueueMessagesWaitingFromISR>
 800231e:	61f8      	str	r0, [r7, #28]
 8002320:	e003      	b.n	800232a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002322:	69b8      	ldr	r0, [r7, #24]
 8002324:	f000 fefe 	bl	8003124 <uxQueueMessagesWaiting>
 8002328:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800232a:	69fb      	ldr	r3, [r7, #28]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000021c 	.word	0x2000021c

08002338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <vApplicationGetIdleTaskMemory+0x28>)
 8002348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a05      	ldr	r2, [pc, #20]	@ (8002364 <vApplicationGetIdleTaskMemory+0x2c>)
 800234e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000220 	.word	0x20000220
 8002364:	2000027c 	.word	0x2000027c

08002368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a07      	ldr	r2, [pc, #28]	@ (8002394 <vApplicationGetTimerTaskMemory+0x2c>)
 8002378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <vApplicationGetTimerTaskMemory+0x30>)
 800237e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000047c 	.word	0x2000047c
 8002398:	200004d8 	.word	0x200004d8

0800239c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f103 0208 	add.w	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f103 0208 	add.w	r2, r3, #8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0208 	add.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d103      	bne.n	8002458 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e00c      	b.n	8002472 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3308      	adds	r3, #8
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e002      	b.n	8002466 <vListInsert+0x2e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d2f6      	bcs.n	8002460 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d103      	bne.n	80024dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002528:	f002 fbf0 	bl	8004d0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	441a      	add	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	3b01      	subs	r3, #1
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	22ff      	movs	r2, #255	@ 0xff
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	22ff      	movs	r2, #255	@ 0xff
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d114      	bne.n	80025a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01a      	beq.n	80025bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3310      	adds	r3, #16
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fbec 	bl	8003d68 <xTaskRemoveFromEventList>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <xQueueGenericReset+0xd0>)
 8002598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	e009      	b.n	80025bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3310      	adds	r3, #16
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fef5 	bl	800239c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3324      	adds	r3, #36	@ 0x24
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fef0 	bl	800239c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025bc:	f002 fbd6 	bl	8004d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025c0:	2301      	movs	r3, #1
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	@ 0x38
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <xQueueGenericCreateStatic+0x56>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <xQueueGenericCreateStatic+0x5a>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <xQueueGenericCreateStatic+0x5c>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	623b      	str	r3, [r7, #32]
}
 8002642:	bf00      	nop
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <xQueueGenericCreateStatic+0x84>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <xQueueGenericCreateStatic+0x88>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <xQueueGenericCreateStatic+0x8a>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	61fb      	str	r3, [r7, #28]
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	e7fd      	b.n	8002672 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002676:	2350      	movs	r3, #80	@ 0x50
 8002678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b50      	cmp	r3, #80	@ 0x50
 800267e:	d00b      	beq.n	8002698 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	61bb      	str	r3, [r7, #24]
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f844 	bl	8002746 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3730      	adds	r7, #48	@ 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	613b      	str	r3, [r7, #16]
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e004      	b.n	800270a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3350      	adds	r3, #80	@ 0x50
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fbfe 	bl	8004f10 <pvPortMalloc>
 8002714:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00f      	beq.n	800273c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3350      	adds	r3, #80	@ 0x50
 8002720:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f805 	bl	8002746 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800273c:	69bb      	ldr	r3, [r7, #24]
	}
 800273e:	4618      	mov	r0, r3
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e002      	b.n	8002768 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002774:	2101      	movs	r1, #1
 8002776:	69b8      	ldr	r0, [r7, #24]
 8002778:	f7ff fec0 	bl	80024fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80027ac:	2300      	movs	r3, #0
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8a4 	bl	8002900 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027ca:	2301      	movs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	461a      	mov	r2, r3
 80027d6:	6939      	ldr	r1, [r7, #16]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff ff75 	bl	80026c8 <xQueueGenericCreate>
 80027de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff ffd3 	bl	800278c <prvInitialiseMutex>

		return pxNewQueue;
 80027e6:	68fb      	ldr	r3, [r7, #12]
	}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	6939      	ldr	r1, [r7, #16]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff fede 	bl	80025d0 <xQueueGenericCreateStatic>
 8002814:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ffb8 	bl	800278c <prvInitialiseMutex>

		return pxNewQueue;
 800281c:	68fb      	ldr	r3, [r7, #12]
	}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002826:	b590      	push	{r4, r7, lr}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	60fb      	str	r3, [r7, #12]
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	685c      	ldr	r4, [r3, #4]
 8002854:	f001 fc4c 	bl	80040f0 <xTaskGetCurrentTaskHandle>
 8002858:	4603      	mov	r3, r0
 800285a:	429c      	cmp	r4, r3
 800285c:	d111      	bne.n	8002882 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002870:	2300      	movs	r3, #0
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	6938      	ldr	r0, [r7, #16]
 8002878:	f000 f842 	bl	8002900 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800287c:	2301      	movs	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e001      	b.n	8002886 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002886:	697b      	ldr	r3, [r7, #20]
	}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}

08002890 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	60fb      	str	r3, [r7, #12]
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	685c      	ldr	r4, [r3, #4]
 80028c0:	f001 fc16 	bl	80040f0 <xTaskGetCurrentTaskHandle>
 80028c4:	4603      	mov	r3, r0
 80028c6:	429c      	cmp	r4, r3
 80028c8:	d107      	bne.n	80028da <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e00c      	b.n	80028f4 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	6938      	ldr	r0, [r7, #16]
 80028de:	f000 fa8f 	bl	8002e00 <xQueueSemaphoreTake>
 80028e2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80028f4:	697b      	ldr	r3, [r7, #20]
	}
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd90      	pop	{r4, r7, pc}
	...

08002900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	@ 0x38
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <xQueueGenericSend+0x34>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <xQueueGenericSend+0x42>
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <xQueueGenericSend+0x46>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueGenericSend+0x48>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <xQueueGenericSend+0x64>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d103      	bne.n	8002972 <xQueueGenericSend+0x72>
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <xQueueGenericSend+0x76>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <xQueueGenericSend+0x78>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <xQueueGenericSend+0x94>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	623b      	str	r3, [r7, #32]
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002994:	f001 fbba 	bl	800410c <xTaskGetSchedulerState>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <xQueueGenericSend+0xa4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <xQueueGenericSend+0xa8>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <xQueueGenericSend+0xaa>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10b      	bne.n	80029c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	61fb      	str	r3, [r7, #28]
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	e7fd      	b.n	80029c2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029c6:	f002 f9a1 	bl	8004d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <xQueueGenericSend+0xdc>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d129      	bne.n	8002a30 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029e2:	f000 fbf1 	bl	80031c8 <prvCopyDataToQueue>
 80029e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	3324      	adds	r3, #36	@ 0x24
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f9b7 	bl	8003d68 <xTaskRemoveFromEventList>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a00:	4b3f      	ldr	r3, [pc, #252]	@ (8002b00 <xQueueGenericSend+0x200>)
 8002a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	e00a      	b.n	8002a28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a18:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <xQueueGenericSend+0x200>)
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a28:	f002 f9a0 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e063      	b.n	8002af8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a36:	f002 f999 	bl	8004d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e05c      	b.n	8002af8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 f9f1 	bl	8003e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a52:	f002 f98b 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a56:	f000 ff5d 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a5a:	f002 f957 	bl	8004d0c <vPortEnterCritical>
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d103      	bne.n	8002a74 <xQueueGenericSend+0x174>
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a7a:	b25b      	sxtb	r3, r3
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d103      	bne.n	8002a8a <xQueueGenericSend+0x18a>
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a8a:	f002 f96f 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a8e:	1d3a      	adds	r2, r7, #4
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f9e0 	bl	8003e5c <xTaskCheckForTimeOut>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d124      	bne.n	8002aec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002aa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aa4:	f000 fc88 	bl	80033b8 <prvIsQueueFull>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab0:	3310      	adds	r3, #16
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f904 	bl	8003cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002abe:	f000 fc13 	bl	80032e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ac2:	f000 ff35 	bl	8003930 <xTaskResumeAll>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f af7c 	bne.w	80029c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ace:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <xQueueGenericSend+0x200>)
 8002ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	e772      	b.n	80029c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ae2:	f000 fc01 	bl	80032e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ae6:	f000 ff23 	bl	8003930 <xTaskResumeAll>
 8002aea:	e76c      	b.n	80029c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002aec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002aee:	f000 fbfb 	bl	80032e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002af2:	f000 ff1d 	bl	8003930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002af6:	2300      	movs	r3, #0
		}
	}
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3738      	adds	r7, #56	@ 0x38
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	@ 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSendFromISR+0x3e>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSendFromISR+0x42>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSendFromISR+0x44>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSendFromISR+0x6e>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSendFromISR+0x72>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSendFromISR+0x74>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b94:	f002 f97c 	bl	8004e90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b98:	f3ef 8211 	mrs	r2, BASEPRI
 8002b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61ba      	str	r2, [r7, #24]
 8002bae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d302      	bcc.n	8002bc6 <xQueueGenericSendFromISR+0xc2>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d12c      	bne.n	8002c20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bd6:	f000 faf7 	bl	80031c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bda:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d112      	bne.n	8002c0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d016      	beq.n	8002c1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	3324      	adds	r3, #36	@ 0x24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f8b9 	bl	8003d68 <xTaskRemoveFromEventList>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	b25a      	sxtb	r2, r3
 8002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002c1e:	e001      	b.n	8002c24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3738      	adds	r7, #56	@ 0x38
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <xQueueReceive+0x32>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	623b      	str	r3, [r7, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <xQueueReceive+0x40>
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <xQueueReceive+0x44>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <xQueueReceive+0x46>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <xQueueReceive+0x62>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	61fb      	str	r3, [r7, #28]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9e:	f001 fa35 	bl	800410c <xTaskGetSchedulerState>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <xQueueReceive+0x72>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <xQueueReceive+0x76>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <xQueueReceive+0x78>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <xQueueReceive+0x94>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	61bb      	str	r3, [r7, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd0:	f002 f81c 	bl	8004d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce4:	f000 fada 	bl	800329c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00f      	beq.n	8002d18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f833 	bl	8003d68 <xTaskRemoveFromEventList>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d08:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <xQueueReceive+0x1c0>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d18:	f002 f828 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e069      	b.n	8002df4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d26:	f002 f821 	bl	8004d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e062      	b.n	8002df4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f879 	bl	8003e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d42:	f002 f813 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d46:	f000 fde5 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d4a:	f001 ffdf 	bl	8004d0c <vPortEnterCritical>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <xQueueReceive+0x128>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d103      	bne.n	8002d7a <xQueueReceive+0x13e>
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d7a:	f001 fff7 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d7e:	1d3a      	adds	r2, r7, #4
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f868 	bl	8003e5c <xTaskCheckForTimeOut>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d123      	bne.n	8002dda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d94:	f000 fafa 	bl	800338c <prvIsQueueEmpty>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	3324      	adds	r3, #36	@ 0x24
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ff8c 	bl	8003cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dae:	f000 fa9b 	bl	80032e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002db2:	f000 fdbd 	bl	8003930 <xTaskResumeAll>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d189      	bne.n	8002cd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <xQueueReceive+0x1c0>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	e780      	b.n	8002cd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dd0:	f000 fa8a 	bl	80032e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd4:	f000 fdac 	bl	8003930 <xTaskResumeAll>
 8002dd8:	e77a      	b.n	8002cd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ddc:	f000 fa84 	bl	80032e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de0:	f000 fda6 	bl	8003930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002de6:	f000 fad1 	bl	800338c <prvIsQueueEmpty>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f43f af6f 	beq.w	8002cd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002df2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3730      	adds	r7, #48	@ 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	@ 0x38
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61fb      	str	r3, [r7, #28]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e54:	f001 f95a 	bl	800410c <xTaskGetSchedulerState>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <xQueueSemaphoreTake+0x64>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <xQueueSemaphoreTake+0x68>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <xQueueSemaphoreTake+0x6a>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	61bb      	str	r3, [r7, #24]
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e86:	f001 ff41 	bl	8004d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d024      	beq.n	8002ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002ea6:	f001 fab5 	bl	8004414 <pvTaskIncrementMutexHeldCount>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 ff53 	bl	8003d68 <xTaskRemoveFromEventList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ec8:	4b54      	ldr	r3, [pc, #336]	@ (800301c <xQueueSemaphoreTake+0x21c>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ed8:	f001 ff48 	bl	8004d6c <vPortExitCritical>
				return pdPASS;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e098      	b.n	8003012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	617b      	str	r3, [r7, #20]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f04:	f001 ff32 	bl	8004d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e082      	b.n	8003012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ff8a 	bl	8003e30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f20:	f001 ff24 	bl	8004d6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f24:	f000 fcf6 	bl	8003914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f28:	f001 fef0 	bl	8004d0c <vPortEnterCritical>
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d103      	bne.n	8002f42 <xQueueSemaphoreTake+0x142>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d103      	bne.n	8002f58 <xQueueSemaphoreTake+0x158>
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f58:	f001 ff08 	bl	8004d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f5c:	463a      	mov	r2, r7
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ff79 	bl	8003e5c <xTaskCheckForTimeOut>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d132      	bne.n	8002fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f72:	f000 fa0b 	bl	800338c <prvIsQueueEmpty>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d026      	beq.n	8002fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002f84:	f001 fec2 	bl	8004d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f8db 	bl	8004148 <xTaskPriorityInherit>
 8002f92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002f94:	f001 feea 	bl	8004d6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	3324      	adds	r3, #36	@ 0x24
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fe8f 	bl	8003cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fa8:	f000 f99e 	bl	80032e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fac:	f000 fcc0 	bl	8003930 <xTaskResumeAll>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f47f af67 	bne.w	8002e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <xQueueSemaphoreTake+0x21c>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	e75d      	b.n	8002e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fcc:	f000 f98c 	bl	80032e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd0:	f000 fcae 	bl	8003930 <xTaskResumeAll>
 8002fd4:	e757      	b.n	8002e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fd8:	f000 f986 	bl	80032e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fdc:	f000 fca8 	bl	8003930 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fe2:	f000 f9d3 	bl	800338c <prvIsQueueEmpty>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f43f af4c 	beq.w	8002e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002ff4:	f001 fe8a 	bl	8004d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ffa:	f000 f8ce 	bl	800319a <prvGetDisinheritPriorityAfterTimeout>
 8002ffe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f97c 	bl	8004304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800300c:	f001 feae 	bl	8004d6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003012:	4618      	mov	r0, r3
 8003014:	3738      	adds	r7, #56	@ 0x38
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	@ 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	623b      	str	r3, [r7, #32]
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <xQueueReceiveFromISR+0x3c>
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <xQueueReceiveFromISR+0x40>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <xQueueReceiveFromISR+0x42>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	61fb      	str	r3, [r7, #28]
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	e7fd      	b.n	800307a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800307e:	f001 ff07 	bl	8004e90 <vPortValidateInterruptPriority>
	__asm volatile
 8003082:	f3ef 8211 	mrs	r2, BASEPRI
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61ba      	str	r2, [r7, #24]
 8003098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800309a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02f      	beq.n	800310a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030b8:	f000 f8f0 	bl	800329c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d112      	bne.n	80030f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	3310      	adds	r3, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fe44 	bl	8003d68 <xTaskRemoveFromEventList>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e007      	b.n	8003104 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
 8003108:	e001      	b.n	800310e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f383 8811 	msr	BASEPRI, r3
}
 8003118:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	@ 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60bb      	str	r3, [r7, #8]
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	e7fd      	b.n	8003146 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800314a:	f001 fddf 	bl	8004d0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003154:	f001 fe0a 	bl	8004d6c <vPortExitCritical>

	return uxReturn;
 8003158:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <uxQueueMessagesWaitingFromISR+0x26>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	60bb      	str	r3, [r7, #8]
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800318e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e001      	b.n	80031bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031bc:	68fb      	ldr	r3, [r7, #12]
	}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d14d      	bne.n	800328a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f816 	bl	8004224 <xTaskPriorityDisinherit>
 80031f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	e043      	b.n	800328a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d119      	bne.n	800323c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6898      	ldr	r0, [r3, #8]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	461a      	mov	r2, r3
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	f003 fcbf 	bl	8006b96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d32b      	bcc.n	800328a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	e026      	b.n	800328a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68d8      	ldr	r0, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	461a      	mov	r2, r3
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	f003 fca5 	bl	8006b96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	425b      	negs	r3, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	425b      	negs	r3, r3
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d105      	bne.n	800328a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3b01      	subs	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003292:	697b      	ldr	r3, [r7, #20]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d303      	bcc.n	80032d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68d9      	ldr	r1, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	461a      	mov	r2, r3
 80032da:	6838      	ldr	r0, [r7, #0]
 80032dc:	f003 fc5b 	bl	8006b96 <memcpy>
	}
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032f0:	f001 fd0c 	bl	8004d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032fc:	e011      	b.n	8003322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3324      	adds	r3, #36	@ 0x24
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fd2c 	bl	8003d68 <xTaskRemoveFromEventList>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003316:	f000 fe05 	bl	8003f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3b01      	subs	r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	dce9      	bgt.n	80032fe <prvUnlockQueue+0x16>
 800332a:	e000      	b.n	800332e <prvUnlockQueue+0x46>
					break;
 800332c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	22ff      	movs	r2, #255	@ 0xff
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003336:	f001 fd19 	bl	8004d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800333a:	f001 fce7 	bl	8004d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003346:	e011      	b.n	800336c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3310      	adds	r3, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd07 	bl	8003d68 <xTaskRemoveFromEventList>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003360:	f000 fde0 	bl	8003f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	3b01      	subs	r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800336c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dce9      	bgt.n	8003348 <prvUnlockQueue+0x60>
 8003374:	e000      	b.n	8003378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	22ff      	movs	r2, #255	@ 0xff
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003380:	f001 fcf4 	bl	8004d6c <vPortExitCritical>
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003394:	f001 fcba 	bl	8004d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e001      	b.n	80033aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fcdf 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c0:	f001 fca4 	bl	8004d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d102      	bne.n	80033d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033da:	f001 fcc7 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e014      	b.n	8003422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003434 <vQueueAddToRegistry+0x4c>)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003404:	490b      	ldr	r1, [pc, #44]	@ (8003434 <vQueueAddToRegistry+0x4c>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800340e:	4a09      	ldr	r2, [pc, #36]	@ (8003434 <vQueueAddToRegistry+0x4c>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800341a:	e006      	b.n	800342a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b07      	cmp	r3, #7
 8003426:	d9e7      	bls.n	80033f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	200008d8 	.word	0x200008d8

08003438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003448:	f001 fc60 	bl	8004d0c <vPortEnterCritical>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003452:	b25b      	sxtb	r3, r3
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vQueueWaitForMessageRestricted+0x2a>
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003468:	b25b      	sxtb	r3, r3
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d103      	bne.n	8003478 <vQueueWaitForMessageRestricted+0x40>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003478:	f001 fc78 	bl	8004d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3324      	adds	r3, #36	@ 0x24
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fc3f 	bl	8003d10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff28 	bl	80032e8 <prvUnlockQueue>
	}
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08e      	sub	sp, #56	@ 0x38
 80034a4:	af04      	add	r7, sp, #16
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	623b      	str	r3, [r7, #32]
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	61fb      	str	r3, [r7, #28]
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	e7fd      	b.n	80034e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ea:	235c      	movs	r3, #92	@ 0x5c
 80034ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80034f2:	d00b      	beq.n	800350c <xTaskCreateStatic+0x6c>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	61bb      	str	r3, [r7, #24]
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01e      	beq.n	8003550 <xTaskCreateStatic+0xb0>
 8003512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800352a:	2300      	movs	r3, #0
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f850 	bl	80035e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003548:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800354a:	f000 f8d5 	bl	80036f8 <prvAddNewTaskToReadyList>
 800354e:	e001      	b.n	8003554 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003554:	697b      	ldr	r3, [r7, #20]
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800355e:	b580      	push	{r7, lr}
 8003560:	b08c      	sub	sp, #48	@ 0x30
 8003562:	af04      	add	r7, sp, #16
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fccc 	bl	8004f10 <pvPortMalloc>
 8003578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003580:	205c      	movs	r0, #92	@ 0x5c
 8003582:	f001 fcc5 	bl	8004f10 <pvPortMalloc>
 8003586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
 8003594:	e005      	b.n	80035a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f001 fd82 	bl	80050a0 <vPortFree>
 800359c:	e001      	b.n	80035a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f80e 	bl	80035e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035cc:	69f8      	ldr	r0, [r7, #28]
 80035ce:	f000 f893 	bl	80036f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e002      	b.n	80035de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035de:	69bb      	ldr	r3, [r7, #24]
	}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	461a      	mov	r2, r3
 8003600:	21a5      	movs	r1, #165	@ 0xa5
 8003602:	f003 fa3b 	bl	8006a7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003610:	3b01      	subs	r3, #1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	617b      	str	r3, [r7, #20]
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	e7fd      	b.n	800363e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e012      	b.n	800366e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	7819      	ldrb	r1, [r3, #0]
 8003650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	3334      	adds	r3, #52	@ 0x34
 8003658:	460a      	mov	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d006      	beq.n	8003676 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3301      	adds	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d9e9      	bls.n	8003648 <prvInitialiseNewTask+0x60>
 8003674:	e000      	b.n	8003678 <prvInitialiseNewTask+0x90>
		{
			break;
 8003676:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	2b37      	cmp	r3, #55	@ 0x37
 8003684:	d901      	bls.n	800368a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003686:	2337      	movs	r3, #55	@ 0x37
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800368e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003694:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	3304      	adds	r3, #4
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fe9a 	bl	80023da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	3318      	adds	r3, #24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fe95 	bl	80023da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f001 fa23 	bl	8004b24 <pxPortInitialiseStack>
 80036de:	4602      	mov	r2, r0
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003700:	f001 fb04 	bl	8004d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003704:	4b2d      	ldr	r3, [pc, #180]	@ (80037bc <prvAddNewTaskToReadyList+0xc4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a2c      	ldr	r2, [pc, #176]	@ (80037bc <prvAddNewTaskToReadyList+0xc4>)
 800370c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800371c:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <prvAddNewTaskToReadyList+0xc4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d110      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003724:	f000 fc22 	bl	8003f6c <prvInitialiseTaskLists>
 8003728:	e00d      	b.n	8003746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800372a:	4b26      	ldr	r3, [pc, #152]	@ (80037c4 <prvAddNewTaskToReadyList+0xcc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d802      	bhi.n	8003746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003740:	4a1f      	ldr	r2, [pc, #124]	@ (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a1e      	ldr	r2, [pc, #120]	@ (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 800374e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <prvAddNewTaskToReadyList+0xd0>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <prvAddNewTaskToReadyList+0xd4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d903      	bls.n	800376c <prvAddNewTaskToReadyList+0x74>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <prvAddNewTaskToReadyList+0xd4>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <prvAddNewTaskToReadyList+0xd8>)
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fe fe35 	bl	80023f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003788:	f001 faf0 	bl	8004d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800378c:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <prvAddNewTaskToReadyList+0xcc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <prvAddNewTaskToReadyList+0xc8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	429a      	cmp	r2, r3
 80037a0:	d207      	bcs.n	80037b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <prvAddNewTaskToReadyList+0xdc>)
 80037a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000dec 	.word	0x20000dec
 80037c0:	20000918 	.word	0x20000918
 80037c4:	20000df8 	.word	0x20000df8
 80037c8:	20000e08 	.word	0x20000e08
 80037cc:	20000df4 	.word	0x20000df4
 80037d0:	2000091c 	.word	0x2000091c
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ea:	4b14      	ldr	r3, [pc, #80]	@ (800383c <vTaskDelay+0x64>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <vTaskDelay+0x32>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60bb      	str	r3, [r7, #8]
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	e7fd      	b.n	8003806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800380a:	f000 f883 	bl	8003914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fe13 	bl	800443c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003816:	f000 f88b 	bl	8003930 <xTaskResumeAll>
 800381a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <vTaskDelay+0x68>)
 8003824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000e14 	.word	0x20000e14
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	@ 0x28
 8003848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003852:	463a      	mov	r2, r7
 8003854:	1d39      	adds	r1, r7, #4
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fd6c 	bl	8002338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	9202      	str	r2, [sp, #8]
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	460a      	mov	r2, r1
 8003872:	4922      	ldr	r1, [pc, #136]	@ (80038fc <vTaskStartScheduler+0xb8>)
 8003874:	4822      	ldr	r0, [pc, #136]	@ (8003900 <vTaskStartScheduler+0xbc>)
 8003876:	f7ff fe13 	bl	80034a0 <xTaskCreateStatic>
 800387a:	4603      	mov	r3, r0
 800387c:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <vTaskStartScheduler+0xc0>)
 800387e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003880:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <vTaskStartScheduler+0xc0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e001      	b.n	8003892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003898:	f000 fe24 	bl	80044e4 <xTimerCreateTimerTask>
 800389c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d116      	bne.n	80038d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	613b      	str	r3, [r7, #16]
}
 80038b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038b8:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <vTaskStartScheduler+0xc4>)
 80038ba:	f04f 32ff 	mov.w	r2, #4294967295
 80038be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038c0:	4b12      	ldr	r3, [pc, #72]	@ (800390c <vTaskStartScheduler+0xc8>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <vTaskStartScheduler+0xcc>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038cc:	f001 f9ac 	bl	8004c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038d0:	e00f      	b.n	80038f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d10b      	bne.n	80038f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <vTaskStartScheduler+0xaa>
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	0800a298 	.word	0x0800a298
 8003900:	08003f3d 	.word	0x08003f3d
 8003904:	20000e10 	.word	0x20000e10
 8003908:	20000e0c 	.word	0x20000e0c
 800390c:	20000df8 	.word	0x20000df8
 8003910:	20000df0 	.word	0x20000df0

08003914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <vTaskSuspendAll+0x18>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a03      	ldr	r2, [pc, #12]	@ (800392c <vTaskSuspendAll+0x18>)
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000e14 	.word	0x20000e14

08003930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800393e:	4b42      	ldr	r3, [pc, #264]	@ (8003a48 <xTaskResumeAll+0x118>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <xTaskResumeAll+0x2e>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	603b      	str	r3, [r7, #0]
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	e7fd      	b.n	800395a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800395e:	f001 f9d5 	bl	8004d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003962:	4b39      	ldr	r3, [pc, #228]	@ (8003a48 <xTaskResumeAll+0x118>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3b01      	subs	r3, #1
 8003968:	4a37      	ldr	r2, [pc, #220]	@ (8003a48 <xTaskResumeAll+0x118>)
 800396a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <xTaskResumeAll+0x118>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d162      	bne.n	8003a3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003974:	4b35      	ldr	r3, [pc, #212]	@ (8003a4c <xTaskResumeAll+0x11c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05e      	beq.n	8003a3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800397c:	e02f      	b.n	80039de <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800397e:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <xTaskResumeAll+0x120>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3318      	adds	r3, #24
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fd8c 	bl	80024a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fd87 	bl	80024a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <xTaskResumeAll+0x124>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d903      	bls.n	80039ae <xTaskResumeAll+0x7e>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <xTaskResumeAll+0x124>)
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <xTaskResumeAll+0x128>)
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f7fe fd14 	bl	80023f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ce:	4b23      	ldr	r3, [pc, #140]	@ (8003a5c <xTaskResumeAll+0x12c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <xTaskResumeAll+0x130>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039de:	4b1c      	ldr	r3, [pc, #112]	@ (8003a50 <xTaskResumeAll+0x120>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1cb      	bne.n	800397e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039ec:	f000 fb5c 	bl	80040a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <xTaskResumeAll+0x134>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039fc:	f000 f844 	bl	8003a88 <xTaskIncrementTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a06:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <xTaskResumeAll+0x130>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f1      	bne.n	80039fc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <xTaskResumeAll+0x134>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <xTaskResumeAll+0x130>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <xTaskResumeAll+0x138>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 f997 	bl	8004d6c <vPortExitCritical>

	return xAlreadyYielded;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000e14 	.word	0x20000e14
 8003a4c:	20000dec 	.word	0x20000dec
 8003a50:	20000dac 	.word	0x20000dac
 8003a54:	20000df4 	.word	0x20000df4
 8003a58:	2000091c 	.word	0x2000091c
 8003a5c:	20000918 	.word	0x20000918
 8003a60:	20000e00 	.word	0x20000e00
 8003a64:	20000dfc 	.word	0x20000dfc
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a72:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <xTaskGetTickCount+0x18>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000df0 	.word	0x20000df0

08003a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b52      	ldr	r3, [pc, #328]	@ (8003bdc <xTaskIncrementTick+0x154>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 808f 	bne.w	8003bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a9c:	4b50      	ldr	r3, [pc, #320]	@ (8003be0 <xTaskIncrementTick+0x158>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8003be0 <xTaskIncrementTick+0x158>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d121      	bne.n	8003af4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <xTaskIncrementTick+0x15c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	603b      	str	r3, [r7, #0]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <xTaskIncrementTick+0x46>
 8003ad2:	4b44      	ldr	r3, [pc, #272]	@ (8003be4 <xTaskIncrementTick+0x15c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <xTaskIncrementTick+0x160>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a41      	ldr	r2, [pc, #260]	@ (8003be4 <xTaskIncrementTick+0x15c>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4a41      	ldr	r2, [pc, #260]	@ (8003be8 <xTaskIncrementTick+0x160>)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b41      	ldr	r3, [pc, #260]	@ (8003bec <xTaskIncrementTick+0x164>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a3f      	ldr	r2, [pc, #252]	@ (8003bec <xTaskIncrementTick+0x164>)
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	f000 fada 	bl	80040a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf0 <xTaskIncrementTick+0x168>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d34e      	bcc.n	8003b9c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afe:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <xTaskIncrementTick+0x15c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <xTaskIncrementTick+0x84>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <xTaskIncrementTick+0x86>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b12:	4b37      	ldr	r3, [pc, #220]	@ (8003bf0 <xTaskIncrementTick+0x168>)
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	601a      	str	r2, [r3, #0]
					break;
 8003b1a:	e03f      	b.n	8003b9c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b1c:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <xTaskIncrementTick+0x15c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d203      	bcs.n	8003b3c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b34:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <xTaskIncrementTick+0x168>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
						break;
 8003b3a:	e02f      	b.n	8003b9c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fcb1 	bl	80024a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3318      	adds	r3, #24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fca8 	bl	80024a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <xTaskIncrementTick+0x16c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d903      	bls.n	8003b6c <xTaskIncrementTick+0xe4>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <xTaskIncrementTick+0x16c>)
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <xTaskIncrementTick+0x170>)
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fe fc35 	bl	80023f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bfc <xTaskIncrementTick+0x174>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d3b3      	bcc.n	8003afe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b96:	2301      	movs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9a:	e7b0      	b.n	8003afe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b9c:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <xTaskIncrementTick+0x174>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba2:	4915      	ldr	r1, [pc, #84]	@ (8003bf8 <xTaskIncrementTick+0x170>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d907      	bls.n	8003bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e004      	b.n	8003bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bba:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <xTaskIncrementTick+0x178>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c00 <xTaskIncrementTick+0x178>)
 8003bc2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <xTaskIncrementTick+0x17c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bd0:	697b      	ldr	r3, [r7, #20]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000e14 	.word	0x20000e14
 8003be0:	20000df0 	.word	0x20000df0
 8003be4:	20000da4 	.word	0x20000da4
 8003be8:	20000da8 	.word	0x20000da8
 8003bec:	20000e04 	.word	0x20000e04
 8003bf0:	20000e0c 	.word	0x20000e0c
 8003bf4:	20000df4 	.word	0x20000df4
 8003bf8:	2000091c 	.word	0x2000091c
 8003bfc:	20000918 	.word	0x20000918
 8003c00:	20000dfc 	.word	0x20000dfc
 8003c04:	20000e00 	.word	0x20000e00

08003c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c0e:	4b28      	ldr	r3, [pc, #160]	@ (8003cb0 <vTaskSwitchContext+0xa8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <vTaskSwitchContext+0xac>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c1c:	e042      	b.n	8003ca4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <vTaskSwitchContext+0xac>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c24:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <vTaskSwitchContext+0xb0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	e011      	b.n	8003c50 <vTaskSwitchContext+0x48>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <vTaskSwitchContext+0x42>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	607b      	str	r3, [r7, #4]
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	e7fd      	b.n	8003c46 <vTaskSwitchContext+0x3e>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <vTaskSwitchContext+0xb4>)
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0e3      	beq.n	8003c2c <vTaskSwitchContext+0x24>
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <vTaskSwitchContext+0xb4>)
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3308      	adds	r3, #8
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d104      	bne.n	8003c94 <vTaskSwitchContext+0x8c>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <vTaskSwitchContext+0xb8>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <vTaskSwitchContext+0xb0>)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000e14 	.word	0x20000e14
 8003cb4:	20000e00 	.word	0x20000e00
 8003cb8:	20000df4 	.word	0x20000df4
 8003cbc:	2000091c 	.word	0x2000091c
 8003cc0:	20000918 	.word	0x20000918

08003cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60fb      	str	r3, [r7, #12]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <vTaskPlaceOnEventList+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe fb9f 	bl	8002438 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 fb9d 	bl	800443c <prvAddCurrentTaskToDelayedList>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000918 	.word	0x20000918

08003d10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	617b      	str	r3, [r7, #20]
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3318      	adds	r3, #24
 8003d40:	4619      	mov	r1, r3
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7fe fb55 	bl	80023f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f000 fb70 	bl	800443c <prvAddCurrentTaskToDelayedList>
	}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000918 	.word	0x20000918

08003d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	60fb      	str	r3, [r7, #12]
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	e7fd      	b.n	8003d92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fb84 	bl	80024a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <xTaskRemoveFromEventList+0xb0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11d      	bne.n	8003de4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fb7b 	bl	80024a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db6:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <xTaskRemoveFromEventList+0xb4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d903      	bls.n	8003dc6 <xTaskRemoveFromEventList+0x5e>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <xTaskRemoveFromEventList+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <xTaskRemoveFromEventList+0xb8>)
 8003dd4:	441a      	add	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f7fe fb08 	bl	80023f2 <vListInsertEnd>
 8003de2:	e005      	b.n	8003df0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3318      	adds	r3, #24
 8003de8:	4619      	mov	r1, r3
 8003dea:	480e      	ldr	r0, [pc, #56]	@ (8003e24 <xTaskRemoveFromEventList+0xbc>)
 8003dec:	f7fe fb01 	bl	80023f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <xTaskRemoveFromEventList+0xc0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d905      	bls.n	8003e0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <xTaskRemoveFromEventList+0xc4>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e001      	b.n	8003e0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000e14 	.word	0x20000e14
 8003e1c:	20000df4 	.word	0x20000df4
 8003e20:	2000091c 	.word	0x2000091c
 8003e24:	20000dac 	.word	0x20000dac
 8003e28:	20000918 	.word	0x20000918
 8003e2c:	20000e00 	.word	0x20000e00

08003e30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <vTaskInternalSetTimeOutState+0x24>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <vTaskInternalSetTimeOutState+0x28>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	605a      	str	r2, [r3, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000e04 	.word	0x20000e04
 8003e58:	20000df0 	.word	0x20000df0

08003e5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	613b      	str	r3, [r7, #16]
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	e7fd      	b.n	8003e80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60fb      	str	r3, [r7, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	e7fd      	b.n	8003e9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ea2:	f000 ff33 	bl	8004d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <xTaskCheckForTimeOut+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d102      	bne.n	8003ec6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e023      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b15      	ldr	r3, [pc, #84]	@ (8003f20 <xTaskCheckForTimeOut+0xc4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d007      	beq.n	8003ee2 <xTaskCheckForTimeOut+0x86>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e015      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d20b      	bcs.n	8003f04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff99 	bl	8003e30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e004      	b.n	8003f0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f0e:	f000 ff2d 	bl	8004d6c <vPortExitCritical>

	return xReturn;
 8003f12:	69fb      	ldr	r3, [r7, #28]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000df0 	.word	0x20000df0
 8003f20:	20000e04 	.word	0x20000e04

08003f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f28:	4b03      	ldr	r3, [pc, #12]	@ (8003f38 <vTaskMissedYield+0x14>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000e00 	.word	0x20000e00

08003f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f44:	f000 f852 	bl	8003fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <prvIdleTask+0x28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9f9      	bls.n	8003f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <prvIdleTask+0x2c>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f60:	e7f0      	b.n	8003f44 <prvIdleTask+0x8>
 8003f62:	bf00      	nop
 8003f64:	2000091c 	.word	0x2000091c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	e00c      	b.n	8003f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <prvInitialiseTaskLists+0x60>)
 8003f84:	4413      	add	r3, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fa08 	bl	800239c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b37      	cmp	r3, #55	@ 0x37
 8003f96:	d9ef      	bls.n	8003f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f98:	480d      	ldr	r0, [pc, #52]	@ (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003f9a:	f7fe f9ff 	bl	800239c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f9e:	480d      	ldr	r0, [pc, #52]	@ (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fa0:	f7fe f9fc 	bl	800239c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fa4:	480c      	ldr	r0, [pc, #48]	@ (8003fd8 <prvInitialiseTaskLists+0x6c>)
 8003fa6:	f7fe f9f9 	bl	800239c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003faa:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <prvInitialiseTaskLists+0x70>)
 8003fac:	f7fe f9f6 	bl	800239c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb0:	480b      	ldr	r0, [pc, #44]	@ (8003fe0 <prvInitialiseTaskLists+0x74>)
 8003fb2:	f7fe f9f3 	bl	800239c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <prvInitialiseTaskLists+0x78>)
 8003fb8:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <prvInitialiseTaskLists+0x64>)
 8003fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <prvInitialiseTaskLists+0x7c>)
 8003fbe:	4a05      	ldr	r2, [pc, #20]	@ (8003fd4 <prvInitialiseTaskLists+0x68>)
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	2000091c 	.word	0x2000091c
 8003fd0:	20000d7c 	.word	0x20000d7c
 8003fd4:	20000d90 	.word	0x20000d90
 8003fd8:	20000dac 	.word	0x20000dac
 8003fdc:	20000dc0 	.word	0x20000dc0
 8003fe0:	20000dd8 	.word	0x20000dd8
 8003fe4:	20000da4 	.word	0x20000da4
 8003fe8:	20000da8 	.word	0x20000da8

08003fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff2:	e019      	b.n	8004028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ff4:	f000 fe8a 	bl	8004d0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ff8:	4b10      	ldr	r3, [pc, #64]	@ (800403c <prvCheckTasksWaitingTermination+0x50>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fa4f 	bl	80024a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <prvCheckTasksWaitingTermination+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <prvCheckTasksWaitingTermination+0x54>)
 8004012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	4a0a      	ldr	r2, [pc, #40]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800401c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800401e:	f000 fea5 	bl	8004d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f810 	bl	8004048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <prvCheckTasksWaitingTermination+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e1      	bne.n	8003ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000dc0 	.word	0x20000dc0
 8004040:	20000dec 	.word	0x20000dec
 8004044:	20000dd4 	.word	0x20000dd4

08004048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f81e 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f001 f81b 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800406a:	e019      	b.n	80040a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004072:	2b01      	cmp	r3, #1
 8004074:	d103      	bne.n	800407e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f001 f812 	bl	80050a0 <vPortFree>
	}
 800407c:	e010      	b.n	80040a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004084:	2b02      	cmp	r3, #2
 8004086:	d00b      	beq.n	80040a0 <prvDeleteTCB+0x58>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <prvDeleteTCB+0x54>
	}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ae:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <prvResetNextTaskUnblockTime+0x40>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <prvResetNextTaskUnblockTime+0x14>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <prvResetNextTaskUnblockTime+0x16>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040c2:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <prvResetNextTaskUnblockTime+0x44>)
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ca:	e008      	b.n	80040de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <prvResetNextTaskUnblockTime+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <prvResetNextTaskUnblockTime+0x44>)
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	20000da4 	.word	0x20000da4
 80040ec:	20000e0c 	.word	0x20000e0c

080040f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80040f6:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <xTaskGetCurrentTaskHandle+0x18>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80040fc:	687b      	ldr	r3, [r7, #4]
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	20000918 	.word	0x20000918

0800410c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <xTaskGetSchedulerState+0x34>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800411a:	2301      	movs	r3, #1
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e008      	b.n	8004132 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004120:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <xTaskGetSchedulerState+0x38>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004128:	2302      	movs	r3, #2
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e001      	b.n	8004132 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004132:	687b      	ldr	r3, [r7, #4]
	}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000df8 	.word	0x20000df8
 8004144:	20000e14 	.word	0x20000e14

08004148 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d056      	beq.n	800420c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004162:	4b2d      	ldr	r3, [pc, #180]	@ (8004218 <xTaskPriorityInherit+0xd0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	429a      	cmp	r2, r3
 800416a:	d246      	bcs.n	80041fa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	db06      	blt.n	8004182 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	4b28      	ldr	r3, [pc, #160]	@ (8004218 <xTaskPriorityInherit+0xd0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a22      	ldr	r2, [pc, #136]	@ (800421c <xTaskPriorityInherit+0xd4>)
 8004194:	4413      	add	r3, r2
 8004196:	4299      	cmp	r1, r3
 8004198:	d101      	bne.n	800419e <xTaskPriorityInherit+0x56>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xTaskPriorityInherit+0x58>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f97d 	bl	80024a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <xTaskPriorityInherit+0xd0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041bc:	4b18      	ldr	r3, [pc, #96]	@ (8004220 <xTaskPriorityInherit+0xd8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d903      	bls.n	80041cc <xTaskPriorityInherit+0x84>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <xTaskPriorityInherit+0xd8>)
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4a10      	ldr	r2, [pc, #64]	@ (800421c <xTaskPriorityInherit+0xd4>)
 80041da:	441a      	add	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fe f905 	bl	80023f2 <vListInsertEnd>
 80041e8:	e004      	b.n	80041f4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <xTaskPriorityInherit+0xd0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e008      	b.n	800420c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <xTaskPriorityInherit+0xd0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	429a      	cmp	r2, r3
 8004206:	d201      	bcs.n	800420c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800420c:	68fb      	ldr	r3, [r7, #12]
	}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000918 	.word	0x20000918
 800421c:	2000091c 	.word	0x2000091c
 8004220:	20000df4 	.word	0x20000df4

08004224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d058      	beq.n	80042ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800423a:	4b2f      	ldr	r3, [pc, #188]	@ (80042f8 <xTaskPriorityDisinherit+0xd4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d00b      	beq.n	800425c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60bb      	str	r3, [r7, #8]
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	429a      	cmp	r2, r3
 8004290:	d02c      	beq.n	80042ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d128      	bne.n	80042ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f902 	bl	80024a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042bc:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <xTaskPriorityDisinherit+0xd8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <xTaskPriorityDisinherit+0xa8>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	4a0c      	ldr	r2, [pc, #48]	@ (80042fc <xTaskPriorityDisinherit+0xd8>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <xTaskPriorityDisinherit+0xdc>)
 80042da:	441a      	add	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7fe f885 	bl	80023f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042ec:	697b      	ldr	r3, [r7, #20]
	}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000918 	.word	0x20000918
 80042fc:	20000df4 	.word	0x20000df4
 8004300:	2000091c 	.word	0x2000091c

08004304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004312:	2301      	movs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d071      	beq.n	8004400 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d902      	bls.n	800434c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e002      	b.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004350:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	429a      	cmp	r2, r3
 800435a:	d051      	beq.n	8004400 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d14c      	bne.n	8004400 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004366:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d10b      	bne.n	8004388 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60bb      	str	r3, [r7, #8]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db04      	blt.n	80043a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6959      	ldr	r1, [r3, #20]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a15      	ldr	r2, [pc, #84]	@ (800440c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80043b6:	4413      	add	r3, r2
 80043b8:	4299      	cmp	r1, r3
 80043ba:	d101      	bne.n	80043c0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01c      	beq.n	8004400 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe f86c 	bl	80024a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d903      	bls.n	80043e4 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004410 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4a06      	ldr	r2, [pc, #24]	@ (800440c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80043f2:	441a      	add	r2, r3
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7fd fff9 	bl	80023f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000918 	.word	0x20000918
 800440c:	2000091c 	.word	0x2000091c
 8004410:	20000df4 	.word	0x20000df4

08004414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004426:	3201      	adds	r2, #1
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800442a:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
	}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000918 	.word	0x20000918

0800443c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004446:	4b21      	ldr	r3, [pc, #132]	@ (80044cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444c:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe f828 	bl	80024a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d10a      	bne.n	8004476 <prvAddCurrentTaskToDelayedList+0x3a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4819      	ldr	r0, [pc, #100]	@ (80044d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004470:	f7fd ffbf 	bl	80023f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004474:	e026      	b.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800447e:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	429a      	cmp	r2, r3
 800448c:	d209      	bcs.n	80044a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800448e:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f7fd ffcc 	bl	8002438 <vListInsert>
}
 80044a0:	e010      	b.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7fd ffc2 	bl	8002438 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d202      	bcs.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044be:	4a08      	ldr	r2, [pc, #32]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000df0 	.word	0x20000df0
 80044d0:	20000918 	.word	0x20000918
 80044d4:	20000dd8 	.word	0x20000dd8
 80044d8:	20000da8 	.word	0x20000da8
 80044dc:	20000da4 	.word	0x20000da4
 80044e0:	20000e0c 	.word	0x20000e0c

080044e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ee:	f000 fad9 	bl	8004aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <xTimerCreateTimerTask+0x84>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004502:	1d3a      	adds	r2, r7, #4
 8004504:	f107 0108 	add.w	r1, r7, #8
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd ff2b 	bl	8002368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	9202      	str	r2, [sp, #8]
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	2302      	movs	r3, #2
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2300      	movs	r3, #0
 8004522:	460a      	mov	r2, r1
 8004524:	4911      	ldr	r1, [pc, #68]	@ (800456c <xTimerCreateTimerTask+0x88>)
 8004526:	4812      	ldr	r0, [pc, #72]	@ (8004570 <xTimerCreateTimerTask+0x8c>)
 8004528:	f7fe ffba 	bl	80034a0 <xTaskCreateStatic>
 800452c:	4603      	mov	r3, r0
 800452e:	4a11      	ldr	r2, [pc, #68]	@ (8004574 <xTimerCreateTimerTask+0x90>)
 8004530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <xTimerCreateTimerTask+0x90>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800453a:	2301      	movs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000e48 	.word	0x20000e48
 800456c:	0800a2a0 	.word	0x0800a2a0
 8004570:	08004699 	.word	0x08004699
 8004574:	20000e4c 	.word	0x20000e4c

08004578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02a      	beq.n	8004606 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	dc18      	bgt.n	80045f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045c2:	f7ff fda3 	bl	800410c <xTaskGetSchedulerState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d109      	bne.n	80045e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f107 0110 	add.w	r1, r7, #16
 80045d4:	2300      	movs	r3, #0
 80045d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d8:	f7fe f992 	bl	8002900 <xQueueGenericSend>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80045de:	e012      	b.n	8004606 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	f107 0110 	add.w	r1, r7, #16
 80045e8:	2300      	movs	r3, #0
 80045ea:	2200      	movs	r2, #0
 80045ec:	f7fe f988 	bl	8002900 <xQueueGenericSend>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80045f2:	e008      	b.n	8004606 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	f107 0110 	add.w	r1, r7, #16
 80045fc:	2300      	movs	r3, #0
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	f7fe fa80 	bl	8002b04 <xQueueGenericSendFromISR>
 8004604:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000e48 	.word	0x20000e48

08004614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800461e:	4b1d      	ldr	r3, [pc, #116]	@ (8004694 <prvProcessExpiredTimer+0x80>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fd ff3b 	bl	80024a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d123      	bne.n	8004682 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	18d1      	adds	r1, r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f000 f8cc 	bl	80047e4 <prvInsertTimerInActiveList>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	2100      	movs	r1, #0
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f7ff ff8b 	bl	8004578 <xTimerGenericCommand>
 8004662:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	6978      	ldr	r0, [r7, #20]
 8004688:	4798      	blx	r3
}
 800468a:	bf00      	nop
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000e40 	.word	0x20000e40

08004698 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046a0:	f107 0308 	add.w	r3, r7, #8
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f859 	bl	800475c <prvGetNextExpireTime>
 80046aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4619      	mov	r1, r3
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f805 	bl	80046c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046b6:	f000 f8d7 	bl	8004868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046ba:	bf00      	nop
 80046bc:	e7f0      	b.n	80046a0 <prvTimerTask+0x8>
	...

080046c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046ca:	f7ff f923 	bl	8003914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f866 	bl	80047a4 <prvSampleTimeNow>
 80046d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d130      	bne.n	8004742 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <prvProcessTimerOrBlockTask+0x3c>
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d806      	bhi.n	80046fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046ee:	f7ff f91f 	bl	8003930 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff8d 	bl	8004614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046fa:	e024      	b.n	8004746 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004702:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <prvProcessTimerOrBlockTask+0x90>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <prvProcessTimerOrBlockTask+0x94>)
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	f7fe fe89 	bl	8003438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004726:	f7ff f903 	bl	8003930 <xTaskResumeAll>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004730:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <prvProcessTimerOrBlockTask+0x98>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
}
 8004740:	e001      	b.n	8004746 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004742:	f7ff f8f5 	bl	8003930 <xTaskResumeAll>
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000e44 	.word	0x20000e44
 8004754:	20000e48 	.word	0x20000e48
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004764:	4b0e      	ldr	r3, [pc, #56]	@ (80047a0 <prvGetNextExpireTime+0x44>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004782:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <prvGetNextExpireTime+0x44>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e001      	b.n	8004792 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000e40 	.word	0x20000e40

080047a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047ac:	f7ff f95e 	bl	8003a6c <xTaskGetTickCount>
 80047b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <prvSampleTimeNow+0x3c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d205      	bcs.n	80047c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047bc:	f000 f910 	bl	80049e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e002      	b.n	80047ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047ce:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <prvSampleTimeNow+0x3c>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000e50 	.word	0x20000e50

080047e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d812      	bhi.n	8004830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e01b      	b.n	8004856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <prvInsertTimerInActiveList+0x7c>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7fd fe05 	bl	8002438 <vListInsert>
 800482e:	e012      	b.n	8004856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d206      	bcs.n	8004846 <prvInsertTimerInActiveList+0x62>
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e007      	b.n	8004856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <prvInsertTimerInActiveList+0x80>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7fd fdf1 	bl	8002438 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000e44 	.word	0x20000e44
 8004864:	20000e40 	.word	0x20000e40

08004868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	@ 0x38
 800486c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800486e:	e0a5      	b.n	80049bc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	da19      	bge.n	80048aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	3304      	adds	r3, #4
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	61fb      	str	r3, [r7, #28]
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800489a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a0:	6850      	ldr	r0, [r2, #4]
 80048a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	4611      	mov	r1, r2
 80048a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f2c0 8085 	blt.w	80049bc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	3304      	adds	r3, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fdf0 	bl	80024a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048c8:	463b      	mov	r3, r7
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff6a 	bl	80047a4 <prvSampleTimeNow>
 80048d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d86c      	bhi.n	80049b2 <prvProcessReceivedCommands+0x14a>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <prvProcessReceivedCommands+0x78>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004909 	.word	0x08004909
 80048ec:	080049b3 	.word	0x080049b3
 80048f0:	08004967 	.word	0x08004967
 80048f4:	080049a1 	.word	0x080049a1
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004909 	.word	0x08004909
 8004900:	080049b3 	.word	0x080049b3
 8004904:	08004967 	.word	0x08004967
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	18d1      	adds	r1, r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004916:	f7ff ff65 	bl	80047e4 <prvInsertTimerInActiveList>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d04a      	beq.n	80049b6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004926:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d142      	bne.n	80049b6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	441a      	add	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	2100      	movs	r1, #0
 8004940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004942:	f7ff fe19 	bl	8004578 <xTimerGenericCommand>
 8004946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d133      	bne.n	80049b6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61bb      	str	r3, [r7, #24]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	617b      	str	r3, [r7, #20]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	18d1      	adds	r1, r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800499a:	f7ff ff23 	bl	80047e4 <prvInsertTimerInActiveList>
					break;
 800499e:	e00d      	b.n	80049bc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80049aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ac:	f000 fb78 	bl	80050a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049b0:	e003      	b.n	80049ba <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <prvProcessReceivedCommands+0x154>
					break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <prvProcessReceivedCommands+0x154>
					break;
 80049ba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <prvProcessReceivedCommands+0x174>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1d39      	adds	r1, r7, #4
 80049c2:	2200      	movs	r2, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe f939 	bl	8002c3c <xQueueReceive>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f47f af4f 	bne.w	8004870 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	3730      	adds	r7, #48	@ 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000e48 	.word	0x20000e48

080049e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e6:	e046      	b.n	8004a76 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e8:	4b2c      	ldr	r3, [pc, #176]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd fd51 	bl	80024a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d12f      	bne.n	8004a76 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d90e      	bls.n	8004a46 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a34:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fd fcfa 	bl	8002438 <vListInsert>
 8004a44:	e017      	b.n	8004a76 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fd91 	bl	8004578 <xTimerGenericCommand>
 8004a56:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <prvSwitchTimerLists+0x96>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	603b      	str	r3, [r7, #0]
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a76:	4b09      	ldr	r3, [pc, #36]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1b3      	bne.n	80049e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a80:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <prvSwitchTimerLists+0xc0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <prvSwitchTimerLists+0xbc>)
 8004a8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <prvSwitchTimerLists+0xc0>)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000e40 	.word	0x20000e40
 8004aa0:	20000e44 	.word	0x20000e44

08004aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004aaa:	f000 f92f 	bl	8004d0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aae:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d120      	bne.n	8004af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ab6:	4814      	ldr	r0, [pc, #80]	@ (8004b08 <prvCheckForValidListAndQueue+0x64>)
 8004ab8:	f7fd fc70 	bl	800239c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004abc:	4813      	ldr	r0, [pc, #76]	@ (8004b0c <prvCheckForValidListAndQueue+0x68>)
 8004abe:	f7fd fc6d 	bl	800239c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <prvCheckForValidListAndQueue+0x6c>)
 8004ac4:	4a10      	ldr	r2, [pc, #64]	@ (8004b08 <prvCheckForValidListAndQueue+0x64>)
 8004ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <prvCheckForValidListAndQueue+0x70>)
 8004aca:	4a10      	ldr	r2, [pc, #64]	@ (8004b0c <prvCheckForValidListAndQueue+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <prvCheckForValidListAndQueue+0x74>)
 8004ad4:	4a11      	ldr	r2, [pc, #68]	@ (8004b1c <prvCheckForValidListAndQueue+0x78>)
 8004ad6:	2110      	movs	r1, #16
 8004ad8:	200a      	movs	r0, #10
 8004ada:	f7fd fd79 	bl	80025d0 <xQueueGenericCreateStatic>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ae2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ae4:	4b07      	ldr	r3, [pc, #28]	@ (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	490b      	ldr	r1, [pc, #44]	@ (8004b20 <prvCheckForValidListAndQueue+0x7c>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fc78 	bl	80033e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004af8:	f000 f938 	bl	8004d6c <vPortExitCritical>
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000e48 	.word	0x20000e48
 8004b08:	20000e18 	.word	0x20000e18
 8004b0c:	20000e2c 	.word	0x20000e2c
 8004b10:	20000e40 	.word	0x20000e40
 8004b14:	20000e44 	.word	0x20000e44
 8004b18:	20000ef4 	.word	0x20000ef4
 8004b1c:	20000e54 	.word	0x20000e54
 8004b20:	0800a2a8 	.word	0x0800a2a8

08004b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b54:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <pxPortInitialiseStack+0x54>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b14      	subs	r3, #20
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b20      	subs	r3, #32
 8004b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	08004b7d 	.word	0x08004b7d

08004b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <prvTaskExitError+0x54>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d00b      	beq.n	8004ba8 <prvTaskExitError+0x2c>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <prvTaskExitError+0x28>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60bb      	str	r3, [r7, #8]
}
 8004bba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bbc:	bf00      	nop
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0fc      	beq.n	8004bbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	2000000c 	.word	0x2000000c
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bfe:	4770      	bx	lr

08004c00 <pxCurrentTCBConst2>:
 8004c00:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c08:	4806      	ldr	r0, [pc, #24]	@ (8004c24 <prvPortStartFirstTask+0x1c>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	b662      	cpsie	i
 8004c14:	b661      	cpsie	f
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	df00      	svc	0
 8004c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c22:	bf00      	nop
 8004c24:	e000ed08 	.word	0xe000ed08

08004c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c2e:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <xPortStartScheduler+0xd0>)
 8004c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	@ 0xff
 8004c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <xPortStartScheduler+0xd4>)
 8004c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c56:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c58:	2207      	movs	r2, #7
 8004c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5c:	e009      	b.n	8004c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b80      	cmp	r3, #128	@ 0x80
 8004c7c:	d0ef      	beq.n	8004c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c7e:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d00b      	beq.n	8004ca2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60bb      	str	r3, [r7, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004caa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cac:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cb4:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <xPortStartScheduler+0xd8>)
 8004cb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <xPortStartScheduler+0xdc>)
 8004cd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cd8:	f000 f8b8 	bl	8004e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <xPortStartScheduler+0xe0>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ce2:	f7ff ff91 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce6:	f7fe ff8f 	bl	8003c08 <vTaskSwitchContext>
	prvTaskExitError();
 8004cea:	f7ff ff47 	bl	8004b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000e400 	.word	0xe000e400
 8004cfc:	20000f44 	.word	0x20000f44
 8004d00:	20000f48 	.word	0x20000f48
 8004d04:	e000ed20 	.word	0xe000ed20
 8004d08:	2000000c 	.word	0x2000000c

08004d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	607b      	str	r3, [r7, #4]
}
 8004d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d26:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <vPortEnterCritical+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d110      	bne.n	8004d5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <vPortEnterCritical+0x5c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	603b      	str	r3, [r7, #0]
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <vPortEnterCritical+0x4a>
	}
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	2000000c 	.word	0x2000000c
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d72:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <vPortExitCritical+0x26>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	e7fd      	b.n	8004d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d92:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	4a08      	ldr	r2, [pc, #32]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d9c:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <vPortExitCritical+0x50>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <vPortExitCritical+0x44>
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004dd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dda:	f380 8811 	msr	BASEPRI, r0
 8004dde:	f7fe ff13 	bl	8003c08 <vTaskSwitchContext>
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004df6:	f380 8809 	msr	PSP, r0
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	4770      	bx	lr

08004e00 <pxCurrentTCBConst>:
 8004e00:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e22:	f7fe fe31 	bl	8003a88 <xTaskIncrementTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <xPortSysTickHandler+0x40>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <vPortSetupTimerInterrupt+0x34>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <vPortSetupTimerInterrupt+0x38>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <vPortSetupTimerInterrupt+0x3c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortSetupTimerInterrupt+0x40>)
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e6e:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e010 	.word	0xe000e010
 8004e80:	e000e018 	.word	0xe000e018
 8004e84:	20000000 	.word	0x20000000
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	e000e014 	.word	0xe000e014

08004e90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e96:	f3ef 8305 	mrs	r3, IPSR
 8004e9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b0f      	cmp	r3, #15
 8004ea0:	d915      	bls.n	8004ece <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ea2:	4a17      	ldr	r2, [pc, #92]	@ (8004f00 <vPortValidateInterruptPriority+0x70>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004eac:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <vPortValidateInterruptPriority+0x74>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	7afa      	ldrb	r2, [r7, #11]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20b      	bcs.n	8004ece <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	607b      	str	r3, [r7, #4]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ece:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <vPortValidateInterruptPriority+0x78>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <vPortValidateInterruptPriority+0x7c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d90b      	bls.n	8004ef6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <vPortValidateInterruptPriority+0x62>
	}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	e000e3f0 	.word	0xe000e3f0
 8004f04:	20000f44 	.word	0x20000f44
 8004f08:	e000ed0c 	.word	0xe000ed0c
 8004f0c:	20000f48 	.word	0x20000f48

08004f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f1c:	f7fe fcfa 	bl	8003914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f20:	4b5a      	ldr	r3, [pc, #360]	@ (800508c <pvPortMalloc+0x17c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f28:	f000 f916 	bl	8005158 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f2c:	4b58      	ldr	r3, [pc, #352]	@ (8005090 <pvPortMalloc+0x180>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8090 	bne.w	800505a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f40:	2208      	movs	r2, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d015      	beq.n	8004f7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	3308      	adds	r3, #8
 8004f5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <pvPortMalloc+0x6e>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d06a      	beq.n	800505a <pvPortMalloc+0x14a>
 8004f84:	4b43      	ldr	r3, [pc, #268]	@ (8005094 <pvPortMalloc+0x184>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d865      	bhi.n	800505a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f8e:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <pvPortMalloc+0x188>)
 8004f90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <pvPortMalloc+0x188>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f98:	e004      	b.n	8004fa4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <pvPortMalloc+0xa6>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f1      	bne.n	8004f9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fb6:	4b35      	ldr	r3, [pc, #212]	@ (800508c <pvPortMalloc+0x17c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d04c      	beq.n	800505a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	2308      	movs	r3, #8
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d920      	bls.n	8005024 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <pvPortMalloc+0xfc>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	613b      	str	r3, [r7, #16]
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800501e:	69b8      	ldr	r0, [r7, #24]
 8005020:	f000 f8fc 	bl	800521c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005024:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <pvPortMalloc+0x184>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <pvPortMalloc+0x184>)
 8005030:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005032:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <pvPortMalloc+0x184>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b19      	ldr	r3, [pc, #100]	@ (800509c <pvPortMalloc+0x18c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d203      	bcs.n	8005046 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800503e:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <pvPortMalloc+0x184>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a16      	ldr	r2, [pc, #88]	@ (800509c <pvPortMalloc+0x18c>)
 8005044:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <pvPortMalloc+0x180>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	431a      	orrs	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800505a:	f7fe fc69 	bl	8003930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <pvPortMalloc+0x170>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <pvPortMalloc+0x16c>
	return pvReturn;
 8005080:	69fb      	ldr	r3, [r7, #28]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3728      	adds	r7, #40	@ 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20003354 	.word	0x20003354
 8005090:	20003360 	.word	0x20003360
 8005094:	20003358 	.word	0x20003358
 8005098:	2000334c 	.word	0x2000334c
 800509c:	2000335c 	.word	0x2000335c

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d04a      	beq.n	8005148 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b22      	ldr	r3, [pc, #136]	@ (8005150 <vPortFree+0xb0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <vPortFree+0x46>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <vPortFree+0x66>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60bb      	str	r3, [r7, #8]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <vPortFree+0xb0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d115      	bne.n	8005148 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <vPortFree+0xb0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800512c:	f7fe fbf2 	bl	8003914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <vPortFree+0xb4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4413      	add	r3, r2
 800513a:	4a06      	ldr	r2, [pc, #24]	@ (8005154 <vPortFree+0xb4>)
 800513c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513e:	6938      	ldr	r0, [r7, #16]
 8005140:	f000 f86c 	bl	800521c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005144:	f7fe fbf4 	bl	8003930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20003360 	.word	0x20003360
 8005154:	20003358 	.word	0x20003358

08005158 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8005162:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005164:	4b27      	ldr	r3, [pc, #156]	@ (8005204 <prvHeapInit+0xac>)
 8005166:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <prvHeapInit+0xac>)
 8005188:	4413      	add	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005190:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <prvHeapInit+0xb0>)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005196:	4b1c      	ldr	r3, [pc, #112]	@ (8005208 <prvHeapInit+0xb0>)
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a4:	2208      	movs	r2, #8
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0307 	bic.w	r3, r3, #7
 80051b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a15      	ldr	r2, [pc, #84]	@ (800520c <prvHeapInit+0xb4>)
 80051b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051ba:	4b14      	ldr	r3, [pc, #80]	@ (800520c <prvHeapInit+0xb4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <prvHeapInit+0xb4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	1ad2      	subs	r2, r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <prvHeapInit+0xb4>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005210 <prvHeapInit+0xb8>)
 80051e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <prvHeapInit+0xbc>)
 80051ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <prvHeapInit+0xc0>)
 80051f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000f4c 	.word	0x20000f4c
 8005208:	2000334c 	.word	0x2000334c
 800520c:	20003354 	.word	0x20003354
 8005210:	2000335c 	.word	0x2000335c
 8005214:	20003358 	.word	0x20003358
 8005218:	20003360 	.word	0x20003360

0800521c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005224:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e002      	b.n	8005230 <prvInsertBlockIntoFreeList+0x14>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d8f7      	bhi.n	800522a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	d108      	bne.n	800525e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d118      	bne.n	80052a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00d      	beq.n	800529a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	441a      	add	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e008      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <prvInsertBlockIntoFreeList+0xac>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e003      	b.n	80052ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d002      	beq.n	80052ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	2000334c 	.word	0x2000334c
 80052c8:	20003354 	.word	0x20003354

080052cc <read_temp_init>:
 */

#include "adc.h"

void read_temp_init(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
	RCC ->CFGR &= ~(0b11<<14);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <read_temp_init+0x6c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <read_temp_init+0x6c>)
 80052d6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80052da:	6053      	str	r3, [r2, #4]
	RCC ->CFGR |= (0b10<<14);
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <read_temp_init+0x6c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <read_temp_init+0x6c>)
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e6:	6053      	str	r3, [r2, #4]

    RCC-> APB2ENR |= RCC_APB2ENR_ADC1EN;
 80052e8:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <read_temp_init+0x6c>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <read_temp_init+0x6c>)
 80052ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052f2:	6193      	str	r3, [r2, #24]

    ADC1-> SMPR1 |= (0b111<<18); //sample time: 239.5 cycles
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <read_temp_init+0x70>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a10      	ldr	r2, [pc, #64]	@ (800533c <read_temp_init+0x70>)
 80052fa:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80052fe:	60d3      	str	r3, [r2, #12]
    ADC1-> JSQR &= ~(0b11<<20); //00: 1 conversion
 8005300:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <read_temp_init+0x70>)
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	4a0d      	ldr	r2, [pc, #52]	@ (800533c <read_temp_init+0x70>)
 8005306:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800530a:	6393      	str	r3, [r2, #56]	@ 0x38
    ADC1-> JSQR |= (16<<15); //set source for JSQ4 is temp sensor (CH16)
 800530c:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <read_temp_init+0x70>)
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <read_temp_init+0x70>)
 8005312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005316:	6393      	str	r3, [r2, #56]	@ 0x38

    ADC1-> CR2 |= (1<<23); //enable temp sensor
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <read_temp_init+0x70>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a07      	ldr	r2, [pc, #28]	@ (800533c <read_temp_init+0x70>)
 800531e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005322:	6093      	str	r3, [r2, #8]

    ADC1-> CR2 |= (1<<0); //Enable ADC and to start conversion
 8005324:	4b05      	ldr	r3, [pc, #20]	@ (800533c <read_temp_init+0x70>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a04      	ldr	r2, [pc, #16]	@ (800533c <read_temp_init+0x70>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	6093      	str	r3, [r2, #8]
}
 8005330:	bf00      	nop
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	40021000 	.word	0x40021000
 800533c:	40012400 	.word	0x40012400

08005340 <adc_get_temp_ss>:

float adc_get_temp_ss(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
    float temp = 0;
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
    float vin = 0;
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
    uint16_t raw_data = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	80fb      	strh	r3, [r7, #6]

	ADC1->CR2 |= (0b111 << 12) ;//External event select for injected group: JSWSTART
 8005356:	4b3a      	ldr	r3, [pc, #232]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4a39      	ldr	r2, [pc, #228]	@ (8005440 <adc_get_temp_ss+0x100>)
 800535c:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8005360:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (0b1 << 15) ;//1: Conversion on external event enabled
 8005362:	4b37      	ldr	r3, [pc, #220]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	4a36      	ldr	r2, [pc, #216]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536c:	6093      	str	r3, [r2, #8]

    // trigger ADC start convert
    ADC1-> CR2 |= (1u<<21);//Start conversion of injected channels
 800536e:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4a33      	ldr	r2, [pc, #204]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005378:	6093      	str	r3, [r2, #8]

    //wait until end of conversion
    while(((ADC1-> SR>>2)&1) == 0);
 800537a:	bf00      	nop
 800537c:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <adc_get_temp_ss+0x100>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f9      	beq.n	800537c <adc_get_temp_ss+0x3c>
    ADC1-> SR &= ~(1u<<2); //clear JEOC flag
 8005388:	4b2d      	ldr	r3, [pc, #180]	@ (8005440 <adc_get_temp_ss+0x100>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <adc_get_temp_ss+0x100>)
 800538e:	f023 0304 	bic.w	r3, r3, #4
 8005392:	6013      	str	r3, [r2, #0]

    raw_data = ADC1-> JDR1; //read ADC data form JDR1 (data of JSQ4)
 8005394:	4b2a      	ldr	r3, [pc, #168]	@ (8005440 <adc_get_temp_ss+0x100>)
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	80fb      	strh	r3, [r7, #6]

    vin = (raw_data*3300.0)/4095.0;
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f831 	bl	8000404 <__aeabi_i2d>
 80053a2:	a31f      	add	r3, pc, #124	@ (adr r3, 8005420 <adc_get_temp_ss+0xe0>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f896 	bl	80004d8 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	a31c      	add	r3, pc, #112	@ (adr r3, 8005428 <adc_get_temp_ss+0xe8>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fb f9b7 	bl	800072c <__aeabi_ddiv>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7fb fb7f 	bl	8000ac8 <__aeabi_d2f>
 80053ca:	4603      	mov	r3, r0
 80053cc:	60bb      	str	r3, [r7, #8]

    temp = ((1430.0 - vin) / 4.3) + 25.0;
 80053ce:	68b8      	ldr	r0, [r7, #8]
 80053d0:	f7fb f82a 	bl	8000428 <__aeabi_f2d>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	a115      	add	r1, pc, #84	@ (adr r1, 8005430 <adc_get_temp_ss+0xf0>)
 80053da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053de:	f7fa fec3 	bl	8000168 <__aeabi_dsub>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	a313      	add	r3, pc, #76	@ (adr r3, 8005438 <adc_get_temp_ss+0xf8>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fb f99c 	bl	800072c <__aeabi_ddiv>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <adc_get_temp_ss+0x104>)
 8005402:	f7fa feb3 	bl	800016c <__adddf3>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	f7fb fb5b 	bl	8000ac8 <__aeabi_d2f>
 8005412:	4603      	mov	r3, r0
 8005414:	60fb      	str	r3, [r7, #12]

    return temp;
 8005416:	68fb      	ldr	r3, [r7, #12]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	00000000 	.word	0x00000000
 8005424:	40a9c800 	.word	0x40a9c800
 8005428:	00000000 	.word	0x00000000
 800542c:	40affe00 	.word	0x40affe00
 8005430:	00000000 	.word	0x00000000
 8005434:	40965800 	.word	0x40965800
 8005438:	33333333 	.word	0x33333333
 800543c:	40113333 	.word	0x40113333
 8005440:	40012400 	.word	0x40012400
 8005444:	40390000 	.word	0x40390000

08005448 <UART1_init>:
#include "uart.h"
//char recv_data[32];
//int rx_index = 0;

void UART1_init()
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800544e:	4b24      	ldr	r3, [pc, #144]	@ (80054e0 <UART1_init+0x98>)
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	4a23      	ldr	r2, [pc, #140]	@ (80054e0 <UART1_init+0x98>)
 8005454:	f043 0304 	orr.w	r3, r3, #4
 8005458:	6193      	str	r3, [r2, #24]
	//register (0x4001 0000)AFIO_MAPR: UART1 default on PA9, PA10  neu muon dung PB6, PB7 set USART1_REMAP len 1
	uint32_t * AFIO_MAPR = (uint32_t *) (AFIO_BASE_ARR + 0x04);
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <UART1_init+0x9c>)
 800545c:	60fb      	str	r3, [r7, #12]
	* AFIO_MAPR &= ~(1<<2);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 0204 	bic.w	r2, r3, #4
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]
	//set PA9 as UART1_TX, PA10 as UART1_RX
	uint32_t * GPIOA_CRH = (uint32_t *) (GPIOA_BASE_ARR + 0x04);
 800546a:	4b1f      	ldr	r3, [pc, #124]	@ (80054e8 <UART1_init+0xa0>)
 800546c:	60bb      	str	r3, [r7, #8]
	*GPIOA_CRH &= ~ (0xff << 4);// clear MODE, CNF for PA9, PA10
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	601a      	str	r2, [r3, #0]
	*GPIOA_CRH |= (0b10<<4)|(0b10<<6); //PA9 output 2MHz, Alternate function output Push-pull
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f043 02a0 	orr.w	r2, r3, #160	@ 0xa0
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	601a      	str	r2, [r3, #0]

	*GPIOA_CRH |= (0b01<<10); 		//set PA10 Floating input
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	601a      	str	r2, [r3, #0]
 * 	+baudrate: 9600
 * 	+ frame:
 * 		data len: 8 bits
 * 		parity (none/odd/even): none
 */
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; //72Mhz set in clock.c USART1 in APB2 --> f_clock = 72Mhz
 8005492:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <UART1_init+0x98>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	4a12      	ldr	r2, [pc, #72]	@ (80054e0 <UART1_init+0x98>)
 8005498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800549c:	6193      	str	r3, [r2, #24]
	uint32_t * USART_BRR = (uint32_t *) (USART1_BASE_ARR + 0x08);
 800549e:	4b13      	ldr	r3, [pc, #76]	@ (80054ec <UART1_init+0xa4>)
 80054a0:	607b      	str	r3, [r7, #4]
	//* USART_BRR = (468 << 4) | (12 << 0); //baudrate 9600
	* USART_BRR = (39 << 4) | (1 << 0); //baudrate 115200
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f240 2271 	movw	r2, #625	@ 0x271
 80054a8:	601a      	str	r2, [r3, #0]
	uint32_t * USART_CR1 = (uint32_t *) (USART1_BASE_ARR + 0x0C);
 80054aa:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <UART1_init+0xa8>)
 80054ac:	603b      	str	r3, [r7, #0]
	* USART_CR1 &= ~(1<<10); //disable parity control = parity: none
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	601a      	str	r2, [r3, #0]
	//* USART_CR1 &= ~(1<<12); //1 Start bit, 8 Data bits, n Stop bit
	* USART_CR1 &= ~(1<<12); //1 Start bit, 8 Data bits, n Stop bit
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	601a      	str	r2, [r3, #0]
	* USART_CR1 |= (1<<13)|(1<<3)|(1<<2); //enable UART, TX, RX
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054ce:	f043 030c 	orr.w	r3, r3, #12
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	6013      	str	r3, [r2, #0]
//#else
//	//when RXNE is set, send signal to DMA1, DMA1 move data to RAM
//	uint32_t * USART_CR3 = (uint32_t *) (USART1_BASE_ARR + 0x14);
//	*USART_CR3 |= (1<<6); //DMA mode is enabled for reception
//#endif
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40010004 	.word	0x40010004
 80054e8:	40010804 	.word	0x40010804
 80054ec:	40013808 	.word	0x40013808
 80054f0:	4001380c 	.word	0x4001380c

080054f4 <UART1_Send_1byte>:
	*USART_CR3 |= (1<<6); //DMA mode is enabled for reception
#endif
}

void UART1_Send_1byte (char data)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
	uint32_t *USART_SR = (uint32_t *) (USART1_BASE_ARR + 0x00);
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <UART1_Send_1byte+0x4c>)
 8005500:	60fb      	str	r3, [r7, #12]
	uint32_t *USART_DR = (uint32_t *) (USART1_BASE_ARR + 0x04);
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <UART1_Send_1byte+0x50>)
 8005504:	60bb      	str	r3, [r7, #8]
	while(((*USART_SR >> 7) & 1) == 0);	//Wait Transmit data register empty
 8005506:	bf00      	nop
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f9      	beq.n	8005508 <UART1_Send_1byte+0x14>
	*USART_DR = data;					// Write data to DR to UART transfer data via Tx (PA9)
 8005514:	79fa      	ldrb	r2, [r7, #7]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	601a      	str	r2, [r3, #0]
	while(((*USART_SR >> 6) & 1) == 0);	//Wait Transmission complete
 800551a:	bf00      	nop
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f9      	beq.n	800551c <UART1_Send_1byte+0x28>
	*USART_SR &= ~(1<<6); 				//clear TC flag
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40013800 	.word	0x40013800
 8005544:	40013804 	.word	0x40013804

08005548 <UART1_Send_String>:

static void UART1_Send_String (char * msg)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fa fdfd 	bl	8000150 <strlen>
 8005556:	4603      	mov	r3, r0
 8005558:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<msg_len;i++)
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e009      	b.n	8005574 <UART1_Send_String+0x2c>
	{
		UART1_Send_1byte(msg[i]);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ffc3 	bl	80054f4 <UART1_Send_1byte>
	for(int i=0;i<msg_len;i++)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	dbf1      	blt.n	8005560 <UART1_Send_String+0x18>
	}
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <uart_printf>:

void uart_printf(char* format, ...)
{
 8005586:	b40f      	push	{r0, r1, r2, r3}
 8005588:	b580      	push	{r7, lr}
 800558a:	b0a2      	sub	sp, #136	@ 0x88
 800558c:	af00      	add	r7, sp, #0
	va_list aptr;
	va_start(aptr, format);
 800558e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char buffer[128] = {0};
 8005596:	2300      	movs	r3, #0
 8005598:	607b      	str	r3, [r7, #4]
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	227c      	movs	r2, #124	@ 0x7c
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fa6a 	bl	8006a7c <memset>
	vsprintf(buffer, format, aptr);
 80055a8:	1d3b      	adds	r3, r7, #4
 80055aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80055ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fa58 	bl	8006a68 <vsiprintf>
	UART1_Send_String(buffer);
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ffc4 	bl	8005548 <UART1_Send_String>
	va_end(aptr);
}
 80055c0:	bf00      	nop
 80055c2:	3788      	adds	r7, #136	@ 0x88
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ca:	b004      	add	sp, #16
 80055cc:	4770      	bx	lr

080055ce <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80055ce:	b480      	push	{r7}
 80055d0:	af00      	add	r7, sp, #0
//	{
//		led_control(0);
//		rx_index = 0;
//		memset(recv_data, 0, sizeof(recv_data));
//	}
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
//	{
//		led_control(0);
//		rx_index = 0;
//		memset(recv_data, 0, sizeof(recv_data));
//	}
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
	...

080055e8 <findslot>:
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <findslot+0x2c>)
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	b118      	cbz	r0, 80055fa <findslot+0x12>
 80055f2:	6a03      	ldr	r3, [r0, #32]
 80055f4:	b90b      	cbnz	r3, 80055fa <findslot+0x12>
 80055f6:	f001 f987 	bl	8006908 <__sinit>
 80055fa:	2c13      	cmp	r4, #19
 80055fc:	d807      	bhi.n	800560e <findslot+0x26>
 80055fe:	4806      	ldr	r0, [pc, #24]	@ (8005618 <findslot+0x30>)
 8005600:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005604:	3201      	adds	r2, #1
 8005606:	d002      	beq.n	800560e <findslot+0x26>
 8005608:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800560c:	bd10      	pop	{r4, pc}
 800560e:	2000      	movs	r0, #0
 8005610:	e7fc      	b.n	800560c <findslot+0x24>
 8005612:	bf00      	nop
 8005614:	20000024 	.word	0x20000024
 8005618:	20003370 	.word	0x20003370

0800561c <error>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	4604      	mov	r4, r0
 8005620:	f001 fa7e 	bl	8006b20 <__errno>
 8005624:	2613      	movs	r6, #19
 8005626:	4605      	mov	r5, r0
 8005628:	2700      	movs	r7, #0
 800562a:	4630      	mov	r0, r6
 800562c:	4639      	mov	r1, r7
 800562e:	beab      	bkpt	0x00ab
 8005630:	4606      	mov	r6, r0
 8005632:	4620      	mov	r0, r4
 8005634:	602e      	str	r6, [r5, #0]
 8005636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005638 <checkerror>:
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d101      	bne.n	8005640 <checkerror+0x8>
 800563c:	f7ff bfee 	b.w	800561c <error>
 8005640:	4770      	bx	lr

08005642 <_swiread>:
 8005642:	b530      	push	{r4, r5, lr}
 8005644:	b085      	sub	sp, #20
 8005646:	2406      	movs	r4, #6
 8005648:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800564c:	9203      	str	r2, [sp, #12]
 800564e:	ad01      	add	r5, sp, #4
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	beab      	bkpt	0x00ab
 8005656:	4604      	mov	r4, r0
 8005658:	4620      	mov	r0, r4
 800565a:	f7ff ffed 	bl	8005638 <checkerror>
 800565e:	b005      	add	sp, #20
 8005660:	bd30      	pop	{r4, r5, pc}

08005662 <_read>:
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	460e      	mov	r6, r1
 8005666:	4614      	mov	r4, r2
 8005668:	f7ff ffbe 	bl	80055e8 <findslot>
 800566c:	4605      	mov	r5, r0
 800566e:	b930      	cbnz	r0, 800567e <_read+0x1c>
 8005670:	f001 fa56 	bl	8006b20 <__errno>
 8005674:	2309      	movs	r3, #9
 8005676:	6003      	str	r3, [r0, #0]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	4622      	mov	r2, r4
 8005680:	4631      	mov	r1, r6
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	f7ff ffdd 	bl	8005642 <_swiread>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d0f5      	beq.n	8005678 <_read+0x16>
 800568c:	686b      	ldr	r3, [r5, #4]
 800568e:	1a20      	subs	r0, r4, r0
 8005690:	4403      	add	r3, r0
 8005692:	606b      	str	r3, [r5, #4]
 8005694:	e7f2      	b.n	800567c <_read+0x1a>

08005696 <_swilseek>:
 8005696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	4616      	mov	r6, r2
 800569c:	f7ff ffa4 	bl	80055e8 <findslot>
 80056a0:	4605      	mov	r5, r0
 80056a2:	b940      	cbnz	r0, 80056b6 <_swilseek+0x20>
 80056a4:	f001 fa3c 	bl	8006b20 <__errno>
 80056a8:	2309      	movs	r3, #9
 80056aa:	6003      	str	r3, [r0, #0]
 80056ac:	f04f 34ff 	mov.w	r4, #4294967295
 80056b0:	4620      	mov	r0, r4
 80056b2:	b003      	add	sp, #12
 80056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b6:	2e02      	cmp	r6, #2
 80056b8:	d903      	bls.n	80056c2 <_swilseek+0x2c>
 80056ba:	f001 fa31 	bl	8006b20 <__errno>
 80056be:	2316      	movs	r3, #22
 80056c0:	e7f3      	b.n	80056aa <_swilseek+0x14>
 80056c2:	2e01      	cmp	r6, #1
 80056c4:	d112      	bne.n	80056ec <_swilseek+0x56>
 80056c6:	6843      	ldr	r3, [r0, #4]
 80056c8:	18e4      	adds	r4, r4, r3
 80056ca:	d4f6      	bmi.n	80056ba <_swilseek+0x24>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	260a      	movs	r6, #10
 80056d0:	466f      	mov	r7, sp
 80056d2:	e9cd 3400 	strd	r3, r4, [sp]
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	beab      	bkpt	0x00ab
 80056dc:	4606      	mov	r6, r0
 80056de:	4630      	mov	r0, r6
 80056e0:	f7ff ffaa 	bl	8005638 <checkerror>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	dbe1      	blt.n	80056ac <_swilseek+0x16>
 80056e8:	606c      	str	r4, [r5, #4]
 80056ea:	e7e1      	b.n	80056b0 <_swilseek+0x1a>
 80056ec:	2e02      	cmp	r6, #2
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	d1ec      	bne.n	80056cc <_swilseek+0x36>
 80056f2:	260c      	movs	r6, #12
 80056f4:	466f      	mov	r7, sp
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	beab      	bkpt	0x00ab
 80056fe:	4606      	mov	r6, r0
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ff99 	bl	8005638 <checkerror>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	d0d0      	beq.n	80056ac <_swilseek+0x16>
 800570a:	4404      	add	r4, r0
 800570c:	e7de      	b.n	80056cc <_swilseek+0x36>

0800570e <_lseek>:
 800570e:	f7ff bfc2 	b.w	8005696 <_swilseek>

08005712 <_swiwrite>:
 8005712:	b530      	push	{r4, r5, lr}
 8005714:	b085      	sub	sp, #20
 8005716:	2405      	movs	r4, #5
 8005718:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800571c:	9203      	str	r2, [sp, #12]
 800571e:	ad01      	add	r5, sp, #4
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	beab      	bkpt	0x00ab
 8005726:	4604      	mov	r4, r0
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff ff85 	bl	8005638 <checkerror>
 800572e:	b005      	add	sp, #20
 8005730:	bd30      	pop	{r4, r5, pc}

08005732 <_write>:
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	460e      	mov	r6, r1
 8005736:	4615      	mov	r5, r2
 8005738:	f7ff ff56 	bl	80055e8 <findslot>
 800573c:	4604      	mov	r4, r0
 800573e:	b930      	cbnz	r0, 800574e <_write+0x1c>
 8005740:	f001 f9ee 	bl	8006b20 <__errno>
 8005744:	2309      	movs	r3, #9
 8005746:	6003      	str	r3, [r0, #0]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	462a      	mov	r2, r5
 8005750:	4631      	mov	r1, r6
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	f7ff ffdd 	bl	8005712 <_swiwrite>
 8005758:	1e03      	subs	r3, r0, #0
 800575a:	dbf5      	blt.n	8005748 <_write+0x16>
 800575c:	6862      	ldr	r2, [r4, #4]
 800575e:	1ae8      	subs	r0, r5, r3
 8005760:	4402      	add	r2, r0
 8005762:	42ab      	cmp	r3, r5
 8005764:	6062      	str	r2, [r4, #4]
 8005766:	d1f1      	bne.n	800574c <_write+0x1a>
 8005768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800576c:	2000      	movs	r0, #0
 800576e:	f7ff bf55 	b.w	800561c <error>

08005772 <_swiclose>:
 8005772:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005774:	2402      	movs	r4, #2
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	ad01      	add	r5, sp, #4
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	beab      	bkpt	0x00ab
 8005780:	4604      	mov	r4, r0
 8005782:	4620      	mov	r0, r4
 8005784:	f7ff ff58 	bl	8005638 <checkerror>
 8005788:	b003      	add	sp, #12
 800578a:	bd30      	pop	{r4, r5, pc}

0800578c <_close>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4605      	mov	r5, r0
 8005790:	f7ff ff2a 	bl	80055e8 <findslot>
 8005794:	4604      	mov	r4, r0
 8005796:	b930      	cbnz	r0, 80057a6 <_close+0x1a>
 8005798:	f001 f9c2 	bl	8006b20 <__errno>
 800579c:	2309      	movs	r3, #9
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	3d01      	subs	r5, #1
 80057a8:	2d01      	cmp	r5, #1
 80057aa:	d809      	bhi.n	80057c0 <_close+0x34>
 80057ac:	4b07      	ldr	r3, [pc, #28]	@ (80057cc <_close+0x40>)
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d104      	bne.n	80057c0 <_close+0x34>
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ba:	2000      	movs	r0, #0
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	e7f1      	b.n	80057a4 <_close+0x18>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	f7ff ffd6 	bl	8005772 <_swiclose>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0f5      	beq.n	80057b6 <_close+0x2a>
 80057ca:	e7eb      	b.n	80057a4 <_close+0x18>
 80057cc:	20003370 	.word	0x20003370

080057d0 <_getpid>:
 80057d0:	2001      	movs	r0, #1
 80057d2:	4770      	bx	lr

080057d4 <_swistat>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	460c      	mov	r4, r1
 80057d8:	f7ff ff06 	bl	80055e8 <findslot>
 80057dc:	4605      	mov	r5, r0
 80057de:	b930      	cbnz	r0, 80057ee <_swistat+0x1a>
 80057e0:	f001 f99e 	bl	8006b20 <__errno>
 80057e4:	2309      	movs	r3, #9
 80057e6:	6003      	str	r3, [r0, #0]
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	260c      	movs	r6, #12
 80057f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057fc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80057fe:	4630      	mov	r0, r6
 8005800:	4629      	mov	r1, r5
 8005802:	beab      	bkpt	0x00ab
 8005804:	4605      	mov	r5, r0
 8005806:	4628      	mov	r0, r5
 8005808:	f7ff ff16 	bl	8005638 <checkerror>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d0eb      	beq.n	80057e8 <_swistat+0x14>
 8005810:	6120      	str	r0, [r4, #16]
 8005812:	2000      	movs	r0, #0
 8005814:	e7ea      	b.n	80057ec <_swistat+0x18>

08005816 <_fstat>:
 8005816:	460b      	mov	r3, r1
 8005818:	b510      	push	{r4, lr}
 800581a:	2100      	movs	r1, #0
 800581c:	4604      	mov	r4, r0
 800581e:	2258      	movs	r2, #88	@ 0x58
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f92b 	bl	8006a7c <memset>
 8005826:	4601      	mov	r1, r0
 8005828:	4620      	mov	r0, r4
 800582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582e:	f7ff bfd1 	b.w	80057d4 <_swistat>

08005832 <_stat>:
 8005832:	b538      	push	{r3, r4, r5, lr}
 8005834:	460d      	mov	r5, r1
 8005836:	4604      	mov	r4, r0
 8005838:	2258      	movs	r2, #88	@ 0x58
 800583a:	2100      	movs	r1, #0
 800583c:	4628      	mov	r0, r5
 800583e:	f001 f91d 	bl	8006a7c <memset>
 8005842:	4620      	mov	r0, r4
 8005844:	2100      	movs	r1, #0
 8005846:	f000 f811 	bl	800586c <_swiopen>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	4604      	mov	r4, r0
 800584e:	d00b      	beq.n	8005868 <_stat+0x36>
 8005850:	686b      	ldr	r3, [r5, #4]
 8005852:	4629      	mov	r1, r5
 8005854:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005858:	606b      	str	r3, [r5, #4]
 800585a:	f7ff ffbb 	bl	80057d4 <_swistat>
 800585e:	4605      	mov	r5, r0
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff ff93 	bl	800578c <_close>
 8005866:	462c      	mov	r4, r5
 8005868:	4620      	mov	r0, r4
 800586a:	bd38      	pop	{r3, r4, r5, pc}

0800586c <_swiopen>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	4682      	mov	sl, r0
 8005872:	460e      	mov	r6, r1
 8005874:	2400      	movs	r4, #0
 8005876:	4f28      	ldr	r7, [pc, #160]	@ (8005918 <_swiopen+0xac>)
 8005878:	b096      	sub	sp, #88	@ 0x58
 800587a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800587e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005882:	3301      	adds	r3, #1
 8005884:	d00c      	beq.n	80058a0 <_swiopen+0x34>
 8005886:	3401      	adds	r4, #1
 8005888:	2c14      	cmp	r4, #20
 800588a:	d1f6      	bne.n	800587a <_swiopen+0xe>
 800588c:	f001 f948 	bl	8006b20 <__errno>
 8005890:	2318      	movs	r3, #24
 8005892:	f04f 34ff 	mov.w	r4, #4294967295
 8005896:	6003      	str	r3, [r0, #0]
 8005898:	4620      	mov	r0, r4
 800589a:	b016      	add	sp, #88	@ 0x58
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80058a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80058a8:	46e9      	mov	r9, sp
 80058aa:	d109      	bne.n	80058c0 <_swiopen+0x54>
 80058ac:	4649      	mov	r1, r9
 80058ae:	4650      	mov	r0, sl
 80058b0:	f7ff ffbf 	bl	8005832 <_stat>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d003      	beq.n	80058c0 <_swiopen+0x54>
 80058b8:	f001 f932 	bl	8006b20 <__errno>
 80058bc:	2311      	movs	r3, #17
 80058be:	e7e8      	b.n	8005892 <_swiopen+0x26>
 80058c0:	f240 6301 	movw	r3, #1537	@ 0x601
 80058c4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80058c8:	07b2      	lsls	r2, r6, #30
 80058ca:	bf48      	it	mi
 80058cc:	f045 0502 	orrmi.w	r5, r5, #2
 80058d0:	421e      	tst	r6, r3
 80058d2:	bf18      	it	ne
 80058d4:	f045 0504 	orrne.w	r5, r5, #4
 80058d8:	0733      	lsls	r3, r6, #28
 80058da:	bf48      	it	mi
 80058dc:	f025 0504 	bicmi.w	r5, r5, #4
 80058e0:	4650      	mov	r0, sl
 80058e2:	bf48      	it	mi
 80058e4:	f045 0508 	orrmi.w	r5, r5, #8
 80058e8:	f8cd a000 	str.w	sl, [sp]
 80058ec:	f7fa fc30 	bl	8000150 <strlen>
 80058f0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80058f4:	2501      	movs	r5, #1
 80058f6:	4628      	mov	r0, r5
 80058f8:	4649      	mov	r1, r9
 80058fa:	beab      	bkpt	0x00ab
 80058fc:	4605      	mov	r5, r0
 80058fe:	2d00      	cmp	r5, #0
 8005900:	db05      	blt.n	800590e <_swiopen+0xa2>
 8005902:	2300      	movs	r3, #0
 8005904:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8005908:	4447      	add	r7, r8
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	e7c4      	b.n	8005898 <_swiopen+0x2c>
 800590e:	4628      	mov	r0, r5
 8005910:	f7ff fe84 	bl	800561c <error>
 8005914:	4604      	mov	r4, r0
 8005916:	e7bf      	b.n	8005898 <_swiopen+0x2c>
 8005918:	20003370 	.word	0x20003370

0800591c <_get_semihosting_exts>:
 800591c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4606      	mov	r6, r0
 8005922:	460f      	mov	r7, r1
 8005924:	4829      	ldr	r0, [pc, #164]	@ (80059cc <_get_semihosting_exts+0xb0>)
 8005926:	2100      	movs	r1, #0
 8005928:	4615      	mov	r5, r2
 800592a:	f7ff ff9f 	bl	800586c <_swiopen>
 800592e:	4604      	mov	r4, r0
 8005930:	462a      	mov	r2, r5
 8005932:	2100      	movs	r1, #0
 8005934:	4630      	mov	r0, r6
 8005936:	f001 f8a1 	bl	8006a7c <memset>
 800593a:	1c63      	adds	r3, r4, #1
 800593c:	d014      	beq.n	8005968 <_get_semihosting_exts+0x4c>
 800593e:	4620      	mov	r0, r4
 8005940:	f7ff fe52 	bl	80055e8 <findslot>
 8005944:	f04f 080c 	mov.w	r8, #12
 8005948:	4681      	mov	r9, r0
 800594a:	4640      	mov	r0, r8
 800594c:	4649      	mov	r1, r9
 800594e:	beab      	bkpt	0x00ab
 8005950:	4680      	mov	r8, r0
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fe70 	bl	8005638 <checkerror>
 8005958:	2803      	cmp	r0, #3
 800595a:	dd02      	ble.n	8005962 <_get_semihosting_exts+0x46>
 800595c:	1ec3      	subs	r3, r0, #3
 800595e:	42ab      	cmp	r3, r5
 8005960:	dc07      	bgt.n	8005972 <_get_semihosting_exts+0x56>
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff ff12 	bl	800578c <_close>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	b003      	add	sp, #12
 800596e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005972:	2204      	movs	r2, #4
 8005974:	4620      	mov	r0, r4
 8005976:	eb0d 0102 	add.w	r1, sp, r2
 800597a:	f7ff fe72 	bl	8005662 <_read>
 800597e:	2803      	cmp	r0, #3
 8005980:	ddef      	ble.n	8005962 <_get_semihosting_exts+0x46>
 8005982:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005986:	2b53      	cmp	r3, #83	@ 0x53
 8005988:	d1eb      	bne.n	8005962 <_get_semihosting_exts+0x46>
 800598a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800598e:	2b48      	cmp	r3, #72	@ 0x48
 8005990:	d1e7      	bne.n	8005962 <_get_semihosting_exts+0x46>
 8005992:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005996:	2b46      	cmp	r3, #70	@ 0x46
 8005998:	d1e3      	bne.n	8005962 <_get_semihosting_exts+0x46>
 800599a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800599e:	2b42      	cmp	r3, #66	@ 0x42
 80059a0:	d1df      	bne.n	8005962 <_get_semihosting_exts+0x46>
 80059a2:	2201      	movs	r2, #1
 80059a4:	4639      	mov	r1, r7
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7ff fe75 	bl	8005696 <_swilseek>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	dbd8      	blt.n	8005962 <_get_semihosting_exts+0x46>
 80059b0:	462a      	mov	r2, r5
 80059b2:	4631      	mov	r1, r6
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7ff fe54 	bl	8005662 <_read>
 80059ba:	4605      	mov	r5, r0
 80059bc:	4620      	mov	r0, r4
 80059be:	f7ff fee5 	bl	800578c <_close>
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7ff fe38 	bl	8005638 <checkerror>
 80059c8:	e7d0      	b.n	800596c <_get_semihosting_exts+0x50>
 80059ca:	bf00      	nop
 80059cc:	0800a38a 	.word	0x0800a38a

080059d0 <initialise_semihosting_exts>:
 80059d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059d2:	2100      	movs	r1, #0
 80059d4:	2201      	movs	r2, #1
 80059d6:	4d09      	ldr	r5, [pc, #36]	@ (80059fc <initialise_semihosting_exts+0x2c>)
 80059d8:	4c09      	ldr	r4, [pc, #36]	@ (8005a00 <initialise_semihosting_exts+0x30>)
 80059da:	a801      	add	r0, sp, #4
 80059dc:	6029      	str	r1, [r5, #0]
 80059de:	6022      	str	r2, [r4, #0]
 80059e0:	f7ff ff9c 	bl	800591c <_get_semihosting_exts>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	dd07      	ble.n	80059f8 <initialise_semihosting_exts+0x28>
 80059e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059ec:	f003 0201 	and.w	r2, r3, #1
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	b003      	add	sp, #12
 80059fa:	bd30      	pop	{r4, r5, pc}
 80059fc:	20000014 	.word	0x20000014
 8005a00:	20000010 	.word	0x20000010

08005a04 <_has_ext_stdout_stderr>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4c04      	ldr	r4, [pc, #16]	@ (8005a18 <_has_ext_stdout_stderr+0x14>)
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da01      	bge.n	8005a12 <_has_ext_stdout_stderr+0xe>
 8005a0e:	f7ff ffdf 	bl	80059d0 <initialise_semihosting_exts>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	bf00      	nop
 8005a18:	20000010 	.word	0x20000010

08005a1c <initialise_monitor_handles>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	2303      	movs	r3, #3
 8005a22:	2400      	movs	r4, #0
 8005a24:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8005ac8 <initialise_monitor_handles+0xac>
 8005a28:	b085      	sub	sp, #20
 8005a2a:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a2e:	af01      	add	r7, sp, #4
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	2501      	movs	r5, #1
 8005a34:	9402      	str	r4, [sp, #8]
 8005a36:	4628      	mov	r0, r5
 8005a38:	4639      	mov	r1, r7
 8005a3a:	beab      	bkpt	0x00ab
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a42:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8005acc <initialise_monitor_handles+0xb0>
 8005a46:	4623      	mov	r3, r4
 8005a48:	4c21      	ldr	r4, [pc, #132]	@ (8005ad0 <initialise_monitor_handles+0xb4>)
 8005a4a:	f8c8 5000 	str.w	r5, [r8]
 8005a4e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005a52:	3301      	adds	r3, #1
 8005a54:	2b14      	cmp	r3, #20
 8005a56:	d1fa      	bne.n	8005a4e <initialise_monitor_handles+0x32>
 8005a58:	f7ff ffd4 	bl	8005a04 <_has_ext_stdout_stderr>
 8005a5c:	4d1d      	ldr	r5, [pc, #116]	@ (8005ad4 <initialise_monitor_handles+0xb8>)
 8005a5e:	b1d0      	cbz	r0, 8005a96 <initialise_monitor_handles+0x7a>
 8005a60:	f04f 0a03 	mov.w	sl, #3
 8005a64:	2304      	movs	r3, #4
 8005a66:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a6a:	2601      	movs	r6, #1
 8005a6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	beab      	bkpt	0x00ab
 8005a78:	4683      	mov	fp, r0
 8005a7a:	4b17      	ldr	r3, [pc, #92]	@ (8005ad8 <initialise_monitor_handles+0xbc>)
 8005a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a80:	f8c3 b000 	str.w	fp, [r3]
 8005a84:	2308      	movs	r3, #8
 8005a86:	f8cd a00c 	str.w	sl, [sp, #12]
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	beab      	bkpt	0x00ab
 8005a92:	4606      	mov	r6, r0
 8005a94:	602e      	str	r6, [r5, #0]
 8005a96:	2600      	movs	r6, #0
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	6066      	str	r6, [r4, #4]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	bf02      	ittt	eq
 8005aa0:	4b0d      	ldreq	r3, [pc, #52]	@ (8005ad8 <initialise_monitor_handles+0xbc>)
 8005aa2:	681b      	ldreq	r3, [r3, #0]
 8005aa4:	602b      	streq	r3, [r5, #0]
 8005aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	f7ff ffaa 	bl	8005a04 <_has_ext_stdout_stderr>
 8005ab0:	b130      	cbz	r0, 8005ac0 <initialise_monitor_handles+0xa4>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	@ (8005ad8 <initialise_monitor_handles+0xbc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005ac0:	b005      	add	sp, #20
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	bf00      	nop
 8005ac8:	0800a3a0 	.word	0x0800a3a0
 8005acc:	2000336c 	.word	0x2000336c
 8005ad0:	20003370 	.word	0x20003370
 8005ad4:	20003364 	.word	0x20003364
 8005ad8:	20003368 	.word	0x20003368

08005adc <_isatty>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	f7ff fd83 	bl	80055e8 <findslot>
 8005ae2:	2409      	movs	r4, #9
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	b920      	cbnz	r0, 8005af2 <_isatty+0x16>
 8005ae8:	f001 f81a 	bl	8006b20 <__errno>
 8005aec:	6004      	str	r4, [r0, #0]
 8005aee:	2000      	movs	r0, #0
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	beab      	bkpt	0x00ab
 8005af8:	4604      	mov	r4, r0
 8005afa:	2c01      	cmp	r4, #1
 8005afc:	4620      	mov	r0, r4
 8005afe:	d0f7      	beq.n	8005af0 <_isatty+0x14>
 8005b00:	f001 f80e 	bl	8006b20 <__errno>
 8005b04:	2513      	movs	r5, #19
 8005b06:	4604      	mov	r4, r0
 8005b08:	2600      	movs	r6, #0
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	beab      	bkpt	0x00ab
 8005b10:	4605      	mov	r5, r0
 8005b12:	6025      	str	r5, [r4, #0]
 8005b14:	e7eb      	b.n	8005aee <_isatty+0x12>

08005b16 <__cvt>:
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	461d      	mov	r5, r3
 8005b1e:	bfbb      	ittet	lt
 8005b20:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005b24:	461d      	movlt	r5, r3
 8005b26:	2300      	movge	r3, #0
 8005b28:	232d      	movlt	r3, #45	@ 0x2d
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	bfb8      	it	lt
 8005b30:	4614      	movlt	r4, r2
 8005b32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b34:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005b36:	7013      	strb	r3, [r2, #0]
 8005b38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b3a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005b3e:	f023 0820 	bic.w	r8, r3, #32
 8005b42:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b46:	d005      	beq.n	8005b54 <__cvt+0x3e>
 8005b48:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b4c:	d100      	bne.n	8005b50 <__cvt+0x3a>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	2302      	movs	r3, #2
 8005b52:	e000      	b.n	8005b56 <__cvt+0x40>
 8005b54:	2303      	movs	r3, #3
 8005b56:	aa07      	add	r2, sp, #28
 8005b58:	9204      	str	r2, [sp, #16]
 8005b5a:	aa06      	add	r2, sp, #24
 8005b5c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b60:	e9cd 3600 	strd	r3, r6, [sp]
 8005b64:	4622      	mov	r2, r4
 8005b66:	462b      	mov	r3, r5
 8005b68:	f001 f8b2 	bl	8006cd0 <_dtoa_r>
 8005b6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b70:	4607      	mov	r7, r0
 8005b72:	d119      	bne.n	8005ba8 <__cvt+0x92>
 8005b74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b76:	07db      	lsls	r3, r3, #31
 8005b78:	d50e      	bpl.n	8005b98 <__cvt+0x82>
 8005b7a:	eb00 0906 	add.w	r9, r0, r6
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	4620      	mov	r0, r4
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fa ff0f 	bl	80009a8 <__aeabi_dcmpeq>
 8005b8a:	b108      	cbz	r0, 8005b90 <__cvt+0x7a>
 8005b8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b90:	2230      	movs	r2, #48	@ 0x30
 8005b92:	9b07      	ldr	r3, [sp, #28]
 8005b94:	454b      	cmp	r3, r9
 8005b96:	d31e      	bcc.n	8005bd6 <__cvt+0xc0>
 8005b98:	4638      	mov	r0, r7
 8005b9a:	9b07      	ldr	r3, [sp, #28]
 8005b9c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b9e:	1bdb      	subs	r3, r3, r7
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	b008      	add	sp, #32
 8005ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bac:	eb00 0906 	add.w	r9, r0, r6
 8005bb0:	d1e5      	bne.n	8005b7e <__cvt+0x68>
 8005bb2:	7803      	ldrb	r3, [r0, #0]
 8005bb4:	2b30      	cmp	r3, #48	@ 0x30
 8005bb6:	d10a      	bne.n	8005bce <__cvt+0xb8>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8005bc4:	b918      	cbnz	r0, 8005bce <__cvt+0xb8>
 8005bc6:	f1c6 0601 	rsb	r6, r6, #1
 8005bca:	f8ca 6000 	str.w	r6, [sl]
 8005bce:	f8da 3000 	ldr.w	r3, [sl]
 8005bd2:	4499      	add	r9, r3
 8005bd4:	e7d3      	b.n	8005b7e <__cvt+0x68>
 8005bd6:	1c59      	adds	r1, r3, #1
 8005bd8:	9107      	str	r1, [sp, #28]
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e7d9      	b.n	8005b92 <__cvt+0x7c>

08005bde <__exponent>:
 8005bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be0:	2900      	cmp	r1, #0
 8005be2:	bfb6      	itet	lt
 8005be4:	232d      	movlt	r3, #45	@ 0x2d
 8005be6:	232b      	movge	r3, #43	@ 0x2b
 8005be8:	4249      	neglt	r1, r1
 8005bea:	2909      	cmp	r1, #9
 8005bec:	7002      	strb	r2, [r0, #0]
 8005bee:	7043      	strb	r3, [r0, #1]
 8005bf0:	dd29      	ble.n	8005c46 <__exponent+0x68>
 8005bf2:	f10d 0307 	add.w	r3, sp, #7
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	270a      	movs	r7, #10
 8005bfa:	fbb1 f6f7 	udiv	r6, r1, r7
 8005bfe:	461a      	mov	r2, r3
 8005c00:	fb07 1416 	mls	r4, r7, r6, r1
 8005c04:	3430      	adds	r4, #48	@ 0x30
 8005c06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2c63      	cmp	r4, #99	@ 0x63
 8005c0e:	4631      	mov	r1, r6
 8005c10:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c14:	dcf1      	bgt.n	8005bfa <__exponent+0x1c>
 8005c16:	3130      	adds	r1, #48	@ 0x30
 8005c18:	1e94      	subs	r4, r2, #2
 8005c1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c1e:	4623      	mov	r3, r4
 8005c20:	1c41      	adds	r1, r0, #1
 8005c22:	42ab      	cmp	r3, r5
 8005c24:	d30a      	bcc.n	8005c3c <__exponent+0x5e>
 8005c26:	f10d 0309 	add.w	r3, sp, #9
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ac      	cmp	r4, r5
 8005c2e:	bf88      	it	hi
 8005c30:	2300      	movhi	r3, #0
 8005c32:	3302      	adds	r3, #2
 8005c34:	4403      	add	r3, r0
 8005c36:	1a18      	subs	r0, r3, r0
 8005c38:	b003      	add	sp, #12
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c44:	e7ed      	b.n	8005c22 <__exponent+0x44>
 8005c46:	2330      	movs	r3, #48	@ 0x30
 8005c48:	3130      	adds	r1, #48	@ 0x30
 8005c4a:	7083      	strb	r3, [r0, #2]
 8005c4c:	70c1      	strb	r1, [r0, #3]
 8005c4e:	1d03      	adds	r3, r0, #4
 8005c50:	e7f1      	b.n	8005c36 <__exponent+0x58>
	...

08005c54 <_printf_float>:
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	b091      	sub	sp, #68	@ 0x44
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005c60:	4616      	mov	r6, r2
 8005c62:	461f      	mov	r7, r3
 8005c64:	4605      	mov	r5, r0
 8005c66:	f000 ff11 	bl	8006a8c <_localeconv_r>
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	9308      	str	r3, [sp, #32]
 8005c70:	f7fa fa6e 	bl	8000150 <strlen>
 8005c74:	2300      	movs	r3, #0
 8005c76:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c78:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f023 0307 	bic.w	r3, r3, #7
 8005c84:	f103 0208 	add.w	r2, r3, #8
 8005c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c90:	f8c8 2000 	str.w	r2, [r8]
 8005c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005caa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cae:	4b9c      	ldr	r3, [pc, #624]	@ (8005f20 <_printf_float+0x2cc>)
 8005cb0:	f7fa feac 	bl	8000a0c <__aeabi_dcmpun>
 8005cb4:	bb70      	cbnz	r0, 8005d14 <_printf_float+0xc0>
 8005cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbe:	4b98      	ldr	r3, [pc, #608]	@ (8005f20 <_printf_float+0x2cc>)
 8005cc0:	f7fa fe86 	bl	80009d0 <__aeabi_dcmple>
 8005cc4:	bb30      	cbnz	r0, 8005d14 <_printf_float+0xc0>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2300      	movs	r3, #0
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fe75 	bl	80009bc <__aeabi_dcmplt>
 8005cd2:	b110      	cbz	r0, 8005cda <_printf_float+0x86>
 8005cd4:	232d      	movs	r3, #45	@ 0x2d
 8005cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cda:	4a92      	ldr	r2, [pc, #584]	@ (8005f24 <_printf_float+0x2d0>)
 8005cdc:	4b92      	ldr	r3, [pc, #584]	@ (8005f28 <_printf_float+0x2d4>)
 8005cde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ce2:	bf94      	ite	ls
 8005ce4:	4690      	movls	r8, r2
 8005ce6:	4698      	movhi	r8, r3
 8005ce8:	2303      	movs	r3, #3
 8005cea:	f04f 0900 	mov.w	r9, #0
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	f02b 0304 	bic.w	r3, fp, #4
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	4633      	mov	r3, r6
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	9700      	str	r7, [sp, #0]
 8005cfe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d00:	f000 f9d4 	bl	80060ac <_printf_common>
 8005d04:	3001      	adds	r0, #1
 8005d06:	f040 8090 	bne.w	8005e2a <_printf_float+0x1d6>
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	b011      	add	sp, #68	@ 0x44
 8005d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f7fa fe76 	bl	8000a0c <__aeabi_dcmpun>
 8005d20:	b148      	cbz	r0, 8005d36 <_printf_float+0xe2>
 8005d22:	464b      	mov	r3, r9
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfb8      	it	lt
 8005d28:	232d      	movlt	r3, #45	@ 0x2d
 8005d2a:	4a80      	ldr	r2, [pc, #512]	@ (8005f2c <_printf_float+0x2d8>)
 8005d2c:	bfb8      	it	lt
 8005d2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d32:	4b7f      	ldr	r3, [pc, #508]	@ (8005f30 <_printf_float+0x2dc>)
 8005d34:	e7d3      	b.n	8005cde <_printf_float+0x8a>
 8005d36:	6863      	ldr	r3, [r4, #4]
 8005d38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	d13f      	bne.n	8005dc0 <_printf_float+0x16c>
 8005d40:	2306      	movs	r3, #6
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	9206      	str	r2, [sp, #24]
 8005d4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005d54:	aa0d      	add	r2, sp, #52	@ 0x34
 8005d56:	9203      	str	r2, [sp, #12]
 8005d58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005d5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	4642      	mov	r2, r8
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4628      	mov	r0, r5
 8005d68:	464b      	mov	r3, r9
 8005d6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005d6c:	f7ff fed3 	bl	8005b16 <__cvt>
 8005d70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d72:	4680      	mov	r8, r0
 8005d74:	2947      	cmp	r1, #71	@ 0x47
 8005d76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005d78:	d128      	bne.n	8005dcc <_printf_float+0x178>
 8005d7a:	1cc8      	adds	r0, r1, #3
 8005d7c:	db02      	blt.n	8005d84 <_printf_float+0x130>
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	4299      	cmp	r1, r3
 8005d82:	dd40      	ble.n	8005e06 <_printf_float+0x1b2>
 8005d84:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d88:	fa5f fa8a 	uxtb.w	sl, sl
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	3901      	subs	r1, #1
 8005d90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d94:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d96:	f7ff ff22 	bl	8005bde <__exponent>
 8005d9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d9c:	4681      	mov	r9, r0
 8005d9e:	1813      	adds	r3, r2, r0
 8005da0:	2a01      	cmp	r2, #1
 8005da2:	6123      	str	r3, [r4, #16]
 8005da4:	dc02      	bgt.n	8005dac <_printf_float+0x158>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	07d2      	lsls	r2, r2, #31
 8005daa:	d501      	bpl.n	8005db0 <_printf_float+0x15c>
 8005dac:	3301      	adds	r3, #1
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d09e      	beq.n	8005cf6 <_printf_float+0xa2>
 8005db8:	232d      	movs	r3, #45	@ 0x2d
 8005dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dbe:	e79a      	b.n	8005cf6 <_printf_float+0xa2>
 8005dc0:	2947      	cmp	r1, #71	@ 0x47
 8005dc2:	d1bf      	bne.n	8005d44 <_printf_float+0xf0>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1bd      	bne.n	8005d44 <_printf_float+0xf0>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e7ba      	b.n	8005d42 <_printf_float+0xee>
 8005dcc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dd0:	d9dc      	bls.n	8005d8c <_printf_float+0x138>
 8005dd2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005dd6:	d118      	bne.n	8005e0a <_printf_float+0x1b6>
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	dd0b      	ble.n	8005df6 <_printf_float+0x1a2>
 8005dde:	6121      	str	r1, [r4, #16]
 8005de0:	b913      	cbnz	r3, 8005de8 <_printf_float+0x194>
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	07d0      	lsls	r0, r2, #31
 8005de6:	d502      	bpl.n	8005dee <_printf_float+0x19a>
 8005de8:	3301      	adds	r3, #1
 8005dea:	440b      	add	r3, r1
 8005dec:	6123      	str	r3, [r4, #16]
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005df4:	e7dc      	b.n	8005db0 <_printf_float+0x15c>
 8005df6:	b913      	cbnz	r3, 8005dfe <_printf_float+0x1aa>
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	07d2      	lsls	r2, r2, #31
 8005dfc:	d501      	bpl.n	8005e02 <_printf_float+0x1ae>
 8005dfe:	3302      	adds	r3, #2
 8005e00:	e7f4      	b.n	8005dec <_printf_float+0x198>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e7f2      	b.n	8005dec <_printf_float+0x198>
 8005e06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	db05      	blt.n	8005e1c <_printf_float+0x1c8>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	6121      	str	r1, [r4, #16]
 8005e14:	07d8      	lsls	r0, r3, #31
 8005e16:	d5ea      	bpl.n	8005dee <_printf_float+0x19a>
 8005e18:	1c4b      	adds	r3, r1, #1
 8005e1a:	e7e7      	b.n	8005dec <_printf_float+0x198>
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	bfcc      	ite	gt
 8005e20:	2201      	movgt	r2, #1
 8005e22:	f1c1 0202 	rsble	r2, r1, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	e7e0      	b.n	8005dec <_printf_float+0x198>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	055a      	lsls	r2, r3, #21
 8005e2e:	d407      	bmi.n	8005e40 <_printf_float+0x1ec>
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	4642      	mov	r2, r8
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d12b      	bne.n	8005e96 <_printf_float+0x242>
 8005e3e:	e764      	b.n	8005d0a <_printf_float+0xb6>
 8005e40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e44:	f240 80dc 	bls.w	8006000 <_printf_float+0x3ac>
 8005e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f7fa fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d033      	beq.n	8005ec0 <_printf_float+0x26c>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	4a35      	ldr	r2, [pc, #212]	@ (8005f34 <_printf_float+0x2e0>)
 8005e60:	47b8      	blx	r7
 8005e62:	3001      	adds	r0, #1
 8005e64:	f43f af51 	beq.w	8005d0a <_printf_float+0xb6>
 8005e68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005e6c:	4543      	cmp	r3, r8
 8005e6e:	db02      	blt.n	8005e76 <_printf_float+0x222>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	07d8      	lsls	r0, r3, #31
 8005e74:	d50f      	bpl.n	8005e96 <_printf_float+0x242>
 8005e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	f43f af42 	beq.w	8005d0a <_printf_float+0xb6>
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e8e:	f104 0a1a 	add.w	sl, r4, #26
 8005e92:	45c8      	cmp	r8, r9
 8005e94:	dc09      	bgt.n	8005eaa <_printf_float+0x256>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	079b      	lsls	r3, r3, #30
 8005e9a:	f100 8102 	bmi.w	80060a2 <_printf_float+0x44e>
 8005e9e:	68e0      	ldr	r0, [r4, #12]
 8005ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ea2:	4298      	cmp	r0, r3
 8005ea4:	bfb8      	it	lt
 8005ea6:	4618      	movlt	r0, r3
 8005ea8:	e731      	b.n	8005d0e <_printf_float+0xba>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4652      	mov	r2, sl
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	47b8      	blx	r7
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	f43f af28 	beq.w	8005d0a <_printf_float+0xb6>
 8005eba:	f109 0901 	add.w	r9, r9, #1
 8005ebe:	e7e8      	b.n	8005e92 <_printf_float+0x23e>
 8005ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dc38      	bgt.n	8005f38 <_printf_float+0x2e4>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4628      	mov	r0, r5
 8005ecc:	4a19      	ldr	r2, [pc, #100]	@ (8005f34 <_printf_float+0x2e0>)
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f af1a 	beq.w	8005d0a <_printf_float+0xb6>
 8005ed6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005eda:	ea59 0303 	orrs.w	r3, r9, r3
 8005ede:	d102      	bne.n	8005ee6 <_printf_float+0x292>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	07d9      	lsls	r1, r3, #31
 8005ee4:	d5d7      	bpl.n	8005e96 <_printf_float+0x242>
 8005ee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f af0a 	beq.w	8005d0a <_printf_float+0xb6>
 8005ef6:	f04f 0a00 	mov.w	sl, #0
 8005efa:	f104 0b1a 	add.w	fp, r4, #26
 8005efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f00:	425b      	negs	r3, r3
 8005f02:	4553      	cmp	r3, sl
 8005f04:	dc01      	bgt.n	8005f0a <_printf_float+0x2b6>
 8005f06:	464b      	mov	r3, r9
 8005f08:	e793      	b.n	8005e32 <_printf_float+0x1de>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	465a      	mov	r2, fp
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f aef8 	beq.w	8005d0a <_printf_float+0xb6>
 8005f1a:	f10a 0a01 	add.w	sl, sl, #1
 8005f1e:	e7ee      	b.n	8005efe <_printf_float+0x2aa>
 8005f20:	7fefffff 	.word	0x7fefffff
 8005f24:	0800a3a4 	.word	0x0800a3a4
 8005f28:	0800a3a8 	.word	0x0800a3a8
 8005f2c:	0800a3ac 	.word	0x0800a3ac
 8005f30:	0800a3b0 	.word	0x0800a3b0
 8005f34:	0800a3b4 	.word	0x0800a3b4
 8005f38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f3e:	4553      	cmp	r3, sl
 8005f40:	bfa8      	it	ge
 8005f42:	4653      	movge	r3, sl
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	4699      	mov	r9, r3
 8005f48:	dc36      	bgt.n	8005fb8 <_printf_float+0x364>
 8005f4a:	f04f 0b00 	mov.w	fp, #0
 8005f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f52:	f104 021a 	add.w	r2, r4, #26
 8005f56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5a:	eba3 0309 	sub.w	r3, r3, r9
 8005f5e:	455b      	cmp	r3, fp
 8005f60:	dc31      	bgt.n	8005fc6 <_printf_float+0x372>
 8005f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f64:	459a      	cmp	sl, r3
 8005f66:	dc3a      	bgt.n	8005fde <_printf_float+0x38a>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	07da      	lsls	r2, r3, #31
 8005f6c:	d437      	bmi.n	8005fde <_printf_float+0x38a>
 8005f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f70:	ebaa 0903 	sub.w	r9, sl, r3
 8005f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f76:	ebaa 0303 	sub.w	r3, sl, r3
 8005f7a:	4599      	cmp	r9, r3
 8005f7c:	bfa8      	it	ge
 8005f7e:	4699      	movge	r9, r3
 8005f80:	f1b9 0f00 	cmp.w	r9, #0
 8005f84:	dc33      	bgt.n	8005fee <_printf_float+0x39a>
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f8e:	f104 0b1a 	add.w	fp, r4, #26
 8005f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f94:	ebaa 0303 	sub.w	r3, sl, r3
 8005f98:	eba3 0309 	sub.w	r3, r3, r9
 8005f9c:	4543      	cmp	r3, r8
 8005f9e:	f77f af7a 	ble.w	8005e96 <_printf_float+0x242>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	465a      	mov	r2, fp
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f aeac 	beq.w	8005d0a <_printf_float+0xb6>
 8005fb2:	f108 0801 	add.w	r8, r8, #1
 8005fb6:	e7ec      	b.n	8005f92 <_printf_float+0x33e>
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d1c2      	bne.n	8005f4a <_printf_float+0x2f6>
 8005fc4:	e6a1      	b.n	8005d0a <_printf_float+0xb6>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	920a      	str	r2, [sp, #40]	@ 0x28
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f ae9a 	beq.w	8005d0a <_printf_float+0xb6>
 8005fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fd8:	f10b 0b01 	add.w	fp, fp, #1
 8005fdc:	e7bb      	b.n	8005f56 <_printf_float+0x302>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d1c0      	bne.n	8005f6e <_printf_float+0x31a>
 8005fec:	e68d      	b.n	8005d0a <_printf_float+0xb6>
 8005fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	4442      	add	r2, r8
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d1c3      	bne.n	8005f86 <_printf_float+0x332>
 8005ffe:	e684      	b.n	8005d0a <_printf_float+0xb6>
 8006000:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006004:	f1ba 0f01 	cmp.w	sl, #1
 8006008:	dc01      	bgt.n	800600e <_printf_float+0x3ba>
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d536      	bpl.n	800607c <_printf_float+0x428>
 800600e:	2301      	movs	r3, #1
 8006010:	4642      	mov	r2, r8
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f ae76 	beq.w	8005d0a <_printf_float+0xb6>
 800601e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f ae6e 	beq.w	8005d0a <_printf_float+0xb6>
 800602e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006032:	2200      	movs	r2, #0
 8006034:	2300      	movs	r3, #0
 8006036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800603a:	f7fa fcb5 	bl	80009a8 <__aeabi_dcmpeq>
 800603e:	b9c0      	cbnz	r0, 8006072 <_printf_float+0x41e>
 8006040:	4653      	mov	r3, sl
 8006042:	f108 0201 	add.w	r2, r8, #1
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d10c      	bne.n	800606a <_printf_float+0x416>
 8006050:	e65b      	b.n	8005d0a <_printf_float+0xb6>
 8006052:	2301      	movs	r3, #1
 8006054:	465a      	mov	r2, fp
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f ae54 	beq.w	8005d0a <_printf_float+0xb6>
 8006062:	f108 0801 	add.w	r8, r8, #1
 8006066:	45d0      	cmp	r8, sl
 8006068:	dbf3      	blt.n	8006052 <_printf_float+0x3fe>
 800606a:	464b      	mov	r3, r9
 800606c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006070:	e6e0      	b.n	8005e34 <_printf_float+0x1e0>
 8006072:	f04f 0800 	mov.w	r8, #0
 8006076:	f104 0b1a 	add.w	fp, r4, #26
 800607a:	e7f4      	b.n	8006066 <_printf_float+0x412>
 800607c:	2301      	movs	r3, #1
 800607e:	4642      	mov	r2, r8
 8006080:	e7e1      	b.n	8006046 <_printf_float+0x3f2>
 8006082:	2301      	movs	r3, #1
 8006084:	464a      	mov	r2, r9
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	47b8      	blx	r7
 800608c:	3001      	adds	r0, #1
 800608e:	f43f ae3c 	beq.w	8005d0a <_printf_float+0xb6>
 8006092:	f108 0801 	add.w	r8, r8, #1
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800609a:	1a5b      	subs	r3, r3, r1
 800609c:	4543      	cmp	r3, r8
 800609e:	dcf0      	bgt.n	8006082 <_printf_float+0x42e>
 80060a0:	e6fd      	b.n	8005e9e <_printf_float+0x24a>
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	f104 0919 	add.w	r9, r4, #25
 80060aa:	e7f4      	b.n	8006096 <_printf_float+0x442>

080060ac <_printf_common>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	4616      	mov	r6, r2
 80060b2:	4698      	mov	r8, r3
 80060b4:	688a      	ldr	r2, [r1, #8]
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4607      	mov	r7, r0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfb8      	it	lt
 80060be:	4613      	movlt	r3, r2
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060c6:	460c      	mov	r4, r1
 80060c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060cc:	b10a      	cbz	r2, 80060d2 <_printf_common+0x26>
 80060ce:	3301      	adds	r3, #1
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	6833      	ldrmi	r3, [r6, #0]
 80060da:	3302      	addmi	r3, #2
 80060dc:	6033      	strmi	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	f015 0506 	ands.w	r5, r5, #6
 80060e4:	d106      	bne.n	80060f4 <_printf_common+0x48>
 80060e6:	f104 0a19 	add.w	sl, r4, #25
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc2b      	bgt.n	800614c <_printf_common+0xa0>
 80060f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060f8:	6822      	ldr	r2, [r4, #0]
 80060fa:	3b00      	subs	r3, #0
 80060fc:	bf18      	it	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	0692      	lsls	r2, r2, #26
 8006102:	d430      	bmi.n	8006166 <_printf_common+0xba>
 8006104:	4641      	mov	r1, r8
 8006106:	4638      	mov	r0, r7
 8006108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800610c:	47c8      	blx	r9
 800610e:	3001      	adds	r0, #1
 8006110:	d023      	beq.n	800615a <_printf_common+0xae>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	f003 0306 	and.w	r3, r3, #6
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf14      	ite	ne
 800611e:	2500      	movne	r5, #0
 8006120:	6833      	ldreq	r3, [r6, #0]
 8006122:	f04f 0600 	mov.w	r6, #0
 8006126:	bf08      	it	eq
 8006128:	68e5      	ldreq	r5, [r4, #12]
 800612a:	f104 041a 	add.w	r4, r4, #26
 800612e:	bf08      	it	eq
 8006130:	1aed      	subeq	r5, r5, r3
 8006132:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006136:	bf08      	it	eq
 8006138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800613c:	4293      	cmp	r3, r2
 800613e:	bfc4      	itt	gt
 8006140:	1a9b      	subgt	r3, r3, r2
 8006142:	18ed      	addgt	r5, r5, r3
 8006144:	42b5      	cmp	r5, r6
 8006146:	d11a      	bne.n	800617e <_printf_common+0xd2>
 8006148:	2000      	movs	r0, #0
 800614a:	e008      	b.n	800615e <_printf_common+0xb2>
 800614c:	2301      	movs	r3, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4641      	mov	r1, r8
 8006152:	4638      	mov	r0, r7
 8006154:	47c8      	blx	r9
 8006156:	3001      	adds	r0, #1
 8006158:	d103      	bne.n	8006162 <_printf_common+0xb6>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	3501      	adds	r5, #1
 8006164:	e7c1      	b.n	80060ea <_printf_common+0x3e>
 8006166:	2030      	movs	r0, #48	@ 0x30
 8006168:	18e1      	adds	r1, r4, r3
 800616a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006174:	4422      	add	r2, r4
 8006176:	3302      	adds	r3, #2
 8006178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800617c:	e7c2      	b.n	8006104 <_printf_common+0x58>
 800617e:	2301      	movs	r3, #1
 8006180:	4622      	mov	r2, r4
 8006182:	4641      	mov	r1, r8
 8006184:	4638      	mov	r0, r7
 8006186:	47c8      	blx	r9
 8006188:	3001      	adds	r0, #1
 800618a:	d0e6      	beq.n	800615a <_printf_common+0xae>
 800618c:	3601      	adds	r6, #1
 800618e:	e7d9      	b.n	8006144 <_printf_common+0x98>

08006190 <_printf_i>:
 8006190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	7e0f      	ldrb	r7, [r1, #24]
 8006196:	4691      	mov	r9, r2
 8006198:	2f78      	cmp	r7, #120	@ 0x78
 800619a:	4680      	mov	r8, r0
 800619c:	460c      	mov	r4, r1
 800619e:	469a      	mov	sl, r3
 80061a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061a6:	d807      	bhi.n	80061b8 <_printf_i+0x28>
 80061a8:	2f62      	cmp	r7, #98	@ 0x62
 80061aa:	d80a      	bhi.n	80061c2 <_printf_i+0x32>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	f000 80d3 	beq.w	8006358 <_printf_i+0x1c8>
 80061b2:	2f58      	cmp	r7, #88	@ 0x58
 80061b4:	f000 80ba 	beq.w	800632c <_printf_i+0x19c>
 80061b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061c0:	e03a      	b.n	8006238 <_printf_i+0xa8>
 80061c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061c6:	2b15      	cmp	r3, #21
 80061c8:	d8f6      	bhi.n	80061b8 <_printf_i+0x28>
 80061ca:	a101      	add	r1, pc, #4	@ (adr r1, 80061d0 <_printf_i+0x40>)
 80061cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d0:	08006229 	.word	0x08006229
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	080061b9 	.word	0x080061b9
 80061dc:	080061b9 	.word	0x080061b9
 80061e0:	080061b9 	.word	0x080061b9
 80061e4:	080061b9 	.word	0x080061b9
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	080061b9 	.word	0x080061b9
 80061f0:	080061b9 	.word	0x080061b9
 80061f4:	080061b9 	.word	0x080061b9
 80061f8:	080061b9 	.word	0x080061b9
 80061fc:	0800633f 	.word	0x0800633f
 8006200:	08006267 	.word	0x08006267
 8006204:	080062f9 	.word	0x080062f9
 8006208:	080061b9 	.word	0x080061b9
 800620c:	080061b9 	.word	0x080061b9
 8006210:	08006361 	.word	0x08006361
 8006214:	080061b9 	.word	0x080061b9
 8006218:	08006267 	.word	0x08006267
 800621c:	080061b9 	.word	0x080061b9
 8006220:	080061b9 	.word	0x080061b9
 8006224:	08006301 	.word	0x08006301
 8006228:	6833      	ldr	r3, [r6, #0]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6032      	str	r2, [r6, #0]
 8006230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006238:	2301      	movs	r3, #1
 800623a:	e09e      	b.n	800637a <_printf_i+0x1ea>
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	6031      	str	r1, [r6, #0]
 8006244:	0606      	lsls	r6, r0, #24
 8006246:	d501      	bpl.n	800624c <_printf_i+0xbc>
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	e003      	b.n	8006254 <_printf_i+0xc4>
 800624c:	0645      	lsls	r5, r0, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0xb8>
 8006250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006254:	2d00      	cmp	r5, #0
 8006256:	da03      	bge.n	8006260 <_printf_i+0xd0>
 8006258:	232d      	movs	r3, #45	@ 0x2d
 800625a:	426d      	negs	r5, r5
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006260:	230a      	movs	r3, #10
 8006262:	4859      	ldr	r0, [pc, #356]	@ (80063c8 <_printf_i+0x238>)
 8006264:	e011      	b.n	800628a <_printf_i+0xfa>
 8006266:	6821      	ldr	r1, [r4, #0]
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	0608      	lsls	r0, r1, #24
 800626c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006270:	d402      	bmi.n	8006278 <_printf_i+0xe8>
 8006272:	0649      	lsls	r1, r1, #25
 8006274:	bf48      	it	mi
 8006276:	b2ad      	uxthmi	r5, r5
 8006278:	2f6f      	cmp	r7, #111	@ 0x6f
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	bf14      	ite	ne
 800627e:	230a      	movne	r3, #10
 8006280:	2308      	moveq	r3, #8
 8006282:	4851      	ldr	r0, [pc, #324]	@ (80063c8 <_printf_i+0x238>)
 8006284:	2100      	movs	r1, #0
 8006286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800628a:	6866      	ldr	r6, [r4, #4]
 800628c:	2e00      	cmp	r6, #0
 800628e:	bfa8      	it	ge
 8006290:	6821      	ldrge	r1, [r4, #0]
 8006292:	60a6      	str	r6, [r4, #8]
 8006294:	bfa4      	itt	ge
 8006296:	f021 0104 	bicge.w	r1, r1, #4
 800629a:	6021      	strge	r1, [r4, #0]
 800629c:	b90d      	cbnz	r5, 80062a2 <_printf_i+0x112>
 800629e:	2e00      	cmp	r6, #0
 80062a0:	d04b      	beq.n	800633a <_printf_i+0x1aa>
 80062a2:	4616      	mov	r6, r2
 80062a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80062a8:	fb03 5711 	mls	r7, r3, r1, r5
 80062ac:	5dc7      	ldrb	r7, [r0, r7]
 80062ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062b2:	462f      	mov	r7, r5
 80062b4:	42bb      	cmp	r3, r7
 80062b6:	460d      	mov	r5, r1
 80062b8:	d9f4      	bls.n	80062a4 <_printf_i+0x114>
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d10b      	bne.n	80062d6 <_printf_i+0x146>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	07df      	lsls	r7, r3, #31
 80062c2:	d508      	bpl.n	80062d6 <_printf_i+0x146>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6861      	ldr	r1, [r4, #4]
 80062c8:	4299      	cmp	r1, r3
 80062ca:	bfde      	ittt	le
 80062cc:	2330      	movle	r3, #48	@ 0x30
 80062ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062d6:	1b92      	subs	r2, r2, r6
 80062d8:	6122      	str	r2, [r4, #16]
 80062da:	464b      	mov	r3, r9
 80062dc:	4621      	mov	r1, r4
 80062de:	4640      	mov	r0, r8
 80062e0:	f8cd a000 	str.w	sl, [sp]
 80062e4:	aa03      	add	r2, sp, #12
 80062e6:	f7ff fee1 	bl	80060ac <_printf_common>
 80062ea:	3001      	adds	r0, #1
 80062ec:	d14a      	bne.n	8006384 <_printf_i+0x1f4>
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	b004      	add	sp, #16
 80062f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	f043 0320 	orr.w	r3, r3, #32
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	2778      	movs	r7, #120	@ 0x78
 8006302:	4832      	ldr	r0, [pc, #200]	@ (80063cc <_printf_i+0x23c>)
 8006304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	061f      	lsls	r7, r3, #24
 800630e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006312:	d402      	bmi.n	800631a <_printf_i+0x18a>
 8006314:	065f      	lsls	r7, r3, #25
 8006316:	bf48      	it	mi
 8006318:	b2ad      	uxthmi	r5, r5
 800631a:	6031      	str	r1, [r6, #0]
 800631c:	07d9      	lsls	r1, r3, #31
 800631e:	bf44      	itt	mi
 8006320:	f043 0320 	orrmi.w	r3, r3, #32
 8006324:	6023      	strmi	r3, [r4, #0]
 8006326:	b11d      	cbz	r5, 8006330 <_printf_i+0x1a0>
 8006328:	2310      	movs	r3, #16
 800632a:	e7ab      	b.n	8006284 <_printf_i+0xf4>
 800632c:	4826      	ldr	r0, [pc, #152]	@ (80063c8 <_printf_i+0x238>)
 800632e:	e7e9      	b.n	8006304 <_printf_i+0x174>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f023 0320 	bic.w	r3, r3, #32
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	e7f6      	b.n	8006328 <_printf_i+0x198>
 800633a:	4616      	mov	r6, r2
 800633c:	e7bd      	b.n	80062ba <_printf_i+0x12a>
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	6825      	ldr	r5, [r4, #0]
 8006342:	1d18      	adds	r0, r3, #4
 8006344:	6961      	ldr	r1, [r4, #20]
 8006346:	6030      	str	r0, [r6, #0]
 8006348:	062e      	lsls	r6, r5, #24
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	d501      	bpl.n	8006352 <_printf_i+0x1c2>
 800634e:	6019      	str	r1, [r3, #0]
 8006350:	e002      	b.n	8006358 <_printf_i+0x1c8>
 8006352:	0668      	lsls	r0, r5, #25
 8006354:	d5fb      	bpl.n	800634e <_printf_i+0x1be>
 8006356:	8019      	strh	r1, [r3, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	4616      	mov	r6, r2
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	e7bc      	b.n	80062da <_printf_i+0x14a>
 8006360:	6833      	ldr	r3, [r6, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	1d1a      	adds	r2, r3, #4
 8006366:	6032      	str	r2, [r6, #0]
 8006368:	681e      	ldr	r6, [r3, #0]
 800636a:	6862      	ldr	r2, [r4, #4]
 800636c:	4630      	mov	r0, r6
 800636e:	f000 fc04 	bl	8006b7a <memchr>
 8006372:	b108      	cbz	r0, 8006378 <_printf_i+0x1e8>
 8006374:	1b80      	subs	r0, r0, r6
 8006376:	6060      	str	r0, [r4, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	2300      	movs	r3, #0
 800637e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006382:	e7aa      	b.n	80062da <_printf_i+0x14a>
 8006384:	4632      	mov	r2, r6
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	47d0      	blx	sl
 800638e:	3001      	adds	r0, #1
 8006390:	d0ad      	beq.n	80062ee <_printf_i+0x15e>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	079b      	lsls	r3, r3, #30
 8006396:	d413      	bmi.n	80063c0 <_printf_i+0x230>
 8006398:	68e0      	ldr	r0, [r4, #12]
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	4298      	cmp	r0, r3
 800639e:	bfb8      	it	lt
 80063a0:	4618      	movlt	r0, r3
 80063a2:	e7a6      	b.n	80062f2 <_printf_i+0x162>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4632      	mov	r2, r6
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d09d      	beq.n	80062ee <_printf_i+0x15e>
 80063b2:	3501      	adds	r5, #1
 80063b4:	68e3      	ldr	r3, [r4, #12]
 80063b6:	9903      	ldr	r1, [sp, #12]
 80063b8:	1a5b      	subs	r3, r3, r1
 80063ba:	42ab      	cmp	r3, r5
 80063bc:	dcf2      	bgt.n	80063a4 <_printf_i+0x214>
 80063be:	e7eb      	b.n	8006398 <_printf_i+0x208>
 80063c0:	2500      	movs	r5, #0
 80063c2:	f104 0619 	add.w	r6, r4, #25
 80063c6:	e7f5      	b.n	80063b4 <_printf_i+0x224>
 80063c8:	0800a3b6 	.word	0x0800a3b6
 80063cc:	0800a3c7 	.word	0x0800a3c7

080063d0 <_scanf_float>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	b087      	sub	sp, #28
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	688b      	ldr	r3, [r1, #8]
 80063da:	4617      	mov	r7, r2
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80063e2:	bf82      	ittt	hi
 80063e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80063e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80063ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80063f0:	460a      	mov	r2, r1
 80063f2:	f04f 0500 	mov.w	r5, #0
 80063f6:	bf88      	it	hi
 80063f8:	608b      	strhi	r3, [r1, #8]
 80063fa:	680b      	ldr	r3, [r1, #0]
 80063fc:	4680      	mov	r8, r0
 80063fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006402:	f842 3b1c 	str.w	r3, [r2], #28
 8006406:	460c      	mov	r4, r1
 8006408:	bf98      	it	ls
 800640a:	f04f 0b00 	movls.w	fp, #0
 800640e:	4616      	mov	r6, r2
 8006410:	46aa      	mov	sl, r5
 8006412:	46a9      	mov	r9, r5
 8006414:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006418:	9201      	str	r2, [sp, #4]
 800641a:	9502      	str	r5, [sp, #8]
 800641c:	68a2      	ldr	r2, [r4, #8]
 800641e:	b152      	cbz	r2, 8006436 <_scanf_float+0x66>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b4e      	cmp	r3, #78	@ 0x4e
 8006426:	d865      	bhi.n	80064f4 <_scanf_float+0x124>
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d83d      	bhi.n	80064a8 <_scanf_float+0xd8>
 800642c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006430:	b2c8      	uxtb	r0, r1
 8006432:	280e      	cmp	r0, #14
 8006434:	d93b      	bls.n	80064ae <_scanf_float+0xde>
 8006436:	f1b9 0f00 	cmp.w	r9, #0
 800643a:	d003      	beq.n	8006444 <_scanf_float+0x74>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006448:	f1ba 0f01 	cmp.w	sl, #1
 800644c:	f200 8118 	bhi.w	8006680 <_scanf_float+0x2b0>
 8006450:	9b01      	ldr	r3, [sp, #4]
 8006452:	429e      	cmp	r6, r3
 8006454:	f200 8109 	bhi.w	800666a <_scanf_float+0x29a>
 8006458:	2001      	movs	r0, #1
 800645a:	b007      	add	sp, #28
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006464:	2a0d      	cmp	r2, #13
 8006466:	d8e6      	bhi.n	8006436 <_scanf_float+0x66>
 8006468:	a101      	add	r1, pc, #4	@ (adr r1, 8006470 <_scanf_float+0xa0>)
 800646a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800646e:	bf00      	nop
 8006470:	080065b7 	.word	0x080065b7
 8006474:	08006437 	.word	0x08006437
 8006478:	08006437 	.word	0x08006437
 800647c:	08006437 	.word	0x08006437
 8006480:	08006617 	.word	0x08006617
 8006484:	080065ef 	.word	0x080065ef
 8006488:	08006437 	.word	0x08006437
 800648c:	08006437 	.word	0x08006437
 8006490:	080065c5 	.word	0x080065c5
 8006494:	08006437 	.word	0x08006437
 8006498:	08006437 	.word	0x08006437
 800649c:	08006437 	.word	0x08006437
 80064a0:	08006437 	.word	0x08006437
 80064a4:	0800657d 	.word	0x0800657d
 80064a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064ac:	e7da      	b.n	8006464 <_scanf_float+0x94>
 80064ae:	290e      	cmp	r1, #14
 80064b0:	d8c1      	bhi.n	8006436 <_scanf_float+0x66>
 80064b2:	a001      	add	r0, pc, #4	@ (adr r0, 80064b8 <_scanf_float+0xe8>)
 80064b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064b8:	0800656d 	.word	0x0800656d
 80064bc:	08006437 	.word	0x08006437
 80064c0:	0800656d 	.word	0x0800656d
 80064c4:	08006603 	.word	0x08006603
 80064c8:	08006437 	.word	0x08006437
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006553 	.word	0x08006553
 80064d4:	08006553 	.word	0x08006553
 80064d8:	08006553 	.word	0x08006553
 80064dc:	08006553 	.word	0x08006553
 80064e0:	08006553 	.word	0x08006553
 80064e4:	08006553 	.word	0x08006553
 80064e8:	08006553 	.word	0x08006553
 80064ec:	08006553 	.word	0x08006553
 80064f0:	08006553 	.word	0x08006553
 80064f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80064f6:	d809      	bhi.n	800650c <_scanf_float+0x13c>
 80064f8:	2b60      	cmp	r3, #96	@ 0x60
 80064fa:	d8b1      	bhi.n	8006460 <_scanf_float+0x90>
 80064fc:	2b54      	cmp	r3, #84	@ 0x54
 80064fe:	d07b      	beq.n	80065f8 <_scanf_float+0x228>
 8006500:	2b59      	cmp	r3, #89	@ 0x59
 8006502:	d198      	bne.n	8006436 <_scanf_float+0x66>
 8006504:	2d07      	cmp	r5, #7
 8006506:	d196      	bne.n	8006436 <_scanf_float+0x66>
 8006508:	2508      	movs	r5, #8
 800650a:	e02c      	b.n	8006566 <_scanf_float+0x196>
 800650c:	2b74      	cmp	r3, #116	@ 0x74
 800650e:	d073      	beq.n	80065f8 <_scanf_float+0x228>
 8006510:	2b79      	cmp	r3, #121	@ 0x79
 8006512:	e7f6      	b.n	8006502 <_scanf_float+0x132>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	05c8      	lsls	r0, r1, #23
 8006518:	d51b      	bpl.n	8006552 <_scanf_float+0x182>
 800651a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800651e:	6021      	str	r1, [r4, #0]
 8006520:	f109 0901 	add.w	r9, r9, #1
 8006524:	f1bb 0f00 	cmp.w	fp, #0
 8006528:	d003      	beq.n	8006532 <_scanf_float+0x162>
 800652a:	3201      	adds	r2, #1
 800652c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006530:	60a2      	str	r2, [r4, #8]
 8006532:	68a3      	ldr	r3, [r4, #8]
 8006534:	3b01      	subs	r3, #1
 8006536:	60a3      	str	r3, [r4, #8]
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	3301      	adds	r3, #1
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3b01      	subs	r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	f340 8087 	ble.w	8006658 <_scanf_float+0x288>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	e764      	b.n	800641c <_scanf_float+0x4c>
 8006552:	eb1a 0105 	adds.w	r1, sl, r5
 8006556:	f47f af6e 	bne.w	8006436 <_scanf_float+0x66>
 800655a:	460d      	mov	r5, r1
 800655c:	468a      	mov	sl, r1
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006564:	6022      	str	r2, [r4, #0]
 8006566:	f806 3b01 	strb.w	r3, [r6], #1
 800656a:	e7e2      	b.n	8006532 <_scanf_float+0x162>
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	0610      	lsls	r0, r2, #24
 8006570:	f57f af61 	bpl.w	8006436 <_scanf_float+0x66>
 8006574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	e7f4      	b.n	8006566 <_scanf_float+0x196>
 800657c:	f1ba 0f00 	cmp.w	sl, #0
 8006580:	d10e      	bne.n	80065a0 <_scanf_float+0x1d0>
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	d10e      	bne.n	80065a6 <_scanf_float+0x1d6>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800658e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006592:	d108      	bne.n	80065a6 <_scanf_float+0x1d6>
 8006594:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006598:	f04f 0a01 	mov.w	sl, #1
 800659c:	6022      	str	r2, [r4, #0]
 800659e:	e7e2      	b.n	8006566 <_scanf_float+0x196>
 80065a0:	f1ba 0f02 	cmp.w	sl, #2
 80065a4:	d055      	beq.n	8006652 <_scanf_float+0x282>
 80065a6:	2d01      	cmp	r5, #1
 80065a8:	d002      	beq.n	80065b0 <_scanf_float+0x1e0>
 80065aa:	2d04      	cmp	r5, #4
 80065ac:	f47f af43 	bne.w	8006436 <_scanf_float+0x66>
 80065b0:	3501      	adds	r5, #1
 80065b2:	b2ed      	uxtb	r5, r5
 80065b4:	e7d7      	b.n	8006566 <_scanf_float+0x196>
 80065b6:	f1ba 0f01 	cmp.w	sl, #1
 80065ba:	f47f af3c 	bne.w	8006436 <_scanf_float+0x66>
 80065be:	f04f 0a02 	mov.w	sl, #2
 80065c2:	e7d0      	b.n	8006566 <_scanf_float+0x196>
 80065c4:	b97d      	cbnz	r5, 80065e6 <_scanf_float+0x216>
 80065c6:	f1b9 0f00 	cmp.w	r9, #0
 80065ca:	f47f af37 	bne.w	800643c <_scanf_float+0x6c>
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065d8:	f040 8103 	bne.w	80067e2 <_scanf_float+0x412>
 80065dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065e0:	2501      	movs	r5, #1
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	e7bf      	b.n	8006566 <_scanf_float+0x196>
 80065e6:	2d03      	cmp	r5, #3
 80065e8:	d0e2      	beq.n	80065b0 <_scanf_float+0x1e0>
 80065ea:	2d05      	cmp	r5, #5
 80065ec:	e7de      	b.n	80065ac <_scanf_float+0x1dc>
 80065ee:	2d02      	cmp	r5, #2
 80065f0:	f47f af21 	bne.w	8006436 <_scanf_float+0x66>
 80065f4:	2503      	movs	r5, #3
 80065f6:	e7b6      	b.n	8006566 <_scanf_float+0x196>
 80065f8:	2d06      	cmp	r5, #6
 80065fa:	f47f af1c 	bne.w	8006436 <_scanf_float+0x66>
 80065fe:	2507      	movs	r5, #7
 8006600:	e7b1      	b.n	8006566 <_scanf_float+0x196>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	0591      	lsls	r1, r2, #22
 8006606:	f57f af16 	bpl.w	8006436 <_scanf_float+0x66>
 800660a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800660e:	6022      	str	r2, [r4, #0]
 8006610:	f8cd 9008 	str.w	r9, [sp, #8]
 8006614:	e7a7      	b.n	8006566 <_scanf_float+0x196>
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800661c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006620:	d006      	beq.n	8006630 <_scanf_float+0x260>
 8006622:	0550      	lsls	r0, r2, #21
 8006624:	f57f af07 	bpl.w	8006436 <_scanf_float+0x66>
 8006628:	f1b9 0f00 	cmp.w	r9, #0
 800662c:	f000 80d9 	beq.w	80067e2 <_scanf_float+0x412>
 8006630:	0591      	lsls	r1, r2, #22
 8006632:	bf58      	it	pl
 8006634:	9902      	ldrpl	r1, [sp, #8]
 8006636:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800663a:	bf58      	it	pl
 800663c:	eba9 0101 	subpl.w	r1, r9, r1
 8006640:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006644:	f04f 0900 	mov.w	r9, #0
 8006648:	bf58      	it	pl
 800664a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	e789      	b.n	8006566 <_scanf_float+0x196>
 8006652:	f04f 0a03 	mov.w	sl, #3
 8006656:	e786      	b.n	8006566 <_scanf_float+0x196>
 8006658:	4639      	mov	r1, r7
 800665a:	4640      	mov	r0, r8
 800665c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006660:	4798      	blx	r3
 8006662:	2800      	cmp	r0, #0
 8006664:	f43f aeda 	beq.w	800641c <_scanf_float+0x4c>
 8006668:	e6e5      	b.n	8006436 <_scanf_float+0x66>
 800666a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800666e:	463a      	mov	r2, r7
 8006670:	4640      	mov	r0, r8
 8006672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006676:	4798      	blx	r3
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	3b01      	subs	r3, #1
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	e6e7      	b.n	8006450 <_scanf_float+0x80>
 8006680:	1e6b      	subs	r3, r5, #1
 8006682:	2b06      	cmp	r3, #6
 8006684:	d824      	bhi.n	80066d0 <_scanf_float+0x300>
 8006686:	2d02      	cmp	r5, #2
 8006688:	d836      	bhi.n	80066f8 <_scanf_float+0x328>
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	429e      	cmp	r6, r3
 800668e:	f67f aee3 	bls.w	8006458 <_scanf_float+0x88>
 8006692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006696:	463a      	mov	r2, r7
 8006698:	4640      	mov	r0, r8
 800669a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800669e:	4798      	blx	r3
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	e7f0      	b.n	800668a <_scanf_float+0x2ba>
 80066a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066ac:	463a      	mov	r2, r7
 80066ae:	4640      	mov	r0, r8
 80066b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066b4:	4798      	blx	r3
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066c0:	fa5f fa8a 	uxtb.w	sl, sl
 80066c4:	f1ba 0f02 	cmp.w	sl, #2
 80066c8:	d1ee      	bne.n	80066a8 <_scanf_float+0x2d8>
 80066ca:	3d03      	subs	r5, #3
 80066cc:	b2ed      	uxtb	r5, r5
 80066ce:	1b76      	subs	r6, r6, r5
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	05da      	lsls	r2, r3, #23
 80066d4:	d530      	bpl.n	8006738 <_scanf_float+0x368>
 80066d6:	055b      	lsls	r3, r3, #21
 80066d8:	d511      	bpl.n	80066fe <_scanf_float+0x32e>
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	429e      	cmp	r6, r3
 80066de:	f67f aebb 	bls.w	8006458 <_scanf_float+0x88>
 80066e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066e6:	463a      	mov	r2, r7
 80066e8:	4640      	mov	r0, r8
 80066ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066ee:	4798      	blx	r3
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	e7f0      	b.n	80066da <_scanf_float+0x30a>
 80066f8:	46aa      	mov	sl, r5
 80066fa:	46b3      	mov	fp, r6
 80066fc:	e7de      	b.n	80066bc <_scanf_float+0x2ec>
 80066fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	2965      	cmp	r1, #101	@ 0x65
 8006706:	f103 33ff 	add.w	r3, r3, #4294967295
 800670a:	f106 35ff 	add.w	r5, r6, #4294967295
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	d00c      	beq.n	800672c <_scanf_float+0x35c>
 8006712:	2945      	cmp	r1, #69	@ 0x45
 8006714:	d00a      	beq.n	800672c <_scanf_float+0x35c>
 8006716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800671a:	463a      	mov	r2, r7
 800671c:	4640      	mov	r0, r8
 800671e:	4798      	blx	r3
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006726:	3b01      	subs	r3, #1
 8006728:	1eb5      	subs	r5, r6, #2
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	463a      	mov	r2, r7
 800672e:	4640      	mov	r0, r8
 8006730:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006734:	4798      	blx	r3
 8006736:	462e      	mov	r6, r5
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	f012 0210 	ands.w	r2, r2, #16
 800673e:	d001      	beq.n	8006744 <_scanf_float+0x374>
 8006740:	2000      	movs	r0, #0
 8006742:	e68a      	b.n	800645a <_scanf_float+0x8a>
 8006744:	7032      	strb	r2, [r6, #0]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800674c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006750:	d11c      	bne.n	800678c <_scanf_float+0x3bc>
 8006752:	9b02      	ldr	r3, [sp, #8]
 8006754:	454b      	cmp	r3, r9
 8006756:	eba3 0209 	sub.w	r2, r3, r9
 800675a:	d123      	bne.n	80067a4 <_scanf_float+0x3d4>
 800675c:	2200      	movs	r2, #0
 800675e:	4640      	mov	r0, r8
 8006760:	9901      	ldr	r1, [sp, #4]
 8006762:	f002 fc1d 	bl	8008fa0 <_strtod_r>
 8006766:	9b03      	ldr	r3, [sp, #12]
 8006768:	6825      	ldr	r5, [r4, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f015 0f02 	tst.w	r5, #2
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	f103 0204 	add.w	r2, r3, #4
 8006778:	d01f      	beq.n	80067ba <_scanf_float+0x3ea>
 800677a:	9903      	ldr	r1, [sp, #12]
 800677c:	600a      	str	r2, [r1, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	e9c3 6700 	strd	r6, r7, [r3]
 8006784:	68e3      	ldr	r3, [r4, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60e3      	str	r3, [r4, #12]
 800678a:	e7d9      	b.n	8006740 <_scanf_float+0x370>
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0e4      	beq.n	800675c <_scanf_float+0x38c>
 8006792:	9905      	ldr	r1, [sp, #20]
 8006794:	230a      	movs	r3, #10
 8006796:	4640      	mov	r0, r8
 8006798:	3101      	adds	r1, #1
 800679a:	f002 fc81 	bl	80090a0 <_strtol_r>
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	9e05      	ldr	r6, [sp, #20]
 80067a2:	1ac2      	subs	r2, r0, r3
 80067a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80067a8:	429e      	cmp	r6, r3
 80067aa:	bf28      	it	cs
 80067ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80067b0:	4630      	mov	r0, r6
 80067b2:	490d      	ldr	r1, [pc, #52]	@ (80067e8 <_scanf_float+0x418>)
 80067b4:	f000 f8de 	bl	8006974 <siprintf>
 80067b8:	e7d0      	b.n	800675c <_scanf_float+0x38c>
 80067ba:	076d      	lsls	r5, r5, #29
 80067bc:	d4dd      	bmi.n	800677a <_scanf_float+0x3aa>
 80067be:	9d03      	ldr	r5, [sp, #12]
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	681d      	ldr	r5, [r3, #0]
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	f7fa f920 	bl	8000a0c <__aeabi_dcmpun>
 80067cc:	b120      	cbz	r0, 80067d8 <_scanf_float+0x408>
 80067ce:	4807      	ldr	r0, [pc, #28]	@ (80067ec <_scanf_float+0x41c>)
 80067d0:	f000 f9f0 	bl	8006bb4 <nanf>
 80067d4:	6028      	str	r0, [r5, #0]
 80067d6:	e7d5      	b.n	8006784 <_scanf_float+0x3b4>
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f974 	bl	8000ac8 <__aeabi_d2f>
 80067e0:	e7f8      	b.n	80067d4 <_scanf_float+0x404>
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	e62d      	b.n	8006444 <_scanf_float+0x74>
 80067e8:	0800a3d8 	.word	0x0800a3d8
 80067ec:	0800a76d 	.word	0x0800a76d

080067f0 <std>:
 80067f0:	2300      	movs	r3, #0
 80067f2:	b510      	push	{r4, lr}
 80067f4:	4604      	mov	r4, r0
 80067f6:	e9c0 3300 	strd	r3, r3, [r0]
 80067fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067fe:	6083      	str	r3, [r0, #8]
 8006800:	8181      	strh	r1, [r0, #12]
 8006802:	6643      	str	r3, [r0, #100]	@ 0x64
 8006804:	81c2      	strh	r2, [r0, #14]
 8006806:	6183      	str	r3, [r0, #24]
 8006808:	4619      	mov	r1, r3
 800680a:	2208      	movs	r2, #8
 800680c:	305c      	adds	r0, #92	@ 0x5c
 800680e:	f000 f935 	bl	8006a7c <memset>
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x58>)
 8006814:	6224      	str	r4, [r4, #32]
 8006816:	6263      	str	r3, [r4, #36]	@ 0x24
 8006818:	4b0c      	ldr	r3, [pc, #48]	@ (800684c <std+0x5c>)
 800681a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800681c:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <std+0x60>)
 800681e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006820:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <std+0x64>)
 8006822:	6323      	str	r3, [r4, #48]	@ 0x30
 8006824:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <std+0x68>)
 8006826:	429c      	cmp	r4, r3
 8006828:	d006      	beq.n	8006838 <std+0x48>
 800682a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800682e:	4294      	cmp	r4, r2
 8006830:	d002      	beq.n	8006838 <std+0x48>
 8006832:	33d0      	adds	r3, #208	@ 0xd0
 8006834:	429c      	cmp	r4, r3
 8006836:	d105      	bne.n	8006844 <std+0x54>
 8006838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006840:	f000 b998 	b.w	8006b74 <__retarget_lock_init_recursive>
 8006844:	bd10      	pop	{r4, pc}
 8006846:	bf00      	nop
 8006848:	080069b5 	.word	0x080069b5
 800684c:	080069d7 	.word	0x080069d7
 8006850:	08006a0f 	.word	0x08006a0f
 8006854:	08006a33 	.word	0x08006a33
 8006858:	20003410 	.word	0x20003410

0800685c <stdio_exit_handler>:
 800685c:	4a02      	ldr	r2, [pc, #8]	@ (8006868 <stdio_exit_handler+0xc>)
 800685e:	4903      	ldr	r1, [pc, #12]	@ (800686c <stdio_exit_handler+0x10>)
 8006860:	4803      	ldr	r0, [pc, #12]	@ (8006870 <stdio_exit_handler+0x14>)
 8006862:	f000 b869 	b.w	8006938 <_fwalk_sglue>
 8006866:	bf00      	nop
 8006868:	20000018 	.word	0x20000018
 800686c:	08009455 	.word	0x08009455
 8006870:	20000028 	.word	0x20000028

08006874 <cleanup_stdio>:
 8006874:	6841      	ldr	r1, [r0, #4]
 8006876:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <cleanup_stdio+0x34>)
 8006878:	b510      	push	{r4, lr}
 800687a:	4299      	cmp	r1, r3
 800687c:	4604      	mov	r4, r0
 800687e:	d001      	beq.n	8006884 <cleanup_stdio+0x10>
 8006880:	f002 fde8 	bl	8009454 <_fflush_r>
 8006884:	68a1      	ldr	r1, [r4, #8]
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <cleanup_stdio+0x38>)
 8006888:	4299      	cmp	r1, r3
 800688a:	d002      	beq.n	8006892 <cleanup_stdio+0x1e>
 800688c:	4620      	mov	r0, r4
 800688e:	f002 fde1 	bl	8009454 <_fflush_r>
 8006892:	68e1      	ldr	r1, [r4, #12]
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <cleanup_stdio+0x3c>)
 8006896:	4299      	cmp	r1, r3
 8006898:	d004      	beq.n	80068a4 <cleanup_stdio+0x30>
 800689a:	4620      	mov	r0, r4
 800689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a0:	f002 bdd8 	b.w	8009454 <_fflush_r>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	20003410 	.word	0x20003410
 80068ac:	20003478 	.word	0x20003478
 80068b0:	200034e0 	.word	0x200034e0

080068b4 <global_stdio_init.part.0>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <global_stdio_init.part.0+0x30>)
 80068b8:	4c0b      	ldr	r4, [pc, #44]	@ (80068e8 <global_stdio_init.part.0+0x34>)
 80068ba:	4a0c      	ldr	r2, [pc, #48]	@ (80068ec <global_stdio_init.part.0+0x38>)
 80068bc:	4620      	mov	r0, r4
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	2104      	movs	r1, #4
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7ff ff94 	bl	80067f0 <std>
 80068c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068cc:	2201      	movs	r2, #1
 80068ce:	2109      	movs	r1, #9
 80068d0:	f7ff ff8e 	bl	80067f0 <std>
 80068d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d8:	2202      	movs	r2, #2
 80068da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068de:	2112      	movs	r1, #18
 80068e0:	f7ff bf86 	b.w	80067f0 <std>
 80068e4:	20003548 	.word	0x20003548
 80068e8:	20003410 	.word	0x20003410
 80068ec:	0800685d 	.word	0x0800685d

080068f0 <__sfp_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__sfp_lock_acquire+0x8>)
 80068f2:	f000 b940 	b.w	8006b76 <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	20003551 	.word	0x20003551

080068fc <__sfp_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__sfp_lock_release+0x8>)
 80068fe:	f000 b93b 	b.w	8006b78 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	20003551 	.word	0x20003551

08006908 <__sinit>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4604      	mov	r4, r0
 800690c:	f7ff fff0 	bl	80068f0 <__sfp_lock_acquire>
 8006910:	6a23      	ldr	r3, [r4, #32]
 8006912:	b11b      	cbz	r3, 800691c <__sinit+0x14>
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	f7ff bff0 	b.w	80068fc <__sfp_lock_release>
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__sinit+0x28>)
 800691e:	6223      	str	r3, [r4, #32]
 8006920:	4b04      	ldr	r3, [pc, #16]	@ (8006934 <__sinit+0x2c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f5      	bne.n	8006914 <__sinit+0xc>
 8006928:	f7ff ffc4 	bl	80068b4 <global_stdio_init.part.0>
 800692c:	e7f2      	b.n	8006914 <__sinit+0xc>
 800692e:	bf00      	nop
 8006930:	08006875 	.word	0x08006875
 8006934:	20003548 	.word	0x20003548

08006938 <_fwalk_sglue>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4607      	mov	r7, r0
 800693e:	4688      	mov	r8, r1
 8006940:	4614      	mov	r4, r2
 8006942:	2600      	movs	r6, #0
 8006944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006948:	f1b9 0901 	subs.w	r9, r9, #1
 800694c:	d505      	bpl.n	800695a <_fwalk_sglue+0x22>
 800694e:	6824      	ldr	r4, [r4, #0]
 8006950:	2c00      	cmp	r4, #0
 8006952:	d1f7      	bne.n	8006944 <_fwalk_sglue+0xc>
 8006954:	4630      	mov	r0, r6
 8006956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d907      	bls.n	8006970 <_fwalk_sglue+0x38>
 8006960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006964:	3301      	adds	r3, #1
 8006966:	d003      	beq.n	8006970 <_fwalk_sglue+0x38>
 8006968:	4629      	mov	r1, r5
 800696a:	4638      	mov	r0, r7
 800696c:	47c0      	blx	r8
 800696e:	4306      	orrs	r6, r0
 8006970:	3568      	adds	r5, #104	@ 0x68
 8006972:	e7e9      	b.n	8006948 <_fwalk_sglue+0x10>

08006974 <siprintf>:
 8006974:	b40e      	push	{r1, r2, r3}
 8006976:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800697a:	b500      	push	{lr}
 800697c:	b09c      	sub	sp, #112	@ 0x70
 800697e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006980:	9002      	str	r0, [sp, #8]
 8006982:	9006      	str	r0, [sp, #24]
 8006984:	9107      	str	r1, [sp, #28]
 8006986:	9104      	str	r1, [sp, #16]
 8006988:	4808      	ldr	r0, [pc, #32]	@ (80069ac <siprintf+0x38>)
 800698a:	4909      	ldr	r1, [pc, #36]	@ (80069b0 <siprintf+0x3c>)
 800698c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006990:	9105      	str	r1, [sp, #20]
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	a902      	add	r1, sp, #8
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	f002 fbe0 	bl	800915c <_svfiprintf_r>
 800699c:	2200      	movs	r2, #0
 800699e:	9b02      	ldr	r3, [sp, #8]
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	b01c      	add	sp, #112	@ 0x70
 80069a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a8:	b003      	add	sp, #12
 80069aa:	4770      	bx	lr
 80069ac:	20000024 	.word	0x20000024
 80069b0:	ffff0208 	.word	0xffff0208

080069b4 <__sread>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	f000 f88c 	bl	8006ad8 <_read_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	bfab      	itete	ge
 80069c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069c6:	89a3      	ldrhlt	r3, [r4, #12]
 80069c8:	181b      	addge	r3, r3, r0
 80069ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069ce:	bfac      	ite	ge
 80069d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069d2:	81a3      	strhlt	r3, [r4, #12]
 80069d4:	bd10      	pop	{r4, pc}

080069d6 <__swrite>:
 80069d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	461f      	mov	r7, r3
 80069dc:	898b      	ldrh	r3, [r1, #12]
 80069de:	4605      	mov	r5, r0
 80069e0:	05db      	lsls	r3, r3, #23
 80069e2:	460c      	mov	r4, r1
 80069e4:	4616      	mov	r6, r2
 80069e6:	d505      	bpl.n	80069f4 <__swrite+0x1e>
 80069e8:	2302      	movs	r3, #2
 80069ea:	2200      	movs	r2, #0
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	f000 f860 	bl	8006ab4 <_lseek_r>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	4632      	mov	r2, r6
 80069f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	4628      	mov	r0, r5
 8006a00:	463b      	mov	r3, r7
 8006a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	f000 b877 	b.w	8006afc <_write_r>

08006a0e <__sseek>:
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	460c      	mov	r4, r1
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 f84d 	bl	8006ab4 <_lseek_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	bf15      	itete	ne
 8006a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a2a:	81a3      	strheq	r3, [r4, #12]
 8006a2c:	bf18      	it	ne
 8006a2e:	81a3      	strhne	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__sclose>:
 8006a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a36:	f000 b82d 	b.w	8006a94 <_close_r>
	...

08006a3c <_vsiprintf_r>:
 8006a3c:	b500      	push	{lr}
 8006a3e:	b09b      	sub	sp, #108	@ 0x6c
 8006a40:	9100      	str	r1, [sp, #0]
 8006a42:	9104      	str	r1, [sp, #16]
 8006a44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a48:	9105      	str	r1, [sp, #20]
 8006a4a:	9102      	str	r1, [sp, #8]
 8006a4c:	4905      	ldr	r1, [pc, #20]	@ (8006a64 <_vsiprintf_r+0x28>)
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	4669      	mov	r1, sp
 8006a52:	f002 fb83 	bl	800915c <_svfiprintf_r>
 8006a56:	2200      	movs	r2, #0
 8006a58:	9b00      	ldr	r3, [sp, #0]
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	b01b      	add	sp, #108	@ 0x6c
 8006a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a62:	bf00      	nop
 8006a64:	ffff0208 	.word	0xffff0208

08006a68 <vsiprintf>:
 8006a68:	4613      	mov	r3, r2
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4802      	ldr	r0, [pc, #8]	@ (8006a78 <vsiprintf+0x10>)
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f7ff bfe3 	b.w	8006a3c <_vsiprintf_r>
 8006a76:	bf00      	nop
 8006a78:	20000024 	.word	0x20000024

08006a7c <memset>:
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	4402      	add	r2, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <_localeconv_r>:
 8006a8c:	4800      	ldr	r0, [pc, #0]	@ (8006a90 <_localeconv_r+0x4>)
 8006a8e:	4770      	bx	lr
 8006a90:	20000164 	.word	0x20000164

08006a94 <_close_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	2300      	movs	r3, #0
 8006a98:	4d05      	ldr	r5, [pc, #20]	@ (8006ab0 <_close_r+0x1c>)
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fe fe74 	bl	800578c <_close>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_close_r+0x1a>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_close_r+0x1a>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	2000354c 	.word	0x2000354c

08006ab4 <_lseek_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	2200      	movs	r2, #0
 8006abe:	4d05      	ldr	r5, [pc, #20]	@ (8006ad4 <_lseek_r+0x20>)
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f7fe fe23 	bl	800570e <_lseek>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_lseek_r+0x1e>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_lseek_r+0x1e>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	2000354c 	.word	0x2000354c

08006ad8 <_read_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4d05      	ldr	r5, [pc, #20]	@ (8006af8 <_read_r+0x20>)
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fe fdbb 	bl	8005662 <_read>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_read_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_read_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	2000354c 	.word	0x2000354c

08006afc <_write_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	2200      	movs	r2, #0
 8006b06:	4d05      	ldr	r5, [pc, #20]	@ (8006b1c <_write_r+0x20>)
 8006b08:	602a      	str	r2, [r5, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7fe fe11 	bl	8005732 <_write>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_write_r+0x1e>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_write_r+0x1e>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	2000354c 	.word	0x2000354c

08006b20 <__errno>:
 8006b20:	4b01      	ldr	r3, [pc, #4]	@ (8006b28 <__errno+0x8>)
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000024 	.word	0x20000024

08006b2c <__libc_init_array>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	2600      	movs	r6, #0
 8006b30:	4d0c      	ldr	r5, [pc, #48]	@ (8006b64 <__libc_init_array+0x38>)
 8006b32:	4c0d      	ldr	r4, [pc, #52]	@ (8006b68 <__libc_init_array+0x3c>)
 8006b34:	1b64      	subs	r4, r4, r5
 8006b36:	10a4      	asrs	r4, r4, #2
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	d109      	bne.n	8006b50 <__libc_init_array+0x24>
 8006b3c:	f003 fb72 	bl	800a224 <_init>
 8006b40:	2600      	movs	r6, #0
 8006b42:	4d0a      	ldr	r5, [pc, #40]	@ (8006b6c <__libc_init_array+0x40>)
 8006b44:	4c0a      	ldr	r4, [pc, #40]	@ (8006b70 <__libc_init_array+0x44>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	42a6      	cmp	r6, r4
 8006b4c:	d105      	bne.n	8006b5a <__libc_init_array+0x2e>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b54:	4798      	blx	r3
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7ee      	b.n	8006b38 <__libc_init_array+0xc>
 8006b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5e:	4798      	blx	r3
 8006b60:	3601      	adds	r6, #1
 8006b62:	e7f2      	b.n	8006b4a <__libc_init_array+0x1e>
 8006b64:	0800a7d8 	.word	0x0800a7d8
 8006b68:	0800a7d8 	.word	0x0800a7d8
 8006b6c:	0800a7d8 	.word	0x0800a7d8
 8006b70:	0800a7dc 	.word	0x0800a7dc

08006b74 <__retarget_lock_init_recursive>:
 8006b74:	4770      	bx	lr

08006b76 <__retarget_lock_acquire_recursive>:
 8006b76:	4770      	bx	lr

08006b78 <__retarget_lock_release_recursive>:
 8006b78:	4770      	bx	lr

08006b7a <memchr>:
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	b2c9      	uxtb	r1, r1
 8006b80:	4402      	add	r2, r0
 8006b82:	4293      	cmp	r3, r2
 8006b84:	4618      	mov	r0, r3
 8006b86:	d101      	bne.n	8006b8c <memchr+0x12>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e003      	b.n	8006b94 <memchr+0x1a>
 8006b8c:	7804      	ldrb	r4, [r0, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	428c      	cmp	r4, r1
 8006b92:	d1f6      	bne.n	8006b82 <memchr+0x8>
 8006b94:	bd10      	pop	{r4, pc}

08006b96 <memcpy>:
 8006b96:	440a      	add	r2, r1
 8006b98:	4291      	cmp	r1, r2
 8006b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b9e:	d100      	bne.n	8006ba2 <memcpy+0xc>
 8006ba0:	4770      	bx	lr
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba8:	4291      	cmp	r1, r2
 8006baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bae:	d1f9      	bne.n	8006ba4 <memcpy+0xe>
 8006bb0:	bd10      	pop	{r4, pc}
	...

08006bb4 <nanf>:
 8006bb4:	4800      	ldr	r0, [pc, #0]	@ (8006bb8 <nanf+0x4>)
 8006bb6:	4770      	bx	lr
 8006bb8:	7fc00000 	.word	0x7fc00000

08006bbc <quorem>:
 8006bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc0:	6903      	ldr	r3, [r0, #16]
 8006bc2:	690c      	ldr	r4, [r1, #16]
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	db7e      	blt.n	8006cc8 <quorem+0x10c>
 8006bca:	3c01      	subs	r4, #1
 8006bcc:	00a3      	lsls	r3, r4, #2
 8006bce:	f100 0514 	add.w	r5, r0, #20
 8006bd2:	f101 0814 	add.w	r8, r1, #20
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006be2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006be6:	3301      	adds	r3, #1
 8006be8:	429a      	cmp	r2, r3
 8006bea:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bf2:	d32e      	bcc.n	8006c52 <quorem+0x96>
 8006bf4:	f04f 0a00 	mov.w	sl, #0
 8006bf8:	46c4      	mov	ip, r8
 8006bfa:	46ae      	mov	lr, r5
 8006bfc:	46d3      	mov	fp, sl
 8006bfe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c02:	b298      	uxth	r0, r3
 8006c04:	fb06 a000 	mla	r0, r6, r0, sl
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	0c02      	lsrs	r2, r0, #16
 8006c0c:	fb06 2303 	mla	r3, r6, r3, r2
 8006c10:	f8de 2000 	ldr.w	r2, [lr]
 8006c14:	b280      	uxth	r0, r0
 8006c16:	b292      	uxth	r2, r2
 8006c18:	1a12      	subs	r2, r2, r0
 8006c1a:	445a      	add	r2, fp
 8006c1c:	f8de 0000 	ldr.w	r0, [lr]
 8006c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c34:	45e1      	cmp	r9, ip
 8006c36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c3a:	f84e 2b04 	str.w	r2, [lr], #4
 8006c3e:	d2de      	bcs.n	8006bfe <quorem+0x42>
 8006c40:	9b00      	ldr	r3, [sp, #0]
 8006c42:	58eb      	ldr	r3, [r5, r3]
 8006c44:	b92b      	cbnz	r3, 8006c52 <quorem+0x96>
 8006c46:	9b01      	ldr	r3, [sp, #4]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	429d      	cmp	r5, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	d32f      	bcc.n	8006cb0 <quorem+0xf4>
 8006c50:	613c      	str	r4, [r7, #16]
 8006c52:	4638      	mov	r0, r7
 8006c54:	f001 f9c4 	bl	8007fe0 <__mcmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	db25      	blt.n	8006ca8 <quorem+0xec>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c64:	f8d1 c000 	ldr.w	ip, [r1]
 8006c68:	fa1f fe82 	uxth.w	lr, r2
 8006c6c:	fa1f f38c 	uxth.w	r3, ip
 8006c70:	eba3 030e 	sub.w	r3, r3, lr
 8006c74:	4403      	add	r3, r0
 8006c76:	0c12      	lsrs	r2, r2, #16
 8006c78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c86:	45c1      	cmp	r9, r8
 8006c88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c8c:	f841 3b04 	str.w	r3, [r1], #4
 8006c90:	d2e6      	bcs.n	8006c60 <quorem+0xa4>
 8006c92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9a:	b922      	cbnz	r2, 8006ca6 <quorem+0xea>
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	d30b      	bcc.n	8006cbc <quorem+0x100>
 8006ca4:	613c      	str	r4, [r7, #16]
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	4630      	mov	r0, r6
 8006caa:	b003      	add	sp, #12
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d1cb      	bne.n	8006c50 <quorem+0x94>
 8006cb8:	3c01      	subs	r4, #1
 8006cba:	e7c6      	b.n	8006c4a <quorem+0x8e>
 8006cbc:	6812      	ldr	r2, [r2, #0]
 8006cbe:	3b04      	subs	r3, #4
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d1ef      	bne.n	8006ca4 <quorem+0xe8>
 8006cc4:	3c01      	subs	r4, #1
 8006cc6:	e7ea      	b.n	8006c9e <quorem+0xe2>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	e7ee      	b.n	8006caa <quorem+0xee>
 8006ccc:	0000      	movs	r0, r0
	...

08006cd0 <_dtoa_r>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	69c7      	ldr	r7, [r0, #28]
 8006cda:	b097      	sub	sp, #92	@ 0x5c
 8006cdc:	4683      	mov	fp, r0
 8006cde:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ce2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ce4:	b97f      	cbnz	r7, 8006d06 <_dtoa_r+0x36>
 8006ce6:	2010      	movs	r0, #16
 8006ce8:	f000 fe02 	bl	80078f0 <malloc>
 8006cec:	4602      	mov	r2, r0
 8006cee:	f8cb 001c 	str.w	r0, [fp, #28]
 8006cf2:	b920      	cbnz	r0, 8006cfe <_dtoa_r+0x2e>
 8006cf4:	21ef      	movs	r1, #239	@ 0xef
 8006cf6:	4ba8      	ldr	r3, [pc, #672]	@ (8006f98 <_dtoa_r+0x2c8>)
 8006cf8:	48a8      	ldr	r0, [pc, #672]	@ (8006f9c <_dtoa_r+0x2cc>)
 8006cfa:	f002 fc15 	bl	8009528 <__assert_func>
 8006cfe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d02:	6007      	str	r7, [r0, #0]
 8006d04:	60c7      	str	r7, [r0, #12]
 8006d06:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	b159      	cbz	r1, 8006d26 <_dtoa_r+0x56>
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	2301      	movs	r3, #1
 8006d12:	4093      	lsls	r3, r2
 8006d14:	604a      	str	r2, [r1, #4]
 8006d16:	608b      	str	r3, [r1, #8]
 8006d18:	4658      	mov	r0, fp
 8006d1a:	f000 fedf 	bl	8007adc <_Bfree>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	1e2b      	subs	r3, r5, #0
 8006d28:	bfaf      	iteee	ge
 8006d2a:	2300      	movge	r3, #0
 8006d2c:	2201      	movlt	r2, #1
 8006d2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d32:	9303      	strlt	r3, [sp, #12]
 8006d34:	bfa8      	it	ge
 8006d36:	6033      	strge	r3, [r6, #0]
 8006d38:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d3c:	4b98      	ldr	r3, [pc, #608]	@ (8006fa0 <_dtoa_r+0x2d0>)
 8006d3e:	bfb8      	it	lt
 8006d40:	6032      	strlt	r2, [r6, #0]
 8006d42:	ea33 0308 	bics.w	r3, r3, r8
 8006d46:	d112      	bne.n	8006d6e <_dtoa_r+0x9e>
 8006d48:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d54:	4323      	orrs	r3, r4
 8006d56:	f000 8550 	beq.w	80077fa <_dtoa_r+0xb2a>
 8006d5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d5c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006fa4 <_dtoa_r+0x2d4>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8552 	beq.w	800780a <_dtoa_r+0xb3a>
 8006d66:	f10a 0303 	add.w	r3, sl, #3
 8006d6a:	f000 bd4c 	b.w	8007806 <_dtoa_r+0xb36>
 8006d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f7f9 fe13 	bl	80009a8 <__aeabi_dcmpeq>
 8006d82:	4607      	mov	r7, r0
 8006d84:	b158      	cbz	r0, 8006d9e <_dtoa_r+0xce>
 8006d86:	2301      	movs	r3, #1
 8006d88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d8e:	b113      	cbz	r3, 8006d96 <_dtoa_r+0xc6>
 8006d90:	4b85      	ldr	r3, [pc, #532]	@ (8006fa8 <_dtoa_r+0x2d8>)
 8006d92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006fac <_dtoa_r+0x2dc>
 8006d9a:	f000 bd36 	b.w	800780a <_dtoa_r+0xb3a>
 8006d9e:	ab14      	add	r3, sp, #80	@ 0x50
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	ab15      	add	r3, sp, #84	@ 0x54
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	4658      	mov	r0, fp
 8006da8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006dac:	f001 fa30 	bl	8008210 <__d2b>
 8006db0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006db4:	4681      	mov	r9, r0
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d077      	beq.n	8006eaa <_dtoa_r+0x1da>
 8006dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dc0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006dcc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006dd0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4b76      	ldr	r3, [pc, #472]	@ (8006fb0 <_dtoa_r+0x2e0>)
 8006dd8:	f7f9 f9c6 	bl	8000168 <__aeabi_dsub>
 8006ddc:	a368      	add	r3, pc, #416	@ (adr r3, 8006f80 <_dtoa_r+0x2b0>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fb79 	bl	80004d8 <__aeabi_dmul>
 8006de6:	a368      	add	r3, pc, #416	@ (adr r3, 8006f88 <_dtoa_r+0x2b8>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 f9be 	bl	800016c <__adddf3>
 8006df0:	4604      	mov	r4, r0
 8006df2:	4630      	mov	r0, r6
 8006df4:	460d      	mov	r5, r1
 8006df6:	f7f9 fb05 	bl	8000404 <__aeabi_i2d>
 8006dfa:	a365      	add	r3, pc, #404	@ (adr r3, 8006f90 <_dtoa_r+0x2c0>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fb6a 	bl	80004d8 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7f9 f9ae 	bl	800016c <__adddf3>
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	f7f9 fe10 	bl	8000a38 <__aeabi_d2iz>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fdcb 	bl	80009bc <__aeabi_dcmplt>
 8006e26:	b140      	cbz	r0, 8006e3a <_dtoa_r+0x16a>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7f9 faeb 	bl	8000404 <__aeabi_i2d>
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	f7f9 fdb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006e36:	b900      	cbnz	r0, 8006e3a <_dtoa_r+0x16a>
 8006e38:	3f01      	subs	r7, #1
 8006e3a:	2f16      	cmp	r7, #22
 8006e3c:	d853      	bhi.n	8006ee6 <_dtoa_r+0x216>
 8006e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e42:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb4 <_dtoa_r+0x2e4>)
 8006e44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f7f9 fdb6 	bl	80009bc <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d04a      	beq.n	8006eea <_dtoa_r+0x21a>
 8006e54:	2300      	movs	r3, #0
 8006e56:	3f01      	subs	r7, #1
 8006e58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e5c:	1b9b      	subs	r3, r3, r6
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	bf46      	itte	mi
 8006e62:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e66:	2300      	movmi	r3, #0
 8006e68:	f04f 0800 	movpl.w	r8, #0
 8006e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e6e:	bf48      	it	mi
 8006e70:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	db3b      	blt.n	8006eee <_dtoa_r+0x21e>
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	970e      	str	r7, [sp, #56]	@ 0x38
 8006e7a:	443b      	add	r3, r7
 8006e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7e:	2300      	movs	r3, #0
 8006e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	d866      	bhi.n	8006f56 <_dtoa_r+0x286>
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	bfc4      	itt	gt
 8006e8c:	3b04      	subgt	r3, #4
 8006e8e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006e90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e92:	bfc8      	it	gt
 8006e94:	2400      	movgt	r4, #0
 8006e96:	f1a3 0302 	sub.w	r3, r3, #2
 8006e9a:	bfd8      	it	le
 8006e9c:	2401      	movle	r4, #1
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d864      	bhi.n	8006f6c <_dtoa_r+0x29c>
 8006ea2:	e8df f003 	tbb	[pc, r3]
 8006ea6:	382b      	.short	0x382b
 8006ea8:	5636      	.short	0x5636
 8006eaa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006eae:	441e      	add	r6, r3
 8006eb0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	bfc1      	itttt	gt
 8006eb8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ebc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ec0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ec4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ec8:	bfd6      	itet	le
 8006eca:	f1c3 0320 	rsble	r3, r3, #32
 8006ece:	ea48 0003 	orrgt.w	r0, r8, r3
 8006ed2:	fa04 f003 	lslle.w	r0, r4, r3
 8006ed6:	f7f9 fa85 	bl	80003e4 <__aeabi_ui2d>
 8006eda:	2201      	movs	r2, #1
 8006edc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ee0:	3e01      	subs	r6, #1
 8006ee2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ee4:	e775      	b.n	8006dd2 <_dtoa_r+0x102>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e7b6      	b.n	8006e58 <_dtoa_r+0x188>
 8006eea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006eec:	e7b5      	b.n	8006e5a <_dtoa_r+0x18a>
 8006eee:	427b      	negs	r3, r7
 8006ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	eba8 0807 	sub.w	r8, r8, r7
 8006ef8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006efa:	e7c2      	b.n	8006e82 <_dtoa_r+0x1b2>
 8006efc:	2300      	movs	r3, #0
 8006efe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	dc35      	bgt.n	8006f72 <_dtoa_r+0x2a2>
 8006f06:	2301      	movs	r3, #1
 8006f08:	461a      	mov	r2, r3
 8006f0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006f10:	e00b      	b.n	8006f2a <_dtoa_r+0x25a>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e7f3      	b.n	8006efe <_dtoa_r+0x22e>
 8006f16:	2300      	movs	r3, #0
 8006f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f1c:	18fb      	adds	r3, r7, r3
 8006f1e:	9308      	str	r3, [sp, #32]
 8006f20:	3301      	adds	r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	9307      	str	r3, [sp, #28]
 8006f26:	bfb8      	it	lt
 8006f28:	2301      	movlt	r3, #1
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f32:	f102 0514 	add.w	r5, r2, #20
 8006f36:	429d      	cmp	r5, r3
 8006f38:	d91f      	bls.n	8006f7a <_dtoa_r+0x2aa>
 8006f3a:	6041      	str	r1, [r0, #4]
 8006f3c:	4658      	mov	r0, fp
 8006f3e:	f000 fd8d 	bl	8007a5c <_Balloc>
 8006f42:	4682      	mov	sl, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d139      	bne.n	8006fbc <_dtoa_r+0x2ec>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <_dtoa_r+0x2e8>)
 8006f50:	e6d2      	b.n	8006cf8 <_dtoa_r+0x28>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7e0      	b.n	8006f18 <_dtoa_r+0x248>
 8006f56:	2401      	movs	r4, #1
 8006f58:	2300      	movs	r3, #0
 8006f5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f62:	2200      	movs	r2, #0
 8006f64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f68:	2312      	movs	r3, #18
 8006f6a:	e7d0      	b.n	8006f0e <_dtoa_r+0x23e>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f70:	e7f5      	b.n	8006f5e <_dtoa_r+0x28e>
 8006f72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f78:	e7d7      	b.n	8006f2a <_dtoa_r+0x25a>
 8006f7a:	3101      	adds	r1, #1
 8006f7c:	0052      	lsls	r2, r2, #1
 8006f7e:	e7d8      	b.n	8006f32 <_dtoa_r+0x262>
 8006f80:	636f4361 	.word	0x636f4361
 8006f84:	3fd287a7 	.word	0x3fd287a7
 8006f88:	8b60c8b3 	.word	0x8b60c8b3
 8006f8c:	3fc68a28 	.word	0x3fc68a28
 8006f90:	509f79fb 	.word	0x509f79fb
 8006f94:	3fd34413 	.word	0x3fd34413
 8006f98:	0800a3ea 	.word	0x0800a3ea
 8006f9c:	0800a401 	.word	0x0800a401
 8006fa0:	7ff00000 	.word	0x7ff00000
 8006fa4:	0800a3e6 	.word	0x0800a3e6
 8006fa8:	0800a3b5 	.word	0x0800a3b5
 8006fac:	0800a3b4 	.word	0x0800a3b4
 8006fb0:	3ff80000 	.word	0x3ff80000
 8006fb4:	0800a4f8 	.word	0x0800a4f8
 8006fb8:	0800a459 	.word	0x0800a459
 8006fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fc0:	6018      	str	r0, [r3, #0]
 8006fc2:	9b07      	ldr	r3, [sp, #28]
 8006fc4:	2b0e      	cmp	r3, #14
 8006fc6:	f200 80a4 	bhi.w	8007112 <_dtoa_r+0x442>
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	f000 80a1 	beq.w	8007112 <_dtoa_r+0x442>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	dd33      	ble.n	800703c <_dtoa_r+0x36c>
 8006fd4:	4b86      	ldr	r3, [pc, #536]	@ (80071f0 <_dtoa_r+0x520>)
 8006fd6:	f007 020f 	and.w	r2, r7, #15
 8006fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fde:	05f8      	lsls	r0, r7, #23
 8006fe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fe4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fec:	d516      	bpl.n	800701c <_dtoa_r+0x34c>
 8006fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ff2:	4b80      	ldr	r3, [pc, #512]	@ (80071f4 <_dtoa_r+0x524>)
 8006ff4:	2603      	movs	r6, #3
 8006ff6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ffa:	f7f9 fb97 	bl	800072c <__aeabi_ddiv>
 8006ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007002:	f004 040f 	and.w	r4, r4, #15
 8007006:	4d7b      	ldr	r5, [pc, #492]	@ (80071f4 <_dtoa_r+0x524>)
 8007008:	b954      	cbnz	r4, 8007020 <_dtoa_r+0x350>
 800700a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800700e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007012:	f7f9 fb8b 	bl	800072c <__aeabi_ddiv>
 8007016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701a:	e028      	b.n	800706e <_dtoa_r+0x39e>
 800701c:	2602      	movs	r6, #2
 800701e:	e7f2      	b.n	8007006 <_dtoa_r+0x336>
 8007020:	07e1      	lsls	r1, r4, #31
 8007022:	d508      	bpl.n	8007036 <_dtoa_r+0x366>
 8007024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007028:	e9d5 2300 	ldrd	r2, r3, [r5]
 800702c:	f7f9 fa54 	bl	80004d8 <__aeabi_dmul>
 8007030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007034:	3601      	adds	r6, #1
 8007036:	1064      	asrs	r4, r4, #1
 8007038:	3508      	adds	r5, #8
 800703a:	e7e5      	b.n	8007008 <_dtoa_r+0x338>
 800703c:	f000 80d2 	beq.w	80071e4 <_dtoa_r+0x514>
 8007040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007044:	427c      	negs	r4, r7
 8007046:	4b6a      	ldr	r3, [pc, #424]	@ (80071f0 <_dtoa_r+0x520>)
 8007048:	f004 020f 	and.w	r2, r4, #15
 800704c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f7f9 fa40 	bl	80004d8 <__aeabi_dmul>
 8007058:	2602      	movs	r6, #2
 800705a:	2300      	movs	r3, #0
 800705c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007060:	4d64      	ldr	r5, [pc, #400]	@ (80071f4 <_dtoa_r+0x524>)
 8007062:	1124      	asrs	r4, r4, #4
 8007064:	2c00      	cmp	r4, #0
 8007066:	f040 80b2 	bne.w	80071ce <_dtoa_r+0x4fe>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1d3      	bne.n	8007016 <_dtoa_r+0x346>
 800706e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80b7 	beq.w	80071e8 <_dtoa_r+0x518>
 800707a:	2200      	movs	r2, #0
 800707c:	4620      	mov	r0, r4
 800707e:	4629      	mov	r1, r5
 8007080:	4b5d      	ldr	r3, [pc, #372]	@ (80071f8 <_dtoa_r+0x528>)
 8007082:	f7f9 fc9b 	bl	80009bc <__aeabi_dcmplt>
 8007086:	2800      	cmp	r0, #0
 8007088:	f000 80ae 	beq.w	80071e8 <_dtoa_r+0x518>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80aa 	beq.w	80071e8 <_dtoa_r+0x518>
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	dd37      	ble.n	800710a <_dtoa_r+0x43a>
 800709a:	1e7b      	subs	r3, r7, #1
 800709c:	4620      	mov	r0, r4
 800709e:	9304      	str	r3, [sp, #16]
 80070a0:	2200      	movs	r2, #0
 80070a2:	4629      	mov	r1, r5
 80070a4:	4b55      	ldr	r3, [pc, #340]	@ (80071fc <_dtoa_r+0x52c>)
 80070a6:	f7f9 fa17 	bl	80004d8 <__aeabi_dmul>
 80070aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ae:	9c08      	ldr	r4, [sp, #32]
 80070b0:	3601      	adds	r6, #1
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7f9 f9a6 	bl	8000404 <__aeabi_i2d>
 80070b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070bc:	f7f9 fa0c 	bl	80004d8 <__aeabi_dmul>
 80070c0:	2200      	movs	r2, #0
 80070c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007200 <_dtoa_r+0x530>)
 80070c4:	f7f9 f852 	bl	800016c <__adddf3>
 80070c8:	4605      	mov	r5, r0
 80070ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	f040 809a 	bne.w	8007208 <_dtoa_r+0x538>
 80070d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	4b4a      	ldr	r3, [pc, #296]	@ (8007204 <_dtoa_r+0x534>)
 80070dc:	f7f9 f844 	bl	8000168 <__aeabi_dsub>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070e8:	462a      	mov	r2, r5
 80070ea:	4633      	mov	r3, r6
 80070ec:	f7f9 fc84 	bl	80009f8 <__aeabi_dcmpgt>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	f040 828e 	bne.w	8007612 <_dtoa_r+0x942>
 80070f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070fa:	462a      	mov	r2, r5
 80070fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007100:	f7f9 fc5c 	bl	80009bc <__aeabi_dcmplt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 8127 	bne.w	8007358 <_dtoa_r+0x688>
 800710a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800710e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007112:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007114:	2b00      	cmp	r3, #0
 8007116:	f2c0 8163 	blt.w	80073e0 <_dtoa_r+0x710>
 800711a:	2f0e      	cmp	r7, #14
 800711c:	f300 8160 	bgt.w	80073e0 <_dtoa_r+0x710>
 8007120:	4b33      	ldr	r3, [pc, #204]	@ (80071f0 <_dtoa_r+0x520>)
 8007122:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007126:	e9d3 3400 	ldrd	r3, r4, [r3]
 800712a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800712e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007130:	2b00      	cmp	r3, #0
 8007132:	da03      	bge.n	800713c <_dtoa_r+0x46c>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f340 8100 	ble.w	800733c <_dtoa_r+0x66c>
 800713c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007140:	4656      	mov	r6, sl
 8007142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 faef 	bl	800072c <__aeabi_ddiv>
 800714e:	f7f9 fc73 	bl	8000a38 <__aeabi_d2iz>
 8007152:	4680      	mov	r8, r0
 8007154:	f7f9 f956 	bl	8000404 <__aeabi_i2d>
 8007158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715c:	f7f9 f9bc 	bl	80004d8 <__aeabi_dmul>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f8 fffe 	bl	8000168 <__aeabi_dsub>
 800716c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007170:	9d07      	ldr	r5, [sp, #28]
 8007172:	f806 4b01 	strb.w	r4, [r6], #1
 8007176:	eba6 040a 	sub.w	r4, r6, sl
 800717a:	42a5      	cmp	r5, r4
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	f040 8116 	bne.w	80073b0 <_dtoa_r+0x6e0>
 8007184:	f7f8 fff2 	bl	800016c <__adddf3>
 8007188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	f7f9 fc32 	bl	80009f8 <__aeabi_dcmpgt>
 8007194:	2800      	cmp	r0, #0
 8007196:	f040 80f8 	bne.w	800738a <_dtoa_r+0x6ba>
 800719a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 fc01 	bl	80009a8 <__aeabi_dcmpeq>
 80071a6:	b118      	cbz	r0, 80071b0 <_dtoa_r+0x4e0>
 80071a8:	f018 0f01 	tst.w	r8, #1
 80071ac:	f040 80ed 	bne.w	800738a <_dtoa_r+0x6ba>
 80071b0:	4649      	mov	r1, r9
 80071b2:	4658      	mov	r0, fp
 80071b4:	f000 fc92 	bl	8007adc <_Bfree>
 80071b8:	2300      	movs	r3, #0
 80071ba:	7033      	strb	r3, [r6, #0]
 80071bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80071be:	3701      	adds	r7, #1
 80071c0:	601f      	str	r7, [r3, #0]
 80071c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8320 	beq.w	800780a <_dtoa_r+0xb3a>
 80071ca:	601e      	str	r6, [r3, #0]
 80071cc:	e31d      	b.n	800780a <_dtoa_r+0xb3a>
 80071ce:	07e2      	lsls	r2, r4, #31
 80071d0:	d505      	bpl.n	80071de <_dtoa_r+0x50e>
 80071d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071d6:	f7f9 f97f 	bl	80004d8 <__aeabi_dmul>
 80071da:	2301      	movs	r3, #1
 80071dc:	3601      	adds	r6, #1
 80071de:	1064      	asrs	r4, r4, #1
 80071e0:	3508      	adds	r5, #8
 80071e2:	e73f      	b.n	8007064 <_dtoa_r+0x394>
 80071e4:	2602      	movs	r6, #2
 80071e6:	e742      	b.n	800706e <_dtoa_r+0x39e>
 80071e8:	9c07      	ldr	r4, [sp, #28]
 80071ea:	9704      	str	r7, [sp, #16]
 80071ec:	e761      	b.n	80070b2 <_dtoa_r+0x3e2>
 80071ee:	bf00      	nop
 80071f0:	0800a4f8 	.word	0x0800a4f8
 80071f4:	0800a4d0 	.word	0x0800a4d0
 80071f8:	3ff00000 	.word	0x3ff00000
 80071fc:	40240000 	.word	0x40240000
 8007200:	401c0000 	.word	0x401c0000
 8007204:	40140000 	.word	0x40140000
 8007208:	4b70      	ldr	r3, [pc, #448]	@ (80073cc <_dtoa_r+0x6fc>)
 800720a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800720c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007214:	4454      	add	r4, sl
 8007216:	2900      	cmp	r1, #0
 8007218:	d045      	beq.n	80072a6 <_dtoa_r+0x5d6>
 800721a:	2000      	movs	r0, #0
 800721c:	496c      	ldr	r1, [pc, #432]	@ (80073d0 <_dtoa_r+0x700>)
 800721e:	f7f9 fa85 	bl	800072c <__aeabi_ddiv>
 8007222:	4633      	mov	r3, r6
 8007224:	462a      	mov	r2, r5
 8007226:	f7f8 ff9f 	bl	8000168 <__aeabi_dsub>
 800722a:	4656      	mov	r6, sl
 800722c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007234:	f7f9 fc00 	bl	8000a38 <__aeabi_d2iz>
 8007238:	4605      	mov	r5, r0
 800723a:	f7f9 f8e3 	bl	8000404 <__aeabi_i2d>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007246:	f7f8 ff8f 	bl	8000168 <__aeabi_dsub>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	3530      	adds	r5, #48	@ 0x30
 8007250:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007254:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007258:	f806 5b01 	strb.w	r5, [r6], #1
 800725c:	f7f9 fbae 	bl	80009bc <__aeabi_dcmplt>
 8007260:	2800      	cmp	r0, #0
 8007262:	d163      	bne.n	800732c <_dtoa_r+0x65c>
 8007264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007268:	2000      	movs	r0, #0
 800726a:	495a      	ldr	r1, [pc, #360]	@ (80073d4 <_dtoa_r+0x704>)
 800726c:	f7f8 ff7c 	bl	8000168 <__aeabi_dsub>
 8007270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007274:	f7f9 fba2 	bl	80009bc <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f040 8087 	bne.w	800738c <_dtoa_r+0x6bc>
 800727e:	42a6      	cmp	r6, r4
 8007280:	f43f af43 	beq.w	800710a <_dtoa_r+0x43a>
 8007284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007288:	2200      	movs	r2, #0
 800728a:	4b53      	ldr	r3, [pc, #332]	@ (80073d8 <_dtoa_r+0x708>)
 800728c:	f7f9 f924 	bl	80004d8 <__aeabi_dmul>
 8007290:	2200      	movs	r2, #0
 8007292:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729a:	4b4f      	ldr	r3, [pc, #316]	@ (80073d8 <_dtoa_r+0x708>)
 800729c:	f7f9 f91c 	bl	80004d8 <__aeabi_dmul>
 80072a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a4:	e7c4      	b.n	8007230 <_dtoa_r+0x560>
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7f9 f915 	bl	80004d8 <__aeabi_dmul>
 80072ae:	4656      	mov	r6, sl
 80072b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80072b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ba:	f7f9 fbbd 	bl	8000a38 <__aeabi_d2iz>
 80072be:	4605      	mov	r5, r0
 80072c0:	f7f9 f8a0 	bl	8000404 <__aeabi_i2d>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072cc:	f7f8 ff4c 	bl	8000168 <__aeabi_dsub>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	3530      	adds	r5, #48	@ 0x30
 80072d6:	f806 5b01 	strb.w	r5, [r6], #1
 80072da:	42a6      	cmp	r6, r4
 80072dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	d124      	bne.n	8007330 <_dtoa_r+0x660>
 80072e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072ea:	4b39      	ldr	r3, [pc, #228]	@ (80073d0 <_dtoa_r+0x700>)
 80072ec:	f7f8 ff3e 	bl	800016c <__adddf3>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f8:	f7f9 fb7e 	bl	80009f8 <__aeabi_dcmpgt>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d145      	bne.n	800738c <_dtoa_r+0x6bc>
 8007300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007304:	2000      	movs	r0, #0
 8007306:	4932      	ldr	r1, [pc, #200]	@ (80073d0 <_dtoa_r+0x700>)
 8007308:	f7f8 ff2e 	bl	8000168 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007314:	f7f9 fb52 	bl	80009bc <__aeabi_dcmplt>
 8007318:	2800      	cmp	r0, #0
 800731a:	f43f aef6 	beq.w	800710a <_dtoa_r+0x43a>
 800731e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007320:	1e73      	subs	r3, r6, #1
 8007322:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007324:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007328:	2b30      	cmp	r3, #48	@ 0x30
 800732a:	d0f8      	beq.n	800731e <_dtoa_r+0x64e>
 800732c:	9f04      	ldr	r7, [sp, #16]
 800732e:	e73f      	b.n	80071b0 <_dtoa_r+0x4e0>
 8007330:	4b29      	ldr	r3, [pc, #164]	@ (80073d8 <_dtoa_r+0x708>)
 8007332:	f7f9 f8d1 	bl	80004d8 <__aeabi_dmul>
 8007336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800733a:	e7bc      	b.n	80072b6 <_dtoa_r+0x5e6>
 800733c:	d10c      	bne.n	8007358 <_dtoa_r+0x688>
 800733e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007342:	2200      	movs	r2, #0
 8007344:	4b25      	ldr	r3, [pc, #148]	@ (80073dc <_dtoa_r+0x70c>)
 8007346:	f7f9 f8c7 	bl	80004d8 <__aeabi_dmul>
 800734a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800734e:	f7f9 fb49 	bl	80009e4 <__aeabi_dcmpge>
 8007352:	2800      	cmp	r0, #0
 8007354:	f000 815b 	beq.w	800760e <_dtoa_r+0x93e>
 8007358:	2400      	movs	r4, #0
 800735a:	4625      	mov	r5, r4
 800735c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800735e:	4656      	mov	r6, sl
 8007360:	43db      	mvns	r3, r3
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	2700      	movs	r7, #0
 8007366:	4621      	mov	r1, r4
 8007368:	4658      	mov	r0, fp
 800736a:	f000 fbb7 	bl	8007adc <_Bfree>
 800736e:	2d00      	cmp	r5, #0
 8007370:	d0dc      	beq.n	800732c <_dtoa_r+0x65c>
 8007372:	b12f      	cbz	r7, 8007380 <_dtoa_r+0x6b0>
 8007374:	42af      	cmp	r7, r5
 8007376:	d003      	beq.n	8007380 <_dtoa_r+0x6b0>
 8007378:	4639      	mov	r1, r7
 800737a:	4658      	mov	r0, fp
 800737c:	f000 fbae 	bl	8007adc <_Bfree>
 8007380:	4629      	mov	r1, r5
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fbaa 	bl	8007adc <_Bfree>
 8007388:	e7d0      	b.n	800732c <_dtoa_r+0x65c>
 800738a:	9704      	str	r7, [sp, #16]
 800738c:	4633      	mov	r3, r6
 800738e:	461e      	mov	r6, r3
 8007390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007394:	2a39      	cmp	r2, #57	@ 0x39
 8007396:	d107      	bne.n	80073a8 <_dtoa_r+0x6d8>
 8007398:	459a      	cmp	sl, r3
 800739a:	d1f8      	bne.n	800738e <_dtoa_r+0x6be>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	3201      	adds	r2, #1
 80073a0:	9204      	str	r2, [sp, #16]
 80073a2:	2230      	movs	r2, #48	@ 0x30
 80073a4:	f88a 2000 	strb.w	r2, [sl]
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	3201      	adds	r2, #1
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e7bd      	b.n	800732c <_dtoa_r+0x65c>
 80073b0:	2200      	movs	r2, #0
 80073b2:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <_dtoa_r+0x708>)
 80073b4:	f7f9 f890 	bl	80004d8 <__aeabi_dmul>
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	f7f9 faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f43f aebc 	beq.w	8007142 <_dtoa_r+0x472>
 80073ca:	e6f1      	b.n	80071b0 <_dtoa_r+0x4e0>
 80073cc:	0800a4f8 	.word	0x0800a4f8
 80073d0:	3fe00000 	.word	0x3fe00000
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	40240000 	.word	0x40240000
 80073dc:	40140000 	.word	0x40140000
 80073e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073e2:	2a00      	cmp	r2, #0
 80073e4:	f000 80db 	beq.w	800759e <_dtoa_r+0x8ce>
 80073e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073ea:	2a01      	cmp	r2, #1
 80073ec:	f300 80bf 	bgt.w	800756e <_dtoa_r+0x89e>
 80073f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	f000 80b7 	beq.w	8007566 <_dtoa_r+0x896>
 80073f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073fc:	4646      	mov	r6, r8
 80073fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007400:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007402:	2101      	movs	r1, #1
 8007404:	441a      	add	r2, r3
 8007406:	4658      	mov	r0, fp
 8007408:	4498      	add	r8, r3
 800740a:	9209      	str	r2, [sp, #36]	@ 0x24
 800740c:	f000 fc64 	bl	8007cd8 <__i2b>
 8007410:	4605      	mov	r5, r0
 8007412:	b15e      	cbz	r6, 800742c <_dtoa_r+0x75c>
 8007414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	dd08      	ble.n	800742c <_dtoa_r+0x75c>
 800741a:	42b3      	cmp	r3, r6
 800741c:	bfa8      	it	ge
 800741e:	4633      	movge	r3, r6
 8007420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007422:	eba8 0803 	sub.w	r8, r8, r3
 8007426:	1af6      	subs	r6, r6, r3
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	9309      	str	r3, [sp, #36]	@ 0x24
 800742c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800742e:	b1f3      	cbz	r3, 800746e <_dtoa_r+0x79e>
 8007430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 80b7 	beq.w	80075a6 <_dtoa_r+0x8d6>
 8007438:	b18c      	cbz	r4, 800745e <_dtoa_r+0x78e>
 800743a:	4629      	mov	r1, r5
 800743c:	4622      	mov	r2, r4
 800743e:	4658      	mov	r0, fp
 8007440:	f000 fd08 	bl	8007e54 <__pow5mult>
 8007444:	464a      	mov	r2, r9
 8007446:	4601      	mov	r1, r0
 8007448:	4605      	mov	r5, r0
 800744a:	4658      	mov	r0, fp
 800744c:	f000 fc5a 	bl	8007d04 <__multiply>
 8007450:	4649      	mov	r1, r9
 8007452:	9004      	str	r0, [sp, #16]
 8007454:	4658      	mov	r0, fp
 8007456:	f000 fb41 	bl	8007adc <_Bfree>
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	4699      	mov	r9, r3
 800745e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007460:	1b1a      	subs	r2, r3, r4
 8007462:	d004      	beq.n	800746e <_dtoa_r+0x79e>
 8007464:	4649      	mov	r1, r9
 8007466:	4658      	mov	r0, fp
 8007468:	f000 fcf4 	bl	8007e54 <__pow5mult>
 800746c:	4681      	mov	r9, r0
 800746e:	2101      	movs	r1, #1
 8007470:	4658      	mov	r0, fp
 8007472:	f000 fc31 	bl	8007cd8 <__i2b>
 8007476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007478:	4604      	mov	r4, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 81c9 	beq.w	8007812 <_dtoa_r+0xb42>
 8007480:	461a      	mov	r2, r3
 8007482:	4601      	mov	r1, r0
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fce5 	bl	8007e54 <__pow5mult>
 800748a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800748c:	4604      	mov	r4, r0
 800748e:	2b01      	cmp	r3, #1
 8007490:	f300 808f 	bgt.w	80075b2 <_dtoa_r+0x8e2>
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 8087 	bne.w	80075aa <_dtoa_r+0x8da>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f040 8083 	bne.w	80075ae <_dtoa_r+0x8de>
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074ae:	0d1b      	lsrs	r3, r3, #20
 80074b0:	051b      	lsls	r3, r3, #20
 80074b2:	b12b      	cbz	r3, 80074c0 <_dtoa_r+0x7f0>
 80074b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b6:	f108 0801 	add.w	r8, r8, #1
 80074ba:	3301      	adds	r3, #1
 80074bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074be:	2301      	movs	r3, #1
 80074c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 81aa 	beq.w	800781e <_dtoa_r+0xb4e>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074d0:	6918      	ldr	r0, [r3, #16]
 80074d2:	f000 fbb5 	bl	8007c40 <__hi0bits>
 80074d6:	f1c0 0020 	rsb	r0, r0, #32
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	4418      	add	r0, r3
 80074de:	f010 001f 	ands.w	r0, r0, #31
 80074e2:	d071      	beq.n	80075c8 <_dtoa_r+0x8f8>
 80074e4:	f1c0 0320 	rsb	r3, r0, #32
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	dd65      	ble.n	80075b8 <_dtoa_r+0x8e8>
 80074ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ee:	f1c0 001c 	rsb	r0, r0, #28
 80074f2:	4403      	add	r3, r0
 80074f4:	4480      	add	r8, r0
 80074f6:	4406      	add	r6, r0
 80074f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	dd05      	ble.n	800750c <_dtoa_r+0x83c>
 8007500:	4649      	mov	r1, r9
 8007502:	4642      	mov	r2, r8
 8007504:	4658      	mov	r0, fp
 8007506:	f000 fcff 	bl	8007f08 <__lshift>
 800750a:	4681      	mov	r9, r0
 800750c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd05      	ble.n	800751e <_dtoa_r+0x84e>
 8007512:	4621      	mov	r1, r4
 8007514:	461a      	mov	r2, r3
 8007516:	4658      	mov	r0, fp
 8007518:	f000 fcf6 	bl	8007f08 <__lshift>
 800751c:	4604      	mov	r4, r0
 800751e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d053      	beq.n	80075cc <_dtoa_r+0x8fc>
 8007524:	4621      	mov	r1, r4
 8007526:	4648      	mov	r0, r9
 8007528:	f000 fd5a 	bl	8007fe0 <__mcmp>
 800752c:	2800      	cmp	r0, #0
 800752e:	da4d      	bge.n	80075cc <_dtoa_r+0x8fc>
 8007530:	1e7b      	subs	r3, r7, #1
 8007532:	4649      	mov	r1, r9
 8007534:	9304      	str	r3, [sp, #16]
 8007536:	220a      	movs	r2, #10
 8007538:	2300      	movs	r3, #0
 800753a:	4658      	mov	r0, fp
 800753c:	f000 faf0 	bl	8007b20 <__multadd>
 8007540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007542:	4681      	mov	r9, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 816c 	beq.w	8007822 <_dtoa_r+0xb52>
 800754a:	2300      	movs	r3, #0
 800754c:	4629      	mov	r1, r5
 800754e:	220a      	movs	r2, #10
 8007550:	4658      	mov	r0, fp
 8007552:	f000 fae5 	bl	8007b20 <__multadd>
 8007556:	9b08      	ldr	r3, [sp, #32]
 8007558:	4605      	mov	r5, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	dc61      	bgt.n	8007622 <_dtoa_r+0x952>
 800755e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007560:	2b02      	cmp	r3, #2
 8007562:	dc3b      	bgt.n	80075dc <_dtoa_r+0x90c>
 8007564:	e05d      	b.n	8007622 <_dtoa_r+0x952>
 8007566:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007568:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800756c:	e746      	b.n	80073fc <_dtoa_r+0x72c>
 800756e:	9b07      	ldr	r3, [sp, #28]
 8007570:	1e5c      	subs	r4, r3, #1
 8007572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007574:	42a3      	cmp	r3, r4
 8007576:	bfbf      	itttt	lt
 8007578:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800757a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800757c:	1ae3      	sublt	r3, r4, r3
 800757e:	18d2      	addlt	r2, r2, r3
 8007580:	bfa8      	it	ge
 8007582:	1b1c      	subge	r4, r3, r4
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	bfbe      	ittt	lt
 8007588:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800758a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800758c:	2400      	movlt	r4, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb5      	itete	lt
 8007592:	eba8 0603 	sublt.w	r6, r8, r3
 8007596:	4646      	movge	r6, r8
 8007598:	2300      	movlt	r3, #0
 800759a:	9b07      	ldrge	r3, [sp, #28]
 800759c:	e730      	b.n	8007400 <_dtoa_r+0x730>
 800759e:	4646      	mov	r6, r8
 80075a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075a4:	e735      	b.n	8007412 <_dtoa_r+0x742>
 80075a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a8:	e75c      	b.n	8007464 <_dtoa_r+0x794>
 80075aa:	2300      	movs	r3, #0
 80075ac:	e788      	b.n	80074c0 <_dtoa_r+0x7f0>
 80075ae:	9b02      	ldr	r3, [sp, #8]
 80075b0:	e786      	b.n	80074c0 <_dtoa_r+0x7f0>
 80075b2:	2300      	movs	r3, #0
 80075b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b6:	e788      	b.n	80074ca <_dtoa_r+0x7fa>
 80075b8:	d09f      	beq.n	80074fa <_dtoa_r+0x82a>
 80075ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075bc:	331c      	adds	r3, #28
 80075be:	441a      	add	r2, r3
 80075c0:	4498      	add	r8, r3
 80075c2:	441e      	add	r6, r3
 80075c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80075c6:	e798      	b.n	80074fa <_dtoa_r+0x82a>
 80075c8:	4603      	mov	r3, r0
 80075ca:	e7f6      	b.n	80075ba <_dtoa_r+0x8ea>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	9704      	str	r7, [sp, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc20      	bgt.n	8007616 <_dtoa_r+0x946>
 80075d4:	9308      	str	r3, [sp, #32]
 80075d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075d8:	2b02      	cmp	r3, #2
 80075da:	dd1e      	ble.n	800761a <_dtoa_r+0x94a>
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f47f aebc 	bne.w	800735c <_dtoa_r+0x68c>
 80075e4:	4621      	mov	r1, r4
 80075e6:	2205      	movs	r2, #5
 80075e8:	4658      	mov	r0, fp
 80075ea:	f000 fa99 	bl	8007b20 <__multadd>
 80075ee:	4601      	mov	r1, r0
 80075f0:	4604      	mov	r4, r0
 80075f2:	4648      	mov	r0, r9
 80075f4:	f000 fcf4 	bl	8007fe0 <__mcmp>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f77f aeaf 	ble.w	800735c <_dtoa_r+0x68c>
 80075fe:	2331      	movs	r3, #49	@ 0x31
 8007600:	4656      	mov	r6, sl
 8007602:	f806 3b01 	strb.w	r3, [r6], #1
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	3301      	adds	r3, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	e6aa      	b.n	8007364 <_dtoa_r+0x694>
 800760e:	9c07      	ldr	r4, [sp, #28]
 8007610:	9704      	str	r7, [sp, #16]
 8007612:	4625      	mov	r5, r4
 8007614:	e7f3      	b.n	80075fe <_dtoa_r+0x92e>
 8007616:	9b07      	ldr	r3, [sp, #28]
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8104 	beq.w	800782a <_dtoa_r+0xb5a>
 8007622:	2e00      	cmp	r6, #0
 8007624:	dd05      	ble.n	8007632 <_dtoa_r+0x962>
 8007626:	4629      	mov	r1, r5
 8007628:	4632      	mov	r2, r6
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fc6c 	bl	8007f08 <__lshift>
 8007630:	4605      	mov	r5, r0
 8007632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007634:	2b00      	cmp	r3, #0
 8007636:	d05a      	beq.n	80076ee <_dtoa_r+0xa1e>
 8007638:	4658      	mov	r0, fp
 800763a:	6869      	ldr	r1, [r5, #4]
 800763c:	f000 fa0e 	bl	8007a5c <_Balloc>
 8007640:	4606      	mov	r6, r0
 8007642:	b928      	cbnz	r0, 8007650 <_dtoa_r+0x980>
 8007644:	4602      	mov	r2, r0
 8007646:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800764a:	4b83      	ldr	r3, [pc, #524]	@ (8007858 <_dtoa_r+0xb88>)
 800764c:	f7ff bb54 	b.w	8006cf8 <_dtoa_r+0x28>
 8007650:	692a      	ldr	r2, [r5, #16]
 8007652:	f105 010c 	add.w	r1, r5, #12
 8007656:	3202      	adds	r2, #2
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	300c      	adds	r0, #12
 800765c:	f7ff fa9b 	bl	8006b96 <memcpy>
 8007660:	2201      	movs	r2, #1
 8007662:	4631      	mov	r1, r6
 8007664:	4658      	mov	r0, fp
 8007666:	f000 fc4f 	bl	8007f08 <__lshift>
 800766a:	462f      	mov	r7, r5
 800766c:	4605      	mov	r5, r0
 800766e:	f10a 0301 	add.w	r3, sl, #1
 8007672:	9307      	str	r3, [sp, #28]
 8007674:	9b08      	ldr	r3, [sp, #32]
 8007676:	4453      	add	r3, sl
 8007678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	930a      	str	r3, [sp, #40]	@ 0x28
 8007682:	9b07      	ldr	r3, [sp, #28]
 8007684:	4621      	mov	r1, r4
 8007686:	3b01      	subs	r3, #1
 8007688:	4648      	mov	r0, r9
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	f7ff fa96 	bl	8006bbc <quorem>
 8007690:	4639      	mov	r1, r7
 8007692:	9008      	str	r0, [sp, #32]
 8007694:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007698:	4648      	mov	r0, r9
 800769a:	f000 fca1 	bl	8007fe0 <__mcmp>
 800769e:	462a      	mov	r2, r5
 80076a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80076a2:	4621      	mov	r1, r4
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fcb7 	bl	8008018 <__mdiff>
 80076aa:	68c2      	ldr	r2, [r0, #12]
 80076ac:	4606      	mov	r6, r0
 80076ae:	bb02      	cbnz	r2, 80076f2 <_dtoa_r+0xa22>
 80076b0:	4601      	mov	r1, r0
 80076b2:	4648      	mov	r0, r9
 80076b4:	f000 fc94 	bl	8007fe0 <__mcmp>
 80076b8:	4602      	mov	r2, r0
 80076ba:	4631      	mov	r1, r6
 80076bc:	4658      	mov	r0, fp
 80076be:	920c      	str	r2, [sp, #48]	@ 0x30
 80076c0:	f000 fa0c 	bl	8007adc <_Bfree>
 80076c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076c8:	9e07      	ldr	r6, [sp, #28]
 80076ca:	ea43 0102 	orr.w	r1, r3, r2
 80076ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d0:	4319      	orrs	r1, r3
 80076d2:	d110      	bne.n	80076f6 <_dtoa_r+0xa26>
 80076d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076d8:	d029      	beq.n	800772e <_dtoa_r+0xa5e>
 80076da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dd02      	ble.n	80076e6 <_dtoa_r+0xa16>
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	f883 8000 	strb.w	r8, [r3]
 80076ec:	e63b      	b.n	8007366 <_dtoa_r+0x696>
 80076ee:	4628      	mov	r0, r5
 80076f0:	e7bb      	b.n	800766a <_dtoa_r+0x99a>
 80076f2:	2201      	movs	r2, #1
 80076f4:	e7e1      	b.n	80076ba <_dtoa_r+0x9ea>
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db04      	blt.n	8007706 <_dtoa_r+0xa36>
 80076fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80076fe:	430b      	orrs	r3, r1
 8007700:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007702:	430b      	orrs	r3, r1
 8007704:	d120      	bne.n	8007748 <_dtoa_r+0xa78>
 8007706:	2a00      	cmp	r2, #0
 8007708:	dded      	ble.n	80076e6 <_dtoa_r+0xa16>
 800770a:	4649      	mov	r1, r9
 800770c:	2201      	movs	r2, #1
 800770e:	4658      	mov	r0, fp
 8007710:	f000 fbfa 	bl	8007f08 <__lshift>
 8007714:	4621      	mov	r1, r4
 8007716:	4681      	mov	r9, r0
 8007718:	f000 fc62 	bl	8007fe0 <__mcmp>
 800771c:	2800      	cmp	r0, #0
 800771e:	dc03      	bgt.n	8007728 <_dtoa_r+0xa58>
 8007720:	d1e1      	bne.n	80076e6 <_dtoa_r+0xa16>
 8007722:	f018 0f01 	tst.w	r8, #1
 8007726:	d0de      	beq.n	80076e6 <_dtoa_r+0xa16>
 8007728:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800772c:	d1d8      	bne.n	80076e0 <_dtoa_r+0xa10>
 800772e:	2339      	movs	r3, #57	@ 0x39
 8007730:	9a02      	ldr	r2, [sp, #8]
 8007732:	7013      	strb	r3, [r2, #0]
 8007734:	4633      	mov	r3, r6
 8007736:	461e      	mov	r6, r3
 8007738:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800773c:	3b01      	subs	r3, #1
 800773e:	2a39      	cmp	r2, #57	@ 0x39
 8007740:	d052      	beq.n	80077e8 <_dtoa_r+0xb18>
 8007742:	3201      	adds	r2, #1
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e60e      	b.n	8007366 <_dtoa_r+0x696>
 8007748:	2a00      	cmp	r2, #0
 800774a:	dd07      	ble.n	800775c <_dtoa_r+0xa8c>
 800774c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007750:	d0ed      	beq.n	800772e <_dtoa_r+0xa5e>
 8007752:	9a02      	ldr	r2, [sp, #8]
 8007754:	f108 0301 	add.w	r3, r8, #1
 8007758:	7013      	strb	r3, [r2, #0]
 800775a:	e604      	b.n	8007366 <_dtoa_r+0x696>
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	9a07      	ldr	r2, [sp, #28]
 8007760:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007766:	4293      	cmp	r3, r2
 8007768:	d028      	beq.n	80077bc <_dtoa_r+0xaec>
 800776a:	4649      	mov	r1, r9
 800776c:	2300      	movs	r3, #0
 800776e:	220a      	movs	r2, #10
 8007770:	4658      	mov	r0, fp
 8007772:	f000 f9d5 	bl	8007b20 <__multadd>
 8007776:	42af      	cmp	r7, r5
 8007778:	4681      	mov	r9, r0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	f04f 020a 	mov.w	r2, #10
 8007782:	4639      	mov	r1, r7
 8007784:	4658      	mov	r0, fp
 8007786:	d107      	bne.n	8007798 <_dtoa_r+0xac8>
 8007788:	f000 f9ca 	bl	8007b20 <__multadd>
 800778c:	4607      	mov	r7, r0
 800778e:	4605      	mov	r5, r0
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	9307      	str	r3, [sp, #28]
 8007796:	e774      	b.n	8007682 <_dtoa_r+0x9b2>
 8007798:	f000 f9c2 	bl	8007b20 <__multadd>
 800779c:	4629      	mov	r1, r5
 800779e:	4607      	mov	r7, r0
 80077a0:	2300      	movs	r3, #0
 80077a2:	220a      	movs	r2, #10
 80077a4:	4658      	mov	r0, fp
 80077a6:	f000 f9bb 	bl	8007b20 <__multadd>
 80077aa:	4605      	mov	r5, r0
 80077ac:	e7f0      	b.n	8007790 <_dtoa_r+0xac0>
 80077ae:	9b08      	ldr	r3, [sp, #32]
 80077b0:	2700      	movs	r7, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bfcc      	ite	gt
 80077b6:	461e      	movgt	r6, r3
 80077b8:	2601      	movle	r6, #1
 80077ba:	4456      	add	r6, sl
 80077bc:	4649      	mov	r1, r9
 80077be:	2201      	movs	r2, #1
 80077c0:	4658      	mov	r0, fp
 80077c2:	f000 fba1 	bl	8007f08 <__lshift>
 80077c6:	4621      	mov	r1, r4
 80077c8:	4681      	mov	r9, r0
 80077ca:	f000 fc09 	bl	8007fe0 <__mcmp>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	dcb0      	bgt.n	8007734 <_dtoa_r+0xa64>
 80077d2:	d102      	bne.n	80077da <_dtoa_r+0xb0a>
 80077d4:	f018 0f01 	tst.w	r8, #1
 80077d8:	d1ac      	bne.n	8007734 <_dtoa_r+0xa64>
 80077da:	4633      	mov	r3, r6
 80077dc:	461e      	mov	r6, r3
 80077de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e2:	2a30      	cmp	r2, #48	@ 0x30
 80077e4:	d0fa      	beq.n	80077dc <_dtoa_r+0xb0c>
 80077e6:	e5be      	b.n	8007366 <_dtoa_r+0x696>
 80077e8:	459a      	cmp	sl, r3
 80077ea:	d1a4      	bne.n	8007736 <_dtoa_r+0xa66>
 80077ec:	9b04      	ldr	r3, [sp, #16]
 80077ee:	3301      	adds	r3, #1
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	2331      	movs	r3, #49	@ 0x31
 80077f4:	f88a 3000 	strb.w	r3, [sl]
 80077f8:	e5b5      	b.n	8007366 <_dtoa_r+0x696>
 80077fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800785c <_dtoa_r+0xb8c>
 8007800:	b11b      	cbz	r3, 800780a <_dtoa_r+0xb3a>
 8007802:	f10a 0308 	add.w	r3, sl, #8
 8007806:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4650      	mov	r0, sl
 800780c:	b017      	add	sp, #92	@ 0x5c
 800780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007812:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007814:	2b01      	cmp	r3, #1
 8007816:	f77f ae3d 	ble.w	8007494 <_dtoa_r+0x7c4>
 800781a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800781c:	930a      	str	r3, [sp, #40]	@ 0x28
 800781e:	2001      	movs	r0, #1
 8007820:	e65b      	b.n	80074da <_dtoa_r+0x80a>
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f77f aed6 	ble.w	80075d6 <_dtoa_r+0x906>
 800782a:	4656      	mov	r6, sl
 800782c:	4621      	mov	r1, r4
 800782e:	4648      	mov	r0, r9
 8007830:	f7ff f9c4 	bl	8006bbc <quorem>
 8007834:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007838:	9b08      	ldr	r3, [sp, #32]
 800783a:	f806 8b01 	strb.w	r8, [r6], #1
 800783e:	eba6 020a 	sub.w	r2, r6, sl
 8007842:	4293      	cmp	r3, r2
 8007844:	ddb3      	ble.n	80077ae <_dtoa_r+0xade>
 8007846:	4649      	mov	r1, r9
 8007848:	2300      	movs	r3, #0
 800784a:	220a      	movs	r2, #10
 800784c:	4658      	mov	r0, fp
 800784e:	f000 f967 	bl	8007b20 <__multadd>
 8007852:	4681      	mov	r9, r0
 8007854:	e7ea      	b.n	800782c <_dtoa_r+0xb5c>
 8007856:	bf00      	nop
 8007858:	0800a459 	.word	0x0800a459
 800785c:	0800a3dd 	.word	0x0800a3dd

08007860 <_free_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4605      	mov	r5, r0
 8007864:	2900      	cmp	r1, #0
 8007866:	d040      	beq.n	80078ea <_free_r+0x8a>
 8007868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786c:	1f0c      	subs	r4, r1, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	bfb8      	it	lt
 8007872:	18e4      	addlt	r4, r4, r3
 8007874:	f000 f8e6 	bl	8007a44 <__malloc_lock>
 8007878:	4a1c      	ldr	r2, [pc, #112]	@ (80078ec <_free_r+0x8c>)
 800787a:	6813      	ldr	r3, [r2, #0]
 800787c:	b933      	cbnz	r3, 800788c <_free_r+0x2c>
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	6014      	str	r4, [r2, #0]
 8007882:	4628      	mov	r0, r5
 8007884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007888:	f000 b8e2 	b.w	8007a50 <__malloc_unlock>
 800788c:	42a3      	cmp	r3, r4
 800788e:	d908      	bls.n	80078a2 <_free_r+0x42>
 8007890:	6820      	ldr	r0, [r4, #0]
 8007892:	1821      	adds	r1, r4, r0
 8007894:	428b      	cmp	r3, r1
 8007896:	bf01      	itttt	eq
 8007898:	6819      	ldreq	r1, [r3, #0]
 800789a:	685b      	ldreq	r3, [r3, #4]
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	e7ed      	b.n	800787e <_free_r+0x1e>
 80078a2:	461a      	mov	r2, r3
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	b10b      	cbz	r3, 80078ac <_free_r+0x4c>
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d9fa      	bls.n	80078a2 <_free_r+0x42>
 80078ac:	6811      	ldr	r1, [r2, #0]
 80078ae:	1850      	adds	r0, r2, r1
 80078b0:	42a0      	cmp	r0, r4
 80078b2:	d10b      	bne.n	80078cc <_free_r+0x6c>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	4401      	add	r1, r0
 80078b8:	1850      	adds	r0, r2, r1
 80078ba:	4283      	cmp	r3, r0
 80078bc:	6011      	str	r1, [r2, #0]
 80078be:	d1e0      	bne.n	8007882 <_free_r+0x22>
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4408      	add	r0, r1
 80078c6:	6010      	str	r0, [r2, #0]
 80078c8:	6053      	str	r3, [r2, #4]
 80078ca:	e7da      	b.n	8007882 <_free_r+0x22>
 80078cc:	d902      	bls.n	80078d4 <_free_r+0x74>
 80078ce:	230c      	movs	r3, #12
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	e7d6      	b.n	8007882 <_free_r+0x22>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	1821      	adds	r1, r4, r0
 80078d8:	428b      	cmp	r3, r1
 80078da:	bf01      	itttt	eq
 80078dc:	6819      	ldreq	r1, [r3, #0]
 80078de:	685b      	ldreq	r3, [r3, #4]
 80078e0:	1809      	addeq	r1, r1, r0
 80078e2:	6021      	streq	r1, [r4, #0]
 80078e4:	6063      	str	r3, [r4, #4]
 80078e6:	6054      	str	r4, [r2, #4]
 80078e8:	e7cb      	b.n	8007882 <_free_r+0x22>
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20003558 	.word	0x20003558

080078f0 <malloc>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <malloc+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f000 b825 	b.w	8007944 <_malloc_r>
 80078fa:	bf00      	nop
 80078fc:	20000024 	.word	0x20000024

08007900 <sbrk_aligned>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4e0f      	ldr	r6, [pc, #60]	@ (8007940 <sbrk_aligned+0x40>)
 8007904:	460c      	mov	r4, r1
 8007906:	6831      	ldr	r1, [r6, #0]
 8007908:	4605      	mov	r5, r0
 800790a:	b911      	cbnz	r1, 8007912 <sbrk_aligned+0x12>
 800790c:	f001 fdf6 	bl	80094fc <_sbrk_r>
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f001 fdf1 	bl	80094fc <_sbrk_r>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d103      	bne.n	8007926 <sbrk_aligned+0x26>
 800791e:	f04f 34ff 	mov.w	r4, #4294967295
 8007922:	4620      	mov	r0, r4
 8007924:	bd70      	pop	{r4, r5, r6, pc}
 8007926:	1cc4      	adds	r4, r0, #3
 8007928:	f024 0403 	bic.w	r4, r4, #3
 800792c:	42a0      	cmp	r0, r4
 800792e:	d0f8      	beq.n	8007922 <sbrk_aligned+0x22>
 8007930:	1a21      	subs	r1, r4, r0
 8007932:	4628      	mov	r0, r5
 8007934:	f001 fde2 	bl	80094fc <_sbrk_r>
 8007938:	3001      	adds	r0, #1
 800793a:	d1f2      	bne.n	8007922 <sbrk_aligned+0x22>
 800793c:	e7ef      	b.n	800791e <sbrk_aligned+0x1e>
 800793e:	bf00      	nop
 8007940:	20003554 	.word	0x20003554

08007944 <_malloc_r>:
 8007944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007948:	1ccd      	adds	r5, r1, #3
 800794a:	f025 0503 	bic.w	r5, r5, #3
 800794e:	3508      	adds	r5, #8
 8007950:	2d0c      	cmp	r5, #12
 8007952:	bf38      	it	cc
 8007954:	250c      	movcc	r5, #12
 8007956:	2d00      	cmp	r5, #0
 8007958:	4606      	mov	r6, r0
 800795a:	db01      	blt.n	8007960 <_malloc_r+0x1c>
 800795c:	42a9      	cmp	r1, r5
 800795e:	d904      	bls.n	800796a <_malloc_r+0x26>
 8007960:	230c      	movs	r3, #12
 8007962:	6033      	str	r3, [r6, #0]
 8007964:	2000      	movs	r0, #0
 8007966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a40 <_malloc_r+0xfc>
 800796e:	f000 f869 	bl	8007a44 <__malloc_lock>
 8007972:	f8d8 3000 	ldr.w	r3, [r8]
 8007976:	461c      	mov	r4, r3
 8007978:	bb44      	cbnz	r4, 80079cc <_malloc_r+0x88>
 800797a:	4629      	mov	r1, r5
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff ffbf 	bl	8007900 <sbrk_aligned>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	4604      	mov	r4, r0
 8007986:	d158      	bne.n	8007a3a <_malloc_r+0xf6>
 8007988:	f8d8 4000 	ldr.w	r4, [r8]
 800798c:	4627      	mov	r7, r4
 800798e:	2f00      	cmp	r7, #0
 8007990:	d143      	bne.n	8007a1a <_malloc_r+0xd6>
 8007992:	2c00      	cmp	r4, #0
 8007994:	d04b      	beq.n	8007a2e <_malloc_r+0xea>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	4639      	mov	r1, r7
 800799a:	4630      	mov	r0, r6
 800799c:	eb04 0903 	add.w	r9, r4, r3
 80079a0:	f001 fdac 	bl	80094fc <_sbrk_r>
 80079a4:	4581      	cmp	r9, r0
 80079a6:	d142      	bne.n	8007a2e <_malloc_r+0xea>
 80079a8:	6821      	ldr	r1, [r4, #0]
 80079aa:	4630      	mov	r0, r6
 80079ac:	1a6d      	subs	r5, r5, r1
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7ff ffa6 	bl	8007900 <sbrk_aligned>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d03a      	beq.n	8007a2e <_malloc_r+0xea>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	442b      	add	r3, r5
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	f8d8 3000 	ldr.w	r3, [r8]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	bb62      	cbnz	r2, 8007a20 <_malloc_r+0xdc>
 80079c6:	f8c8 7000 	str.w	r7, [r8]
 80079ca:	e00f      	b.n	80079ec <_malloc_r+0xa8>
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	1b52      	subs	r2, r2, r5
 80079d0:	d420      	bmi.n	8007a14 <_malloc_r+0xd0>
 80079d2:	2a0b      	cmp	r2, #11
 80079d4:	d917      	bls.n	8007a06 <_malloc_r+0xc2>
 80079d6:	1961      	adds	r1, r4, r5
 80079d8:	42a3      	cmp	r3, r4
 80079da:	6025      	str	r5, [r4, #0]
 80079dc:	bf18      	it	ne
 80079de:	6059      	strne	r1, [r3, #4]
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	bf08      	it	eq
 80079e4:	f8c8 1000 	streq.w	r1, [r8]
 80079e8:	5162      	str	r2, [r4, r5]
 80079ea:	604b      	str	r3, [r1, #4]
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f82f 	bl	8007a50 <__malloc_unlock>
 80079f2:	f104 000b 	add.w	r0, r4, #11
 80079f6:	1d23      	adds	r3, r4, #4
 80079f8:	f020 0007 	bic.w	r0, r0, #7
 80079fc:	1ac2      	subs	r2, r0, r3
 80079fe:	bf1c      	itt	ne
 8007a00:	1a1b      	subne	r3, r3, r0
 8007a02:	50a3      	strne	r3, [r4, r2]
 8007a04:	e7af      	b.n	8007966 <_malloc_r+0x22>
 8007a06:	6862      	ldr	r2, [r4, #4]
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	bf0c      	ite	eq
 8007a0c:	f8c8 2000 	streq.w	r2, [r8]
 8007a10:	605a      	strne	r2, [r3, #4]
 8007a12:	e7eb      	b.n	80079ec <_malloc_r+0xa8>
 8007a14:	4623      	mov	r3, r4
 8007a16:	6864      	ldr	r4, [r4, #4]
 8007a18:	e7ae      	b.n	8007978 <_malloc_r+0x34>
 8007a1a:	463c      	mov	r4, r7
 8007a1c:	687f      	ldr	r7, [r7, #4]
 8007a1e:	e7b6      	b.n	800798e <_malloc_r+0x4a>
 8007a20:	461a      	mov	r2, r3
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d1fb      	bne.n	8007a20 <_malloc_r+0xdc>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6053      	str	r3, [r2, #4]
 8007a2c:	e7de      	b.n	80079ec <_malloc_r+0xa8>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	4630      	mov	r0, r6
 8007a32:	6033      	str	r3, [r6, #0]
 8007a34:	f000 f80c 	bl	8007a50 <__malloc_unlock>
 8007a38:	e794      	b.n	8007964 <_malloc_r+0x20>
 8007a3a:	6005      	str	r5, [r0, #0]
 8007a3c:	e7d6      	b.n	80079ec <_malloc_r+0xa8>
 8007a3e:	bf00      	nop
 8007a40:	20003558 	.word	0x20003558

08007a44 <__malloc_lock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	@ (8007a4c <__malloc_lock+0x8>)
 8007a46:	f7ff b896 	b.w	8006b76 <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20003550 	.word	0x20003550

08007a50 <__malloc_unlock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_unlock+0x8>)
 8007a52:	f7ff b891 	b.w	8006b78 <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	20003550 	.word	0x20003550

08007a5c <_Balloc>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	69c6      	ldr	r6, [r0, #28]
 8007a60:	4604      	mov	r4, r0
 8007a62:	460d      	mov	r5, r1
 8007a64:	b976      	cbnz	r6, 8007a84 <_Balloc+0x28>
 8007a66:	2010      	movs	r0, #16
 8007a68:	f7ff ff42 	bl	80078f0 <malloc>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	61e0      	str	r0, [r4, #28]
 8007a70:	b920      	cbnz	r0, 8007a7c <_Balloc+0x20>
 8007a72:	216b      	movs	r1, #107	@ 0x6b
 8007a74:	4b17      	ldr	r3, [pc, #92]	@ (8007ad4 <_Balloc+0x78>)
 8007a76:	4818      	ldr	r0, [pc, #96]	@ (8007ad8 <_Balloc+0x7c>)
 8007a78:	f001 fd56 	bl	8009528 <__assert_func>
 8007a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a80:	6006      	str	r6, [r0, #0]
 8007a82:	60c6      	str	r6, [r0, #12]
 8007a84:	69e6      	ldr	r6, [r4, #28]
 8007a86:	68f3      	ldr	r3, [r6, #12]
 8007a88:	b183      	cbz	r3, 8007aac <_Balloc+0x50>
 8007a8a:	69e3      	ldr	r3, [r4, #28]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a92:	b9b8      	cbnz	r0, 8007ac4 <_Balloc+0x68>
 8007a94:	2101      	movs	r1, #1
 8007a96:	fa01 f605 	lsl.w	r6, r1, r5
 8007a9a:	1d72      	adds	r2, r6, #5
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	f001 fd60 	bl	8009564 <_calloc_r>
 8007aa4:	b160      	cbz	r0, 8007ac0 <_Balloc+0x64>
 8007aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aaa:	e00e      	b.n	8007aca <_Balloc+0x6e>
 8007aac:	2221      	movs	r2, #33	@ 0x21
 8007aae:	2104      	movs	r1, #4
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f001 fd57 	bl	8009564 <_calloc_r>
 8007ab6:	69e3      	ldr	r3, [r4, #28]
 8007ab8:	60f0      	str	r0, [r6, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e4      	bne.n	8007a8a <_Balloc+0x2e>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	6802      	ldr	r2, [r0, #0]
 8007ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aca:	2300      	movs	r3, #0
 8007acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ad0:	e7f7      	b.n	8007ac2 <_Balloc+0x66>
 8007ad2:	bf00      	nop
 8007ad4:	0800a3ea 	.word	0x0800a3ea
 8007ad8:	0800a46a 	.word	0x0800a46a

08007adc <_Bfree>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	69c6      	ldr	r6, [r0, #28]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b976      	cbnz	r6, 8007b04 <_Bfree+0x28>
 8007ae6:	2010      	movs	r0, #16
 8007ae8:	f7ff ff02 	bl	80078f0 <malloc>
 8007aec:	4602      	mov	r2, r0
 8007aee:	61e8      	str	r0, [r5, #28]
 8007af0:	b920      	cbnz	r0, 8007afc <_Bfree+0x20>
 8007af2:	218f      	movs	r1, #143	@ 0x8f
 8007af4:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <_Bfree+0x3c>)
 8007af6:	4809      	ldr	r0, [pc, #36]	@ (8007b1c <_Bfree+0x40>)
 8007af8:	f001 fd16 	bl	8009528 <__assert_func>
 8007afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b00:	6006      	str	r6, [r0, #0]
 8007b02:	60c6      	str	r6, [r0, #12]
 8007b04:	b13c      	cbz	r4, 8007b16 <_Bfree+0x3a>
 8007b06:	69eb      	ldr	r3, [r5, #28]
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b10:	6021      	str	r1, [r4, #0]
 8007b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	0800a3ea 	.word	0x0800a3ea
 8007b1c:	0800a46a 	.word	0x0800a46a

08007b20 <__multadd>:
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	4607      	mov	r7, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	461e      	mov	r6, r3
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	690d      	ldr	r5, [r1, #16]
 8007b2e:	f101 0c14 	add.w	ip, r1, #20
 8007b32:	f8dc 3000 	ldr.w	r3, [ip]
 8007b36:	3001      	adds	r0, #1
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	fb02 6101 	mla	r1, r2, r1, r6
 8007b3e:	0c1e      	lsrs	r6, r3, #16
 8007b40:	0c0b      	lsrs	r3, r1, #16
 8007b42:	fb02 3306 	mla	r3, r2, r6, r3
 8007b46:	b289      	uxth	r1, r1
 8007b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b4c:	4285      	cmp	r5, r0
 8007b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b52:	f84c 1b04 	str.w	r1, [ip], #4
 8007b56:	dcec      	bgt.n	8007b32 <__multadd+0x12>
 8007b58:	b30e      	cbz	r6, 8007b9e <__multadd+0x7e>
 8007b5a:	68a3      	ldr	r3, [r4, #8]
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dc19      	bgt.n	8007b94 <__multadd+0x74>
 8007b60:	6861      	ldr	r1, [r4, #4]
 8007b62:	4638      	mov	r0, r7
 8007b64:	3101      	adds	r1, #1
 8007b66:	f7ff ff79 	bl	8007a5c <_Balloc>
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	b928      	cbnz	r0, 8007b7a <__multadd+0x5a>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	21ba      	movs	r1, #186	@ 0xba
 8007b72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <__multadd+0x84>)
 8007b74:	480c      	ldr	r0, [pc, #48]	@ (8007ba8 <__multadd+0x88>)
 8007b76:	f001 fcd7 	bl	8009528 <__assert_func>
 8007b7a:	6922      	ldr	r2, [r4, #16]
 8007b7c:	f104 010c 	add.w	r1, r4, #12
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	300c      	adds	r0, #12
 8007b86:	f7ff f806 	bl	8006b96 <memcpy>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff ffa5 	bl	8007adc <_Bfree>
 8007b92:	4644      	mov	r4, r8
 8007b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b98:	3501      	adds	r5, #1
 8007b9a:	615e      	str	r6, [r3, #20]
 8007b9c:	6125      	str	r5, [r4, #16]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba4:	0800a459 	.word	0x0800a459
 8007ba8:	0800a46a 	.word	0x0800a46a

08007bac <__s2b>:
 8007bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	2209      	movs	r2, #9
 8007bb4:	461f      	mov	r7, r3
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	460c      	mov	r4, r1
 8007bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	db09      	blt.n	8007bdc <__s2b+0x30>
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff ff47 	bl	8007a5c <_Balloc>
 8007bce:	b940      	cbnz	r0, 8007be2 <__s2b+0x36>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	21d3      	movs	r1, #211	@ 0xd3
 8007bd4:	4b18      	ldr	r3, [pc, #96]	@ (8007c38 <__s2b+0x8c>)
 8007bd6:	4819      	ldr	r0, [pc, #100]	@ (8007c3c <__s2b+0x90>)
 8007bd8:	f001 fca6 	bl	8009528 <__assert_func>
 8007bdc:	0052      	lsls	r2, r2, #1
 8007bde:	3101      	adds	r1, #1
 8007be0:	e7f0      	b.n	8007bc4 <__s2b+0x18>
 8007be2:	9b08      	ldr	r3, [sp, #32]
 8007be4:	2d09      	cmp	r5, #9
 8007be6:	6143      	str	r3, [r0, #20]
 8007be8:	f04f 0301 	mov.w	r3, #1
 8007bec:	6103      	str	r3, [r0, #16]
 8007bee:	dd16      	ble.n	8007c1e <__s2b+0x72>
 8007bf0:	f104 0909 	add.w	r9, r4, #9
 8007bf4:	46c8      	mov	r8, r9
 8007bf6:	442c      	add	r4, r5
 8007bf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	220a      	movs	r2, #10
 8007c00:	4630      	mov	r0, r6
 8007c02:	3b30      	subs	r3, #48	@ 0x30
 8007c04:	f7ff ff8c 	bl	8007b20 <__multadd>
 8007c08:	45a0      	cmp	r8, r4
 8007c0a:	d1f5      	bne.n	8007bf8 <__s2b+0x4c>
 8007c0c:	f1a5 0408 	sub.w	r4, r5, #8
 8007c10:	444c      	add	r4, r9
 8007c12:	1b2d      	subs	r5, r5, r4
 8007c14:	1963      	adds	r3, r4, r5
 8007c16:	42bb      	cmp	r3, r7
 8007c18:	db04      	blt.n	8007c24 <__s2b+0x78>
 8007c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1e:	2509      	movs	r5, #9
 8007c20:	340a      	adds	r4, #10
 8007c22:	e7f6      	b.n	8007c12 <__s2b+0x66>
 8007c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c28:	4601      	mov	r1, r0
 8007c2a:	220a      	movs	r2, #10
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	3b30      	subs	r3, #48	@ 0x30
 8007c30:	f7ff ff76 	bl	8007b20 <__multadd>
 8007c34:	e7ee      	b.n	8007c14 <__s2b+0x68>
 8007c36:	bf00      	nop
 8007c38:	0800a459 	.word	0x0800a459
 8007c3c:	0800a46a 	.word	0x0800a46a

08007c40 <__hi0bits>:
 8007c40:	4603      	mov	r3, r0
 8007c42:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c46:	bf3a      	itte	cc
 8007c48:	0403      	lslcc	r3, r0, #16
 8007c4a:	2010      	movcc	r0, #16
 8007c4c:	2000      	movcs	r0, #0
 8007c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c52:	bf3c      	itt	cc
 8007c54:	021b      	lslcc	r3, r3, #8
 8007c56:	3008      	addcc	r0, #8
 8007c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c5c:	bf3c      	itt	cc
 8007c5e:	011b      	lslcc	r3, r3, #4
 8007c60:	3004      	addcc	r0, #4
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	bf3c      	itt	cc
 8007c68:	009b      	lslcc	r3, r3, #2
 8007c6a:	3002      	addcc	r0, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	db05      	blt.n	8007c7c <__hi0bits+0x3c>
 8007c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c74:	f100 0001 	add.w	r0, r0, #1
 8007c78:	bf08      	it	eq
 8007c7a:	2020      	moveq	r0, #32
 8007c7c:	4770      	bx	lr

08007c7e <__lo0bits>:
 8007c7e:	6803      	ldr	r3, [r0, #0]
 8007c80:	4602      	mov	r2, r0
 8007c82:	f013 0007 	ands.w	r0, r3, #7
 8007c86:	d00b      	beq.n	8007ca0 <__lo0bits+0x22>
 8007c88:	07d9      	lsls	r1, r3, #31
 8007c8a:	d421      	bmi.n	8007cd0 <__lo0bits+0x52>
 8007c8c:	0798      	lsls	r0, r3, #30
 8007c8e:	bf49      	itett	mi
 8007c90:	085b      	lsrmi	r3, r3, #1
 8007c92:	089b      	lsrpl	r3, r3, #2
 8007c94:	2001      	movmi	r0, #1
 8007c96:	6013      	strmi	r3, [r2, #0]
 8007c98:	bf5c      	itt	pl
 8007c9a:	2002      	movpl	r0, #2
 8007c9c:	6013      	strpl	r3, [r2, #0]
 8007c9e:	4770      	bx	lr
 8007ca0:	b299      	uxth	r1, r3
 8007ca2:	b909      	cbnz	r1, 8007ca8 <__lo0bits+0x2a>
 8007ca4:	2010      	movs	r0, #16
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	b2d9      	uxtb	r1, r3
 8007caa:	b909      	cbnz	r1, 8007cb0 <__lo0bits+0x32>
 8007cac:	3008      	adds	r0, #8
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	0719      	lsls	r1, r3, #28
 8007cb2:	bf04      	itt	eq
 8007cb4:	091b      	lsreq	r3, r3, #4
 8007cb6:	3004      	addeq	r0, #4
 8007cb8:	0799      	lsls	r1, r3, #30
 8007cba:	bf04      	itt	eq
 8007cbc:	089b      	lsreq	r3, r3, #2
 8007cbe:	3002      	addeq	r0, #2
 8007cc0:	07d9      	lsls	r1, r3, #31
 8007cc2:	d403      	bmi.n	8007ccc <__lo0bits+0x4e>
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	f100 0001 	add.w	r0, r0, #1
 8007cca:	d003      	beq.n	8007cd4 <__lo0bits+0x56>
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	4770      	bx	lr
 8007cd4:	2020      	movs	r0, #32
 8007cd6:	4770      	bx	lr

08007cd8 <__i2b>:
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	460c      	mov	r4, r1
 8007cdc:	2101      	movs	r1, #1
 8007cde:	f7ff febd 	bl	8007a5c <_Balloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	b928      	cbnz	r0, 8007cf2 <__i2b+0x1a>
 8007ce6:	f240 1145 	movw	r1, #325	@ 0x145
 8007cea:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <__i2b+0x24>)
 8007cec:	4804      	ldr	r0, [pc, #16]	@ (8007d00 <__i2b+0x28>)
 8007cee:	f001 fc1b 	bl	8009528 <__assert_func>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	6144      	str	r4, [r0, #20]
 8007cf6:	6103      	str	r3, [r0, #16]
 8007cf8:	bd10      	pop	{r4, pc}
 8007cfa:	bf00      	nop
 8007cfc:	0800a459 	.word	0x0800a459
 8007d00:	0800a46a 	.word	0x0800a46a

08007d04 <__multiply>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	4614      	mov	r4, r2
 8007d0a:	690a      	ldr	r2, [r1, #16]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	460f      	mov	r7, r1
 8007d10:	429a      	cmp	r2, r3
 8007d12:	bfa2      	ittt	ge
 8007d14:	4623      	movge	r3, r4
 8007d16:	460c      	movge	r4, r1
 8007d18:	461f      	movge	r7, r3
 8007d1a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d1e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	6861      	ldr	r1, [r4, #4]
 8007d26:	eb0a 0609 	add.w	r6, sl, r9
 8007d2a:	42b3      	cmp	r3, r6
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	bfb8      	it	lt
 8007d30:	3101      	addlt	r1, #1
 8007d32:	f7ff fe93 	bl	8007a5c <_Balloc>
 8007d36:	b930      	cbnz	r0, 8007d46 <__multiply+0x42>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d3e:	4b43      	ldr	r3, [pc, #268]	@ (8007e4c <__multiply+0x148>)
 8007d40:	4843      	ldr	r0, [pc, #268]	@ (8007e50 <__multiply+0x14c>)
 8007d42:	f001 fbf1 	bl	8009528 <__assert_func>
 8007d46:	f100 0514 	add.w	r5, r0, #20
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d52:	4543      	cmp	r3, r8
 8007d54:	d321      	bcc.n	8007d9a <__multiply+0x96>
 8007d56:	f107 0114 	add.w	r1, r7, #20
 8007d5a:	f104 0214 	add.w	r2, r4, #20
 8007d5e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d62:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d66:	9302      	str	r3, [sp, #8]
 8007d68:	1b13      	subs	r3, r2, r4
 8007d6a:	3b15      	subs	r3, #21
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	3304      	adds	r3, #4
 8007d72:	f104 0715 	add.w	r7, r4, #21
 8007d76:	42ba      	cmp	r2, r7
 8007d78:	bf38      	it	cc
 8007d7a:	2304      	movcc	r3, #4
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	9103      	str	r1, [sp, #12]
 8007d82:	428b      	cmp	r3, r1
 8007d84:	d80c      	bhi.n	8007da0 <__multiply+0x9c>
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	dd03      	ble.n	8007d92 <__multiply+0x8e>
 8007d8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05a      	beq.n	8007e48 <__multiply+0x144>
 8007d92:	6106      	str	r6, [r0, #16]
 8007d94:	b005      	add	sp, #20
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	f843 2b04 	str.w	r2, [r3], #4
 8007d9e:	e7d8      	b.n	8007d52 <__multiply+0x4e>
 8007da0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007da4:	f1ba 0f00 	cmp.w	sl, #0
 8007da8:	d023      	beq.n	8007df2 <__multiply+0xee>
 8007daa:	46a9      	mov	r9, r5
 8007dac:	f04f 0c00 	mov.w	ip, #0
 8007db0:	f104 0e14 	add.w	lr, r4, #20
 8007db4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007db8:	f8d9 3000 	ldr.w	r3, [r9]
 8007dbc:	fa1f fb87 	uxth.w	fp, r7
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007dc6:	4463      	add	r3, ip
 8007dc8:	f8d9 c000 	ldr.w	ip, [r9]
 8007dcc:	0c3f      	lsrs	r7, r7, #16
 8007dce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007dd2:	fb0a c707 	mla	r7, sl, r7, ip
 8007dd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007de0:	4572      	cmp	r2, lr
 8007de2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007de6:	f849 3b04 	str.w	r3, [r9], #4
 8007dea:	d8e3      	bhi.n	8007db4 <__multiply+0xb0>
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	f845 c003 	str.w	ip, [r5, r3]
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	3104      	adds	r1, #4
 8007df6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007dfa:	f1b9 0f00 	cmp.w	r9, #0
 8007dfe:	d021      	beq.n	8007e44 <__multiply+0x140>
 8007e00:	46ae      	mov	lr, r5
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	f104 0c14 	add.w	ip, r4, #20
 8007e0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	fb09 770b 	mla	r7, r9, fp, r7
 8007e1a:	4457      	add	r7, sl
 8007e1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e20:	f84e 3b04 	str.w	r3, [lr], #4
 8007e24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e2c:	f8be 3000 	ldrh.w	r3, [lr]
 8007e30:	4562      	cmp	r2, ip
 8007e32:	fb09 330a 	mla	r3, r9, sl, r3
 8007e36:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e3e:	d8e5      	bhi.n	8007e0c <__multiply+0x108>
 8007e40:	9f01      	ldr	r7, [sp, #4]
 8007e42:	51eb      	str	r3, [r5, r7]
 8007e44:	3504      	adds	r5, #4
 8007e46:	e79a      	b.n	8007d7e <__multiply+0x7a>
 8007e48:	3e01      	subs	r6, #1
 8007e4a:	e79c      	b.n	8007d86 <__multiply+0x82>
 8007e4c:	0800a459 	.word	0x0800a459
 8007e50:	0800a46a 	.word	0x0800a46a

08007e54 <__pow5mult>:
 8007e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4615      	mov	r5, r2
 8007e5a:	f012 0203 	ands.w	r2, r2, #3
 8007e5e:	4607      	mov	r7, r0
 8007e60:	460e      	mov	r6, r1
 8007e62:	d007      	beq.n	8007e74 <__pow5mult+0x20>
 8007e64:	4c25      	ldr	r4, [pc, #148]	@ (8007efc <__pow5mult+0xa8>)
 8007e66:	3a01      	subs	r2, #1
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6e:	f7ff fe57 	bl	8007b20 <__multadd>
 8007e72:	4606      	mov	r6, r0
 8007e74:	10ad      	asrs	r5, r5, #2
 8007e76:	d03d      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007e78:	69fc      	ldr	r4, [r7, #28]
 8007e7a:	b97c      	cbnz	r4, 8007e9c <__pow5mult+0x48>
 8007e7c:	2010      	movs	r0, #16
 8007e7e:	f7ff fd37 	bl	80078f0 <malloc>
 8007e82:	4602      	mov	r2, r0
 8007e84:	61f8      	str	r0, [r7, #28]
 8007e86:	b928      	cbnz	r0, 8007e94 <__pow5mult+0x40>
 8007e88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f00 <__pow5mult+0xac>)
 8007e8e:	481d      	ldr	r0, [pc, #116]	@ (8007f04 <__pow5mult+0xb0>)
 8007e90:	f001 fb4a 	bl	8009528 <__assert_func>
 8007e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e98:	6004      	str	r4, [r0, #0]
 8007e9a:	60c4      	str	r4, [r0, #12]
 8007e9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea4:	b94c      	cbnz	r4, 8007eba <__pow5mult+0x66>
 8007ea6:	f240 2171 	movw	r1, #625	@ 0x271
 8007eaa:	4638      	mov	r0, r7
 8007eac:	f7ff ff14 	bl	8007cd8 <__i2b>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	07eb      	lsls	r3, r5, #31
 8007ec0:	d50a      	bpl.n	8007ed8 <__pow5mult+0x84>
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ff1c 	bl	8007d04 <__multiply>
 8007ecc:	4680      	mov	r8, r0
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f7ff fe03 	bl	8007adc <_Bfree>
 8007ed6:	4646      	mov	r6, r8
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	d00b      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	b938      	cbnz	r0, 8007ef0 <__pow5mult+0x9c>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff ff0d 	bl	8007d04 <__multiply>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	f8c0 9000 	str.w	r9, [r0]
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	e7e4      	b.n	8007ebe <__pow5mult+0x6a>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	bf00      	nop
 8007efc:	0800a4c4 	.word	0x0800a4c4
 8007f00:	0800a3ea 	.word	0x0800a3ea
 8007f04:	0800a46a 	.word	0x0800a46a

08007f08 <__lshift>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	4607      	mov	r7, r0
 8007f10:	4691      	mov	r9, r2
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	6849      	ldr	r1, [r1, #4]
 8007f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f20:	f108 0601 	add.w	r6, r8, #1
 8007f24:	42b3      	cmp	r3, r6
 8007f26:	db0b      	blt.n	8007f40 <__lshift+0x38>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fd97 	bl	8007a5c <_Balloc>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b948      	cbnz	r0, 8007f46 <__lshift+0x3e>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f38:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <__lshift+0xd0>)
 8007f3a:	4828      	ldr	r0, [pc, #160]	@ (8007fdc <__lshift+0xd4>)
 8007f3c:	f001 faf4 	bl	8009528 <__assert_func>
 8007f40:	3101      	adds	r1, #1
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	e7ee      	b.n	8007f24 <__lshift+0x1c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f100 0114 	add.w	r1, r0, #20
 8007f4c:	f100 0210 	add.w	r2, r0, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	4553      	cmp	r3, sl
 8007f54:	db33      	blt.n	8007fbe <__lshift+0xb6>
 8007f56:	6920      	ldr	r0, [r4, #16]
 8007f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f5c:	f104 0314 	add.w	r3, r4, #20
 8007f60:	f019 091f 	ands.w	r9, r9, #31
 8007f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f6c:	d02b      	beq.n	8007fc6 <__lshift+0xbe>
 8007f6e:	468a      	mov	sl, r1
 8007f70:	2200      	movs	r2, #0
 8007f72:	f1c9 0e20 	rsb	lr, r9, #32
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	fa00 f009 	lsl.w	r0, r0, r9
 8007f7c:	4310      	orrs	r0, r2
 8007f7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	459c      	cmp	ip, r3
 8007f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f8c:	d8f3      	bhi.n	8007f76 <__lshift+0x6e>
 8007f8e:	ebac 0304 	sub.w	r3, ip, r4
 8007f92:	3b15      	subs	r3, #21
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	3304      	adds	r3, #4
 8007f9a:	f104 0015 	add.w	r0, r4, #21
 8007f9e:	4584      	cmp	ip, r0
 8007fa0:	bf38      	it	cc
 8007fa2:	2304      	movcc	r3, #4
 8007fa4:	50ca      	str	r2, [r1, r3]
 8007fa6:	b10a      	cbz	r2, 8007fac <__lshift+0xa4>
 8007fa8:	f108 0602 	add.w	r6, r8, #2
 8007fac:	3e01      	subs	r6, #1
 8007fae:	4638      	mov	r0, r7
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	612e      	str	r6, [r5, #16]
 8007fb4:	f7ff fd92 	bl	8007adc <_Bfree>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	e7c5      	b.n	8007f52 <__lshift+0x4a>
 8007fc6:	3904      	subs	r1, #4
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	459c      	cmp	ip, r3
 8007fce:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd2:	d8f9      	bhi.n	8007fc8 <__lshift+0xc0>
 8007fd4:	e7ea      	b.n	8007fac <__lshift+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	0800a459 	.word	0x0800a459
 8007fdc:	0800a46a 	.word	0x0800a46a

08007fe0 <__mcmp>:
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	690a      	ldr	r2, [r1, #16]
 8007fe4:	6900      	ldr	r0, [r0, #16]
 8007fe6:	b530      	push	{r4, r5, lr}
 8007fe8:	1a80      	subs	r0, r0, r2
 8007fea:	d10e      	bne.n	800800a <__mcmp+0x2a>
 8007fec:	3314      	adds	r3, #20
 8007fee:	3114      	adds	r1, #20
 8007ff0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ff4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ff8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ffc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008000:	4295      	cmp	r5, r2
 8008002:	d003      	beq.n	800800c <__mcmp+0x2c>
 8008004:	d205      	bcs.n	8008012 <__mcmp+0x32>
 8008006:	f04f 30ff 	mov.w	r0, #4294967295
 800800a:	bd30      	pop	{r4, r5, pc}
 800800c:	42a3      	cmp	r3, r4
 800800e:	d3f3      	bcc.n	8007ff8 <__mcmp+0x18>
 8008010:	e7fb      	b.n	800800a <__mcmp+0x2a>
 8008012:	2001      	movs	r0, #1
 8008014:	e7f9      	b.n	800800a <__mcmp+0x2a>
	...

08008018 <__mdiff>:
 8008018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4689      	mov	r9, r1
 800801e:	4606      	mov	r6, r0
 8008020:	4611      	mov	r1, r2
 8008022:	4648      	mov	r0, r9
 8008024:	4614      	mov	r4, r2
 8008026:	f7ff ffdb 	bl	8007fe0 <__mcmp>
 800802a:	1e05      	subs	r5, r0, #0
 800802c:	d112      	bne.n	8008054 <__mdiff+0x3c>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fd13 	bl	8007a5c <_Balloc>
 8008036:	4602      	mov	r2, r0
 8008038:	b928      	cbnz	r0, 8008046 <__mdiff+0x2e>
 800803a:	f240 2137 	movw	r1, #567	@ 0x237
 800803e:	4b3e      	ldr	r3, [pc, #248]	@ (8008138 <__mdiff+0x120>)
 8008040:	483e      	ldr	r0, [pc, #248]	@ (800813c <__mdiff+0x124>)
 8008042:	f001 fa71 	bl	8009528 <__assert_func>
 8008046:	2301      	movs	r3, #1
 8008048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800804c:	4610      	mov	r0, r2
 800804e:	b003      	add	sp, #12
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	bfbc      	itt	lt
 8008056:	464b      	movlt	r3, r9
 8008058:	46a1      	movlt	r9, r4
 800805a:	4630      	mov	r0, r6
 800805c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008060:	bfba      	itte	lt
 8008062:	461c      	movlt	r4, r3
 8008064:	2501      	movlt	r5, #1
 8008066:	2500      	movge	r5, #0
 8008068:	f7ff fcf8 	bl	8007a5c <_Balloc>
 800806c:	4602      	mov	r2, r0
 800806e:	b918      	cbnz	r0, 8008078 <__mdiff+0x60>
 8008070:	f240 2145 	movw	r1, #581	@ 0x245
 8008074:	4b30      	ldr	r3, [pc, #192]	@ (8008138 <__mdiff+0x120>)
 8008076:	e7e3      	b.n	8008040 <__mdiff+0x28>
 8008078:	f100 0b14 	add.w	fp, r0, #20
 800807c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008080:	f109 0310 	add.w	r3, r9, #16
 8008084:	60c5      	str	r5, [r0, #12]
 8008086:	f04f 0c00 	mov.w	ip, #0
 800808a:	f109 0514 	add.w	r5, r9, #20
 800808e:	46d9      	mov	r9, fp
 8008090:	6926      	ldr	r6, [r4, #16]
 8008092:	f104 0e14 	add.w	lr, r4, #20
 8008096:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800809a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080aa:	b281      	uxth	r1, r0
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	fa1f f38a 	uxth.w	r3, sl
 80080b2:	1a5b      	subs	r3, r3, r1
 80080b4:	0c00      	lsrs	r0, r0, #16
 80080b6:	4463      	add	r3, ip
 80080b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080c6:	4576      	cmp	r6, lr
 80080c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080cc:	f849 3b04 	str.w	r3, [r9], #4
 80080d0:	d8e6      	bhi.n	80080a0 <__mdiff+0x88>
 80080d2:	1b33      	subs	r3, r6, r4
 80080d4:	3b15      	subs	r3, #21
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	3415      	adds	r4, #21
 80080dc:	3304      	adds	r3, #4
 80080de:	42a6      	cmp	r6, r4
 80080e0:	bf38      	it	cc
 80080e2:	2304      	movcc	r3, #4
 80080e4:	441d      	add	r5, r3
 80080e6:	445b      	add	r3, fp
 80080e8:	461e      	mov	r6, r3
 80080ea:	462c      	mov	r4, r5
 80080ec:	4544      	cmp	r4, r8
 80080ee:	d30e      	bcc.n	800810e <__mdiff+0xf6>
 80080f0:	f108 0103 	add.w	r1, r8, #3
 80080f4:	1b49      	subs	r1, r1, r5
 80080f6:	f021 0103 	bic.w	r1, r1, #3
 80080fa:	3d03      	subs	r5, #3
 80080fc:	45a8      	cmp	r8, r5
 80080fe:	bf38      	it	cc
 8008100:	2100      	movcc	r1, #0
 8008102:	440b      	add	r3, r1
 8008104:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008108:	b199      	cbz	r1, 8008132 <__mdiff+0x11a>
 800810a:	6117      	str	r7, [r2, #16]
 800810c:	e79e      	b.n	800804c <__mdiff+0x34>
 800810e:	46e6      	mov	lr, ip
 8008110:	f854 1b04 	ldr.w	r1, [r4], #4
 8008114:	fa1f fc81 	uxth.w	ip, r1
 8008118:	44f4      	add	ip, lr
 800811a:	0c08      	lsrs	r0, r1, #16
 800811c:	4471      	add	r1, lr
 800811e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008122:	b289      	uxth	r1, r1
 8008124:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008128:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800812c:	f846 1b04 	str.w	r1, [r6], #4
 8008130:	e7dc      	b.n	80080ec <__mdiff+0xd4>
 8008132:	3f01      	subs	r7, #1
 8008134:	e7e6      	b.n	8008104 <__mdiff+0xec>
 8008136:	bf00      	nop
 8008138:	0800a459 	.word	0x0800a459
 800813c:	0800a46a 	.word	0x0800a46a

08008140 <__ulp>:
 8008140:	4b0e      	ldr	r3, [pc, #56]	@ (800817c <__ulp+0x3c>)
 8008142:	400b      	ands	r3, r1
 8008144:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc08      	bgt.n	800815e <__ulp+0x1e>
 800814c:	425b      	negs	r3, r3
 800814e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008152:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008156:	da04      	bge.n	8008162 <__ulp+0x22>
 8008158:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800815c:	4113      	asrs	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	e008      	b.n	8008174 <__ulp+0x34>
 8008162:	f1a2 0314 	sub.w	r3, r2, #20
 8008166:	2b1e      	cmp	r3, #30
 8008168:	bfd6      	itet	le
 800816a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800816e:	2201      	movgt	r2, #1
 8008170:	40da      	lsrle	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	7ff00000 	.word	0x7ff00000

08008180 <__b2d>:
 8008180:	6902      	ldr	r2, [r0, #16]
 8008182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008184:	f100 0614 	add.w	r6, r0, #20
 8008188:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800818c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008190:	4f1e      	ldr	r7, [pc, #120]	@ (800820c <__b2d+0x8c>)
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fd54 	bl	8007c40 <__hi0bits>
 8008198:	4603      	mov	r3, r0
 800819a:	f1c0 0020 	rsb	r0, r0, #32
 800819e:	2b0a      	cmp	r3, #10
 80081a0:	f1a2 0504 	sub.w	r5, r2, #4
 80081a4:	6008      	str	r0, [r1, #0]
 80081a6:	dc12      	bgt.n	80081ce <__b2d+0x4e>
 80081a8:	42ae      	cmp	r6, r5
 80081aa:	bf2c      	ite	cs
 80081ac:	2200      	movcs	r2, #0
 80081ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80081b2:	f1c3 0c0b 	rsb	ip, r3, #11
 80081b6:	3315      	adds	r3, #21
 80081b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80081bc:	fa04 f303 	lsl.w	r3, r4, r3
 80081c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80081c4:	ea4e 0107 	orr.w	r1, lr, r7
 80081c8:	431a      	orrs	r2, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ce:	42ae      	cmp	r6, r5
 80081d0:	bf36      	itet	cc
 80081d2:	f1a2 0508 	subcc.w	r5, r2, #8
 80081d6:	2200      	movcs	r2, #0
 80081d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80081dc:	3b0b      	subs	r3, #11
 80081de:	d012      	beq.n	8008206 <__b2d+0x86>
 80081e0:	f1c3 0720 	rsb	r7, r3, #32
 80081e4:	fa22 f107 	lsr.w	r1, r2, r7
 80081e8:	409c      	lsls	r4, r3
 80081ea:	430c      	orrs	r4, r1
 80081ec:	42b5      	cmp	r5, r6
 80081ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80081f2:	bf94      	ite	ls
 80081f4:	2400      	movls	r4, #0
 80081f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80081fa:	409a      	lsls	r2, r3
 80081fc:	40fc      	lsrs	r4, r7
 80081fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008202:	4322      	orrs	r2, r4
 8008204:	e7e1      	b.n	80081ca <__b2d+0x4a>
 8008206:	ea44 0107 	orr.w	r1, r4, r7
 800820a:	e7de      	b.n	80081ca <__b2d+0x4a>
 800820c:	3ff00000 	.word	0x3ff00000

08008210 <__d2b>:
 8008210:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008214:	2101      	movs	r1, #1
 8008216:	4690      	mov	r8, r2
 8008218:	4699      	mov	r9, r3
 800821a:	9e08      	ldr	r6, [sp, #32]
 800821c:	f7ff fc1e 	bl	8007a5c <_Balloc>
 8008220:	4604      	mov	r4, r0
 8008222:	b930      	cbnz	r0, 8008232 <__d2b+0x22>
 8008224:	4602      	mov	r2, r0
 8008226:	f240 310f 	movw	r1, #783	@ 0x30f
 800822a:	4b23      	ldr	r3, [pc, #140]	@ (80082b8 <__d2b+0xa8>)
 800822c:	4823      	ldr	r0, [pc, #140]	@ (80082bc <__d2b+0xac>)
 800822e:	f001 f97b 	bl	8009528 <__assert_func>
 8008232:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008236:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800823a:	b10d      	cbz	r5, 8008240 <__d2b+0x30>
 800823c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f1b8 0300 	subs.w	r3, r8, #0
 8008246:	d024      	beq.n	8008292 <__d2b+0x82>
 8008248:	4668      	mov	r0, sp
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	f7ff fd17 	bl	8007c7e <__lo0bits>
 8008250:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008254:	b1d8      	cbz	r0, 800828e <__d2b+0x7e>
 8008256:	f1c0 0320 	rsb	r3, r0, #32
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	430b      	orrs	r3, r1
 8008260:	40c2      	lsrs	r2, r0
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	9201      	str	r2, [sp, #4]
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	bf0c      	ite	eq
 800826c:	2201      	moveq	r2, #1
 800826e:	2202      	movne	r2, #2
 8008270:	61a3      	str	r3, [r4, #24]
 8008272:	6122      	str	r2, [r4, #16]
 8008274:	b1ad      	cbz	r5, 80082a2 <__d2b+0x92>
 8008276:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800827a:	4405      	add	r5, r0
 800827c:	6035      	str	r5, [r6, #0]
 800827e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008284:	6018      	str	r0, [r3, #0]
 8008286:	4620      	mov	r0, r4
 8008288:	b002      	add	sp, #8
 800828a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800828e:	6161      	str	r1, [r4, #20]
 8008290:	e7e9      	b.n	8008266 <__d2b+0x56>
 8008292:	a801      	add	r0, sp, #4
 8008294:	f7ff fcf3 	bl	8007c7e <__lo0bits>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	6163      	str	r3, [r4, #20]
 800829e:	3020      	adds	r0, #32
 80082a0:	e7e7      	b.n	8008272 <__d2b+0x62>
 80082a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082aa:	6030      	str	r0, [r6, #0]
 80082ac:	6918      	ldr	r0, [r3, #16]
 80082ae:	f7ff fcc7 	bl	8007c40 <__hi0bits>
 80082b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082b6:	e7e4      	b.n	8008282 <__d2b+0x72>
 80082b8:	0800a459 	.word	0x0800a459
 80082bc:	0800a46a 	.word	0x0800a46a

080082c0 <__ratio>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	b085      	sub	sp, #20
 80082c6:	e9cd 1000 	strd	r1, r0, [sp]
 80082ca:	a902      	add	r1, sp, #8
 80082cc:	f7ff ff58 	bl	8008180 <__b2d>
 80082d0:	468b      	mov	fp, r1
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	9800      	ldr	r0, [sp, #0]
 80082d8:	a903      	add	r1, sp, #12
 80082da:	f7ff ff51 	bl	8008180 <__b2d>
 80082de:	460d      	mov	r5, r1
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	4689      	mov	r9, r1
 80082e4:	6919      	ldr	r1, [r3, #16]
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	4604      	mov	r4, r0
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	4630      	mov	r0, r6
 80082ee:	1ac9      	subs	r1, r1, r3
 80082f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bfcd      	iteet	gt
 80082fe:	463a      	movgt	r2, r7
 8008300:	462a      	movle	r2, r5
 8008302:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008306:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800830a:	bfd8      	it	le
 800830c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008310:	464b      	mov	r3, r9
 8008312:	4622      	mov	r2, r4
 8008314:	4659      	mov	r1, fp
 8008316:	f7f8 fa09 	bl	800072c <__aeabi_ddiv>
 800831a:	b005      	add	sp, #20
 800831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008320 <__copybits>:
 8008320:	3901      	subs	r1, #1
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	1149      	asrs	r1, r1, #5
 8008326:	6914      	ldr	r4, [r2, #16]
 8008328:	3101      	adds	r1, #1
 800832a:	f102 0314 	add.w	r3, r2, #20
 800832e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008332:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008336:	1f05      	subs	r5, r0, #4
 8008338:	42a3      	cmp	r3, r4
 800833a:	d30c      	bcc.n	8008356 <__copybits+0x36>
 800833c:	1aa3      	subs	r3, r4, r2
 800833e:	3b11      	subs	r3, #17
 8008340:	f023 0303 	bic.w	r3, r3, #3
 8008344:	3211      	adds	r2, #17
 8008346:	42a2      	cmp	r2, r4
 8008348:	bf88      	it	hi
 800834a:	2300      	movhi	r3, #0
 800834c:	4418      	add	r0, r3
 800834e:	2300      	movs	r3, #0
 8008350:	4288      	cmp	r0, r1
 8008352:	d305      	bcc.n	8008360 <__copybits+0x40>
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	f853 6b04 	ldr.w	r6, [r3], #4
 800835a:	f845 6f04 	str.w	r6, [r5, #4]!
 800835e:	e7eb      	b.n	8008338 <__copybits+0x18>
 8008360:	f840 3b04 	str.w	r3, [r0], #4
 8008364:	e7f4      	b.n	8008350 <__copybits+0x30>

08008366 <__any_on>:
 8008366:	f100 0214 	add.w	r2, r0, #20
 800836a:	6900      	ldr	r0, [r0, #16]
 800836c:	114b      	asrs	r3, r1, #5
 800836e:	4298      	cmp	r0, r3
 8008370:	b510      	push	{r4, lr}
 8008372:	db11      	blt.n	8008398 <__any_on+0x32>
 8008374:	dd0a      	ble.n	800838c <__any_on+0x26>
 8008376:	f011 011f 	ands.w	r1, r1, #31
 800837a:	d007      	beq.n	800838c <__any_on+0x26>
 800837c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008380:	fa24 f001 	lsr.w	r0, r4, r1
 8008384:	fa00 f101 	lsl.w	r1, r0, r1
 8008388:	428c      	cmp	r4, r1
 800838a:	d10b      	bne.n	80083a4 <__any_on+0x3e>
 800838c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008390:	4293      	cmp	r3, r2
 8008392:	d803      	bhi.n	800839c <__any_on+0x36>
 8008394:	2000      	movs	r0, #0
 8008396:	bd10      	pop	{r4, pc}
 8008398:	4603      	mov	r3, r0
 800839a:	e7f7      	b.n	800838c <__any_on+0x26>
 800839c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083a0:	2900      	cmp	r1, #0
 80083a2:	d0f5      	beq.n	8008390 <__any_on+0x2a>
 80083a4:	2001      	movs	r0, #1
 80083a6:	e7f6      	b.n	8008396 <__any_on+0x30>

080083a8 <sulp>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	460f      	mov	r7, r1
 80083ae:	4690      	mov	r8, r2
 80083b0:	f7ff fec6 	bl	8008140 <__ulp>
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d011      	beq.n	80083e2 <sulp+0x3a>
 80083be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80083c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dd0b      	ble.n	80083e2 <sulp+0x3a>
 80083ca:	2400      	movs	r4, #0
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80083d2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	f7f8 f87d 	bl	80004d8 <__aeabi_dmul>
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	4620      	mov	r0, r4
 80083e4:	4629      	mov	r1, r5
 80083e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ea:	0000      	movs	r0, r0
 80083ec:	0000      	movs	r0, r0
	...

080083f0 <_strtod_l>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	b09f      	sub	sp, #124	@ 0x7c
 80083f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80083f8:	2200      	movs	r2, #0
 80083fa:	460c      	mov	r4, r1
 80083fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80083fe:	f04f 0a00 	mov.w	sl, #0
 8008402:	f04f 0b00 	mov.w	fp, #0
 8008406:	460a      	mov	r2, r1
 8008408:	9005      	str	r0, [sp, #20]
 800840a:	9219      	str	r2, [sp, #100]	@ 0x64
 800840c:	7811      	ldrb	r1, [r2, #0]
 800840e:	292b      	cmp	r1, #43	@ 0x2b
 8008410:	d048      	beq.n	80084a4 <_strtod_l+0xb4>
 8008412:	d836      	bhi.n	8008482 <_strtod_l+0x92>
 8008414:	290d      	cmp	r1, #13
 8008416:	d830      	bhi.n	800847a <_strtod_l+0x8a>
 8008418:	2908      	cmp	r1, #8
 800841a:	d830      	bhi.n	800847e <_strtod_l+0x8e>
 800841c:	2900      	cmp	r1, #0
 800841e:	d039      	beq.n	8008494 <_strtod_l+0xa4>
 8008420:	2200      	movs	r2, #0
 8008422:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008426:	782a      	ldrb	r2, [r5, #0]
 8008428:	2a30      	cmp	r2, #48	@ 0x30
 800842a:	f040 80b1 	bne.w	8008590 <_strtod_l+0x1a0>
 800842e:	786a      	ldrb	r2, [r5, #1]
 8008430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008434:	2a58      	cmp	r2, #88	@ 0x58
 8008436:	d16c      	bne.n	8008512 <_strtod_l+0x122>
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800843c:	4a8e      	ldr	r2, [pc, #568]	@ (8008678 <_strtod_l+0x288>)
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	ab1a      	add	r3, sp, #104	@ 0x68
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	9805      	ldr	r0, [sp, #20]
 8008446:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008448:	a919      	add	r1, sp, #100	@ 0x64
 800844a:	f001 f907 	bl	800965c <__gethex>
 800844e:	f010 060f 	ands.w	r6, r0, #15
 8008452:	4604      	mov	r4, r0
 8008454:	d005      	beq.n	8008462 <_strtod_l+0x72>
 8008456:	2e06      	cmp	r6, #6
 8008458:	d126      	bne.n	80084a8 <_strtod_l+0xb8>
 800845a:	2300      	movs	r3, #0
 800845c:	3501      	adds	r5, #1
 800845e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8584 	bne.w	8008f72 <_strtod_l+0xb82>
 800846a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800846c:	b1bb      	cbz	r3, 800849e <_strtod_l+0xae>
 800846e:	4650      	mov	r0, sl
 8008470:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008474:	b01f      	add	sp, #124	@ 0x7c
 8008476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847a:	2920      	cmp	r1, #32
 800847c:	d1d0      	bne.n	8008420 <_strtod_l+0x30>
 800847e:	3201      	adds	r2, #1
 8008480:	e7c3      	b.n	800840a <_strtod_l+0x1a>
 8008482:	292d      	cmp	r1, #45	@ 0x2d
 8008484:	d1cc      	bne.n	8008420 <_strtod_l+0x30>
 8008486:	2101      	movs	r1, #1
 8008488:	910b      	str	r1, [sp, #44]	@ 0x2c
 800848a:	1c51      	adds	r1, r2, #1
 800848c:	9119      	str	r1, [sp, #100]	@ 0x64
 800848e:	7852      	ldrb	r2, [r2, #1]
 8008490:	2a00      	cmp	r2, #0
 8008492:	d1c7      	bne.n	8008424 <_strtod_l+0x34>
 8008494:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008496:	9419      	str	r4, [sp, #100]	@ 0x64
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8568 	bne.w	8008f6e <_strtod_l+0xb7e>
 800849e:	4650      	mov	r0, sl
 80084a0:	4659      	mov	r1, fp
 80084a2:	e7e7      	b.n	8008474 <_strtod_l+0x84>
 80084a4:	2100      	movs	r1, #0
 80084a6:	e7ef      	b.n	8008488 <_strtod_l+0x98>
 80084a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084aa:	b13a      	cbz	r2, 80084bc <_strtod_l+0xcc>
 80084ac:	2135      	movs	r1, #53	@ 0x35
 80084ae:	a81c      	add	r0, sp, #112	@ 0x70
 80084b0:	f7ff ff36 	bl	8008320 <__copybits>
 80084b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084b6:	9805      	ldr	r0, [sp, #20]
 80084b8:	f7ff fb10 	bl	8007adc <_Bfree>
 80084bc:	3e01      	subs	r6, #1
 80084be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084c0:	2e04      	cmp	r6, #4
 80084c2:	d806      	bhi.n	80084d2 <_strtod_l+0xe2>
 80084c4:	e8df f006 	tbb	[pc, r6]
 80084c8:	201d0314 	.word	0x201d0314
 80084cc:	14          	.byte	0x14
 80084cd:	00          	.byte	0x00
 80084ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80084d2:	05e1      	lsls	r1, r4, #23
 80084d4:	bf48      	it	mi
 80084d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084de:	0d1b      	lsrs	r3, r3, #20
 80084e0:	051b      	lsls	r3, r3, #20
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1bd      	bne.n	8008462 <_strtod_l+0x72>
 80084e6:	f7fe fb1b 	bl	8006b20 <__errno>
 80084ea:	2322      	movs	r3, #34	@ 0x22
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	e7b8      	b.n	8008462 <_strtod_l+0x72>
 80084f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80084f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80084f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008500:	e7e7      	b.n	80084d2 <_strtod_l+0xe2>
 8008502:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800867c <_strtod_l+0x28c>
 8008506:	e7e4      	b.n	80084d2 <_strtod_l+0xe2>
 8008508:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800850c:	f04f 3aff 	mov.w	sl, #4294967295
 8008510:	e7df      	b.n	80084d2 <_strtod_l+0xe2>
 8008512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	9219      	str	r2, [sp, #100]	@ 0x64
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b30      	cmp	r3, #48	@ 0x30
 800851c:	d0f9      	beq.n	8008512 <_strtod_l+0x122>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d09f      	beq.n	8008462 <_strtod_l+0x72>
 8008522:	2301      	movs	r3, #1
 8008524:	9309      	str	r3, [sp, #36]	@ 0x24
 8008526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008528:	220a      	movs	r2, #10
 800852a:	930c      	str	r3, [sp, #48]	@ 0x30
 800852c:	2300      	movs	r3, #0
 800852e:	461f      	mov	r7, r3
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	930a      	str	r3, [sp, #40]	@ 0x28
 8008534:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008536:	7805      	ldrb	r5, [r0, #0]
 8008538:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800853c:	b2d9      	uxtb	r1, r3
 800853e:	2909      	cmp	r1, #9
 8008540:	d928      	bls.n	8008594 <_strtod_l+0x1a4>
 8008542:	2201      	movs	r2, #1
 8008544:	494e      	ldr	r1, [pc, #312]	@ (8008680 <_strtod_l+0x290>)
 8008546:	f000 ffc7 	bl	80094d8 <strncmp>
 800854a:	2800      	cmp	r0, #0
 800854c:	d032      	beq.n	80085b4 <_strtod_l+0x1c4>
 800854e:	2000      	movs	r0, #0
 8008550:	462a      	mov	r2, r5
 8008552:	4681      	mov	r9, r0
 8008554:	463d      	mov	r5, r7
 8008556:	4603      	mov	r3, r0
 8008558:	2a65      	cmp	r2, #101	@ 0x65
 800855a:	d001      	beq.n	8008560 <_strtod_l+0x170>
 800855c:	2a45      	cmp	r2, #69	@ 0x45
 800855e:	d114      	bne.n	800858a <_strtod_l+0x19a>
 8008560:	b91d      	cbnz	r5, 800856a <_strtod_l+0x17a>
 8008562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008564:	4302      	orrs	r2, r0
 8008566:	d095      	beq.n	8008494 <_strtod_l+0xa4>
 8008568:	2500      	movs	r5, #0
 800856a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800856c:	1c62      	adds	r2, r4, #1
 800856e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008570:	7862      	ldrb	r2, [r4, #1]
 8008572:	2a2b      	cmp	r2, #43	@ 0x2b
 8008574:	d077      	beq.n	8008666 <_strtod_l+0x276>
 8008576:	2a2d      	cmp	r2, #45	@ 0x2d
 8008578:	d07b      	beq.n	8008672 <_strtod_l+0x282>
 800857a:	f04f 0c00 	mov.w	ip, #0
 800857e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008582:	2909      	cmp	r1, #9
 8008584:	f240 8082 	bls.w	800868c <_strtod_l+0x29c>
 8008588:	9419      	str	r4, [sp, #100]	@ 0x64
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	e0a2      	b.n	80086d6 <_strtod_l+0x2e6>
 8008590:	2300      	movs	r3, #0
 8008592:	e7c7      	b.n	8008524 <_strtod_l+0x134>
 8008594:	2f08      	cmp	r7, #8
 8008596:	bfd5      	itete	le
 8008598:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800859a:	9908      	ldrgt	r1, [sp, #32]
 800859c:	fb02 3301 	mlale	r3, r2, r1, r3
 80085a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085a4:	f100 0001 	add.w	r0, r0, #1
 80085a8:	bfd4      	ite	le
 80085aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80085ac:	9308      	strgt	r3, [sp, #32]
 80085ae:	3701      	adds	r7, #1
 80085b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80085b2:	e7bf      	b.n	8008534 <_strtod_l+0x144>
 80085b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ba:	785a      	ldrb	r2, [r3, #1]
 80085bc:	b37f      	cbz	r7, 800861e <_strtod_l+0x22e>
 80085be:	4681      	mov	r9, r0
 80085c0:	463d      	mov	r5, r7
 80085c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80085c6:	2b09      	cmp	r3, #9
 80085c8:	d912      	bls.n	80085f0 <_strtod_l+0x200>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e7c4      	b.n	8008558 <_strtod_l+0x168>
 80085ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085d0:	3001      	adds	r0, #1
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80085d6:	785a      	ldrb	r2, [r3, #1]
 80085d8:	2a30      	cmp	r2, #48	@ 0x30
 80085da:	d0f8      	beq.n	80085ce <_strtod_l+0x1de>
 80085dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	f200 84cb 	bhi.w	8008f7c <_strtod_l+0xb8c>
 80085e6:	4681      	mov	r9, r0
 80085e8:	2000      	movs	r0, #0
 80085ea:	4605      	mov	r5, r0
 80085ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80085f0:	3a30      	subs	r2, #48	@ 0x30
 80085f2:	f100 0301 	add.w	r3, r0, #1
 80085f6:	d02a      	beq.n	800864e <_strtod_l+0x25e>
 80085f8:	4499      	add	r9, r3
 80085fa:	210a      	movs	r1, #10
 80085fc:	462b      	mov	r3, r5
 80085fe:	eb00 0c05 	add.w	ip, r0, r5
 8008602:	4563      	cmp	r3, ip
 8008604:	d10d      	bne.n	8008622 <_strtod_l+0x232>
 8008606:	1c69      	adds	r1, r5, #1
 8008608:	4401      	add	r1, r0
 800860a:	4428      	add	r0, r5
 800860c:	2808      	cmp	r0, #8
 800860e:	dc16      	bgt.n	800863e <_strtod_l+0x24e>
 8008610:	230a      	movs	r3, #10
 8008612:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008614:	fb03 2300 	mla	r3, r3, r0, r2
 8008618:	930a      	str	r3, [sp, #40]	@ 0x28
 800861a:	2300      	movs	r3, #0
 800861c:	e018      	b.n	8008650 <_strtod_l+0x260>
 800861e:	4638      	mov	r0, r7
 8008620:	e7da      	b.n	80085d8 <_strtod_l+0x1e8>
 8008622:	2b08      	cmp	r3, #8
 8008624:	f103 0301 	add.w	r3, r3, #1
 8008628:	dc03      	bgt.n	8008632 <_strtod_l+0x242>
 800862a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800862c:	434e      	muls	r6, r1
 800862e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008630:	e7e7      	b.n	8008602 <_strtod_l+0x212>
 8008632:	2b10      	cmp	r3, #16
 8008634:	bfde      	ittt	le
 8008636:	9e08      	ldrle	r6, [sp, #32]
 8008638:	434e      	mulle	r6, r1
 800863a:	9608      	strle	r6, [sp, #32]
 800863c:	e7e1      	b.n	8008602 <_strtod_l+0x212>
 800863e:	280f      	cmp	r0, #15
 8008640:	dceb      	bgt.n	800861a <_strtod_l+0x22a>
 8008642:	230a      	movs	r3, #10
 8008644:	9808      	ldr	r0, [sp, #32]
 8008646:	fb03 2300 	mla	r3, r3, r0, r2
 800864a:	9308      	str	r3, [sp, #32]
 800864c:	e7e5      	b.n	800861a <_strtod_l+0x22a>
 800864e:	4629      	mov	r1, r5
 8008650:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008652:	460d      	mov	r5, r1
 8008654:	1c50      	adds	r0, r2, #1
 8008656:	9019      	str	r0, [sp, #100]	@ 0x64
 8008658:	7852      	ldrb	r2, [r2, #1]
 800865a:	4618      	mov	r0, r3
 800865c:	e7b1      	b.n	80085c2 <_strtod_l+0x1d2>
 800865e:	f04f 0900 	mov.w	r9, #0
 8008662:	2301      	movs	r3, #1
 8008664:	e77d      	b.n	8008562 <_strtod_l+0x172>
 8008666:	f04f 0c00 	mov.w	ip, #0
 800866a:	1ca2      	adds	r2, r4, #2
 800866c:	9219      	str	r2, [sp, #100]	@ 0x64
 800866e:	78a2      	ldrb	r2, [r4, #2]
 8008670:	e785      	b.n	800857e <_strtod_l+0x18e>
 8008672:	f04f 0c01 	mov.w	ip, #1
 8008676:	e7f8      	b.n	800866a <_strtod_l+0x27a>
 8008678:	0800a5d8 	.word	0x0800a5d8
 800867c:	7ff00000 	.word	0x7ff00000
 8008680:	0800a5c0 	.word	0x0800a5c0
 8008684:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008686:	1c51      	adds	r1, r2, #1
 8008688:	9119      	str	r1, [sp, #100]	@ 0x64
 800868a:	7852      	ldrb	r2, [r2, #1]
 800868c:	2a30      	cmp	r2, #48	@ 0x30
 800868e:	d0f9      	beq.n	8008684 <_strtod_l+0x294>
 8008690:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008694:	2908      	cmp	r1, #8
 8008696:	f63f af78 	bhi.w	800858a <_strtod_l+0x19a>
 800869a:	f04f 080a 	mov.w	r8, #10
 800869e:	3a30      	subs	r2, #48	@ 0x30
 80086a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086a8:	1c56      	adds	r6, r2, #1
 80086aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80086ac:	7852      	ldrb	r2, [r2, #1]
 80086ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086b2:	f1be 0f09 	cmp.w	lr, #9
 80086b6:	d939      	bls.n	800872c <_strtod_l+0x33c>
 80086b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80086be:	1a76      	subs	r6, r6, r1
 80086c0:	2e08      	cmp	r6, #8
 80086c2:	dc03      	bgt.n	80086cc <_strtod_l+0x2dc>
 80086c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086c6:	4588      	cmp	r8, r1
 80086c8:	bfa8      	it	ge
 80086ca:	4688      	movge	r8, r1
 80086cc:	f1bc 0f00 	cmp.w	ip, #0
 80086d0:	d001      	beq.n	80086d6 <_strtod_l+0x2e6>
 80086d2:	f1c8 0800 	rsb	r8, r8, #0
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	d14e      	bne.n	8008778 <_strtod_l+0x388>
 80086da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086dc:	4308      	orrs	r0, r1
 80086de:	f47f aec0 	bne.w	8008462 <_strtod_l+0x72>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f aed6 	bne.w	8008494 <_strtod_l+0xa4>
 80086e8:	2a69      	cmp	r2, #105	@ 0x69
 80086ea:	d028      	beq.n	800873e <_strtod_l+0x34e>
 80086ec:	dc25      	bgt.n	800873a <_strtod_l+0x34a>
 80086ee:	2a49      	cmp	r2, #73	@ 0x49
 80086f0:	d025      	beq.n	800873e <_strtod_l+0x34e>
 80086f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80086f4:	f47f aece 	bne.w	8008494 <_strtod_l+0xa4>
 80086f8:	499a      	ldr	r1, [pc, #616]	@ (8008964 <_strtod_l+0x574>)
 80086fa:	a819      	add	r0, sp, #100	@ 0x64
 80086fc:	f001 f9d0 	bl	8009aa0 <__match>
 8008700:	2800      	cmp	r0, #0
 8008702:	f43f aec7 	beq.w	8008494 <_strtod_l+0xa4>
 8008706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b28      	cmp	r3, #40	@ 0x28
 800870c:	d12e      	bne.n	800876c <_strtod_l+0x37c>
 800870e:	4996      	ldr	r1, [pc, #600]	@ (8008968 <_strtod_l+0x578>)
 8008710:	aa1c      	add	r2, sp, #112	@ 0x70
 8008712:	a819      	add	r0, sp, #100	@ 0x64
 8008714:	f001 f9d8 	bl	8009ac8 <__hexnan>
 8008718:	2805      	cmp	r0, #5
 800871a:	d127      	bne.n	800876c <_strtod_l+0x37c>
 800871c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800871e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008722:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008726:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800872a:	e69a      	b.n	8008462 <_strtod_l+0x72>
 800872c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800872e:	fb08 2101 	mla	r1, r8, r1, r2
 8008732:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008736:	920e      	str	r2, [sp, #56]	@ 0x38
 8008738:	e7b5      	b.n	80086a6 <_strtod_l+0x2b6>
 800873a:	2a6e      	cmp	r2, #110	@ 0x6e
 800873c:	e7da      	b.n	80086f4 <_strtod_l+0x304>
 800873e:	498b      	ldr	r1, [pc, #556]	@ (800896c <_strtod_l+0x57c>)
 8008740:	a819      	add	r0, sp, #100	@ 0x64
 8008742:	f001 f9ad 	bl	8009aa0 <__match>
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f aea4 	beq.w	8008494 <_strtod_l+0xa4>
 800874c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800874e:	4988      	ldr	r1, [pc, #544]	@ (8008970 <_strtod_l+0x580>)
 8008750:	3b01      	subs	r3, #1
 8008752:	a819      	add	r0, sp, #100	@ 0x64
 8008754:	9319      	str	r3, [sp, #100]	@ 0x64
 8008756:	f001 f9a3 	bl	8009aa0 <__match>
 800875a:	b910      	cbnz	r0, 8008762 <_strtod_l+0x372>
 800875c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800875e:	3301      	adds	r3, #1
 8008760:	9319      	str	r3, [sp, #100]	@ 0x64
 8008762:	f04f 0a00 	mov.w	sl, #0
 8008766:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008974 <_strtod_l+0x584>
 800876a:	e67a      	b.n	8008462 <_strtod_l+0x72>
 800876c:	4882      	ldr	r0, [pc, #520]	@ (8008978 <_strtod_l+0x588>)
 800876e:	f000 fed5 	bl	800951c <nan>
 8008772:	4682      	mov	sl, r0
 8008774:	468b      	mov	fp, r1
 8008776:	e674      	b.n	8008462 <_strtod_l+0x72>
 8008778:	eba8 0309 	sub.w	r3, r8, r9
 800877c:	2f00      	cmp	r7, #0
 800877e:	bf08      	it	eq
 8008780:	462f      	moveq	r7, r5
 8008782:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008784:	2d10      	cmp	r5, #16
 8008786:	462c      	mov	r4, r5
 8008788:	9309      	str	r3, [sp, #36]	@ 0x24
 800878a:	bfa8      	it	ge
 800878c:	2410      	movge	r4, #16
 800878e:	f7f7 fe29 	bl	80003e4 <__aeabi_ui2d>
 8008792:	2d09      	cmp	r5, #9
 8008794:	4682      	mov	sl, r0
 8008796:	468b      	mov	fp, r1
 8008798:	dc11      	bgt.n	80087be <_strtod_l+0x3ce>
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	f43f ae60 	beq.w	8008462 <_strtod_l+0x72>
 80087a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a4:	dd76      	ble.n	8008894 <_strtod_l+0x4a4>
 80087a6:	2b16      	cmp	r3, #22
 80087a8:	dc5d      	bgt.n	8008866 <_strtod_l+0x476>
 80087aa:	4974      	ldr	r1, [pc, #464]	@ (800897c <_strtod_l+0x58c>)
 80087ac:	4652      	mov	r2, sl
 80087ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087b2:	465b      	mov	r3, fp
 80087b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b8:	f7f7 fe8e 	bl	80004d8 <__aeabi_dmul>
 80087bc:	e7d9      	b.n	8008772 <_strtod_l+0x382>
 80087be:	4b6f      	ldr	r3, [pc, #444]	@ (800897c <_strtod_l+0x58c>)
 80087c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80087c8:	f7f7 fe86 	bl	80004d8 <__aeabi_dmul>
 80087cc:	4682      	mov	sl, r0
 80087ce:	9808      	ldr	r0, [sp, #32]
 80087d0:	468b      	mov	fp, r1
 80087d2:	f7f7 fe07 	bl	80003e4 <__aeabi_ui2d>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4650      	mov	r0, sl
 80087dc:	4659      	mov	r1, fp
 80087de:	f7f7 fcc5 	bl	800016c <__adddf3>
 80087e2:	2d0f      	cmp	r5, #15
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	ddd7      	ble.n	800879a <_strtod_l+0x3aa>
 80087ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ec:	1b2c      	subs	r4, r5, r4
 80087ee:	441c      	add	r4, r3
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	f340 8096 	ble.w	8008922 <_strtod_l+0x532>
 80087f6:	f014 030f 	ands.w	r3, r4, #15
 80087fa:	d00a      	beq.n	8008812 <_strtod_l+0x422>
 80087fc:	495f      	ldr	r1, [pc, #380]	@ (800897c <_strtod_l+0x58c>)
 80087fe:	4652      	mov	r2, sl
 8008800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008808:	465b      	mov	r3, fp
 800880a:	f7f7 fe65 	bl	80004d8 <__aeabi_dmul>
 800880e:	4682      	mov	sl, r0
 8008810:	468b      	mov	fp, r1
 8008812:	f034 040f 	bics.w	r4, r4, #15
 8008816:	d073      	beq.n	8008900 <_strtod_l+0x510>
 8008818:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800881c:	dd48      	ble.n	80088b0 <_strtod_l+0x4c0>
 800881e:	2400      	movs	r4, #0
 8008820:	46a0      	mov	r8, r4
 8008822:	46a1      	mov	r9, r4
 8008824:	940a      	str	r4, [sp, #40]	@ 0x28
 8008826:	2322      	movs	r3, #34	@ 0x22
 8008828:	f04f 0a00 	mov.w	sl, #0
 800882c:	9a05      	ldr	r2, [sp, #20]
 800882e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008974 <_strtod_l+0x584>
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	f43f ae13 	beq.w	8008462 <_strtod_l+0x72>
 800883c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	f7ff f94c 	bl	8007adc <_Bfree>
 8008844:	4649      	mov	r1, r9
 8008846:	9805      	ldr	r0, [sp, #20]
 8008848:	f7ff f948 	bl	8007adc <_Bfree>
 800884c:	4641      	mov	r1, r8
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f7ff f944 	bl	8007adc <_Bfree>
 8008854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f7ff f940 	bl	8007adc <_Bfree>
 800885c:	4621      	mov	r1, r4
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	f7ff f93c 	bl	8007adc <_Bfree>
 8008864:	e5fd      	b.n	8008462 <_strtod_l+0x72>
 8008866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008868:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800886c:	4293      	cmp	r3, r2
 800886e:	dbbc      	blt.n	80087ea <_strtod_l+0x3fa>
 8008870:	4c42      	ldr	r4, [pc, #264]	@ (800897c <_strtod_l+0x58c>)
 8008872:	f1c5 050f 	rsb	r5, r5, #15
 8008876:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800887a:	4652      	mov	r2, sl
 800887c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008880:	465b      	mov	r3, fp
 8008882:	f7f7 fe29 	bl	80004d8 <__aeabi_dmul>
 8008886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008888:	1b5d      	subs	r5, r3, r5
 800888a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800888e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008892:	e791      	b.n	80087b8 <_strtod_l+0x3c8>
 8008894:	3316      	adds	r3, #22
 8008896:	dba8      	blt.n	80087ea <_strtod_l+0x3fa>
 8008898:	4b38      	ldr	r3, [pc, #224]	@ (800897c <_strtod_l+0x58c>)
 800889a:	eba9 0808 	sub.w	r8, r9, r8
 800889e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088a2:	4650      	mov	r0, sl
 80088a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088a8:	4659      	mov	r1, fp
 80088aa:	f7f7 ff3f 	bl	800072c <__aeabi_ddiv>
 80088ae:	e760      	b.n	8008772 <_strtod_l+0x382>
 80088b0:	4b33      	ldr	r3, [pc, #204]	@ (8008980 <_strtod_l+0x590>)
 80088b2:	4650      	mov	r0, sl
 80088b4:	9308      	str	r3, [sp, #32]
 80088b6:	2300      	movs	r3, #0
 80088b8:	4659      	mov	r1, fp
 80088ba:	461e      	mov	r6, r3
 80088bc:	1124      	asrs	r4, r4, #4
 80088be:	2c01      	cmp	r4, #1
 80088c0:	dc21      	bgt.n	8008906 <_strtod_l+0x516>
 80088c2:	b10b      	cbz	r3, 80088c8 <_strtod_l+0x4d8>
 80088c4:	4682      	mov	sl, r0
 80088c6:	468b      	mov	fp, r1
 80088c8:	492d      	ldr	r1, [pc, #180]	@ (8008980 <_strtod_l+0x590>)
 80088ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80088ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088d2:	4652      	mov	r2, sl
 80088d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d8:	465b      	mov	r3, fp
 80088da:	f7f7 fdfd 	bl	80004d8 <__aeabi_dmul>
 80088de:	4b25      	ldr	r3, [pc, #148]	@ (8008974 <_strtod_l+0x584>)
 80088e0:	460a      	mov	r2, r1
 80088e2:	400b      	ands	r3, r1
 80088e4:	4927      	ldr	r1, [pc, #156]	@ (8008984 <_strtod_l+0x594>)
 80088e6:	4682      	mov	sl, r0
 80088e8:	428b      	cmp	r3, r1
 80088ea:	d898      	bhi.n	800881e <_strtod_l+0x42e>
 80088ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80088f0:	428b      	cmp	r3, r1
 80088f2:	bf86      	itte	hi
 80088f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80088f8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008988 <_strtod_l+0x598>
 80088fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008900:	2300      	movs	r3, #0
 8008902:	9308      	str	r3, [sp, #32]
 8008904:	e07a      	b.n	80089fc <_strtod_l+0x60c>
 8008906:	07e2      	lsls	r2, r4, #31
 8008908:	d505      	bpl.n	8008916 <_strtod_l+0x526>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fde2 	bl	80004d8 <__aeabi_dmul>
 8008914:	2301      	movs	r3, #1
 8008916:	9a08      	ldr	r2, [sp, #32]
 8008918:	3601      	adds	r6, #1
 800891a:	3208      	adds	r2, #8
 800891c:	1064      	asrs	r4, r4, #1
 800891e:	9208      	str	r2, [sp, #32]
 8008920:	e7cd      	b.n	80088be <_strtod_l+0x4ce>
 8008922:	d0ed      	beq.n	8008900 <_strtod_l+0x510>
 8008924:	4264      	negs	r4, r4
 8008926:	f014 020f 	ands.w	r2, r4, #15
 800892a:	d00a      	beq.n	8008942 <_strtod_l+0x552>
 800892c:	4b13      	ldr	r3, [pc, #76]	@ (800897c <_strtod_l+0x58c>)
 800892e:	4650      	mov	r0, sl
 8008930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008934:	4659      	mov	r1, fp
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 fef7 	bl	800072c <__aeabi_ddiv>
 800893e:	4682      	mov	sl, r0
 8008940:	468b      	mov	fp, r1
 8008942:	1124      	asrs	r4, r4, #4
 8008944:	d0dc      	beq.n	8008900 <_strtod_l+0x510>
 8008946:	2c1f      	cmp	r4, #31
 8008948:	dd20      	ble.n	800898c <_strtod_l+0x59c>
 800894a:	2400      	movs	r4, #0
 800894c:	46a0      	mov	r8, r4
 800894e:	46a1      	mov	r9, r4
 8008950:	940a      	str	r4, [sp, #40]	@ 0x28
 8008952:	2322      	movs	r3, #34	@ 0x22
 8008954:	9a05      	ldr	r2, [sp, #20]
 8008956:	f04f 0a00 	mov.w	sl, #0
 800895a:	f04f 0b00 	mov.w	fp, #0
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	e768      	b.n	8008834 <_strtod_l+0x444>
 8008962:	bf00      	nop
 8008964:	0800a3b1 	.word	0x0800a3b1
 8008968:	0800a5c4 	.word	0x0800a5c4
 800896c:	0800a3a9 	.word	0x0800a3a9
 8008970:	0800a3e0 	.word	0x0800a3e0
 8008974:	7ff00000 	.word	0x7ff00000
 8008978:	0800a76d 	.word	0x0800a76d
 800897c:	0800a4f8 	.word	0x0800a4f8
 8008980:	0800a4d0 	.word	0x0800a4d0
 8008984:	7ca00000 	.word	0x7ca00000
 8008988:	7fefffff 	.word	0x7fefffff
 800898c:	f014 0310 	ands.w	r3, r4, #16
 8008990:	bf18      	it	ne
 8008992:	236a      	movne	r3, #106	@ 0x6a
 8008994:	4650      	mov	r0, sl
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	4659      	mov	r1, fp
 800899a:	2300      	movs	r3, #0
 800899c:	4ea9      	ldr	r6, [pc, #676]	@ (8008c44 <_strtod_l+0x854>)
 800899e:	07e2      	lsls	r2, r4, #31
 80089a0:	d504      	bpl.n	80089ac <_strtod_l+0x5bc>
 80089a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089a6:	f7f7 fd97 	bl	80004d8 <__aeabi_dmul>
 80089aa:	2301      	movs	r3, #1
 80089ac:	1064      	asrs	r4, r4, #1
 80089ae:	f106 0608 	add.w	r6, r6, #8
 80089b2:	d1f4      	bne.n	800899e <_strtod_l+0x5ae>
 80089b4:	b10b      	cbz	r3, 80089ba <_strtod_l+0x5ca>
 80089b6:	4682      	mov	sl, r0
 80089b8:	468b      	mov	fp, r1
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	b1b3      	cbz	r3, 80089ec <_strtod_l+0x5fc>
 80089be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	4659      	mov	r1, fp
 80089ca:	dd0f      	ble.n	80089ec <_strtod_l+0x5fc>
 80089cc:	2b1f      	cmp	r3, #31
 80089ce:	dd57      	ble.n	8008a80 <_strtod_l+0x690>
 80089d0:	2b34      	cmp	r3, #52	@ 0x34
 80089d2:	bfd8      	it	le
 80089d4:	f04f 33ff 	movle.w	r3, #4294967295
 80089d8:	f04f 0a00 	mov.w	sl, #0
 80089dc:	bfcf      	iteee	gt
 80089de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089e6:	4093      	lslle	r3, r2
 80089e8:	ea03 0b01 	andle.w	fp, r3, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	2300      	movs	r3, #0
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	f7f7 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d1a6      	bne.n	800894a <_strtod_l+0x55a>
 80089fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fe:	463a      	mov	r2, r7
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a04:	462b      	mov	r3, r5
 8008a06:	9805      	ldr	r0, [sp, #20]
 8008a08:	f7ff f8d0 	bl	8007bac <__s2b>
 8008a0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f af05 	beq.w	800881e <_strtod_l+0x42e>
 8008a14:	2400      	movs	r4, #0
 8008a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a18:	eba9 0308 	sub.w	r3, r9, r8
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	bfa8      	it	ge
 8008a20:	2300      	movge	r3, #0
 8008a22:	46a0      	mov	r8, r4
 8008a24:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a2a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a2e:	9805      	ldr	r0, [sp, #20]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	f7ff f813 	bl	8007a5c <_Balloc>
 8008a36:	4681      	mov	r9, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	f43f aef4 	beq.w	8008826 <_strtod_l+0x436>
 8008a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a40:	300c      	adds	r0, #12
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	f103 010c 	add.w	r1, r3, #12
 8008a48:	3202      	adds	r2, #2
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	f7fe f8a3 	bl	8006b96 <memcpy>
 8008a50:	ab1c      	add	r3, sp, #112	@ 0x70
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4652      	mov	r2, sl
 8008a5a:	465b      	mov	r3, fp
 8008a5c:	9805      	ldr	r0, [sp, #20]
 8008a5e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a62:	f7ff fbd5 	bl	8008210 <__d2b>
 8008a66:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	f43f aedc 	beq.w	8008826 <_strtod_l+0x436>
 8008a6e:	2101      	movs	r1, #1
 8008a70:	9805      	ldr	r0, [sp, #20]
 8008a72:	f7ff f931 	bl	8007cd8 <__i2b>
 8008a76:	4680      	mov	r8, r0
 8008a78:	b948      	cbnz	r0, 8008a8e <_strtod_l+0x69e>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	e6d2      	b.n	8008826 <_strtod_l+0x436>
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	ea03 0a0a 	and.w	sl, r3, sl
 8008a8c:	e7ae      	b.n	80089ec <_strtod_l+0x5fc>
 8008a8e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	bfab      	itete	ge
 8008a96:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a98:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a9a:	18ef      	addge	r7, r5, r3
 8008a9c:	1b5e      	sublt	r6, r3, r5
 8008a9e:	9b08      	ldr	r3, [sp, #32]
 8008aa0:	bfa8      	it	ge
 8008aa2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008aa4:	eba5 0503 	sub.w	r5, r5, r3
 8008aa8:	4415      	add	r5, r2
 8008aaa:	4b67      	ldr	r3, [pc, #412]	@ (8008c48 <_strtod_l+0x858>)
 8008aac:	f105 35ff 	add.w	r5, r5, #4294967295
 8008ab0:	bfb8      	it	lt
 8008ab2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008aba:	da50      	bge.n	8008b5e <_strtod_l+0x76e>
 8008abc:	1b5b      	subs	r3, r3, r5
 8008abe:	2b1f      	cmp	r3, #31
 8008ac0:	f04f 0101 	mov.w	r1, #1
 8008ac4:	eba2 0203 	sub.w	r2, r2, r3
 8008ac8:	dc3d      	bgt.n	8008b46 <_strtod_l+0x756>
 8008aca:	fa01 f303 	lsl.w	r3, r1, r3
 8008ace:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ad4:	18bd      	adds	r5, r7, r2
 8008ad6:	9b08      	ldr	r3, [sp, #32]
 8008ad8:	42af      	cmp	r7, r5
 8008ada:	4416      	add	r6, r2
 8008adc:	441e      	add	r6, r3
 8008ade:	463b      	mov	r3, r7
 8008ae0:	bfa8      	it	ge
 8008ae2:	462b      	movge	r3, r5
 8008ae4:	42b3      	cmp	r3, r6
 8008ae6:	bfa8      	it	ge
 8008ae8:	4633      	movge	r3, r6
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfc2      	ittt	gt
 8008aee:	1aed      	subgt	r5, r5, r3
 8008af0:	1af6      	subgt	r6, r6, r3
 8008af2:	1aff      	subgt	r7, r7, r3
 8008af4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dd16      	ble.n	8008b28 <_strtod_l+0x738>
 8008afa:	4641      	mov	r1, r8
 8008afc:	461a      	mov	r2, r3
 8008afe:	9805      	ldr	r0, [sp, #20]
 8008b00:	f7ff f9a8 	bl	8007e54 <__pow5mult>
 8008b04:	4680      	mov	r8, r0
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d0b7      	beq.n	8008a7a <_strtod_l+0x68a>
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b0e:	9805      	ldr	r0, [sp, #20]
 8008b10:	f7ff f8f8 	bl	8007d04 <__multiply>
 8008b14:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f ae85 	beq.w	8008826 <_strtod_l+0x436>
 8008b1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b1e:	9805      	ldr	r0, [sp, #20]
 8008b20:	f7fe ffdc 	bl	8007adc <_Bfree>
 8008b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	dc1d      	bgt.n	8008b68 <_strtod_l+0x778>
 8008b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dd23      	ble.n	8008b7a <_strtod_l+0x78a>
 8008b32:	4649      	mov	r1, r9
 8008b34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	f7ff f98c 	bl	8007e54 <__pow5mult>
 8008b3c:	4681      	mov	r9, r0
 8008b3e:	b9e0      	cbnz	r0, 8008b7a <_strtod_l+0x78a>
 8008b40:	f04f 0900 	mov.w	r9, #0
 8008b44:	e66f      	b.n	8008826 <_strtod_l+0x436>
 8008b46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b52:	35e2      	adds	r5, #226	@ 0xe2
 8008b54:	fa01 f305 	lsl.w	r3, r1, r5
 8008b58:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b5c:	e7ba      	b.n	8008ad4 <_strtod_l+0x6e4>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b62:	2301      	movs	r3, #1
 8008b64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b66:	e7b5      	b.n	8008ad4 <_strtod_l+0x6e4>
 8008b68:	462a      	mov	r2, r5
 8008b6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f7ff f9cb 	bl	8007f08 <__lshift>
 8008b72:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1d9      	bne.n	8008b2c <_strtod_l+0x73c>
 8008b78:	e655      	b.n	8008826 <_strtod_l+0x436>
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	dd07      	ble.n	8008b8e <_strtod_l+0x79e>
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4632      	mov	r2, r6
 8008b82:	9805      	ldr	r0, [sp, #20]
 8008b84:	f7ff f9c0 	bl	8007f08 <__lshift>
 8008b88:	4681      	mov	r9, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0d8      	beq.n	8008b40 <_strtod_l+0x750>
 8008b8e:	2f00      	cmp	r7, #0
 8008b90:	dd08      	ble.n	8008ba4 <_strtod_l+0x7b4>
 8008b92:	4641      	mov	r1, r8
 8008b94:	463a      	mov	r2, r7
 8008b96:	9805      	ldr	r0, [sp, #20]
 8008b98:	f7ff f9b6 	bl	8007f08 <__lshift>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f43f ae41 	beq.w	8008826 <_strtod_l+0x436>
 8008ba4:	464a      	mov	r2, r9
 8008ba6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ba8:	9805      	ldr	r0, [sp, #20]
 8008baa:	f7ff fa35 	bl	8008018 <__mdiff>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f43f ae38 	beq.w	8008826 <_strtod_l+0x436>
 8008bb6:	68c3      	ldr	r3, [r0, #12]
 8008bb8:	4641      	mov	r1, r8
 8008bba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60c3      	str	r3, [r0, #12]
 8008bc0:	f7ff fa0e 	bl	8007fe0 <__mcmp>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	da45      	bge.n	8008c54 <_strtod_l+0x864>
 8008bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bca:	ea53 030a 	orrs.w	r3, r3, sl
 8008bce:	d16b      	bne.n	8008ca8 <_strtod_l+0x8b8>
 8008bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d167      	bne.n	8008ca8 <_strtod_l+0x8b8>
 8008bd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bdc:	0d1b      	lsrs	r3, r3, #20
 8008bde:	051b      	lsls	r3, r3, #20
 8008be0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008be4:	d960      	bls.n	8008ca8 <_strtod_l+0x8b8>
 8008be6:	6963      	ldr	r3, [r4, #20]
 8008be8:	b913      	cbnz	r3, 8008bf0 <_strtod_l+0x800>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	dd5b      	ble.n	8008ca8 <_strtod_l+0x8b8>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	9805      	ldr	r0, [sp, #20]
 8008bf6:	f7ff f987 	bl	8007f08 <__lshift>
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	f7ff f9ef 	bl	8007fe0 <__mcmp>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	dd50      	ble.n	8008ca8 <_strtod_l+0x8b8>
 8008c06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c0a:	9a08      	ldr	r2, [sp, #32]
 8008c0c:	0d1b      	lsrs	r3, r3, #20
 8008c0e:	051b      	lsls	r3, r3, #20
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	d06a      	beq.n	8008cea <_strtod_l+0x8fa>
 8008c14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c18:	d867      	bhi.n	8008cea <_strtod_l+0x8fa>
 8008c1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c1e:	f67f ae98 	bls.w	8008952 <_strtod_l+0x562>
 8008c22:	4650      	mov	r0, sl
 8008c24:	4659      	mov	r1, fp
 8008c26:	4b09      	ldr	r3, [pc, #36]	@ (8008c4c <_strtod_l+0x85c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f7f7 fc55 	bl	80004d8 <__aeabi_dmul>
 8008c2e:	4b08      	ldr	r3, [pc, #32]	@ (8008c50 <_strtod_l+0x860>)
 8008c30:	4682      	mov	sl, r0
 8008c32:	400b      	ands	r3, r1
 8008c34:	468b      	mov	fp, r1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f ae00 	bne.w	800883c <_strtod_l+0x44c>
 8008c3c:	2322      	movs	r3, #34	@ 0x22
 8008c3e:	9a05      	ldr	r2, [sp, #20]
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	e5fb      	b.n	800883c <_strtod_l+0x44c>
 8008c44:	0800a5f0 	.word	0x0800a5f0
 8008c48:	fffffc02 	.word	0xfffffc02
 8008c4c:	39500000 	.word	0x39500000
 8008c50:	7ff00000 	.word	0x7ff00000
 8008c54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c58:	d165      	bne.n	8008d26 <_strtod_l+0x936>
 8008c5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c60:	b35a      	cbz	r2, 8008cba <_strtod_l+0x8ca>
 8008c62:	4a99      	ldr	r2, [pc, #612]	@ (8008ec8 <_strtod_l+0xad8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d12b      	bne.n	8008cc0 <_strtod_l+0x8d0>
 8008c68:	9b08      	ldr	r3, [sp, #32]
 8008c6a:	4651      	mov	r1, sl
 8008c6c:	b303      	cbz	r3, 8008cb0 <_strtod_l+0x8c0>
 8008c6e:	465a      	mov	r2, fp
 8008c70:	4b96      	ldr	r3, [pc, #600]	@ (8008ecc <_strtod_l+0xadc>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c78:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7c:	d81b      	bhi.n	8008cb6 <_strtod_l+0x8c6>
 8008c7e:	0d1b      	lsrs	r3, r3, #20
 8008c80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d119      	bne.n	8008cc0 <_strtod_l+0x8d0>
 8008c8c:	4b90      	ldr	r3, [pc, #576]	@ (8008ed0 <_strtod_l+0xae0>)
 8008c8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d102      	bne.n	8008c9a <_strtod_l+0x8aa>
 8008c94:	3101      	adds	r1, #1
 8008c96:	f43f adc6 	beq.w	8008826 <_strtod_l+0x436>
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8008ecc <_strtod_l+0xadc>)
 8008ca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ca2:	401a      	ands	r2, r3
 8008ca4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1b9      	bne.n	8008c22 <_strtod_l+0x832>
 8008cae:	e5c5      	b.n	800883c <_strtod_l+0x44c>
 8008cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb4:	e7e8      	b.n	8008c88 <_strtod_l+0x898>
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	e7e6      	b.n	8008c88 <_strtod_l+0x898>
 8008cba:	ea53 030a 	orrs.w	r3, r3, sl
 8008cbe:	d0a2      	beq.n	8008c06 <_strtod_l+0x816>
 8008cc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cc2:	b1db      	cbz	r3, 8008cfc <_strtod_l+0x90c>
 8008cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cc6:	4213      	tst	r3, r2
 8008cc8:	d0ee      	beq.n	8008ca8 <_strtod_l+0x8b8>
 8008cca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ccc:	4650      	mov	r0, sl
 8008cce:	4659      	mov	r1, fp
 8008cd0:	9a08      	ldr	r2, [sp, #32]
 8008cd2:	b1bb      	cbz	r3, 8008d04 <_strtod_l+0x914>
 8008cd4:	f7ff fb68 	bl	80083a8 <sulp>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ce0:	f7f7 fa44 	bl	800016c <__adddf3>
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	468b      	mov	fp, r1
 8008ce8:	e7de      	b.n	8008ca8 <_strtod_l+0x8b8>
 8008cea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cf2:	f04f 3aff 	mov.w	sl, #4294967295
 8008cf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cfa:	e7d5      	b.n	8008ca8 <_strtod_l+0x8b8>
 8008cfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cfe:	ea13 0f0a 	tst.w	r3, sl
 8008d02:	e7e1      	b.n	8008cc8 <_strtod_l+0x8d8>
 8008d04:	f7ff fb50 	bl	80083a8 <sulp>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d10:	f7f7 fa2a 	bl	8000168 <__aeabi_dsub>
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	4682      	mov	sl, r0
 8008d1a:	468b      	mov	fp, r1
 8008d1c:	f7f7 fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0c1      	beq.n	8008ca8 <_strtod_l+0x8b8>
 8008d24:	e615      	b.n	8008952 <_strtod_l+0x562>
 8008d26:	4641      	mov	r1, r8
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7ff fac9 	bl	80082c0 <__ratio>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	f7f7 fe4a 	bl	80009d0 <__aeabi_dcmple>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d06d      	beq.n	8008e1c <_strtod_l+0xa2c>
 8008d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d178      	bne.n	8008e38 <_strtod_l+0xa48>
 8008d46:	f1ba 0f00 	cmp.w	sl, #0
 8008d4a:	d156      	bne.n	8008dfa <_strtod_l+0xa0a>
 8008d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d158      	bne.n	8008e08 <_strtod_l+0xa18>
 8008d56:	2200      	movs	r2, #0
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ed4 <_strtod_l+0xae4>)
 8008d5e:	f7f7 fe2d 	bl	80009bc <__aeabi_dcmplt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d157      	bne.n	8008e16 <_strtod_l+0xa26>
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ed8 <_strtod_l+0xae8>)
 8008d6e:	f7f7 fbb3 	bl	80004d8 <__aeabi_dmul>
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d7a:	9606      	str	r6, [sp, #24]
 8008d7c:	9307      	str	r3, [sp, #28]
 8008d7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d82:	4d52      	ldr	r5, [pc, #328]	@ (8008ecc <_strtod_l+0xadc>)
 8008d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d8a:	401d      	ands	r5, r3
 8008d8c:	4b53      	ldr	r3, [pc, #332]	@ (8008edc <_strtod_l+0xaec>)
 8008d8e:	429d      	cmp	r5, r3
 8008d90:	f040 80aa 	bne.w	8008ee8 <_strtod_l+0xaf8>
 8008d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d96:	4650      	mov	r0, sl
 8008d98:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	f7ff f9cf 	bl	8008140 <__ulp>
 8008da2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008da6:	f7f7 fb97 	bl	80004d8 <__aeabi_dmul>
 8008daa:	4652      	mov	r2, sl
 8008dac:	465b      	mov	r3, fp
 8008dae:	f7f7 f9dd 	bl	800016c <__adddf3>
 8008db2:	460b      	mov	r3, r1
 8008db4:	4945      	ldr	r1, [pc, #276]	@ (8008ecc <_strtod_l+0xadc>)
 8008db6:	4a4a      	ldr	r2, [pc, #296]	@ (8008ee0 <_strtod_l+0xaf0>)
 8008db8:	4019      	ands	r1, r3
 8008dba:	4291      	cmp	r1, r2
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	d942      	bls.n	8008e46 <_strtod_l+0xa56>
 8008dc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dc2:	4b43      	ldr	r3, [pc, #268]	@ (8008ed0 <_strtod_l+0xae0>)
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d103      	bne.n	8008dd0 <_strtod_l+0x9e0>
 8008dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f43f ad2b 	beq.w	8008826 <_strtod_l+0x436>
 8008dd0:	f04f 3aff 	mov.w	sl, #4294967295
 8008dd4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008ed0 <_strtod_l+0xae0>
 8008dd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dda:	9805      	ldr	r0, [sp, #20]
 8008ddc:	f7fe fe7e 	bl	8007adc <_Bfree>
 8008de0:	4649      	mov	r1, r9
 8008de2:	9805      	ldr	r0, [sp, #20]
 8008de4:	f7fe fe7a 	bl	8007adc <_Bfree>
 8008de8:	4641      	mov	r1, r8
 8008dea:	9805      	ldr	r0, [sp, #20]
 8008dec:	f7fe fe76 	bl	8007adc <_Bfree>
 8008df0:	4621      	mov	r1, r4
 8008df2:	9805      	ldr	r0, [sp, #20]
 8008df4:	f7fe fe72 	bl	8007adc <_Bfree>
 8008df8:	e618      	b.n	8008a2c <_strtod_l+0x63c>
 8008dfa:	f1ba 0f01 	cmp.w	sl, #1
 8008dfe:	d103      	bne.n	8008e08 <_strtod_l+0xa18>
 8008e00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f43f ada5 	beq.w	8008952 <_strtod_l+0x562>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4b36      	ldr	r3, [pc, #216]	@ (8008ee4 <_strtod_l+0xaf4>)
 8008e0c:	2600      	movs	r6, #0
 8008e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e12:	4f30      	ldr	r7, [pc, #192]	@ (8008ed4 <_strtod_l+0xae4>)
 8008e14:	e7b3      	b.n	8008d7e <_strtod_l+0x98e>
 8008e16:	2600      	movs	r6, #0
 8008e18:	4f2f      	ldr	r7, [pc, #188]	@ (8008ed8 <_strtod_l+0xae8>)
 8008e1a:	e7ac      	b.n	8008d76 <_strtod_l+0x986>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4b2d      	ldr	r3, [pc, #180]	@ (8008ed8 <_strtod_l+0xae8>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fb58 	bl	80004d8 <__aeabi_dmul>
 8008e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460f      	mov	r7, r1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0a1      	beq.n	8008d76 <_strtod_l+0x986>
 8008e32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e36:	e7a2      	b.n	8008d7e <_strtod_l+0x98e>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4b26      	ldr	r3, [pc, #152]	@ (8008ed4 <_strtod_l+0xae4>)
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	461f      	mov	r7, r3
 8008e40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e44:	e79b      	b.n	8008d7e <_strtod_l+0x98e>
 8008e46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1c1      	bne.n	8008dd8 <_strtod_l+0x9e8>
 8008e54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e58:	0d1b      	lsrs	r3, r3, #20
 8008e5a:	051b      	lsls	r3, r3, #20
 8008e5c:	429d      	cmp	r5, r3
 8008e5e:	d1bb      	bne.n	8008dd8 <_strtod_l+0x9e8>
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fe80 	bl	8000b68 <__aeabi_d2lz>
 8008e68:	f7f7 fb08 	bl	800047c <__aeabi_l2d>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 f978 	bl	8000168 <__aeabi_dsub>
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e86:	ea46 060a 	orr.w	r6, r6, sl
 8008e8a:	431e      	orrs	r6, r3
 8008e8c:	d069      	beq.n	8008f62 <_strtod_l+0xb72>
 8008e8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008eb8 <_strtod_l+0xac8>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fd92 	bl	80009bc <__aeabi_dcmplt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f47f accf 	bne.w	800883c <_strtod_l+0x44c>
 8008e9e:	a308      	add	r3, pc, #32	@ (adr r3, 8008ec0 <_strtod_l+0xad0>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ea8:	f7f7 fda6 	bl	80009f8 <__aeabi_dcmpgt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d093      	beq.n	8008dd8 <_strtod_l+0x9e8>
 8008eb0:	e4c4      	b.n	800883c <_strtod_l+0x44c>
 8008eb2:	bf00      	nop
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	94a03595 	.word	0x94a03595
 8008ebc:	3fdfffff 	.word	0x3fdfffff
 8008ec0:	35afe535 	.word	0x35afe535
 8008ec4:	3fe00000 	.word	0x3fe00000
 8008ec8:	000fffff 	.word	0x000fffff
 8008ecc:	7ff00000 	.word	0x7ff00000
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	3ff00000 	.word	0x3ff00000
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	7fe00000 	.word	0x7fe00000
 8008ee0:	7c9fffff 	.word	0x7c9fffff
 8008ee4:	bff00000 	.word	0xbff00000
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	b323      	cbz	r3, 8008f36 <_strtod_l+0xb46>
 8008eec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008ef0:	d821      	bhi.n	8008f36 <_strtod_l+0xb46>
 8008ef2:	a327      	add	r3, pc, #156	@ (adr r3, 8008f90 <_strtod_l+0xba0>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fd68 	bl	80009d0 <__aeabi_dcmple>
 8008f00:	b1a0      	cbz	r0, 8008f2c <_strtod_l+0xb3c>
 8008f02:	4639      	mov	r1, r7
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7f7 fdbf 	bl	8000a88 <__aeabi_d2uiz>
 8008f0a:	2801      	cmp	r0, #1
 8008f0c:	bf38      	it	cc
 8008f0e:	2001      	movcc	r0, #1
 8008f10:	f7f7 fa68 	bl	80003e4 <__aeabi_ui2d>
 8008f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	b9fb      	cbnz	r3, 8008f5c <_strtod_l+0xb6c>
 8008f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f20:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f22:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f2e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f32:	1b5b      	subs	r3, r3, r5
 8008f34:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f3e:	f7ff f8ff 	bl	8008140 <__ulp>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	f7f7 fac5 	bl	80004d8 <__aeabi_dmul>
 8008f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f52:	f7f7 f90b 	bl	800016c <__adddf3>
 8008f56:	4682      	mov	sl, r0
 8008f58:	468b      	mov	fp, r1
 8008f5a:	e776      	b.n	8008e4a <_strtod_l+0xa5a>
 8008f5c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f60:	e7e0      	b.n	8008f24 <_strtod_l+0xb34>
 8008f62:	a30d      	add	r3, pc, #52	@ (adr r3, 8008f98 <_strtod_l+0xba8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 fd28 	bl	80009bc <__aeabi_dcmplt>
 8008f6c:	e79e      	b.n	8008eac <_strtod_l+0xabc>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f74:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	f7ff ba77 	b.w	800846a <_strtod_l+0x7a>
 8008f7c:	2a65      	cmp	r2, #101	@ 0x65
 8008f7e:	f43f ab6e 	beq.w	800865e <_strtod_l+0x26e>
 8008f82:	2a45      	cmp	r2, #69	@ 0x45
 8008f84:	f43f ab6b 	beq.w	800865e <_strtod_l+0x26e>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f7ff bba6 	b.w	80086da <_strtod_l+0x2ea>
 8008f8e:	bf00      	nop
 8008f90:	ffc00000 	.word	0xffc00000
 8008f94:	41dfffff 	.word	0x41dfffff
 8008f98:	94a03595 	.word	0x94a03595
 8008f9c:	3fcfffff 	.word	0x3fcfffff

08008fa0 <_strtod_r>:
 8008fa0:	4b01      	ldr	r3, [pc, #4]	@ (8008fa8 <_strtod_r+0x8>)
 8008fa2:	f7ff ba25 	b.w	80083f0 <_strtod_l>
 8008fa6:	bf00      	nop
 8008fa8:	20000074 	.word	0x20000074

08008fac <_strtol_l.constprop.0>:
 8008fac:	2b24      	cmp	r3, #36	@ 0x24
 8008fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb2:	4686      	mov	lr, r0
 8008fb4:	4690      	mov	r8, r2
 8008fb6:	d801      	bhi.n	8008fbc <_strtol_l.constprop.0+0x10>
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d106      	bne.n	8008fca <_strtol_l.constprop.0+0x1e>
 8008fbc:	f7fd fdb0 	bl	8006b20 <__errno>
 8008fc0:	2316      	movs	r3, #22
 8008fc2:	6003      	str	r3, [r0, #0]
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fca:	460d      	mov	r5, r1
 8008fcc:	4833      	ldr	r0, [pc, #204]	@ (800909c <_strtol_l.constprop.0+0xf0>)
 8008fce:	462a      	mov	r2, r5
 8008fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd4:	5d06      	ldrb	r6, [r0, r4]
 8008fd6:	f016 0608 	ands.w	r6, r6, #8
 8008fda:	d1f8      	bne.n	8008fce <_strtol_l.constprop.0+0x22>
 8008fdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008fde:	d12d      	bne.n	800903c <_strtol_l.constprop.0+0x90>
 8008fe0:	2601      	movs	r6, #1
 8008fe2:	782c      	ldrb	r4, [r5, #0]
 8008fe4:	1c95      	adds	r5, r2, #2
 8008fe6:	f033 0210 	bics.w	r2, r3, #16
 8008fea:	d109      	bne.n	8009000 <_strtol_l.constprop.0+0x54>
 8008fec:	2c30      	cmp	r4, #48	@ 0x30
 8008fee:	d12a      	bne.n	8009046 <_strtol_l.constprop.0+0x9a>
 8008ff0:	782a      	ldrb	r2, [r5, #0]
 8008ff2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ff6:	2a58      	cmp	r2, #88	@ 0x58
 8008ff8:	d125      	bne.n	8009046 <_strtol_l.constprop.0+0x9a>
 8008ffa:	2310      	movs	r3, #16
 8008ffc:	786c      	ldrb	r4, [r5, #1]
 8008ffe:	3502      	adds	r5, #2
 8009000:	2200      	movs	r2, #0
 8009002:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009006:	f10c 3cff 	add.w	ip, ip, #4294967295
 800900a:	fbbc f9f3 	udiv	r9, ip, r3
 800900e:	4610      	mov	r0, r2
 8009010:	fb03 ca19 	mls	sl, r3, r9, ip
 8009014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009018:	2f09      	cmp	r7, #9
 800901a:	d81b      	bhi.n	8009054 <_strtol_l.constprop.0+0xa8>
 800901c:	463c      	mov	r4, r7
 800901e:	42a3      	cmp	r3, r4
 8009020:	dd27      	ble.n	8009072 <_strtol_l.constprop.0+0xc6>
 8009022:	1c57      	adds	r7, r2, #1
 8009024:	d007      	beq.n	8009036 <_strtol_l.constprop.0+0x8a>
 8009026:	4581      	cmp	r9, r0
 8009028:	d320      	bcc.n	800906c <_strtol_l.constprop.0+0xc0>
 800902a:	d101      	bne.n	8009030 <_strtol_l.constprop.0+0x84>
 800902c:	45a2      	cmp	sl, r4
 800902e:	db1d      	blt.n	800906c <_strtol_l.constprop.0+0xc0>
 8009030:	2201      	movs	r2, #1
 8009032:	fb00 4003 	mla	r0, r0, r3, r4
 8009036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800903a:	e7eb      	b.n	8009014 <_strtol_l.constprop.0+0x68>
 800903c:	2c2b      	cmp	r4, #43	@ 0x2b
 800903e:	bf04      	itt	eq
 8009040:	782c      	ldrbeq	r4, [r5, #0]
 8009042:	1c95      	addeq	r5, r2, #2
 8009044:	e7cf      	b.n	8008fe6 <_strtol_l.constprop.0+0x3a>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1da      	bne.n	8009000 <_strtol_l.constprop.0+0x54>
 800904a:	2c30      	cmp	r4, #48	@ 0x30
 800904c:	bf0c      	ite	eq
 800904e:	2308      	moveq	r3, #8
 8009050:	230a      	movne	r3, #10
 8009052:	e7d5      	b.n	8009000 <_strtol_l.constprop.0+0x54>
 8009054:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009058:	2f19      	cmp	r7, #25
 800905a:	d801      	bhi.n	8009060 <_strtol_l.constprop.0+0xb4>
 800905c:	3c37      	subs	r4, #55	@ 0x37
 800905e:	e7de      	b.n	800901e <_strtol_l.constprop.0+0x72>
 8009060:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009064:	2f19      	cmp	r7, #25
 8009066:	d804      	bhi.n	8009072 <_strtol_l.constprop.0+0xc6>
 8009068:	3c57      	subs	r4, #87	@ 0x57
 800906a:	e7d8      	b.n	800901e <_strtol_l.constprop.0+0x72>
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	e7e1      	b.n	8009036 <_strtol_l.constprop.0+0x8a>
 8009072:	1c53      	adds	r3, r2, #1
 8009074:	d108      	bne.n	8009088 <_strtol_l.constprop.0+0xdc>
 8009076:	2322      	movs	r3, #34	@ 0x22
 8009078:	4660      	mov	r0, ip
 800907a:	f8ce 3000 	str.w	r3, [lr]
 800907e:	f1b8 0f00 	cmp.w	r8, #0
 8009082:	d0a0      	beq.n	8008fc6 <_strtol_l.constprop.0+0x1a>
 8009084:	1e69      	subs	r1, r5, #1
 8009086:	e006      	b.n	8009096 <_strtol_l.constprop.0+0xea>
 8009088:	b106      	cbz	r6, 800908c <_strtol_l.constprop.0+0xe0>
 800908a:	4240      	negs	r0, r0
 800908c:	f1b8 0f00 	cmp.w	r8, #0
 8009090:	d099      	beq.n	8008fc6 <_strtol_l.constprop.0+0x1a>
 8009092:	2a00      	cmp	r2, #0
 8009094:	d1f6      	bne.n	8009084 <_strtol_l.constprop.0+0xd8>
 8009096:	f8c8 1000 	str.w	r1, [r8]
 800909a:	e794      	b.n	8008fc6 <_strtol_l.constprop.0+0x1a>
 800909c:	0800a619 	.word	0x0800a619

080090a0 <_strtol_r>:
 80090a0:	f7ff bf84 	b.w	8008fac <_strtol_l.constprop.0>

080090a4 <__ssputs_r>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	461f      	mov	r7, r3
 80090aa:	688e      	ldr	r6, [r1, #8]
 80090ac:	4682      	mov	sl, r0
 80090ae:	42be      	cmp	r6, r7
 80090b0:	460c      	mov	r4, r1
 80090b2:	4690      	mov	r8, r2
 80090b4:	680b      	ldr	r3, [r1, #0]
 80090b6:	d82d      	bhi.n	8009114 <__ssputs_r+0x70>
 80090b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090c0:	d026      	beq.n	8009110 <__ssputs_r+0x6c>
 80090c2:	6965      	ldr	r5, [r4, #20]
 80090c4:	6909      	ldr	r1, [r1, #16]
 80090c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090ca:	eba3 0901 	sub.w	r9, r3, r1
 80090ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d2:	1c7b      	adds	r3, r7, #1
 80090d4:	444b      	add	r3, r9
 80090d6:	106d      	asrs	r5, r5, #1
 80090d8:	429d      	cmp	r5, r3
 80090da:	bf38      	it	cc
 80090dc:	461d      	movcc	r5, r3
 80090de:	0553      	lsls	r3, r2, #21
 80090e0:	d527      	bpl.n	8009132 <__ssputs_r+0x8e>
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7fe fc2e 	bl	8007944 <_malloc_r>
 80090e8:	4606      	mov	r6, r0
 80090ea:	b360      	cbz	r0, 8009146 <__ssputs_r+0xa2>
 80090ec:	464a      	mov	r2, r9
 80090ee:	6921      	ldr	r1, [r4, #16]
 80090f0:	f7fd fd51 	bl	8006b96 <memcpy>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	6126      	str	r6, [r4, #16]
 8009102:	444e      	add	r6, r9
 8009104:	6026      	str	r6, [r4, #0]
 8009106:	463e      	mov	r6, r7
 8009108:	6165      	str	r5, [r4, #20]
 800910a:	eba5 0509 	sub.w	r5, r5, r9
 800910e:	60a5      	str	r5, [r4, #8]
 8009110:	42be      	cmp	r6, r7
 8009112:	d900      	bls.n	8009116 <__ssputs_r+0x72>
 8009114:	463e      	mov	r6, r7
 8009116:	4632      	mov	r2, r6
 8009118:	4641      	mov	r1, r8
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	f000 f9c2 	bl	80094a4 <memmove>
 8009120:	2000      	movs	r0, #0
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	1b9b      	subs	r3, r3, r6
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	4433      	add	r3, r6
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009132:	462a      	mov	r2, r5
 8009134:	f000 fd75 	bl	8009c22 <_realloc_r>
 8009138:	4606      	mov	r6, r0
 800913a:	2800      	cmp	r0, #0
 800913c:	d1e0      	bne.n	8009100 <__ssputs_r+0x5c>
 800913e:	4650      	mov	r0, sl
 8009140:	6921      	ldr	r1, [r4, #16]
 8009142:	f7fe fb8d 	bl	8007860 <_free_r>
 8009146:	230c      	movs	r3, #12
 8009148:	f8ca 3000 	str.w	r3, [sl]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	e7e9      	b.n	800912e <__ssputs_r+0x8a>
	...

0800915c <_svfiprintf_r>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4698      	mov	r8, r3
 8009162:	898b      	ldrh	r3, [r1, #12]
 8009164:	4607      	mov	r7, r0
 8009166:	061b      	lsls	r3, r3, #24
 8009168:	460d      	mov	r5, r1
 800916a:	4614      	mov	r4, r2
 800916c:	b09d      	sub	sp, #116	@ 0x74
 800916e:	d510      	bpl.n	8009192 <_svfiprintf_r+0x36>
 8009170:	690b      	ldr	r3, [r1, #16]
 8009172:	b973      	cbnz	r3, 8009192 <_svfiprintf_r+0x36>
 8009174:	2140      	movs	r1, #64	@ 0x40
 8009176:	f7fe fbe5 	bl	8007944 <_malloc_r>
 800917a:	6028      	str	r0, [r5, #0]
 800917c:	6128      	str	r0, [r5, #16]
 800917e:	b930      	cbnz	r0, 800918e <_svfiprintf_r+0x32>
 8009180:	230c      	movs	r3, #12
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	b01d      	add	sp, #116	@ 0x74
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	2340      	movs	r3, #64	@ 0x40
 8009190:	616b      	str	r3, [r5, #20]
 8009192:	2300      	movs	r3, #0
 8009194:	9309      	str	r3, [sp, #36]	@ 0x24
 8009196:	2320      	movs	r3, #32
 8009198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800919c:	2330      	movs	r3, #48	@ 0x30
 800919e:	f04f 0901 	mov.w	r9, #1
 80091a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009340 <_svfiprintf_r+0x1e4>
 80091aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ae:	4623      	mov	r3, r4
 80091b0:	469a      	mov	sl, r3
 80091b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b6:	b10a      	cbz	r2, 80091bc <_svfiprintf_r+0x60>
 80091b8:	2a25      	cmp	r2, #37	@ 0x25
 80091ba:	d1f9      	bne.n	80091b0 <_svfiprintf_r+0x54>
 80091bc:	ebba 0b04 	subs.w	fp, sl, r4
 80091c0:	d00b      	beq.n	80091da <_svfiprintf_r+0x7e>
 80091c2:	465b      	mov	r3, fp
 80091c4:	4622      	mov	r2, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff ff6b 	bl	80090a4 <__ssputs_r>
 80091ce:	3001      	adds	r0, #1
 80091d0:	f000 80a7 	beq.w	8009322 <_svfiprintf_r+0x1c6>
 80091d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091d6:	445a      	add	r2, fp
 80091d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 809f 	beq.w	8009322 <_svfiprintf_r+0x1c6>
 80091e4:	2300      	movs	r3, #0
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ee:	f10a 0a01 	add.w	sl, sl, #1
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80091fc:	4654      	mov	r4, sl
 80091fe:	2205      	movs	r2, #5
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	484e      	ldr	r0, [pc, #312]	@ (8009340 <_svfiprintf_r+0x1e4>)
 8009206:	f7fd fcb8 	bl	8006b7a <memchr>
 800920a:	9a04      	ldr	r2, [sp, #16]
 800920c:	b9d8      	cbnz	r0, 8009246 <_svfiprintf_r+0xea>
 800920e:	06d0      	lsls	r0, r2, #27
 8009210:	bf44      	itt	mi
 8009212:	2320      	movmi	r3, #32
 8009214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009218:	0711      	lsls	r1, r2, #28
 800921a:	bf44      	itt	mi
 800921c:	232b      	movmi	r3, #43	@ 0x2b
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009222:	f89a 3000 	ldrb.w	r3, [sl]
 8009226:	2b2a      	cmp	r3, #42	@ 0x2a
 8009228:	d015      	beq.n	8009256 <_svfiprintf_r+0xfa>
 800922a:	4654      	mov	r4, sl
 800922c:	2000      	movs	r0, #0
 800922e:	f04f 0c0a 	mov.w	ip, #10
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	4621      	mov	r1, r4
 8009236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800923a:	3b30      	subs	r3, #48	@ 0x30
 800923c:	2b09      	cmp	r3, #9
 800923e:	d94b      	bls.n	80092d8 <_svfiprintf_r+0x17c>
 8009240:	b1b0      	cbz	r0, 8009270 <_svfiprintf_r+0x114>
 8009242:	9207      	str	r2, [sp, #28]
 8009244:	e014      	b.n	8009270 <_svfiprintf_r+0x114>
 8009246:	eba0 0308 	sub.w	r3, r0, r8
 800924a:	fa09 f303 	lsl.w	r3, r9, r3
 800924e:	4313      	orrs	r3, r2
 8009250:	46a2      	mov	sl, r4
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	e7d2      	b.n	80091fc <_svfiprintf_r+0xa0>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	1d19      	adds	r1, r3, #4
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	9103      	str	r1, [sp, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	bfbb      	ittet	lt
 8009262:	425b      	neglt	r3, r3
 8009264:	f042 0202 	orrlt.w	r2, r2, #2
 8009268:	9307      	strge	r3, [sp, #28]
 800926a:	9307      	strlt	r3, [sp, #28]
 800926c:	bfb8      	it	lt
 800926e:	9204      	strlt	r2, [sp, #16]
 8009270:	7823      	ldrb	r3, [r4, #0]
 8009272:	2b2e      	cmp	r3, #46	@ 0x2e
 8009274:	d10a      	bne.n	800928c <_svfiprintf_r+0x130>
 8009276:	7863      	ldrb	r3, [r4, #1]
 8009278:	2b2a      	cmp	r3, #42	@ 0x2a
 800927a:	d132      	bne.n	80092e2 <_svfiprintf_r+0x186>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	3402      	adds	r4, #2
 8009280:	1d1a      	adds	r2, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9203      	str	r2, [sp, #12]
 8009286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009344 <_svfiprintf_r+0x1e8>
 8009290:	2203      	movs	r2, #3
 8009292:	4650      	mov	r0, sl
 8009294:	7821      	ldrb	r1, [r4, #0]
 8009296:	f7fd fc70 	bl	8006b7a <memchr>
 800929a:	b138      	cbz	r0, 80092ac <_svfiprintf_r+0x150>
 800929c:	2240      	movs	r2, #64	@ 0x40
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	eba0 000a 	sub.w	r0, r0, sl
 80092a4:	4082      	lsls	r2, r0
 80092a6:	4313      	orrs	r3, r2
 80092a8:	3401      	adds	r4, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	2206      	movs	r2, #6
 80092b2:	4825      	ldr	r0, [pc, #148]	@ (8009348 <_svfiprintf_r+0x1ec>)
 80092b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092b8:	f7fd fc5f 	bl	8006b7a <memchr>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d036      	beq.n	800932e <_svfiprintf_r+0x1d2>
 80092c0:	4b22      	ldr	r3, [pc, #136]	@ (800934c <_svfiprintf_r+0x1f0>)
 80092c2:	bb1b      	cbnz	r3, 800930c <_svfiprintf_r+0x1b0>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	3307      	adds	r3, #7
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d2:	4433      	add	r3, r6
 80092d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d6:	e76a      	b.n	80091ae <_svfiprintf_r+0x52>
 80092d8:	460c      	mov	r4, r1
 80092da:	2001      	movs	r0, #1
 80092dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e0:	e7a8      	b.n	8009234 <_svfiprintf_r+0xd8>
 80092e2:	2300      	movs	r3, #0
 80092e4:	f04f 0c0a 	mov.w	ip, #10
 80092e8:	4619      	mov	r1, r3
 80092ea:	3401      	adds	r4, #1
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	4620      	mov	r0, r4
 80092f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f4:	3a30      	subs	r2, #48	@ 0x30
 80092f6:	2a09      	cmp	r2, #9
 80092f8:	d903      	bls.n	8009302 <_svfiprintf_r+0x1a6>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c6      	beq.n	800928c <_svfiprintf_r+0x130>
 80092fe:	9105      	str	r1, [sp, #20]
 8009300:	e7c4      	b.n	800928c <_svfiprintf_r+0x130>
 8009302:	4604      	mov	r4, r0
 8009304:	2301      	movs	r3, #1
 8009306:	fb0c 2101 	mla	r1, ip, r1, r2
 800930a:	e7f0      	b.n	80092ee <_svfiprintf_r+0x192>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4638      	mov	r0, r7
 8009314:	4b0e      	ldr	r3, [pc, #56]	@ (8009350 <_svfiprintf_r+0x1f4>)
 8009316:	a904      	add	r1, sp, #16
 8009318:	f7fc fc9c 	bl	8005c54 <_printf_float>
 800931c:	1c42      	adds	r2, r0, #1
 800931e:	4606      	mov	r6, r0
 8009320:	d1d6      	bne.n	80092d0 <_svfiprintf_r+0x174>
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	065b      	lsls	r3, r3, #25
 8009326:	f53f af2d 	bmi.w	8009184 <_svfiprintf_r+0x28>
 800932a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800932c:	e72c      	b.n	8009188 <_svfiprintf_r+0x2c>
 800932e:	ab03      	add	r3, sp, #12
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	462a      	mov	r2, r5
 8009334:	4638      	mov	r0, r7
 8009336:	4b06      	ldr	r3, [pc, #24]	@ (8009350 <_svfiprintf_r+0x1f4>)
 8009338:	a904      	add	r1, sp, #16
 800933a:	f7fc ff29 	bl	8006190 <_printf_i>
 800933e:	e7ed      	b.n	800931c <_svfiprintf_r+0x1c0>
 8009340:	0800a719 	.word	0x0800a719
 8009344:	0800a71f 	.word	0x0800a71f
 8009348:	0800a723 	.word	0x0800a723
 800934c:	08005c55 	.word	0x08005c55
 8009350:	080090a5 	.word	0x080090a5

08009354 <__sflush_r>:
 8009354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	0716      	lsls	r6, r2, #28
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	d454      	bmi.n	800940c <__sflush_r+0xb8>
 8009362:	684b      	ldr	r3, [r1, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc02      	bgt.n	800936e <__sflush_r+0x1a>
 8009368:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	dd48      	ble.n	8009400 <__sflush_r+0xac>
 800936e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009370:	2e00      	cmp	r6, #0
 8009372:	d045      	beq.n	8009400 <__sflush_r+0xac>
 8009374:	2300      	movs	r3, #0
 8009376:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800937a:	682f      	ldr	r7, [r5, #0]
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	d030      	beq.n	80093e4 <__sflush_r+0x90>
 8009382:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	0759      	lsls	r1, r3, #29
 8009388:	d505      	bpl.n	8009396 <__sflush_r+0x42>
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	1ad2      	subs	r2, r2, r3
 800938e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009390:	b10b      	cbz	r3, 8009396 <__sflush_r+0x42>
 8009392:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009394:	1ad2      	subs	r2, r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	4628      	mov	r0, r5
 800939a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800939c:	6a21      	ldr	r1, [r4, #32]
 800939e:	47b0      	blx	r6
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	d106      	bne.n	80093b4 <__sflush_r+0x60>
 80093a6:	6829      	ldr	r1, [r5, #0]
 80093a8:	291d      	cmp	r1, #29
 80093aa:	d82b      	bhi.n	8009404 <__sflush_r+0xb0>
 80093ac:	4a28      	ldr	r2, [pc, #160]	@ (8009450 <__sflush_r+0xfc>)
 80093ae:	410a      	asrs	r2, r1
 80093b0:	07d6      	lsls	r6, r2, #31
 80093b2:	d427      	bmi.n	8009404 <__sflush_r+0xb0>
 80093b4:	2200      	movs	r2, #0
 80093b6:	6062      	str	r2, [r4, #4]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	04d9      	lsls	r1, r3, #19
 80093bc:	6022      	str	r2, [r4, #0]
 80093be:	d504      	bpl.n	80093ca <__sflush_r+0x76>
 80093c0:	1c42      	adds	r2, r0, #1
 80093c2:	d101      	bne.n	80093c8 <__sflush_r+0x74>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b903      	cbnz	r3, 80093ca <__sflush_r+0x76>
 80093c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80093ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093cc:	602f      	str	r7, [r5, #0]
 80093ce:	b1b9      	cbz	r1, 8009400 <__sflush_r+0xac>
 80093d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093d4:	4299      	cmp	r1, r3
 80093d6:	d002      	beq.n	80093de <__sflush_r+0x8a>
 80093d8:	4628      	mov	r0, r5
 80093da:	f7fe fa41 	bl	8007860 <_free_r>
 80093de:	2300      	movs	r3, #0
 80093e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e2:	e00d      	b.n	8009400 <__sflush_r+0xac>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b0      	blx	r6
 80093ea:	4602      	mov	r2, r0
 80093ec:	1c50      	adds	r0, r2, #1
 80093ee:	d1c9      	bne.n	8009384 <__sflush_r+0x30>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0c6      	beq.n	8009384 <__sflush_r+0x30>
 80093f6:	2b1d      	cmp	r3, #29
 80093f8:	d001      	beq.n	80093fe <__sflush_r+0xaa>
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	d11d      	bne.n	800943a <__sflush_r+0xe6>
 80093fe:	602f      	str	r7, [r5, #0]
 8009400:	2000      	movs	r0, #0
 8009402:	e021      	b.n	8009448 <__sflush_r+0xf4>
 8009404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009408:	b21b      	sxth	r3, r3
 800940a:	e01a      	b.n	8009442 <__sflush_r+0xee>
 800940c:	690f      	ldr	r7, [r1, #16]
 800940e:	2f00      	cmp	r7, #0
 8009410:	d0f6      	beq.n	8009400 <__sflush_r+0xac>
 8009412:	0793      	lsls	r3, r2, #30
 8009414:	bf18      	it	ne
 8009416:	2300      	movne	r3, #0
 8009418:	680e      	ldr	r6, [r1, #0]
 800941a:	bf08      	it	eq
 800941c:	694b      	ldreq	r3, [r1, #20]
 800941e:	1bf6      	subs	r6, r6, r7
 8009420:	600f      	str	r7, [r1, #0]
 8009422:	608b      	str	r3, [r1, #8]
 8009424:	2e00      	cmp	r6, #0
 8009426:	ddeb      	ble.n	8009400 <__sflush_r+0xac>
 8009428:	4633      	mov	r3, r6
 800942a:	463a      	mov	r2, r7
 800942c:	4628      	mov	r0, r5
 800942e:	6a21      	ldr	r1, [r4, #32]
 8009430:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009434:	47e0      	blx	ip
 8009436:	2800      	cmp	r0, #0
 8009438:	dc07      	bgt.n	800944a <__sflush_r+0xf6>
 800943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944a:	4407      	add	r7, r0
 800944c:	1a36      	subs	r6, r6, r0
 800944e:	e7e9      	b.n	8009424 <__sflush_r+0xd0>
 8009450:	dfbffffe 	.word	0xdfbffffe

08009454 <_fflush_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	690b      	ldr	r3, [r1, #16]
 8009458:	4605      	mov	r5, r0
 800945a:	460c      	mov	r4, r1
 800945c:	b913      	cbnz	r3, 8009464 <_fflush_r+0x10>
 800945e:	2500      	movs	r5, #0
 8009460:	4628      	mov	r0, r5
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	b118      	cbz	r0, 800946e <_fflush_r+0x1a>
 8009466:	6a03      	ldr	r3, [r0, #32]
 8009468:	b90b      	cbnz	r3, 800946e <_fflush_r+0x1a>
 800946a:	f7fd fa4d 	bl	8006908 <__sinit>
 800946e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f3      	beq.n	800945e <_fflush_r+0xa>
 8009476:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009478:	07d0      	lsls	r0, r2, #31
 800947a:	d404      	bmi.n	8009486 <_fflush_r+0x32>
 800947c:	0599      	lsls	r1, r3, #22
 800947e:	d402      	bmi.n	8009486 <_fflush_r+0x32>
 8009480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009482:	f7fd fb78 	bl	8006b76 <__retarget_lock_acquire_recursive>
 8009486:	4628      	mov	r0, r5
 8009488:	4621      	mov	r1, r4
 800948a:	f7ff ff63 	bl	8009354 <__sflush_r>
 800948e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009490:	4605      	mov	r5, r0
 8009492:	07da      	lsls	r2, r3, #31
 8009494:	d4e4      	bmi.n	8009460 <_fflush_r+0xc>
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	059b      	lsls	r3, r3, #22
 800949a:	d4e1      	bmi.n	8009460 <_fflush_r+0xc>
 800949c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800949e:	f7fd fb6b 	bl	8006b78 <__retarget_lock_release_recursive>
 80094a2:	e7dd      	b.n	8009460 <_fflush_r+0xc>

080094a4 <memmove>:
 80094a4:	4288      	cmp	r0, r1
 80094a6:	b510      	push	{r4, lr}
 80094a8:	eb01 0402 	add.w	r4, r1, r2
 80094ac:	d902      	bls.n	80094b4 <memmove+0x10>
 80094ae:	4284      	cmp	r4, r0
 80094b0:	4623      	mov	r3, r4
 80094b2:	d807      	bhi.n	80094c4 <memmove+0x20>
 80094b4:	1e43      	subs	r3, r0, #1
 80094b6:	42a1      	cmp	r1, r4
 80094b8:	d008      	beq.n	80094cc <memmove+0x28>
 80094ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094c2:	e7f8      	b.n	80094b6 <memmove+0x12>
 80094c4:	4601      	mov	r1, r0
 80094c6:	4402      	add	r2, r0
 80094c8:	428a      	cmp	r2, r1
 80094ca:	d100      	bne.n	80094ce <memmove+0x2a>
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094d6:	e7f7      	b.n	80094c8 <memmove+0x24>

080094d8 <strncmp>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	b16a      	cbz	r2, 80094f8 <strncmp+0x20>
 80094dc:	3901      	subs	r1, #1
 80094de:	1884      	adds	r4, r0, r2
 80094e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d103      	bne.n	80094f4 <strncmp+0x1c>
 80094ec:	42a0      	cmp	r0, r4
 80094ee:	d001      	beq.n	80094f4 <strncmp+0x1c>
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d1f5      	bne.n	80094e0 <strncmp+0x8>
 80094f4:	1ad0      	subs	r0, r2, r3
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	4610      	mov	r0, r2
 80094fa:	e7fc      	b.n	80094f6 <strncmp+0x1e>

080094fc <_sbrk_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	2300      	movs	r3, #0
 8009500:	4d05      	ldr	r5, [pc, #20]	@ (8009518 <_sbrk_r+0x1c>)
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f7 fd6c 	bl	8000fe4 <_sbrk>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_sbrk_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_sbrk_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	2000354c 	.word	0x2000354c

0800951c <nan>:
 800951c:	2000      	movs	r0, #0
 800951e:	4901      	ldr	r1, [pc, #4]	@ (8009524 <nan+0x8>)
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	7ff80000 	.word	0x7ff80000

08009528 <__assert_func>:
 8009528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800952a:	4614      	mov	r4, r2
 800952c:	461a      	mov	r2, r3
 800952e:	4b09      	ldr	r3, [pc, #36]	@ (8009554 <__assert_func+0x2c>)
 8009530:	4605      	mov	r5, r0
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68d8      	ldr	r0, [r3, #12]
 8009536:	b954      	cbnz	r4, 800954e <__assert_func+0x26>
 8009538:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <__assert_func+0x30>)
 800953a:	461c      	mov	r4, r3
 800953c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009540:	9100      	str	r1, [sp, #0]
 8009542:	462b      	mov	r3, r5
 8009544:	4905      	ldr	r1, [pc, #20]	@ (800955c <__assert_func+0x34>)
 8009546:	f000 fba7 	bl	8009c98 <fiprintf>
 800954a:	f000 fbb7 	bl	8009cbc <abort>
 800954e:	4b04      	ldr	r3, [pc, #16]	@ (8009560 <__assert_func+0x38>)
 8009550:	e7f4      	b.n	800953c <__assert_func+0x14>
 8009552:	bf00      	nop
 8009554:	20000024 	.word	0x20000024
 8009558:	0800a76d 	.word	0x0800a76d
 800955c:	0800a73f 	.word	0x0800a73f
 8009560:	0800a732 	.word	0x0800a732

08009564 <_calloc_r>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	fba1 5402 	umull	r5, r4, r1, r2
 800956a:	b93c      	cbnz	r4, 800957c <_calloc_r+0x18>
 800956c:	4629      	mov	r1, r5
 800956e:	f7fe f9e9 	bl	8007944 <_malloc_r>
 8009572:	4606      	mov	r6, r0
 8009574:	b928      	cbnz	r0, 8009582 <_calloc_r+0x1e>
 8009576:	2600      	movs	r6, #0
 8009578:	4630      	mov	r0, r6
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	220c      	movs	r2, #12
 800957e:	6002      	str	r2, [r0, #0]
 8009580:	e7f9      	b.n	8009576 <_calloc_r+0x12>
 8009582:	462a      	mov	r2, r5
 8009584:	4621      	mov	r1, r4
 8009586:	f7fd fa79 	bl	8006a7c <memset>
 800958a:	e7f5      	b.n	8009578 <_calloc_r+0x14>

0800958c <rshift>:
 800958c:	6903      	ldr	r3, [r0, #16]
 800958e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009596:	f100 0414 	add.w	r4, r0, #20
 800959a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800959e:	dd46      	ble.n	800962e <rshift+0xa2>
 80095a0:	f011 011f 	ands.w	r1, r1, #31
 80095a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095ac:	d10c      	bne.n	80095c8 <rshift+0x3c>
 80095ae:	4629      	mov	r1, r5
 80095b0:	f100 0710 	add.w	r7, r0, #16
 80095b4:	42b1      	cmp	r1, r6
 80095b6:	d335      	bcc.n	8009624 <rshift+0x98>
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	1eea      	subs	r2, r5, #3
 80095be:	4296      	cmp	r6, r2
 80095c0:	bf38      	it	cc
 80095c2:	2300      	movcc	r3, #0
 80095c4:	4423      	add	r3, r4
 80095c6:	e015      	b.n	80095f4 <rshift+0x68>
 80095c8:	46a1      	mov	r9, r4
 80095ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095ce:	f1c1 0820 	rsb	r8, r1, #32
 80095d2:	40cf      	lsrs	r7, r1
 80095d4:	f105 0e04 	add.w	lr, r5, #4
 80095d8:	4576      	cmp	r6, lr
 80095da:	46f4      	mov	ip, lr
 80095dc:	d816      	bhi.n	800960c <rshift+0x80>
 80095de:	1a9a      	subs	r2, r3, r2
 80095e0:	0092      	lsls	r2, r2, #2
 80095e2:	3a04      	subs	r2, #4
 80095e4:	3501      	adds	r5, #1
 80095e6:	42ae      	cmp	r6, r5
 80095e8:	bf38      	it	cc
 80095ea:	2200      	movcc	r2, #0
 80095ec:	18a3      	adds	r3, r4, r2
 80095ee:	50a7      	str	r7, [r4, r2]
 80095f0:	b107      	cbz	r7, 80095f4 <rshift+0x68>
 80095f2:	3304      	adds	r3, #4
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	eba3 0204 	sub.w	r2, r3, r4
 80095fa:	bf08      	it	eq
 80095fc:	2300      	moveq	r3, #0
 80095fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009602:	6102      	str	r2, [r0, #16]
 8009604:	bf08      	it	eq
 8009606:	6143      	streq	r3, [r0, #20]
 8009608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800960c:	f8dc c000 	ldr.w	ip, [ip]
 8009610:	fa0c fc08 	lsl.w	ip, ip, r8
 8009614:	ea4c 0707 	orr.w	r7, ip, r7
 8009618:	f849 7b04 	str.w	r7, [r9], #4
 800961c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009620:	40cf      	lsrs	r7, r1
 8009622:	e7d9      	b.n	80095d8 <rshift+0x4c>
 8009624:	f851 cb04 	ldr.w	ip, [r1], #4
 8009628:	f847 cf04 	str.w	ip, [r7, #4]!
 800962c:	e7c2      	b.n	80095b4 <rshift+0x28>
 800962e:	4623      	mov	r3, r4
 8009630:	e7e0      	b.n	80095f4 <rshift+0x68>

08009632 <__hexdig_fun>:
 8009632:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009636:	2b09      	cmp	r3, #9
 8009638:	d802      	bhi.n	8009640 <__hexdig_fun+0xe>
 800963a:	3820      	subs	r0, #32
 800963c:	b2c0      	uxtb	r0, r0
 800963e:	4770      	bx	lr
 8009640:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009644:	2b05      	cmp	r3, #5
 8009646:	d801      	bhi.n	800964c <__hexdig_fun+0x1a>
 8009648:	3847      	subs	r0, #71	@ 0x47
 800964a:	e7f7      	b.n	800963c <__hexdig_fun+0xa>
 800964c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009650:	2b05      	cmp	r3, #5
 8009652:	d801      	bhi.n	8009658 <__hexdig_fun+0x26>
 8009654:	3827      	subs	r0, #39	@ 0x27
 8009656:	e7f1      	b.n	800963c <__hexdig_fun+0xa>
 8009658:	2000      	movs	r0, #0
 800965a:	4770      	bx	lr

0800965c <__gethex>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	468a      	mov	sl, r1
 8009662:	4690      	mov	r8, r2
 8009664:	b085      	sub	sp, #20
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	9001      	str	r0, [sp, #4]
 800966c:	1c9c      	adds	r4, r3, #2
 800966e:	46a1      	mov	r9, r4
 8009670:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009674:	2830      	cmp	r0, #48	@ 0x30
 8009676:	d0fa      	beq.n	800966e <__gethex+0x12>
 8009678:	eba9 0303 	sub.w	r3, r9, r3
 800967c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009680:	f7ff ffd7 	bl	8009632 <__hexdig_fun>
 8009684:	4605      	mov	r5, r0
 8009686:	2800      	cmp	r0, #0
 8009688:	d168      	bne.n	800975c <__gethex+0x100>
 800968a:	2201      	movs	r2, #1
 800968c:	4648      	mov	r0, r9
 800968e:	499f      	ldr	r1, [pc, #636]	@ (800990c <__gethex+0x2b0>)
 8009690:	f7ff ff22 	bl	80094d8 <strncmp>
 8009694:	4607      	mov	r7, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d167      	bne.n	800976a <__gethex+0x10e>
 800969a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800969e:	4626      	mov	r6, r4
 80096a0:	f7ff ffc7 	bl	8009632 <__hexdig_fun>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d062      	beq.n	800976e <__gethex+0x112>
 80096a8:	4623      	mov	r3, r4
 80096aa:	7818      	ldrb	r0, [r3, #0]
 80096ac:	4699      	mov	r9, r3
 80096ae:	2830      	cmp	r0, #48	@ 0x30
 80096b0:	f103 0301 	add.w	r3, r3, #1
 80096b4:	d0f9      	beq.n	80096aa <__gethex+0x4e>
 80096b6:	f7ff ffbc 	bl	8009632 <__hexdig_fun>
 80096ba:	fab0 f580 	clz	r5, r0
 80096be:	f04f 0b01 	mov.w	fp, #1
 80096c2:	096d      	lsrs	r5, r5, #5
 80096c4:	464a      	mov	r2, r9
 80096c6:	4616      	mov	r6, r2
 80096c8:	7830      	ldrb	r0, [r6, #0]
 80096ca:	3201      	adds	r2, #1
 80096cc:	f7ff ffb1 	bl	8009632 <__hexdig_fun>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1f8      	bne.n	80096c6 <__gethex+0x6a>
 80096d4:	2201      	movs	r2, #1
 80096d6:	4630      	mov	r0, r6
 80096d8:	498c      	ldr	r1, [pc, #560]	@ (800990c <__gethex+0x2b0>)
 80096da:	f7ff fefd 	bl	80094d8 <strncmp>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d13f      	bne.n	8009762 <__gethex+0x106>
 80096e2:	b944      	cbnz	r4, 80096f6 <__gethex+0x9a>
 80096e4:	1c74      	adds	r4, r6, #1
 80096e6:	4622      	mov	r2, r4
 80096e8:	4616      	mov	r6, r2
 80096ea:	7830      	ldrb	r0, [r6, #0]
 80096ec:	3201      	adds	r2, #1
 80096ee:	f7ff ffa0 	bl	8009632 <__hexdig_fun>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1f8      	bne.n	80096e8 <__gethex+0x8c>
 80096f6:	1ba4      	subs	r4, r4, r6
 80096f8:	00a7      	lsls	r7, r4, #2
 80096fa:	7833      	ldrb	r3, [r6, #0]
 80096fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009700:	2b50      	cmp	r3, #80	@ 0x50
 8009702:	d13e      	bne.n	8009782 <__gethex+0x126>
 8009704:	7873      	ldrb	r3, [r6, #1]
 8009706:	2b2b      	cmp	r3, #43	@ 0x2b
 8009708:	d033      	beq.n	8009772 <__gethex+0x116>
 800970a:	2b2d      	cmp	r3, #45	@ 0x2d
 800970c:	d034      	beq.n	8009778 <__gethex+0x11c>
 800970e:	2400      	movs	r4, #0
 8009710:	1c71      	adds	r1, r6, #1
 8009712:	7808      	ldrb	r0, [r1, #0]
 8009714:	f7ff ff8d 	bl	8009632 <__hexdig_fun>
 8009718:	1e43      	subs	r3, r0, #1
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b18      	cmp	r3, #24
 800971e:	d830      	bhi.n	8009782 <__gethex+0x126>
 8009720:	f1a0 0210 	sub.w	r2, r0, #16
 8009724:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009728:	f7ff ff83 	bl	8009632 <__hexdig_fun>
 800972c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009730:	fa5f fc8c 	uxtb.w	ip, ip
 8009734:	f1bc 0f18 	cmp.w	ip, #24
 8009738:	f04f 030a 	mov.w	r3, #10
 800973c:	d91e      	bls.n	800977c <__gethex+0x120>
 800973e:	b104      	cbz	r4, 8009742 <__gethex+0xe6>
 8009740:	4252      	negs	r2, r2
 8009742:	4417      	add	r7, r2
 8009744:	f8ca 1000 	str.w	r1, [sl]
 8009748:	b1ed      	cbz	r5, 8009786 <__gethex+0x12a>
 800974a:	f1bb 0f00 	cmp.w	fp, #0
 800974e:	bf0c      	ite	eq
 8009750:	2506      	moveq	r5, #6
 8009752:	2500      	movne	r5, #0
 8009754:	4628      	mov	r0, r5
 8009756:	b005      	add	sp, #20
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	2500      	movs	r5, #0
 800975e:	462c      	mov	r4, r5
 8009760:	e7b0      	b.n	80096c4 <__gethex+0x68>
 8009762:	2c00      	cmp	r4, #0
 8009764:	d1c7      	bne.n	80096f6 <__gethex+0x9a>
 8009766:	4627      	mov	r7, r4
 8009768:	e7c7      	b.n	80096fa <__gethex+0x9e>
 800976a:	464e      	mov	r6, r9
 800976c:	462f      	mov	r7, r5
 800976e:	2501      	movs	r5, #1
 8009770:	e7c3      	b.n	80096fa <__gethex+0x9e>
 8009772:	2400      	movs	r4, #0
 8009774:	1cb1      	adds	r1, r6, #2
 8009776:	e7cc      	b.n	8009712 <__gethex+0xb6>
 8009778:	2401      	movs	r4, #1
 800977a:	e7fb      	b.n	8009774 <__gethex+0x118>
 800977c:	fb03 0002 	mla	r0, r3, r2, r0
 8009780:	e7ce      	b.n	8009720 <__gethex+0xc4>
 8009782:	4631      	mov	r1, r6
 8009784:	e7de      	b.n	8009744 <__gethex+0xe8>
 8009786:	4629      	mov	r1, r5
 8009788:	eba6 0309 	sub.w	r3, r6, r9
 800978c:	3b01      	subs	r3, #1
 800978e:	2b07      	cmp	r3, #7
 8009790:	dc0a      	bgt.n	80097a8 <__gethex+0x14c>
 8009792:	9801      	ldr	r0, [sp, #4]
 8009794:	f7fe f962 	bl	8007a5c <_Balloc>
 8009798:	4604      	mov	r4, r0
 800979a:	b940      	cbnz	r0, 80097ae <__gethex+0x152>
 800979c:	4602      	mov	r2, r0
 800979e:	21e4      	movs	r1, #228	@ 0xe4
 80097a0:	4b5b      	ldr	r3, [pc, #364]	@ (8009910 <__gethex+0x2b4>)
 80097a2:	485c      	ldr	r0, [pc, #368]	@ (8009914 <__gethex+0x2b8>)
 80097a4:	f7ff fec0 	bl	8009528 <__assert_func>
 80097a8:	3101      	adds	r1, #1
 80097aa:	105b      	asrs	r3, r3, #1
 80097ac:	e7ef      	b.n	800978e <__gethex+0x132>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f100 0a14 	add.w	sl, r0, #20
 80097b4:	4655      	mov	r5, sl
 80097b6:	469b      	mov	fp, r3
 80097b8:	45b1      	cmp	r9, r6
 80097ba:	d337      	bcc.n	800982c <__gethex+0x1d0>
 80097bc:	f845 bb04 	str.w	fp, [r5], #4
 80097c0:	eba5 050a 	sub.w	r5, r5, sl
 80097c4:	10ad      	asrs	r5, r5, #2
 80097c6:	6125      	str	r5, [r4, #16]
 80097c8:	4658      	mov	r0, fp
 80097ca:	f7fe fa39 	bl	8007c40 <__hi0bits>
 80097ce:	016d      	lsls	r5, r5, #5
 80097d0:	f8d8 6000 	ldr.w	r6, [r8]
 80097d4:	1a2d      	subs	r5, r5, r0
 80097d6:	42b5      	cmp	r5, r6
 80097d8:	dd54      	ble.n	8009884 <__gethex+0x228>
 80097da:	1bad      	subs	r5, r5, r6
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	f7fe fdc1 	bl	8008366 <__any_on>
 80097e4:	4681      	mov	r9, r0
 80097e6:	b178      	cbz	r0, 8009808 <__gethex+0x1ac>
 80097e8:	f04f 0901 	mov.w	r9, #1
 80097ec:	1e6b      	subs	r3, r5, #1
 80097ee:	1159      	asrs	r1, r3, #5
 80097f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097f4:	f003 021f 	and.w	r2, r3, #31
 80097f8:	fa09 f202 	lsl.w	r2, r9, r2
 80097fc:	420a      	tst	r2, r1
 80097fe:	d003      	beq.n	8009808 <__gethex+0x1ac>
 8009800:	454b      	cmp	r3, r9
 8009802:	dc36      	bgt.n	8009872 <__gethex+0x216>
 8009804:	f04f 0902 	mov.w	r9, #2
 8009808:	4629      	mov	r1, r5
 800980a:	4620      	mov	r0, r4
 800980c:	f7ff febe 	bl	800958c <rshift>
 8009810:	442f      	add	r7, r5
 8009812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009816:	42bb      	cmp	r3, r7
 8009818:	da42      	bge.n	80098a0 <__gethex+0x244>
 800981a:	4621      	mov	r1, r4
 800981c:	9801      	ldr	r0, [sp, #4]
 800981e:	f7fe f95d 	bl	8007adc <_Bfree>
 8009822:	2300      	movs	r3, #0
 8009824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009826:	25a3      	movs	r5, #163	@ 0xa3
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	e793      	b.n	8009754 <__gethex+0xf8>
 800982c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009830:	2a2e      	cmp	r2, #46	@ 0x2e
 8009832:	d012      	beq.n	800985a <__gethex+0x1fe>
 8009834:	2b20      	cmp	r3, #32
 8009836:	d104      	bne.n	8009842 <__gethex+0x1e6>
 8009838:	f845 bb04 	str.w	fp, [r5], #4
 800983c:	f04f 0b00 	mov.w	fp, #0
 8009840:	465b      	mov	r3, fp
 8009842:	7830      	ldrb	r0, [r6, #0]
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	f7ff fef4 	bl	8009632 <__hexdig_fun>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	f000 000f 	and.w	r0, r0, #15
 8009850:	4098      	lsls	r0, r3
 8009852:	ea4b 0b00 	orr.w	fp, fp, r0
 8009856:	3304      	adds	r3, #4
 8009858:	e7ae      	b.n	80097b8 <__gethex+0x15c>
 800985a:	45b1      	cmp	r9, r6
 800985c:	d8ea      	bhi.n	8009834 <__gethex+0x1d8>
 800985e:	2201      	movs	r2, #1
 8009860:	4630      	mov	r0, r6
 8009862:	492a      	ldr	r1, [pc, #168]	@ (800990c <__gethex+0x2b0>)
 8009864:	9303      	str	r3, [sp, #12]
 8009866:	f7ff fe37 	bl	80094d8 <strncmp>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	2800      	cmp	r0, #0
 800986e:	d1e1      	bne.n	8009834 <__gethex+0x1d8>
 8009870:	e7a2      	b.n	80097b8 <__gethex+0x15c>
 8009872:	4620      	mov	r0, r4
 8009874:	1ea9      	subs	r1, r5, #2
 8009876:	f7fe fd76 	bl	8008366 <__any_on>
 800987a:	2800      	cmp	r0, #0
 800987c:	d0c2      	beq.n	8009804 <__gethex+0x1a8>
 800987e:	f04f 0903 	mov.w	r9, #3
 8009882:	e7c1      	b.n	8009808 <__gethex+0x1ac>
 8009884:	da09      	bge.n	800989a <__gethex+0x23e>
 8009886:	1b75      	subs	r5, r6, r5
 8009888:	4621      	mov	r1, r4
 800988a:	462a      	mov	r2, r5
 800988c:	9801      	ldr	r0, [sp, #4]
 800988e:	f7fe fb3b 	bl	8007f08 <__lshift>
 8009892:	4604      	mov	r4, r0
 8009894:	1b7f      	subs	r7, r7, r5
 8009896:	f100 0a14 	add.w	sl, r0, #20
 800989a:	f04f 0900 	mov.w	r9, #0
 800989e:	e7b8      	b.n	8009812 <__gethex+0x1b6>
 80098a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098a4:	42bd      	cmp	r5, r7
 80098a6:	dd6f      	ble.n	8009988 <__gethex+0x32c>
 80098a8:	1bed      	subs	r5, r5, r7
 80098aa:	42ae      	cmp	r6, r5
 80098ac:	dc34      	bgt.n	8009918 <__gethex+0x2bc>
 80098ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d022      	beq.n	80098fc <__gethex+0x2a0>
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d024      	beq.n	8009904 <__gethex+0x2a8>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d115      	bne.n	80098ea <__gethex+0x28e>
 80098be:	42ae      	cmp	r6, r5
 80098c0:	d113      	bne.n	80098ea <__gethex+0x28e>
 80098c2:	2e01      	cmp	r6, #1
 80098c4:	d10b      	bne.n	80098de <__gethex+0x282>
 80098c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098ca:	9a02      	ldr	r2, [sp, #8]
 80098cc:	2562      	movs	r5, #98	@ 0x62
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	2301      	movs	r3, #1
 80098d2:	6123      	str	r3, [r4, #16]
 80098d4:	f8ca 3000 	str.w	r3, [sl]
 80098d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098da:	601c      	str	r4, [r3, #0]
 80098dc:	e73a      	b.n	8009754 <__gethex+0xf8>
 80098de:	4620      	mov	r0, r4
 80098e0:	1e71      	subs	r1, r6, #1
 80098e2:	f7fe fd40 	bl	8008366 <__any_on>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d1ed      	bne.n	80098c6 <__gethex+0x26a>
 80098ea:	4621      	mov	r1, r4
 80098ec:	9801      	ldr	r0, [sp, #4]
 80098ee:	f7fe f8f5 	bl	8007adc <_Bfree>
 80098f2:	2300      	movs	r3, #0
 80098f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f6:	2550      	movs	r5, #80	@ 0x50
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	e72b      	b.n	8009754 <__gethex+0xf8>
 80098fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1f3      	bne.n	80098ea <__gethex+0x28e>
 8009902:	e7e0      	b.n	80098c6 <__gethex+0x26a>
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1dd      	bne.n	80098c6 <__gethex+0x26a>
 800990a:	e7ee      	b.n	80098ea <__gethex+0x28e>
 800990c:	0800a5c0 	.word	0x0800a5c0
 8009910:	0800a459 	.word	0x0800a459
 8009914:	0800a76e 	.word	0x0800a76e
 8009918:	1e6f      	subs	r7, r5, #1
 800991a:	f1b9 0f00 	cmp.w	r9, #0
 800991e:	d130      	bne.n	8009982 <__gethex+0x326>
 8009920:	b127      	cbz	r7, 800992c <__gethex+0x2d0>
 8009922:	4639      	mov	r1, r7
 8009924:	4620      	mov	r0, r4
 8009926:	f7fe fd1e 	bl	8008366 <__any_on>
 800992a:	4681      	mov	r9, r0
 800992c:	2301      	movs	r3, #1
 800992e:	4629      	mov	r1, r5
 8009930:	1b76      	subs	r6, r6, r5
 8009932:	2502      	movs	r5, #2
 8009934:	117a      	asrs	r2, r7, #5
 8009936:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800993a:	f007 071f 	and.w	r7, r7, #31
 800993e:	40bb      	lsls	r3, r7
 8009940:	4213      	tst	r3, r2
 8009942:	4620      	mov	r0, r4
 8009944:	bf18      	it	ne
 8009946:	f049 0902 	orrne.w	r9, r9, #2
 800994a:	f7ff fe1f 	bl	800958c <rshift>
 800994e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	d047      	beq.n	80099e8 <__gethex+0x38c>
 8009958:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d015      	beq.n	800998c <__gethex+0x330>
 8009960:	2b03      	cmp	r3, #3
 8009962:	d017      	beq.n	8009994 <__gethex+0x338>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d109      	bne.n	800997c <__gethex+0x320>
 8009968:	f019 0f02 	tst.w	r9, #2
 800996c:	d006      	beq.n	800997c <__gethex+0x320>
 800996e:	f8da 3000 	ldr.w	r3, [sl]
 8009972:	ea49 0903 	orr.w	r9, r9, r3
 8009976:	f019 0f01 	tst.w	r9, #1
 800997a:	d10e      	bne.n	800999a <__gethex+0x33e>
 800997c:	f045 0510 	orr.w	r5, r5, #16
 8009980:	e032      	b.n	80099e8 <__gethex+0x38c>
 8009982:	f04f 0901 	mov.w	r9, #1
 8009986:	e7d1      	b.n	800992c <__gethex+0x2d0>
 8009988:	2501      	movs	r5, #1
 800998a:	e7e2      	b.n	8009952 <__gethex+0x2f6>
 800998c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998e:	f1c3 0301 	rsb	r3, r3, #1
 8009992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0f0      	beq.n	800997c <__gethex+0x320>
 800999a:	f04f 0c00 	mov.w	ip, #0
 800999e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099a2:	f104 0314 	add.w	r3, r4, #20
 80099a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099b8:	d01b      	beq.n	80099f2 <__gethex+0x396>
 80099ba:	3201      	adds	r2, #1
 80099bc:	6002      	str	r2, [r0, #0]
 80099be:	2d02      	cmp	r5, #2
 80099c0:	f104 0314 	add.w	r3, r4, #20
 80099c4:	d13c      	bne.n	8009a40 <__gethex+0x3e4>
 80099c6:	f8d8 2000 	ldr.w	r2, [r8]
 80099ca:	3a01      	subs	r2, #1
 80099cc:	42b2      	cmp	r2, r6
 80099ce:	d109      	bne.n	80099e4 <__gethex+0x388>
 80099d0:	2201      	movs	r2, #1
 80099d2:	1171      	asrs	r1, r6, #5
 80099d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099d8:	f006 061f 	and.w	r6, r6, #31
 80099dc:	fa02 f606 	lsl.w	r6, r2, r6
 80099e0:	421e      	tst	r6, r3
 80099e2:	d13a      	bne.n	8009a5a <__gethex+0x3fe>
 80099e4:	f045 0520 	orr.w	r5, r5, #32
 80099e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ea:	601c      	str	r4, [r3, #0]
 80099ec:	9b02      	ldr	r3, [sp, #8]
 80099ee:	601f      	str	r7, [r3, #0]
 80099f0:	e6b0      	b.n	8009754 <__gethex+0xf8>
 80099f2:	4299      	cmp	r1, r3
 80099f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80099f8:	d8d9      	bhi.n	80099ae <__gethex+0x352>
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	459b      	cmp	fp, r3
 80099fe:	db17      	blt.n	8009a30 <__gethex+0x3d4>
 8009a00:	6861      	ldr	r1, [r4, #4]
 8009a02:	9801      	ldr	r0, [sp, #4]
 8009a04:	3101      	adds	r1, #1
 8009a06:	f7fe f829 	bl	8007a5c <_Balloc>
 8009a0a:	4681      	mov	r9, r0
 8009a0c:	b918      	cbnz	r0, 8009a16 <__gethex+0x3ba>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	2184      	movs	r1, #132	@ 0x84
 8009a12:	4b19      	ldr	r3, [pc, #100]	@ (8009a78 <__gethex+0x41c>)
 8009a14:	e6c5      	b.n	80097a2 <__gethex+0x146>
 8009a16:	6922      	ldr	r2, [r4, #16]
 8009a18:	f104 010c 	add.w	r1, r4, #12
 8009a1c:	3202      	adds	r2, #2
 8009a1e:	0092      	lsls	r2, r2, #2
 8009a20:	300c      	adds	r0, #12
 8009a22:	f7fd f8b8 	bl	8006b96 <memcpy>
 8009a26:	4621      	mov	r1, r4
 8009a28:	9801      	ldr	r0, [sp, #4]
 8009a2a:	f7fe f857 	bl	8007adc <_Bfree>
 8009a2e:	464c      	mov	r4, r9
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	6122      	str	r2, [r4, #16]
 8009a36:	2201      	movs	r2, #1
 8009a38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a3c:	615a      	str	r2, [r3, #20]
 8009a3e:	e7be      	b.n	80099be <__gethex+0x362>
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	455a      	cmp	r2, fp
 8009a44:	dd0b      	ble.n	8009a5e <__gethex+0x402>
 8009a46:	2101      	movs	r1, #1
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f7ff fd9f 	bl	800958c <rshift>
 8009a4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a52:	3701      	adds	r7, #1
 8009a54:	42bb      	cmp	r3, r7
 8009a56:	f6ff aee0 	blt.w	800981a <__gethex+0x1be>
 8009a5a:	2501      	movs	r5, #1
 8009a5c:	e7c2      	b.n	80099e4 <__gethex+0x388>
 8009a5e:	f016 061f 	ands.w	r6, r6, #31
 8009a62:	d0fa      	beq.n	8009a5a <__gethex+0x3fe>
 8009a64:	4453      	add	r3, sl
 8009a66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a6a:	f7fe f8e9 	bl	8007c40 <__hi0bits>
 8009a6e:	f1c6 0620 	rsb	r6, r6, #32
 8009a72:	42b0      	cmp	r0, r6
 8009a74:	dbe7      	blt.n	8009a46 <__gethex+0x3ea>
 8009a76:	e7f0      	b.n	8009a5a <__gethex+0x3fe>
 8009a78:	0800a459 	.word	0x0800a459

08009a7c <L_shift>:
 8009a7c:	f1c2 0208 	rsb	r2, r2, #8
 8009a80:	0092      	lsls	r2, r2, #2
 8009a82:	b570      	push	{r4, r5, r6, lr}
 8009a84:	f1c2 0620 	rsb	r6, r2, #32
 8009a88:	6843      	ldr	r3, [r0, #4]
 8009a8a:	6804      	ldr	r4, [r0, #0]
 8009a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a90:	432c      	orrs	r4, r5
 8009a92:	40d3      	lsrs	r3, r2
 8009a94:	6004      	str	r4, [r0, #0]
 8009a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a9a:	4288      	cmp	r0, r1
 8009a9c:	d3f4      	bcc.n	8009a88 <L_shift+0xc>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}

08009aa0 <__match>:
 8009aa0:	b530      	push	{r4, r5, lr}
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aaa:	b914      	cbnz	r4, 8009ab2 <__match+0x12>
 8009aac:	6003      	str	r3, [r0, #0]
 8009aae:	2001      	movs	r0, #1
 8009ab0:	bd30      	pop	{r4, r5, pc}
 8009ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009aba:	2d19      	cmp	r5, #25
 8009abc:	bf98      	it	ls
 8009abe:	3220      	addls	r2, #32
 8009ac0:	42a2      	cmp	r2, r4
 8009ac2:	d0f0      	beq.n	8009aa6 <__match+0x6>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e7f3      	b.n	8009ab0 <__match+0x10>

08009ac8 <__hexnan>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	2500      	movs	r5, #0
 8009ace:	680b      	ldr	r3, [r1, #0]
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	115e      	asrs	r6, r3, #5
 8009ad4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ad8:	f013 031f 	ands.w	r3, r3, #31
 8009adc:	bf18      	it	ne
 8009ade:	3604      	addne	r6, #4
 8009ae0:	1f37      	subs	r7, r6, #4
 8009ae2:	4690      	mov	r8, r2
 8009ae4:	46b9      	mov	r9, r7
 8009ae6:	463c      	mov	r4, r7
 8009ae8:	46ab      	mov	fp, r5
 8009aea:	b087      	sub	sp, #28
 8009aec:	6801      	ldr	r1, [r0, #0]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009af4:	9502      	str	r5, [sp, #8]
 8009af6:	784a      	ldrb	r2, [r1, #1]
 8009af8:	1c4b      	adds	r3, r1, #1
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	b342      	cbz	r2, 8009b50 <__hexnan+0x88>
 8009afe:	4610      	mov	r0, r2
 8009b00:	9105      	str	r1, [sp, #20]
 8009b02:	9204      	str	r2, [sp, #16]
 8009b04:	f7ff fd95 	bl	8009632 <__hexdig_fun>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d151      	bne.n	8009bb0 <__hexnan+0xe8>
 8009b0c:	9a04      	ldr	r2, [sp, #16]
 8009b0e:	9905      	ldr	r1, [sp, #20]
 8009b10:	2a20      	cmp	r2, #32
 8009b12:	d818      	bhi.n	8009b46 <__hexnan+0x7e>
 8009b14:	9b02      	ldr	r3, [sp, #8]
 8009b16:	459b      	cmp	fp, r3
 8009b18:	dd13      	ble.n	8009b42 <__hexnan+0x7a>
 8009b1a:	454c      	cmp	r4, r9
 8009b1c:	d206      	bcs.n	8009b2c <__hexnan+0x64>
 8009b1e:	2d07      	cmp	r5, #7
 8009b20:	dc04      	bgt.n	8009b2c <__hexnan+0x64>
 8009b22:	462a      	mov	r2, r5
 8009b24:	4649      	mov	r1, r9
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff ffa8 	bl	8009a7c <L_shift>
 8009b2c:	4544      	cmp	r4, r8
 8009b2e:	d952      	bls.n	8009bd6 <__hexnan+0x10e>
 8009b30:	2300      	movs	r3, #0
 8009b32:	f1a4 0904 	sub.w	r9, r4, #4
 8009b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	464c      	mov	r4, r9
 8009b3e:	f8cd b008 	str.w	fp, [sp, #8]
 8009b42:	9903      	ldr	r1, [sp, #12]
 8009b44:	e7d7      	b.n	8009af6 <__hexnan+0x2e>
 8009b46:	2a29      	cmp	r2, #41	@ 0x29
 8009b48:	d157      	bne.n	8009bfa <__hexnan+0x132>
 8009b4a:	3102      	adds	r1, #2
 8009b4c:	f8ca 1000 	str.w	r1, [sl]
 8009b50:	f1bb 0f00 	cmp.w	fp, #0
 8009b54:	d051      	beq.n	8009bfa <__hexnan+0x132>
 8009b56:	454c      	cmp	r4, r9
 8009b58:	d206      	bcs.n	8009b68 <__hexnan+0xa0>
 8009b5a:	2d07      	cmp	r5, #7
 8009b5c:	dc04      	bgt.n	8009b68 <__hexnan+0xa0>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	4649      	mov	r1, r9
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7ff ff8a 	bl	8009a7c <L_shift>
 8009b68:	4544      	cmp	r4, r8
 8009b6a:	d936      	bls.n	8009bda <__hexnan+0x112>
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	f1a8 0204 	sub.w	r2, r8, #4
 8009b72:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b76:	429f      	cmp	r7, r3
 8009b78:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b7c:	d2f9      	bcs.n	8009b72 <__hexnan+0xaa>
 8009b7e:	1b3b      	subs	r3, r7, r4
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	3304      	adds	r3, #4
 8009b86:	3401      	adds	r4, #1
 8009b88:	3e03      	subs	r6, #3
 8009b8a:	42b4      	cmp	r4, r6
 8009b8c:	bf88      	it	hi
 8009b8e:	2304      	movhi	r3, #4
 8009b90:	2200      	movs	r2, #0
 8009b92:	4443      	add	r3, r8
 8009b94:	f843 2b04 	str.w	r2, [r3], #4
 8009b98:	429f      	cmp	r7, r3
 8009b9a:	d2fb      	bcs.n	8009b94 <__hexnan+0xcc>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	b91b      	cbnz	r3, 8009ba8 <__hexnan+0xe0>
 8009ba0:	4547      	cmp	r7, r8
 8009ba2:	d128      	bne.n	8009bf6 <__hexnan+0x12e>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	2005      	movs	r0, #5
 8009baa:	b007      	add	sp, #28
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	2d08      	cmp	r5, #8
 8009bb4:	f10b 0b01 	add.w	fp, fp, #1
 8009bb8:	dd06      	ble.n	8009bc8 <__hexnan+0x100>
 8009bba:	4544      	cmp	r4, r8
 8009bbc:	d9c1      	bls.n	8009b42 <__hexnan+0x7a>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2501      	movs	r5, #1
 8009bc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bc6:	3c04      	subs	r4, #4
 8009bc8:	6822      	ldr	r2, [r4, #0]
 8009bca:	f000 000f 	and.w	r0, r0, #15
 8009bce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	e7b5      	b.n	8009b42 <__hexnan+0x7a>
 8009bd6:	2508      	movs	r5, #8
 8009bd8:	e7b3      	b.n	8009b42 <__hexnan+0x7a>
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0dd      	beq.n	8009b9c <__hexnan+0xd4>
 8009be0:	f04f 32ff 	mov.w	r2, #4294967295
 8009be4:	f1c3 0320 	rsb	r3, r3, #32
 8009be8:	40da      	lsrs	r2, r3
 8009bea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009bf4:	e7d2      	b.n	8009b9c <__hexnan+0xd4>
 8009bf6:	3f04      	subs	r7, #4
 8009bf8:	e7d0      	b.n	8009b9c <__hexnan+0xd4>
 8009bfa:	2004      	movs	r0, #4
 8009bfc:	e7d5      	b.n	8009baa <__hexnan+0xe2>

08009bfe <__ascii_mbtowc>:
 8009bfe:	b082      	sub	sp, #8
 8009c00:	b901      	cbnz	r1, 8009c04 <__ascii_mbtowc+0x6>
 8009c02:	a901      	add	r1, sp, #4
 8009c04:	b142      	cbz	r2, 8009c18 <__ascii_mbtowc+0x1a>
 8009c06:	b14b      	cbz	r3, 8009c1c <__ascii_mbtowc+0x1e>
 8009c08:	7813      	ldrb	r3, [r2, #0]
 8009c0a:	600b      	str	r3, [r1, #0]
 8009c0c:	7812      	ldrb	r2, [r2, #0]
 8009c0e:	1e10      	subs	r0, r2, #0
 8009c10:	bf18      	it	ne
 8009c12:	2001      	movne	r0, #1
 8009c14:	b002      	add	sp, #8
 8009c16:	4770      	bx	lr
 8009c18:	4610      	mov	r0, r2
 8009c1a:	e7fb      	b.n	8009c14 <__ascii_mbtowc+0x16>
 8009c1c:	f06f 0001 	mvn.w	r0, #1
 8009c20:	e7f8      	b.n	8009c14 <__ascii_mbtowc+0x16>

08009c22 <_realloc_r>:
 8009c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c26:	4680      	mov	r8, r0
 8009c28:	4615      	mov	r5, r2
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b921      	cbnz	r1, 8009c38 <_realloc_r+0x16>
 8009c2e:	4611      	mov	r1, r2
 8009c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	f7fd be86 	b.w	8007944 <_malloc_r>
 8009c38:	b92a      	cbnz	r2, 8009c46 <_realloc_r+0x24>
 8009c3a:	f7fd fe11 	bl	8007860 <_free_r>
 8009c3e:	2400      	movs	r4, #0
 8009c40:	4620      	mov	r0, r4
 8009c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c46:	f000 f840 	bl	8009cca <_malloc_usable_size_r>
 8009c4a:	4285      	cmp	r5, r0
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	d802      	bhi.n	8009c56 <_realloc_r+0x34>
 8009c50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c54:	d8f4      	bhi.n	8009c40 <_realloc_r+0x1e>
 8009c56:	4629      	mov	r1, r5
 8009c58:	4640      	mov	r0, r8
 8009c5a:	f7fd fe73 	bl	8007944 <_malloc_r>
 8009c5e:	4607      	mov	r7, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d0ec      	beq.n	8009c3e <_realloc_r+0x1c>
 8009c64:	42b5      	cmp	r5, r6
 8009c66:	462a      	mov	r2, r5
 8009c68:	4621      	mov	r1, r4
 8009c6a:	bf28      	it	cs
 8009c6c:	4632      	movcs	r2, r6
 8009c6e:	f7fc ff92 	bl	8006b96 <memcpy>
 8009c72:	4621      	mov	r1, r4
 8009c74:	4640      	mov	r0, r8
 8009c76:	f7fd fdf3 	bl	8007860 <_free_r>
 8009c7a:	463c      	mov	r4, r7
 8009c7c:	e7e0      	b.n	8009c40 <_realloc_r+0x1e>

08009c7e <__ascii_wctomb>:
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	b141      	cbz	r1, 8009c96 <__ascii_wctomb+0x18>
 8009c84:	2aff      	cmp	r2, #255	@ 0xff
 8009c86:	d904      	bls.n	8009c92 <__ascii_wctomb+0x14>
 8009c88:	228a      	movs	r2, #138	@ 0x8a
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	2001      	movs	r0, #1
 8009c94:	700a      	strb	r2, [r1, #0]
 8009c96:	4770      	bx	lr

08009c98 <fiprintf>:
 8009c98:	b40e      	push	{r1, r2, r3}
 8009c9a:	b503      	push	{r0, r1, lr}
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	ab03      	add	r3, sp, #12
 8009ca0:	4805      	ldr	r0, [pc, #20]	@ (8009cb8 <fiprintf+0x20>)
 8009ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca6:	6800      	ldr	r0, [r0, #0]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	f000 f83d 	bl	8009d28 <_vfiprintf_r>
 8009cae:	b002      	add	sp, #8
 8009cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb4:	b003      	add	sp, #12
 8009cb6:	4770      	bx	lr
 8009cb8:	20000024 	.word	0x20000024

08009cbc <abort>:
 8009cbc:	2006      	movs	r0, #6
 8009cbe:	b508      	push	{r3, lr}
 8009cc0:	f000 fa06 	bl	800a0d0 <raise>
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f000 faab 	bl	800a220 <_exit>

08009cca <_malloc_usable_size_r>:
 8009cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cce:	1f18      	subs	r0, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bfbc      	itt	lt
 8009cd4:	580b      	ldrlt	r3, [r1, r0]
 8009cd6:	18c0      	addlt	r0, r0, r3
 8009cd8:	4770      	bx	lr

08009cda <__sfputc_r>:
 8009cda:	6893      	ldr	r3, [r2, #8]
 8009cdc:	b410      	push	{r4}
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	6093      	str	r3, [r2, #8]
 8009ce4:	da07      	bge.n	8009cf6 <__sfputc_r+0x1c>
 8009ce6:	6994      	ldr	r4, [r2, #24]
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	db01      	blt.n	8009cf0 <__sfputc_r+0x16>
 8009cec:	290a      	cmp	r1, #10
 8009cee:	d102      	bne.n	8009cf6 <__sfputc_r+0x1c>
 8009cf0:	bc10      	pop	{r4}
 8009cf2:	f000 b931 	b.w	8009f58 <__swbuf_r>
 8009cf6:	6813      	ldr	r3, [r2, #0]
 8009cf8:	1c58      	adds	r0, r3, #1
 8009cfa:	6010      	str	r0, [r2, #0]
 8009cfc:	7019      	strb	r1, [r3, #0]
 8009cfe:	4608      	mov	r0, r1
 8009d00:	bc10      	pop	{r4}
 8009d02:	4770      	bx	lr

08009d04 <__sfputs_r>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	4606      	mov	r6, r0
 8009d08:	460f      	mov	r7, r1
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	18d5      	adds	r5, r2, r3
 8009d0e:	42ac      	cmp	r4, r5
 8009d10:	d101      	bne.n	8009d16 <__sfputs_r+0x12>
 8009d12:	2000      	movs	r0, #0
 8009d14:	e007      	b.n	8009d26 <__sfputs_r+0x22>
 8009d16:	463a      	mov	r2, r7
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	f7ff ffdc 	bl	8009cda <__sfputc_r>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d1f3      	bne.n	8009d0e <__sfputs_r+0xa>
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d28 <_vfiprintf_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	4614      	mov	r4, r2
 8009d30:	4698      	mov	r8, r3
 8009d32:	4606      	mov	r6, r0
 8009d34:	b09d      	sub	sp, #116	@ 0x74
 8009d36:	b118      	cbz	r0, 8009d40 <_vfiprintf_r+0x18>
 8009d38:	6a03      	ldr	r3, [r0, #32]
 8009d3a:	b90b      	cbnz	r3, 8009d40 <_vfiprintf_r+0x18>
 8009d3c:	f7fc fde4 	bl	8006908 <__sinit>
 8009d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d42:	07d9      	lsls	r1, r3, #31
 8009d44:	d405      	bmi.n	8009d52 <_vfiprintf_r+0x2a>
 8009d46:	89ab      	ldrh	r3, [r5, #12]
 8009d48:	059a      	lsls	r2, r3, #22
 8009d4a:	d402      	bmi.n	8009d52 <_vfiprintf_r+0x2a>
 8009d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d4e:	f7fc ff12 	bl	8006b76 <__retarget_lock_acquire_recursive>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	071b      	lsls	r3, r3, #28
 8009d56:	d501      	bpl.n	8009d5c <_vfiprintf_r+0x34>
 8009d58:	692b      	ldr	r3, [r5, #16]
 8009d5a:	b99b      	cbnz	r3, 8009d84 <_vfiprintf_r+0x5c>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f000 f938 	bl	8009fd4 <__swsetup_r>
 8009d64:	b170      	cbz	r0, 8009d84 <_vfiprintf_r+0x5c>
 8009d66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d68:	07dc      	lsls	r4, r3, #31
 8009d6a:	d504      	bpl.n	8009d76 <_vfiprintf_r+0x4e>
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	b01d      	add	sp, #116	@ 0x74
 8009d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d76:	89ab      	ldrh	r3, [r5, #12]
 8009d78:	0598      	lsls	r0, r3, #22
 8009d7a:	d4f7      	bmi.n	8009d6c <_vfiprintf_r+0x44>
 8009d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d7e:	f7fc fefb 	bl	8006b78 <__retarget_lock_release_recursive>
 8009d82:	e7f3      	b.n	8009d6c <_vfiprintf_r+0x44>
 8009d84:	2300      	movs	r3, #0
 8009d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d8e:	2330      	movs	r3, #48	@ 0x30
 8009d90:	f04f 0901 	mov.w	r9, #1
 8009d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f44 <_vfiprintf_r+0x21c>
 8009d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009da0:	4623      	mov	r3, r4
 8009da2:	469a      	mov	sl, r3
 8009da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da8:	b10a      	cbz	r2, 8009dae <_vfiprintf_r+0x86>
 8009daa:	2a25      	cmp	r2, #37	@ 0x25
 8009dac:	d1f9      	bne.n	8009da2 <_vfiprintf_r+0x7a>
 8009dae:	ebba 0b04 	subs.w	fp, sl, r4
 8009db2:	d00b      	beq.n	8009dcc <_vfiprintf_r+0xa4>
 8009db4:	465b      	mov	r3, fp
 8009db6:	4622      	mov	r2, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7ff ffa2 	bl	8009d04 <__sfputs_r>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f000 80a7 	beq.w	8009f14 <_vfiprintf_r+0x1ec>
 8009dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dc8:	445a      	add	r2, fp
 8009dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 809f 	beq.w	8009f14 <_vfiprintf_r+0x1ec>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de0:	f10a 0a01 	add.w	sl, sl, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	9307      	str	r3, [sp, #28]
 8009de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dee:	4654      	mov	r4, sl
 8009df0:	2205      	movs	r2, #5
 8009df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df6:	4853      	ldr	r0, [pc, #332]	@ (8009f44 <_vfiprintf_r+0x21c>)
 8009df8:	f7fc febf 	bl	8006b7a <memchr>
 8009dfc:	9a04      	ldr	r2, [sp, #16]
 8009dfe:	b9d8      	cbnz	r0, 8009e38 <_vfiprintf_r+0x110>
 8009e00:	06d1      	lsls	r1, r2, #27
 8009e02:	bf44      	itt	mi
 8009e04:	2320      	movmi	r3, #32
 8009e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e0a:	0713      	lsls	r3, r2, #28
 8009e0c:	bf44      	itt	mi
 8009e0e:	232b      	movmi	r3, #43	@ 0x2b
 8009e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e14:	f89a 3000 	ldrb.w	r3, [sl]
 8009e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e1a:	d015      	beq.n	8009e48 <_vfiprintf_r+0x120>
 8009e1c:	4654      	mov	r4, sl
 8009e1e:	2000      	movs	r0, #0
 8009e20:	f04f 0c0a 	mov.w	ip, #10
 8009e24:	9a07      	ldr	r2, [sp, #28]
 8009e26:	4621      	mov	r1, r4
 8009e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2c:	3b30      	subs	r3, #48	@ 0x30
 8009e2e:	2b09      	cmp	r3, #9
 8009e30:	d94b      	bls.n	8009eca <_vfiprintf_r+0x1a2>
 8009e32:	b1b0      	cbz	r0, 8009e62 <_vfiprintf_r+0x13a>
 8009e34:	9207      	str	r2, [sp, #28]
 8009e36:	e014      	b.n	8009e62 <_vfiprintf_r+0x13a>
 8009e38:	eba0 0308 	sub.w	r3, r0, r8
 8009e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	46a2      	mov	sl, r4
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	e7d2      	b.n	8009dee <_vfiprintf_r+0xc6>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	1d19      	adds	r1, r3, #4
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	9103      	str	r1, [sp, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfbb      	ittet	lt
 8009e54:	425b      	neglt	r3, r3
 8009e56:	f042 0202 	orrlt.w	r2, r2, #2
 8009e5a:	9307      	strge	r3, [sp, #28]
 8009e5c:	9307      	strlt	r3, [sp, #28]
 8009e5e:	bfb8      	it	lt
 8009e60:	9204      	strlt	r2, [sp, #16]
 8009e62:	7823      	ldrb	r3, [r4, #0]
 8009e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e66:	d10a      	bne.n	8009e7e <_vfiprintf_r+0x156>
 8009e68:	7863      	ldrb	r3, [r4, #1]
 8009e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e6c:	d132      	bne.n	8009ed4 <_vfiprintf_r+0x1ac>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	3402      	adds	r4, #2
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9203      	str	r2, [sp, #12]
 8009e78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009f48 <_vfiprintf_r+0x220>
 8009e82:	2203      	movs	r2, #3
 8009e84:	4650      	mov	r0, sl
 8009e86:	7821      	ldrb	r1, [r4, #0]
 8009e88:	f7fc fe77 	bl	8006b7a <memchr>
 8009e8c:	b138      	cbz	r0, 8009e9e <_vfiprintf_r+0x176>
 8009e8e:	2240      	movs	r2, #64	@ 0x40
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	eba0 000a 	sub.w	r0, r0, sl
 8009e96:	4082      	lsls	r2, r0
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	3401      	adds	r4, #1
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea2:	2206      	movs	r2, #6
 8009ea4:	4829      	ldr	r0, [pc, #164]	@ (8009f4c <_vfiprintf_r+0x224>)
 8009ea6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eaa:	f7fc fe66 	bl	8006b7a <memchr>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d03f      	beq.n	8009f32 <_vfiprintf_r+0x20a>
 8009eb2:	4b27      	ldr	r3, [pc, #156]	@ (8009f50 <_vfiprintf_r+0x228>)
 8009eb4:	bb1b      	cbnz	r3, 8009efe <_vfiprintf_r+0x1d6>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	3307      	adds	r3, #7
 8009eba:	f023 0307 	bic.w	r3, r3, #7
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	9303      	str	r3, [sp, #12]
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	443b      	add	r3, r7
 8009ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec8:	e76a      	b.n	8009da0 <_vfiprintf_r+0x78>
 8009eca:	460c      	mov	r4, r1
 8009ecc:	2001      	movs	r0, #1
 8009ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed2:	e7a8      	b.n	8009e26 <_vfiprintf_r+0xfe>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f04f 0c0a 	mov.w	ip, #10
 8009eda:	4619      	mov	r1, r3
 8009edc:	3401      	adds	r4, #1
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee6:	3a30      	subs	r2, #48	@ 0x30
 8009ee8:	2a09      	cmp	r2, #9
 8009eea:	d903      	bls.n	8009ef4 <_vfiprintf_r+0x1cc>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0c6      	beq.n	8009e7e <_vfiprintf_r+0x156>
 8009ef0:	9105      	str	r1, [sp, #20]
 8009ef2:	e7c4      	b.n	8009e7e <_vfiprintf_r+0x156>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efc:	e7f0      	b.n	8009ee0 <_vfiprintf_r+0x1b8>
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	462a      	mov	r2, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	4b13      	ldr	r3, [pc, #76]	@ (8009f54 <_vfiprintf_r+0x22c>)
 8009f08:	a904      	add	r1, sp, #16
 8009f0a:	f7fb fea3 	bl	8005c54 <_printf_float>
 8009f0e:	4607      	mov	r7, r0
 8009f10:	1c78      	adds	r0, r7, #1
 8009f12:	d1d6      	bne.n	8009ec2 <_vfiprintf_r+0x19a>
 8009f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f16:	07d9      	lsls	r1, r3, #31
 8009f18:	d405      	bmi.n	8009f26 <_vfiprintf_r+0x1fe>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	059a      	lsls	r2, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_vfiprintf_r+0x1fe>
 8009f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f22:	f7fc fe29 	bl	8006b78 <__retarget_lock_release_recursive>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	065b      	lsls	r3, r3, #25
 8009f2a:	f53f af1f 	bmi.w	8009d6c <_vfiprintf_r+0x44>
 8009f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f30:	e71e      	b.n	8009d70 <_vfiprintf_r+0x48>
 8009f32:	ab03      	add	r3, sp, #12
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	462a      	mov	r2, r5
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <_vfiprintf_r+0x22c>)
 8009f3c:	a904      	add	r1, sp, #16
 8009f3e:	f7fc f927 	bl	8006190 <_printf_i>
 8009f42:	e7e4      	b.n	8009f0e <_vfiprintf_r+0x1e6>
 8009f44:	0800a719 	.word	0x0800a719
 8009f48:	0800a71f 	.word	0x0800a71f
 8009f4c:	0800a723 	.word	0x0800a723
 8009f50:	08005c55 	.word	0x08005c55
 8009f54:	08009d05 	.word	0x08009d05

08009f58 <__swbuf_r>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	460e      	mov	r6, r1
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	4605      	mov	r5, r0
 8009f60:	b118      	cbz	r0, 8009f6a <__swbuf_r+0x12>
 8009f62:	6a03      	ldr	r3, [r0, #32]
 8009f64:	b90b      	cbnz	r3, 8009f6a <__swbuf_r+0x12>
 8009f66:	f7fc fccf 	bl	8006908 <__sinit>
 8009f6a:	69a3      	ldr	r3, [r4, #24]
 8009f6c:	60a3      	str	r3, [r4, #8]
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	071a      	lsls	r2, r3, #28
 8009f72:	d501      	bpl.n	8009f78 <__swbuf_r+0x20>
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b943      	cbnz	r3, 8009f8a <__swbuf_r+0x32>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f82a 	bl	8009fd4 <__swsetup_r>
 8009f80:	b118      	cbz	r0, 8009f8a <__swbuf_r+0x32>
 8009f82:	f04f 37ff 	mov.w	r7, #4294967295
 8009f86:	4638      	mov	r0, r7
 8009f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	6922      	ldr	r2, [r4, #16]
 8009f8e:	b2f6      	uxtb	r6, r6
 8009f90:	1a98      	subs	r0, r3, r2
 8009f92:	6963      	ldr	r3, [r4, #20]
 8009f94:	4637      	mov	r7, r6
 8009f96:	4283      	cmp	r3, r0
 8009f98:	dc05      	bgt.n	8009fa6 <__swbuf_r+0x4e>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f7ff fa59 	bl	8009454 <_fflush_r>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d1ed      	bne.n	8009f82 <__swbuf_r+0x2a>
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	60a3      	str	r3, [r4, #8]
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	6022      	str	r2, [r4, #0]
 8009fb2:	701e      	strb	r6, [r3, #0]
 8009fb4:	6962      	ldr	r2, [r4, #20]
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d004      	beq.n	8009fc6 <__swbuf_r+0x6e>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	07db      	lsls	r3, r3, #31
 8009fc0:	d5e1      	bpl.n	8009f86 <__swbuf_r+0x2e>
 8009fc2:	2e0a      	cmp	r6, #10
 8009fc4:	d1df      	bne.n	8009f86 <__swbuf_r+0x2e>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f7ff fa43 	bl	8009454 <_fflush_r>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0d9      	beq.n	8009f86 <__swbuf_r+0x2e>
 8009fd2:	e7d6      	b.n	8009f82 <__swbuf_r+0x2a>

08009fd4 <__swsetup_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4b29      	ldr	r3, [pc, #164]	@ (800a07c <__swsetup_r+0xa8>)
 8009fd8:	4605      	mov	r5, r0
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	460c      	mov	r4, r1
 8009fde:	b118      	cbz	r0, 8009fe8 <__swsetup_r+0x14>
 8009fe0:	6a03      	ldr	r3, [r0, #32]
 8009fe2:	b90b      	cbnz	r3, 8009fe8 <__swsetup_r+0x14>
 8009fe4:	f7fc fc90 	bl	8006908 <__sinit>
 8009fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fec:	0719      	lsls	r1, r3, #28
 8009fee:	d422      	bmi.n	800a036 <__swsetup_r+0x62>
 8009ff0:	06da      	lsls	r2, r3, #27
 8009ff2:	d407      	bmi.n	800a004 <__swsetup_r+0x30>
 8009ff4:	2209      	movs	r2, #9
 8009ff6:	602a      	str	r2, [r5, #0]
 8009ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	e033      	b.n	800a06c <__swsetup_r+0x98>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x5a>
 800a008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x4a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x46>
 800a014:	4628      	mov	r0, r5
 800a016:	f7fd fc23 	bl	8007860 <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x7a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x7a>
 800a046:	4621      	mov	r1, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f882 	bl	800a152 <__smakebuf_r>
 800a04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a052:	f013 0201 	ands.w	r2, r3, #1
 800a056:	d00a      	beq.n	800a06e <__swsetup_r+0x9a>
 800a058:	2200      	movs	r2, #0
 800a05a:	60a2      	str	r2, [r4, #8]
 800a05c:	6962      	ldr	r2, [r4, #20]
 800a05e:	4252      	negs	r2, r2
 800a060:	61a2      	str	r2, [r4, #24]
 800a062:	6922      	ldr	r2, [r4, #16]
 800a064:	b942      	cbnz	r2, 800a078 <__swsetup_r+0xa4>
 800a066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a06a:	d1c5      	bne.n	8009ff8 <__swsetup_r+0x24>
 800a06c:	bd38      	pop	{r3, r4, r5, pc}
 800a06e:	0799      	lsls	r1, r3, #30
 800a070:	bf58      	it	pl
 800a072:	6962      	ldrpl	r2, [r4, #20]
 800a074:	60a2      	str	r2, [r4, #8]
 800a076:	e7f4      	b.n	800a062 <__swsetup_r+0x8e>
 800a078:	2000      	movs	r0, #0
 800a07a:	e7f7      	b.n	800a06c <__swsetup_r+0x98>
 800a07c:	20000024 	.word	0x20000024

0800a080 <_raise_r>:
 800a080:	291f      	cmp	r1, #31
 800a082:	b538      	push	{r3, r4, r5, lr}
 800a084:	4605      	mov	r5, r0
 800a086:	460c      	mov	r4, r1
 800a088:	d904      	bls.n	800a094 <_raise_r+0x14>
 800a08a:	2316      	movs	r3, #22
 800a08c:	6003      	str	r3, [r0, #0]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a096:	b112      	cbz	r2, 800a09e <_raise_r+0x1e>
 800a098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a09c:	b94b      	cbnz	r3, 800a0b2 <_raise_r+0x32>
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 f830 	bl	800a104 <_getpid_r>
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ae:	f000 b817 	b.w	800a0e0 <_kill_r>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d00a      	beq.n	800a0cc <_raise_r+0x4c>
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	d103      	bne.n	800a0c2 <_raise_r+0x42>
 800a0ba:	2316      	movs	r3, #22
 800a0bc:	6003      	str	r3, [r0, #0]
 800a0be:	2001      	movs	r0, #1
 800a0c0:	e7e7      	b.n	800a092 <_raise_r+0x12>
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0ca:	4798      	blx	r3
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e7e0      	b.n	800a092 <_raise_r+0x12>

0800a0d0 <raise>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	@ (800a0dc <raise+0xc>)
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f7ff bfd3 	b.w	800a080 <_raise_r>
 800a0da:	bf00      	nop
 800a0dc:	20000024 	.word	0x20000024

0800a0e0 <_kill_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4d06      	ldr	r5, [pc, #24]	@ (800a100 <_kill_r+0x20>)
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	f000 f88f 	bl	800a210 <_kill>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_kill_r+0x1c>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_kill_r+0x1c>
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	2000354c 	.word	0x2000354c

0800a104 <_getpid_r>:
 800a104:	f7fb bb64 	b.w	80057d0 <_getpid>

0800a108 <__swhatbuf_r>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	460c      	mov	r4, r1
 800a10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a110:	4615      	mov	r5, r2
 800a112:	2900      	cmp	r1, #0
 800a114:	461e      	mov	r6, r3
 800a116:	b096      	sub	sp, #88	@ 0x58
 800a118:	da0c      	bge.n	800a134 <__swhatbuf_r+0x2c>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	2100      	movs	r1, #0
 800a11e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a122:	bf14      	ite	ne
 800a124:	2340      	movne	r3, #64	@ 0x40
 800a126:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a12a:	2000      	movs	r0, #0
 800a12c:	6031      	str	r1, [r6, #0]
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	b016      	add	sp, #88	@ 0x58
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	466a      	mov	r2, sp
 800a136:	f000 f849 	bl	800a1cc <_fstat_r>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	dbed      	blt.n	800a11a <__swhatbuf_r+0x12>
 800a13e:	9901      	ldr	r1, [sp, #4]
 800a140:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a144:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a148:	4259      	negs	r1, r3
 800a14a:	4159      	adcs	r1, r3
 800a14c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a150:	e7eb      	b.n	800a12a <__swhatbuf_r+0x22>

0800a152 <__smakebuf_r>:
 800a152:	898b      	ldrh	r3, [r1, #12]
 800a154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a156:	079d      	lsls	r5, r3, #30
 800a158:	4606      	mov	r6, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	d507      	bpl.n	800a16e <__smakebuf_r+0x1c>
 800a15e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	2301      	movs	r3, #1
 800a168:	6163      	str	r3, [r4, #20]
 800a16a:	b003      	add	sp, #12
 800a16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16e:	466a      	mov	r2, sp
 800a170:	ab01      	add	r3, sp, #4
 800a172:	f7ff ffc9 	bl	800a108 <__swhatbuf_r>
 800a176:	9f00      	ldr	r7, [sp, #0]
 800a178:	4605      	mov	r5, r0
 800a17a:	4639      	mov	r1, r7
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7fd fbe1 	bl	8007944 <_malloc_r>
 800a182:	b948      	cbnz	r0, 800a198 <__smakebuf_r+0x46>
 800a184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a188:	059a      	lsls	r2, r3, #22
 800a18a:	d4ee      	bmi.n	800a16a <__smakebuf_r+0x18>
 800a18c:	f023 0303 	bic.w	r3, r3, #3
 800a190:	f043 0302 	orr.w	r3, r3, #2
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	e7e2      	b.n	800a15e <__smakebuf_r+0xc>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	6020      	str	r0, [r4, #0]
 800a1a8:	b15b      	cbz	r3, 800a1c2 <__smakebuf_r+0x70>
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b0:	f000 f81e 	bl	800a1f0 <_isatty_r>
 800a1b4:	b128      	cbz	r0, 800a1c2 <__smakebuf_r+0x70>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f023 0303 	bic.w	r3, r3, #3
 800a1bc:	f043 0301 	orr.w	r3, r3, #1
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	431d      	orrs	r5, r3
 800a1c6:	81a5      	strh	r5, [r4, #12]
 800a1c8:	e7cf      	b.n	800a16a <__smakebuf_r+0x18>
	...

0800a1cc <_fstat_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4d06      	ldr	r5, [pc, #24]	@ (800a1ec <_fstat_r+0x20>)
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	f7fb fb1c 	bl	8005816 <_fstat>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	d102      	bne.n	800a1e8 <_fstat_r+0x1c>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	b103      	cbz	r3, 800a1e8 <_fstat_r+0x1c>
 800a1e6:	6023      	str	r3, [r4, #0]
 800a1e8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000354c 	.word	0x2000354c

0800a1f0 <_isatty_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	4d05      	ldr	r5, [pc, #20]	@ (800a20c <_isatty_r+0x1c>)
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	602b      	str	r3, [r5, #0]
 800a1fc:	f7fb fc6e 	bl	8005adc <_isatty>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_isatty_r+0x1a>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_isatty_r+0x1a>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	2000354c 	.word	0x2000354c

0800a210 <_kill>:
 800a210:	2258      	movs	r2, #88	@ 0x58
 800a212:	4b02      	ldr	r3, [pc, #8]	@ (800a21c <_kill+0xc>)
 800a214:	f04f 30ff 	mov.w	r0, #4294967295
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	4770      	bx	lr
 800a21c:	2000354c 	.word	0x2000354c

0800a220 <_exit>:
 800a220:	e7fe      	b.n	800a220 <_exit>
	...

0800a224 <_init>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	bf00      	nop
 800a228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22a:	bc08      	pop	{r3}
 800a22c:	469e      	mov	lr, r3
 800a22e:	4770      	bx	lr

0800a230 <_fini>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	bf00      	nop
 800a234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a236:	bc08      	pop	{r3}
 800a238:	469e      	mov	lr, r3
 800a23a:	4770      	bx	lr
