
adc1_IN1and_IN16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08006e88  08006e88  00016e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080072d8  080072d8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072d8  080072d8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080072e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001d4  080074b4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080074b4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000563a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ce  00000000  00000000  0002587a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  00027048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ad  00000000  00000000  000276b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d60  00000000  00000000  00027b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008085  00000000  00000000  0003f8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008681a  00000000  00000000  00047942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c70  00000000  00000000  000ce15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e6c 	.word	0x08006e6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006e6c 	.word	0x08006e6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <adc_get_temp_ss>:

    ADC1-> CR2 |= (1<<0); //Enable ADC and to start conversion
}

float adc_get_temp_ss(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
    float temp = 0;
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
    float vin = 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
    uint16_t raw_data = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	80fb      	strh	r3, [r7, #6]

	ADC1->CR2 |= (0b111 << 12) ;//External event select for injected group: JSWSTART
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000bf4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bf8:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (0b1 << 15) ;//1: Conversion on external event enabled
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4a36      	ldr	r2, [pc, #216]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c04:	6093      	str	r3, [r2, #8]

    // trigger ADC start convert
    ADC1-> CR2 |= (1u<<21);//Start conversion of injected channels
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c10:	6093      	str	r3, [r2, #8]

    //wait until end of conversion
    while(((ADC1-> SR>>2)&1) == 0);
 8000c12:	bf00      	nop
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <adc_get_temp_ss+0x3c>
    ADC1-> SR &= ~(1u<<2); //clear JEOC flag
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2c      	ldr	r2, [pc, #176]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c26:	f023 0304 	bic.w	r3, r3, #4
 8000c2a:	6013      	str	r3, [r2, #0]

    raw_data = ADC1-> JDR1; //read ADC data form JDR1 (data of JSQ4)
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <adc_get_temp_ss+0x100>)
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	80fb      	strh	r3, [r7, #6]

    vin = (raw_data*3300.0)/4095.0;
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fbe5 	bl	8000404 <__aeabi_i2d>
 8000c3a:	a31f      	add	r3, pc, #124	; (adr r3, 8000cb8 <adc_get_temp_ss+0xe0>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	f7ff fc4a 	bl	80004d8 <__aeabi_dmul>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	a31c      	add	r3, pc, #112	; (adr r3, 8000cc0 <adc_get_temp_ss+0xe8>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	f7ff fd6b 	bl	800072c <__aeabi_ddiv>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f7ff ff33 	bl	8000ac8 <__aeabi_d2f>
 8000c62:	4603      	mov	r3, r0
 8000c64:	60bb      	str	r3, [r7, #8]

    temp = ((1430.0 - vin) / 4.3) + 25.0;
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fbde 	bl	8000428 <__aeabi_f2d>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	a115      	add	r1, pc, #84	; (adr r1, 8000cc8 <adc_get_temp_ss+0xf0>)
 8000c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c76:	f7ff fa77 	bl	8000168 <__aeabi_dsub>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	a313      	add	r3, pc, #76	; (adr r3, 8000cd0 <adc_get_temp_ss+0xf8>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	f7ff fd50 	bl	800072c <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <adc_get_temp_ss+0x104>)
 8000c9a:	f7ff fa67 	bl	800016c <__adddf3>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff ff0f 	bl	8000ac8 <__aeabi_d2f>
 8000caa:	4603      	mov	r3, r0
 8000cac:	60fb      	str	r3, [r7, #12]

    return temp;
 8000cae:	68fb      	ldr	r3, [r7, #12]

}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	40a9c800 	.word	0x40a9c800
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40affe00 	.word	0x40affe00
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	40965800 	.word	0x40965800
 8000cd0:	33333333 	.word	0x33333333
 8000cd4:	40113333 	.word	0x40113333
 8000cd8:	40012400 	.word	0x40012400
 8000cdc:	40390000 	.word	0x40390000

08000ce0 <adc_get_vin_pa1>:

float adc_get_vin_pa1(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
    float vin = 0;
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
    uint16_t raw_data = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	807b      	strh	r3, [r7, #2]


		ADC1->CR2 |= (0b111 << 12) ;//External event select for injected group: JSWSTART
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000cf6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000cfa:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b1 << 15) ;//1: Conversion on external event enabled
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d06:	6093      	str	r3, [r2, #8]

    // trigger ADC start convert
    ADC1-> CR2 |= (1u<<21);//Start conversion of injected channels
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d12:	6093      	str	r3, [r2, #8]

    //wait until end of conversion
    while(((ADC1-> SR>>2)&1) == 0);
 8000d14:	bf00      	nop
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <adc_get_vin_pa1+0x36>
    ADC1-> SR &= ~(1u<<2); //clear JEOC flag
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d28:	f023 0304 	bic.w	r3, r3, #4
 8000d2c:	6013      	str	r3, [r2, #0]

    raw_data = ADC1-> JDR2; //read ADC data form JDR1 (data of JSQ4)
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <adc_get_vin_pa1+0xa8>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	807b      	strh	r3, [r7, #2]

    vin = (raw_data*3300.0)/4095.0;
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb64 	bl	8000404 <__aeabi_i2d>
 8000d3c:	a30e      	add	r3, pc, #56	; (adr r3, 8000d78 <adc_get_vin_pa1+0x98>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fbc9 	bl	80004d8 <__aeabi_dmul>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	a30c      	add	r3, pc, #48	; (adr r3, 8000d80 <adc_get_vin_pa1+0xa0>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fcea 	bl	800072c <__aeabi_ddiv>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff feb2 	bl	8000ac8 <__aeabi_d2f>
 8000d64:	4603      	mov	r3, r0
 8000d66:	607b      	str	r3, [r7, #4]

    return vin;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	f3af 8000 	nop.w
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	40a9c800 	.word	0x40a9c800
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40affe00 	.word	0x40affe00
 8000d88:	40012400 	.word	0x40012400

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f000 fa82 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f818 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 f8d4 	bl	8000f44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d9c:	f000 f870 	bl	8000e80 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      adc_value = adc_get_temp_ss();
 8000da0:	f7ff ff1a 	bl	8000bd8 <adc_get_temp_ss>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <main+0x34>)
 8000da8:	6013      	str	r3, [r2, #0]
      vin_pa1 = adc_get_vin_pa1();
 8000daa:	f7ff ff99 	bl	8000ce0 <adc_get_vin_pa1>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <main+0x38>)
 8000db2:	6013      	str	r3, [r2, #0]
      HAL_Delay(500);
 8000db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db8:	f000 fad0 	bl	800135c <HAL_Delay>
      adc_value = adc_get_temp_ss();
 8000dbc:	e7f0      	b.n	8000da0 <main+0x14>
 8000dbe:	bf00      	nop
 8000dc0:	20000220 	.word	0x20000220
 8000dc4:	20000224 	.word	0x20000224

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	2228      	movs	r2, #40	; 0x28
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fc25 	bl	8003626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 ffdc 	bl	8001ddc <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e2a:	f000 f8ad 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa48 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e56:	f000 f897 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fb96 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e72:	f000 f889 	bl	8000f88 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	; 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <MX_ADC1_Init+0xc0>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	751a      	strb	r2, [r3, #20]
  //hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  //hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000eba:	f000 fa73 	bl	80013a4 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
 8000ec4:	f000 f860 	bl	8000f88 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ed8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000edc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4813      	ldr	r0, [pc, #76]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000ef0:	f000 fb72 	bl	80015d8 <HAL_ADCEx_InjectedConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000efa:	f000 f845 	bl	8000f88 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_ADC1_Init+0xbc>)
 8000f0c:	f000 fb64 	bl	80015d8 <HAL_ADCEx_InjectedConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000f16:	f000 f837 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1-> CR2 |= (1<<23); //enable temp sensor
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_ADC1_Init+0xc0>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <MX_ADC1_Init+0xc0>)
 8000f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f24:	6093      	str	r3, [r2, #8]

  ADC1-> CR2 |= (1<<0); //Enable ADC and to start conversion
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_ADC1_Init+0xc0>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <MX_ADC1_Init+0xc0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001f0 	.word	0x200001f0
 8000f40:	40012400 	.word	0x40012400

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MX_GPIO_Init+0x40>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	40021000 	.word	0x40021000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_ADC_MspInit+0x6c>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d121      	bne.n	800105c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_ADC_MspInit+0x70>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <HAL_ADC_MspInit+0x70>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_MspInit+0x70>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_ADC_MspInit+0x70>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_ADC_MspInit+0x70>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_ADC_MspInit+0x70>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104c:	2303      	movs	r3, #3
 800104e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_ADC_MspInit+0x74>)
 8001058:	f000 fd3c 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40012400 	.word	0x40012400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f935 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}

080010be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010d6:	f002 faf9 	bl	80036cc <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
  }
  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001198:	605a      	str	r2, [r3, #4]
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <_isatty>:

int _isatty(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f002 fa62 	bl	80036cc <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20005000 	.word	0x20005000
 8001234:	00000400 	.word	0x00000400
 8001238:	20000228 	.word	0x20000228
 800123c:	20000380 	.word	0x20000380

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff fff8 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001252:	490c      	ldr	r1, [pc, #48]	; (8001284 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001268:	4c09      	ldr	r4, [pc, #36]	; (8001290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f002 fa2f 	bl	80036d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800127a:	f7ff fd87 	bl	8000d8c <main>
  bx lr
 800127e:	4770      	bx	lr
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001288:	080072e0 	.word	0x080072e0
  ldr r2, =_sbss
 800128c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001290:	2000037c 	.word	0x2000037c

08001294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_2_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x28>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x28>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 fbdf 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fe6e 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40022000 	.word	0x40022000

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fbe9 	bl	8001aba <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 fbbf 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a03      	ldr	r2, [pc, #12]	; (8001344 <HAL_IncTick+0x20>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	20000008 	.word	0x20000008
 8001344:	2000022c 	.word	0x2000022c

08001348 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	2000022c 	.word	0x2000022c

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff0 	bl	8001348 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffe0 	bl	8001348 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0be      	b.n	8001544 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fe08 	bl	8000ff8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f8b3 	bl	8001554 <ADC_ConversionStop_Disable>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 8099 	bne.w	8001532 <HAL_ADC_Init+0x18e>
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 8095 	bne.w	8001532 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001424:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800142c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143c:	d003      	beq.n	8001446 <HAL_ADC_Init+0xa2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <HAL_ADC_Init+0xa8>
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	e000      	b.n	800144e <HAL_ADC_Init+0xaa>
 800144c:	2300      	movs	r3, #0
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d119      	bne.n	8001490 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7b1b      	ldrb	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	3b01      	subs	r3, #1
 800146a:	035a      	lsls	r2, r3, #13
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e00b      	b.n	8001490 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_ADC_Init+0x1a8>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_Init+0x126>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d104      	bne.n	80014d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	051b      	lsls	r3, r3, #20
 80014d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_ADC_Init+0x1ac>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150e:	e018      	b.n	8001542 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f023 0312 	bic.w	r3, r3, #18
 8001518:	f043 0210 	orr.w	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001530:	e007      	b.n	8001542 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	ffe1f7fd 	.word	0xffe1f7fd
 8001550:	ff1f0efe 	.word	0xff1f0efe

08001554 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d12e      	bne.n	80015cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157e:	f7ff fee3 	bl	8001348 <HAL_GetTick>
 8001582:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001584:	e01b      	b.n	80015be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001586:	f7ff fedf 	bl	8001348 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d914      	bls.n	80015be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10d      	bne.n	80015be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e007      	b.n	80015ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d0dc      	beq.n	8001586 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80015d8:	b490      	push	{r4, r7}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e17d      	b.n	80018f4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d119      	bne.n	800163c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d10c      	bne.n	800162a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	0d9b      	lsrs	r3, r3, #22
 8001618:	059b      	lsls	r3, r3, #22
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	03d1      	lsls	r1, r2, #15
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	6393      	str	r3, [r2, #56]	; 0x38
 8001628:	e04f      	b.n	80016ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f043 0220 	orr.w	r2, r3, #32
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e046      	b.n	80016ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d82a      	bhi.n	800169e <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	1ad2      	subs	r2, r2, r3
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	330f      	adds	r3, #15
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800166a:	43db      	mvns	r3, r3
 800166c:	4019      	ands	r1, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	3b01      	subs	r3, #1
 8001674:	0518      	lsls	r0, r3, #20
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681c      	ldr	r4, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	330f      	adds	r3, #15
 800168c:	fa04 f303 	lsl.w	r3, r4, r3
 8001690:	ea40 0203 	orr.w	r2, r0, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	639a      	str	r2, [r3, #56]	; 0x38
 800169c:	e015      	b.n	80016ca <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	330f      	adds	r3, #15
 80016b6:	221f      	movs	r2, #31
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80016c0:	43da      	mvns	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	400a      	ands	r2, r1
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00c      	beq.n	80016f2 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	6991      	ldr	r1, [r2, #24]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7d5b      	ldrb	r3, [r3, #21]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d115      	bne.n	8001726 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001702:	d108      	bne.n	8001716 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	e007      	b.n	8001726 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f043 0220 	orr.w	r2, r3, #32
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	7d1b      	ldrb	r3, [r3, #20]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d114      	bne.n	8001758 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7d5b      	ldrb	r3, [r3, #21]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	f043 0220 	orr.w	r2, r3, #32
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d91c      	bls.n	800179a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	3b1e      	subs	r3, #30
 8001772:	2207      	movs	r2, #7
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	4019      	ands	r1, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	3b1e      	subs	r3, #30
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	e019      	b.n	80017ce <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6919      	ldr	r1, [r3, #16]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4019      	ands	r1, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6898      	ldr	r0, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d003      	beq.n	80017de <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80017da:	2b11      	cmp	r3, #17
 80017dc:	d107      	bne.n	80017ee <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017ec:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d022      	beq.n	800183c <HAL_ADCEx_InjectedConfigChannel+0x264>
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d82e      	bhi.n	8001858 <HAL_ADCEx_InjectedConfigChannel+0x280>
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d002      	beq.n	8001804 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d00e      	beq.n	8001820 <HAL_ADCEx_InjectedConfigChannel+0x248>
 8001802:	e029      	b.n	8001858 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800180e:	f023 030f 	bic.w	r3, r3, #15
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	68d1      	ldr	r1, [r2, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	430b      	orrs	r3, r1
 800181c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800181e:	e029      	b.n	8001874 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	68d1      	ldr	r1, [r2, #12]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	430b      	orrs	r3, r1
 8001838:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800183a:	e01b      	b.n	8001874 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001846:	f023 030f 	bic.w	r3, r3, #15
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	68d1      	ldr	r1, [r2, #12]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	430b      	orrs	r3, r1
 8001854:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8001856:	e00d      	b.n	8001874 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001862:	f023 030f 	bic.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	68d1      	ldr	r1, [r2, #12]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	430b      	orrs	r3, r1
 8001870:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8001872:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d003      	beq.n	8001884 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001880:	2b11      	cmp	r3, #17
 8001882:	d132      	bne.n	80018ea <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d125      	bne.n	80018da <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d126      	bne.n	80018ea <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018aa:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d11a      	bne.n	80018ea <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ca:	e002      	b.n	80018d2 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80018d8:	e007      	b.n	80018ea <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc90      	pop	{r4, r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40012400 	.word	0x40012400
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff90 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff49 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff5e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffb0 	bl	8001a28 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b08b      	sub	sp, #44	; 0x2c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e169      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8158 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a9a      	ldr	r2, [pc, #616]	; (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b10:	4a98      	ldr	r2, [pc, #608]	; (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d875      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b16:	4a98      	ldr	r2, [pc, #608]	; (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d058      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b1c:	4a96      	ldr	r2, [pc, #600]	; (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d86f      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b22:	4a96      	ldr	r2, [pc, #600]	; (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d052      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b28:	4a94      	ldr	r2, [pc, #592]	; (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d869      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a94      	ldr	r2, [pc, #592]	; (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04c      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b34:	4a92      	ldr	r2, [pc, #584]	; (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d863      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a92      	ldr	r2, [pc, #584]	; (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d046      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b40:	4a90      	ldr	r2, [pc, #576]	; (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d85d      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d82a      	bhi.n	8001ba0 <HAL_GPIO_Init+0xcc>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d859      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b4e:	a201      	add	r2, pc, #4	; (adr r2, 8001b54 <HAL_GPIO_Init+0x80>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001ba9 	.word	0x08001ba9
 8001b5c:	08001bbb 	.word	0x08001bbb
 8001b60:	08001bfd 	.word	0x08001bfd
 8001b64:	08001c03 	.word	0x08001c03
 8001b68:	08001c03 	.word	0x08001c03
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c03 	.word	0x08001c03
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001c03 	.word	0x08001c03
 8001b7c:	08001c03 	.word	0x08001c03
 8001b80:	08001c03 	.word	0x08001c03
 8001b84:	08001c03 	.word	0x08001c03
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001c03 	.word	0x08001c03
 8001b90:	08001c03 	.word	0x08001c03
 8001b94:	08001c03 	.word	0x08001c03
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bc5 	.word	0x08001bc5
 8001ba0:	4a79      	ldr	r2, [pc, #484]	; (8001d88 <HAL_GPIO_Init+0x2b4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba6:	e02c      	b.n	8001c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e029      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e024      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e01f      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e01a      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e013      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	611a      	str	r2, [r3, #16]
          break;
 8001bee:	e009      	b.n	8001c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
          break;
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          break;
 8001c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d801      	bhi.n	8001c0e <HAL_GPIO_Init+0x13a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_Init+0x13e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3304      	adds	r3, #4
 8001c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	; 0xff
 8001c18:	d802      	bhi.n	8001c20 <HAL_GPIO_Init+0x14c>
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x152>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3b08      	subs	r3, #8
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80b1 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c54:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a40      	ldr	r2, [pc, #256]	; (8001d94 <HAL_GPIO_Init+0x2c0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x1ec>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3f      	ldr	r2, [pc, #252]	; (8001d98 <HAL_GPIO_Init+0x2c4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1e8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3e      	ldr	r2, [pc, #248]	; (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1e4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3d      	ldr	r2, [pc, #244]	; (8001da0 <HAL_GPIO_Init+0x2cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1e0>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd2:	492f      	ldr	r1, [pc, #188]	; (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	492c      	ldr	r1, [pc, #176]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4928      	ldr	r1, [pc, #160]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4922      	ldr	r1, [pc, #136]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	491e      	ldr	r1, [pc, #120]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4918      	ldr	r1, [pc, #96]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4914      	ldr	r1, [pc, #80]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d021      	beq.n	8001da8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	490e      	ldr	r1, [pc, #56]	; (8001da4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e021      	b.n	8001db6 <HAL_GPIO_Init+0x2e2>
 8001d72:	bf00      	nop
 8001d74:	10320000 	.word	0x10320000
 8001d78:	10310000 	.word	0x10310000
 8001d7c:	10220000 	.word	0x10220000
 8001d80:	10210000 	.word	0x10210000
 8001d84:	10120000 	.word	0x10120000
 8001d88:	10110000 	.word	0x10110000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40010800 	.word	0x40010800
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40011400 	.word	0x40011400
 8001da4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	3301      	adds	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f47f ae8e 	bne.w	8001ae8 <HAL_GPIO_Init+0x14>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	372c      	adds	r7, #44	; 0x2c
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e272      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e08:	4b8f      	ldr	r3, [pc, #572]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
 8001e14:	4b8c      	ldr	r3, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x12c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e24c      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76>
 8001e44:	4b80      	ldr	r3, [pc, #512]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7f      	ldr	r2, [pc, #508]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b78      	ldr	r3, [pc, #480]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a77      	ldr	r2, [pc, #476]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xbc>
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a71      	ldr	r2, [pc, #452]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e98:	4b6b      	ldr	r3, [pc, #428]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a67      	ldr	r2, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fa46 	bl	8001348 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fa42 	bl	8001348 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e200      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe4>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fa32 	bl	8001348 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fa2e 	bl	8001348 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1ec      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x10c>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f22:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c0      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4939      	ldr	r1, [pc, #228]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x270>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff f9e7 	bl	8001348 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f9e3 	bl	8001348 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4927      	ldr	r1, [pc, #156]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f9c6 	bl	8001348 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f9c2 	bl	8001348 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e180      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03a      	beq.n	8002060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d019      	beq.n	8002026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f9a6 	bl	8001348 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff f9a2 	bl	8001348 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e160      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fa9c 	bl	800255c <RCC_Delay>
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_OscConfig+0x274>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff f98c 	bl	8001348 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	e00f      	b.n	8002054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff f988 	bl	8001348 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d908      	bls.n	8002054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e146      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	42420000 	.word	0x42420000
 8002050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e9      	bne.n	8002034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a6 	beq.w	80021ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b82      	ldr	r3, [pc, #520]	; (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f949 	bl	8001348 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff f945 	bl	8001348 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e103      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x312>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x334>
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x356>
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	4b5e      	ldr	r3, [pc, #376]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002132:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff f8f9 	bl	8001348 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff f8f5 	bl	8001348 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x37e>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff f8e3 	bl	8001348 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f8df 	bl	8001348 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e09b      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d061      	beq.n	8002294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d146      	bne.n	8002266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff f8b3 	bl	8001348 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff f8af 	bl	8001348 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e06d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4921      	ldr	r1, [pc, #132]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a19      	ldr	r1, [r3, #32]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	430b      	orrs	r3, r1
 8002232:	491b      	ldr	r1, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff f883 	bl	8001348 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f87f 	bl	8001348 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e03d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x46a>
 8002264:	e035      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff f86c 	bl	8001348 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff f868 	bl	8001348 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e026      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x498>
 8002292:	e01e      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e019      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_OscConfig+0x500>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800235e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe ffba 	bl	8001348 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe ffb6 	bl	8001348 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4922      	ldr	r1, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe ff18 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08006e88 	.word	0x08006e88
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e027      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e027      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08006e98 	.word	0x08006e98
 8002554:	08006ea8 	.word	0x08006ea8
 8002558:	003d0900 	.word	0x003d0900

0800255c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <RCC_Delay+0x34>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <RCC_Delay+0x38>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0a5b      	lsrs	r3, r3, #9
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002578:	bf00      	nop
  }
  while (Delay --);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <RCC_Delay+0x1c>
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000000 	.word	0x20000000
 8002594:	10624dd3 	.word	0x10624dd3

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d07d      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10d      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d118      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a42      	ldr	r2, [pc, #264]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fea6 	bl	8001348 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	e008      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7fe fea2 	bl	8001348 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e06d      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261e:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02e      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	429a      	cmp	r2, r3
 800263a:	d027      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002646:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002652:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d014      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe fe71 	bl	8001348 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fe6d 	bl	8001348 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e036      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ee      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4917      	ldr	r1, [pc, #92]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	4313      	orrs	r3, r2
 800269c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	490b      	ldr	r1, [pc, #44]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420440 	.word	0x42420440

08002704 <__cvt>:
 8002704:	2b00      	cmp	r3, #0
 8002706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800270a:	461f      	mov	r7, r3
 800270c:	bfbb      	ittet	lt
 800270e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002712:	461f      	movlt	r7, r3
 8002714:	2300      	movge	r3, #0
 8002716:	232d      	movlt	r3, #45	; 0x2d
 8002718:	b088      	sub	sp, #32
 800271a:	4614      	mov	r4, r2
 800271c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800271e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002720:	7013      	strb	r3, [r2, #0]
 8002722:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002724:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002728:	f023 0820 	bic.w	r8, r3, #32
 800272c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002730:	d005      	beq.n	800273e <__cvt+0x3a>
 8002732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002736:	d100      	bne.n	800273a <__cvt+0x36>
 8002738:	3501      	adds	r5, #1
 800273a:	2302      	movs	r3, #2
 800273c:	e000      	b.n	8002740 <__cvt+0x3c>
 800273e:	2303      	movs	r3, #3
 8002740:	aa07      	add	r2, sp, #28
 8002742:	9204      	str	r2, [sp, #16]
 8002744:	aa06      	add	r2, sp, #24
 8002746:	e9cd a202 	strd	sl, r2, [sp, #8]
 800274a:	e9cd 3500 	strd	r3, r5, [sp]
 800274e:	4622      	mov	r2, r4
 8002750:	463b      	mov	r3, r7
 8002752:	f001 f885 	bl	8003860 <_dtoa_r>
 8002756:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800275a:	4606      	mov	r6, r0
 800275c:	d102      	bne.n	8002764 <__cvt+0x60>
 800275e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002760:	07db      	lsls	r3, r3, #31
 8002762:	d522      	bpl.n	80027aa <__cvt+0xa6>
 8002764:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002768:	eb06 0905 	add.w	r9, r6, r5
 800276c:	d110      	bne.n	8002790 <__cvt+0x8c>
 800276e:	7833      	ldrb	r3, [r6, #0]
 8002770:	2b30      	cmp	r3, #48	; 0x30
 8002772:	d10a      	bne.n	800278a <__cvt+0x86>
 8002774:	2200      	movs	r2, #0
 8002776:	2300      	movs	r3, #0
 8002778:	4620      	mov	r0, r4
 800277a:	4639      	mov	r1, r7
 800277c:	f7fe f914 	bl	80009a8 <__aeabi_dcmpeq>
 8002780:	b918      	cbnz	r0, 800278a <__cvt+0x86>
 8002782:	f1c5 0501 	rsb	r5, r5, #1
 8002786:	f8ca 5000 	str.w	r5, [sl]
 800278a:	f8da 3000 	ldr.w	r3, [sl]
 800278e:	4499      	add	r9, r3
 8002790:	2200      	movs	r2, #0
 8002792:	2300      	movs	r3, #0
 8002794:	4620      	mov	r0, r4
 8002796:	4639      	mov	r1, r7
 8002798:	f7fe f906 	bl	80009a8 <__aeabi_dcmpeq>
 800279c:	b108      	cbz	r0, 80027a2 <__cvt+0x9e>
 800279e:	f8cd 901c 	str.w	r9, [sp, #28]
 80027a2:	2230      	movs	r2, #48	; 0x30
 80027a4:	9b07      	ldr	r3, [sp, #28]
 80027a6:	454b      	cmp	r3, r9
 80027a8:	d307      	bcc.n	80027ba <__cvt+0xb6>
 80027aa:	4630      	mov	r0, r6
 80027ac:	9b07      	ldr	r3, [sp, #28]
 80027ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80027b0:	1b9b      	subs	r3, r3, r6
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	b008      	add	sp, #32
 80027b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	9107      	str	r1, [sp, #28]
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e7f0      	b.n	80027a4 <__cvt+0xa0>

080027c2 <__exponent>:
 80027c2:	4603      	mov	r3, r0
 80027c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027c6:	2900      	cmp	r1, #0
 80027c8:	f803 2b02 	strb.w	r2, [r3], #2
 80027cc:	bfb6      	itet	lt
 80027ce:	222d      	movlt	r2, #45	; 0x2d
 80027d0:	222b      	movge	r2, #43	; 0x2b
 80027d2:	4249      	neglt	r1, r1
 80027d4:	2909      	cmp	r1, #9
 80027d6:	7042      	strb	r2, [r0, #1]
 80027d8:	dd2a      	ble.n	8002830 <__exponent+0x6e>
 80027da:	f10d 0207 	add.w	r2, sp, #7
 80027de:	4617      	mov	r7, r2
 80027e0:	260a      	movs	r6, #10
 80027e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80027e6:	4694      	mov	ip, r2
 80027e8:	fb06 1415 	mls	r4, r6, r5, r1
 80027ec:	3430      	adds	r4, #48	; 0x30
 80027ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80027f2:	460c      	mov	r4, r1
 80027f4:	2c63      	cmp	r4, #99	; 0x63
 80027f6:	4629      	mov	r1, r5
 80027f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80027fc:	dcf1      	bgt.n	80027e2 <__exponent+0x20>
 80027fe:	3130      	adds	r1, #48	; 0x30
 8002800:	f1ac 0402 	sub.w	r4, ip, #2
 8002804:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002808:	4622      	mov	r2, r4
 800280a:	1c41      	adds	r1, r0, #1
 800280c:	42ba      	cmp	r2, r7
 800280e:	d30a      	bcc.n	8002826 <__exponent+0x64>
 8002810:	f10d 0209 	add.w	r2, sp, #9
 8002814:	eba2 020c 	sub.w	r2, r2, ip
 8002818:	42bc      	cmp	r4, r7
 800281a:	bf88      	it	hi
 800281c:	2200      	movhi	r2, #0
 800281e:	4413      	add	r3, r2
 8002820:	1a18      	subs	r0, r3, r0
 8002822:	b003      	add	sp, #12
 8002824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002826:	f812 5b01 	ldrb.w	r5, [r2], #1
 800282a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800282e:	e7ed      	b.n	800280c <__exponent+0x4a>
 8002830:	2330      	movs	r3, #48	; 0x30
 8002832:	3130      	adds	r1, #48	; 0x30
 8002834:	7083      	strb	r3, [r0, #2]
 8002836:	70c1      	strb	r1, [r0, #3]
 8002838:	1d03      	adds	r3, r0, #4
 800283a:	e7f1      	b.n	8002820 <__exponent+0x5e>

0800283c <_printf_float>:
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	b091      	sub	sp, #68	; 0x44
 8002842:	460c      	mov	r4, r1
 8002844:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002848:	4616      	mov	r6, r2
 800284a:	461f      	mov	r7, r3
 800284c:	4605      	mov	r5, r0
 800284e:	f000 fef3 	bl	8003638 <_localeconv_r>
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	9309      	str	r3, [sp, #36]	; 0x24
 8002858:	f7fd fc7a 	bl	8000150 <strlen>
 800285c:	2300      	movs	r3, #0
 800285e:	930e      	str	r3, [sp, #56]	; 0x38
 8002860:	f8d8 3000 	ldr.w	r3, [r8]
 8002864:	900a      	str	r0, [sp, #40]	; 0x28
 8002866:	3307      	adds	r3, #7
 8002868:	f023 0307 	bic.w	r3, r3, #7
 800286c:	f103 0208 	add.w	r2, r3, #8
 8002870:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002874:	f8d4 b000 	ldr.w	fp, [r4]
 8002878:	f8c8 2000 	str.w	r2, [r8]
 800287c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8002880:	4652      	mov	r2, sl
 8002882:	4643      	mov	r3, r8
 8002884:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002888:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800288c:	930b      	str	r3, [sp, #44]	; 0x2c
 800288e:	f04f 32ff 	mov.w	r2, #4294967295
 8002892:	4650      	mov	r0, sl
 8002894:	4b9c      	ldr	r3, [pc, #624]	; (8002b08 <_printf_float+0x2cc>)
 8002896:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002898:	f7fe f8b8 	bl	8000a0c <__aeabi_dcmpun>
 800289c:	bb70      	cbnz	r0, 80028fc <_printf_float+0xc0>
 800289e:	f04f 32ff 	mov.w	r2, #4294967295
 80028a2:	4650      	mov	r0, sl
 80028a4:	4b98      	ldr	r3, [pc, #608]	; (8002b08 <_printf_float+0x2cc>)
 80028a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028a8:	f7fe f892 	bl	80009d0 <__aeabi_dcmple>
 80028ac:	bb30      	cbnz	r0, 80028fc <_printf_float+0xc0>
 80028ae:	2200      	movs	r2, #0
 80028b0:	2300      	movs	r3, #0
 80028b2:	4650      	mov	r0, sl
 80028b4:	4641      	mov	r1, r8
 80028b6:	f7fe f881 	bl	80009bc <__aeabi_dcmplt>
 80028ba:	b110      	cbz	r0, 80028c2 <_printf_float+0x86>
 80028bc:	232d      	movs	r3, #45	; 0x2d
 80028be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c2:	4a92      	ldr	r2, [pc, #584]	; (8002b0c <_printf_float+0x2d0>)
 80028c4:	4b92      	ldr	r3, [pc, #584]	; (8002b10 <_printf_float+0x2d4>)
 80028c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80028ca:	bf94      	ite	ls
 80028cc:	4690      	movls	r8, r2
 80028ce:	4698      	movhi	r8, r3
 80028d0:	2303      	movs	r3, #3
 80028d2:	f04f 0a00 	mov.w	sl, #0
 80028d6:	6123      	str	r3, [r4, #16]
 80028d8:	f02b 0304 	bic.w	r3, fp, #4
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	4633      	mov	r3, r6
 80028e0:	4621      	mov	r1, r4
 80028e2:	4628      	mov	r0, r5
 80028e4:	9700      	str	r7, [sp, #0]
 80028e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80028e8:	f000 f9d6 	bl	8002c98 <_printf_common>
 80028ec:	3001      	adds	r0, #1
 80028ee:	f040 8090 	bne.w	8002a12 <_printf_float+0x1d6>
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295
 80028f6:	b011      	add	sp, #68	; 0x44
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fc:	4652      	mov	r2, sl
 80028fe:	4643      	mov	r3, r8
 8002900:	4650      	mov	r0, sl
 8002902:	4641      	mov	r1, r8
 8002904:	f7fe f882 	bl	8000a0c <__aeabi_dcmpun>
 8002908:	b148      	cbz	r0, 800291e <_printf_float+0xe2>
 800290a:	f1b8 0f00 	cmp.w	r8, #0
 800290e:	bfb8      	it	lt
 8002910:	232d      	movlt	r3, #45	; 0x2d
 8002912:	4a80      	ldr	r2, [pc, #512]	; (8002b14 <_printf_float+0x2d8>)
 8002914:	bfb8      	it	lt
 8002916:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <_printf_float+0x2dc>)
 800291c:	e7d3      	b.n	80028c6 <_printf_float+0x8a>
 800291e:	6863      	ldr	r3, [r4, #4]
 8002920:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	d142      	bne.n	80029ae <_printf_float+0x172>
 8002928:	2306      	movs	r3, #6
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	9206      	str	r2, [sp, #24]
 8002930:	aa0e      	add	r2, sp, #56	; 0x38
 8002932:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002936:	aa0d      	add	r2, sp, #52	; 0x34
 8002938:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800293c:	9203      	str	r2, [sp, #12]
 800293e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002942:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	4652      	mov	r2, sl
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4628      	mov	r0, r5
 8002950:	4643      	mov	r3, r8
 8002952:	910b      	str	r1, [sp, #44]	; 0x2c
 8002954:	f7ff fed6 	bl	8002704 <__cvt>
 8002958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800295a:	4680      	mov	r8, r0
 800295c:	2947      	cmp	r1, #71	; 0x47
 800295e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002960:	d108      	bne.n	8002974 <_printf_float+0x138>
 8002962:	1cc8      	adds	r0, r1, #3
 8002964:	db02      	blt.n	800296c <_printf_float+0x130>
 8002966:	6863      	ldr	r3, [r4, #4]
 8002968:	4299      	cmp	r1, r3
 800296a:	dd40      	ble.n	80029ee <_printf_float+0x1b2>
 800296c:	f1a9 0902 	sub.w	r9, r9, #2
 8002970:	fa5f f989 	uxtb.w	r9, r9
 8002974:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002978:	d81f      	bhi.n	80029ba <_printf_float+0x17e>
 800297a:	464a      	mov	r2, r9
 800297c:	3901      	subs	r1, #1
 800297e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002982:	910d      	str	r1, [sp, #52]	; 0x34
 8002984:	f7ff ff1d 	bl	80027c2 <__exponent>
 8002988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800298a:	4682      	mov	sl, r0
 800298c:	1813      	adds	r3, r2, r0
 800298e:	2a01      	cmp	r2, #1
 8002990:	6123      	str	r3, [r4, #16]
 8002992:	dc02      	bgt.n	800299a <_printf_float+0x15e>
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	07d2      	lsls	r2, r2, #31
 8002998:	d501      	bpl.n	800299e <_printf_float+0x162>
 800299a:	3301      	adds	r3, #1
 800299c:	6123      	str	r3, [r4, #16]
 800299e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d09b      	beq.n	80028de <_printf_float+0xa2>
 80029a6:	232d      	movs	r3, #45	; 0x2d
 80029a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ac:	e797      	b.n	80028de <_printf_float+0xa2>
 80029ae:	2947      	cmp	r1, #71	; 0x47
 80029b0:	d1bc      	bne.n	800292c <_printf_float+0xf0>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1ba      	bne.n	800292c <_printf_float+0xf0>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e7b7      	b.n	800292a <_printf_float+0xee>
 80029ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80029be:	d118      	bne.n	80029f2 <_printf_float+0x1b6>
 80029c0:	2900      	cmp	r1, #0
 80029c2:	6863      	ldr	r3, [r4, #4]
 80029c4:	dd0b      	ble.n	80029de <_printf_float+0x1a2>
 80029c6:	6121      	str	r1, [r4, #16]
 80029c8:	b913      	cbnz	r3, 80029d0 <_printf_float+0x194>
 80029ca:	6822      	ldr	r2, [r4, #0]
 80029cc:	07d0      	lsls	r0, r2, #31
 80029ce:	d502      	bpl.n	80029d6 <_printf_float+0x19a>
 80029d0:	3301      	adds	r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	6123      	str	r3, [r4, #16]
 80029d6:	f04f 0a00 	mov.w	sl, #0
 80029da:	65a1      	str	r1, [r4, #88]	; 0x58
 80029dc:	e7df      	b.n	800299e <_printf_float+0x162>
 80029de:	b913      	cbnz	r3, 80029e6 <_printf_float+0x1aa>
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	07d2      	lsls	r2, r2, #31
 80029e4:	d501      	bpl.n	80029ea <_printf_float+0x1ae>
 80029e6:	3302      	adds	r3, #2
 80029e8:	e7f4      	b.n	80029d4 <_printf_float+0x198>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e7f2      	b.n	80029d4 <_printf_float+0x198>
 80029ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80029f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029f4:	4299      	cmp	r1, r3
 80029f6:	db05      	blt.n	8002a04 <_printf_float+0x1c8>
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	6121      	str	r1, [r4, #16]
 80029fc:	07d8      	lsls	r0, r3, #31
 80029fe:	d5ea      	bpl.n	80029d6 <_printf_float+0x19a>
 8002a00:	1c4b      	adds	r3, r1, #1
 8002a02:	e7e7      	b.n	80029d4 <_printf_float+0x198>
 8002a04:	2900      	cmp	r1, #0
 8002a06:	bfcc      	ite	gt
 8002a08:	2201      	movgt	r2, #1
 8002a0a:	f1c1 0202 	rsble	r2, r1, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	e7e0      	b.n	80029d4 <_printf_float+0x198>
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	055a      	lsls	r2, r3, #21
 8002a16:	d407      	bmi.n	8002a28 <_printf_float+0x1ec>
 8002a18:	6923      	ldr	r3, [r4, #16]
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	4631      	mov	r1, r6
 8002a1e:	4628      	mov	r0, r5
 8002a20:	47b8      	blx	r7
 8002a22:	3001      	adds	r0, #1
 8002a24:	d12b      	bne.n	8002a7e <_printf_float+0x242>
 8002a26:	e764      	b.n	80028f2 <_printf_float+0xb6>
 8002a28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002a2c:	f240 80dd 	bls.w	8002bea <_printf_float+0x3ae>
 8002a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a34:	2200      	movs	r2, #0
 8002a36:	2300      	movs	r3, #0
 8002a38:	f7fd ffb6 	bl	80009a8 <__aeabi_dcmpeq>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d033      	beq.n	8002aa8 <_printf_float+0x26c>
 8002a40:	2301      	movs	r3, #1
 8002a42:	4631      	mov	r1, r6
 8002a44:	4628      	mov	r0, r5
 8002a46:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <_printf_float+0x2e0>)
 8002a48:	47b8      	blx	r7
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	f43f af51 	beq.w	80028f2 <_printf_float+0xb6>
 8002a50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002a54:	429a      	cmp	r2, r3
 8002a56:	db02      	blt.n	8002a5e <_printf_float+0x222>
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	07d8      	lsls	r0, r3, #31
 8002a5c:	d50f      	bpl.n	8002a7e <_printf_float+0x242>
 8002a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a62:	4631      	mov	r1, r6
 8002a64:	4628      	mov	r0, r5
 8002a66:	47b8      	blx	r7
 8002a68:	3001      	adds	r0, #1
 8002a6a:	f43f af42 	beq.w	80028f2 <_printf_float+0xb6>
 8002a6e:	f04f 0800 	mov.w	r8, #0
 8002a72:	f104 091a 	add.w	r9, r4, #26
 8002a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	4543      	cmp	r3, r8
 8002a7c:	dc09      	bgt.n	8002a92 <_printf_float+0x256>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	079b      	lsls	r3, r3, #30
 8002a82:	f100 8104 	bmi.w	8002c8e <_printf_float+0x452>
 8002a86:	68e0      	ldr	r0, [r4, #12]
 8002a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a8a:	4298      	cmp	r0, r3
 8002a8c:	bfb8      	it	lt
 8002a8e:	4618      	movlt	r0, r3
 8002a90:	e731      	b.n	80028f6 <_printf_float+0xba>
 8002a92:	2301      	movs	r3, #1
 8002a94:	464a      	mov	r2, r9
 8002a96:	4631      	mov	r1, r6
 8002a98:	4628      	mov	r0, r5
 8002a9a:	47b8      	blx	r7
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	f43f af28 	beq.w	80028f2 <_printf_float+0xb6>
 8002aa2:	f108 0801 	add.w	r8, r8, #1
 8002aa6:	e7e6      	b.n	8002a76 <_printf_float+0x23a>
 8002aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	dc38      	bgt.n	8002b20 <_printf_float+0x2e4>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <_printf_float+0x2e0>)
 8002ab6:	47b8      	blx	r7
 8002ab8:	3001      	adds	r0, #1
 8002aba:	f43f af1a 	beq.w	80028f2 <_printf_float+0xb6>
 8002abe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	d102      	bne.n	8002acc <_printf_float+0x290>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	07d9      	lsls	r1, r3, #31
 8002aca:	d5d8      	bpl.n	8002a7e <_printf_float+0x242>
 8002acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ad0:	4631      	mov	r1, r6
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	47b8      	blx	r7
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	f43f af0b 	beq.w	80028f2 <_printf_float+0xb6>
 8002adc:	f04f 0900 	mov.w	r9, #0
 8002ae0:	f104 0a1a 	add.w	sl, r4, #26
 8002ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	454b      	cmp	r3, r9
 8002aea:	dc01      	bgt.n	8002af0 <_printf_float+0x2b4>
 8002aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002aee:	e794      	b.n	8002a1a <_printf_float+0x1de>
 8002af0:	2301      	movs	r3, #1
 8002af2:	4652      	mov	r2, sl
 8002af4:	4631      	mov	r1, r6
 8002af6:	4628      	mov	r0, r5
 8002af8:	47b8      	blx	r7
 8002afa:	3001      	adds	r0, #1
 8002afc:	f43f aef9 	beq.w	80028f2 <_printf_float+0xb6>
 8002b00:	f109 0901 	add.w	r9, r9, #1
 8002b04:	e7ee      	b.n	8002ae4 <_printf_float+0x2a8>
 8002b06:	bf00      	nop
 8002b08:	7fefffff 	.word	0x7fefffff
 8002b0c:	08006eaa 	.word	0x08006eaa
 8002b10:	08006eae 	.word	0x08006eae
 8002b14:	08006eb2 	.word	0x08006eb2
 8002b18:	08006eb6 	.word	0x08006eb6
 8002b1c:	08006eba 	.word	0x08006eba
 8002b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b24:	429a      	cmp	r2, r3
 8002b26:	bfa8      	it	ge
 8002b28:	461a      	movge	r2, r3
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	4691      	mov	r9, r2
 8002b2e:	dc37      	bgt.n	8002ba0 <_printf_float+0x364>
 8002b30:	f04f 0b00 	mov.w	fp, #0
 8002b34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b38:	f104 021a 	add.w	r2, r4, #26
 8002b3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002b40:	ebaa 0309 	sub.w	r3, sl, r9
 8002b44:	455b      	cmp	r3, fp
 8002b46:	dc33      	bgt.n	8002bb0 <_printf_float+0x374>
 8002b48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	db3b      	blt.n	8002bc8 <_printf_float+0x38c>
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	07da      	lsls	r2, r3, #31
 8002b54:	d438      	bmi.n	8002bc8 <_printf_float+0x38c>
 8002b56:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002b5a:	eba2 0903 	sub.w	r9, r2, r3
 8002b5e:	eba2 020a 	sub.w	r2, r2, sl
 8002b62:	4591      	cmp	r9, r2
 8002b64:	bfa8      	it	ge
 8002b66:	4691      	movge	r9, r2
 8002b68:	f1b9 0f00 	cmp.w	r9, #0
 8002b6c:	dc34      	bgt.n	8002bd8 <_printf_float+0x39c>
 8002b6e:	f04f 0800 	mov.w	r8, #0
 8002b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b76:	f104 0a1a 	add.w	sl, r4, #26
 8002b7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	eba3 0309 	sub.w	r3, r3, r9
 8002b84:	4543      	cmp	r3, r8
 8002b86:	f77f af7a 	ble.w	8002a7e <_printf_float+0x242>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	4631      	mov	r1, r6
 8002b90:	4628      	mov	r0, r5
 8002b92:	47b8      	blx	r7
 8002b94:	3001      	adds	r0, #1
 8002b96:	f43f aeac 	beq.w	80028f2 <_printf_float+0xb6>
 8002b9a:	f108 0801 	add.w	r8, r8, #1
 8002b9e:	e7ec      	b.n	8002b7a <_printf_float+0x33e>
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	47b8      	blx	r7
 8002baa:	3001      	adds	r0, #1
 8002bac:	d1c0      	bne.n	8002b30 <_printf_float+0x2f4>
 8002bae:	e6a0      	b.n	80028f2 <_printf_float+0xb6>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8002bb8:	47b8      	blx	r7
 8002bba:	3001      	adds	r0, #1
 8002bbc:	f43f ae99 	beq.w	80028f2 <_printf_float+0xb6>
 8002bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bc2:	f10b 0b01 	add.w	fp, fp, #1
 8002bc6:	e7b9      	b.n	8002b3c <_printf_float+0x300>
 8002bc8:	4631      	mov	r1, r6
 8002bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bce:	4628      	mov	r0, r5
 8002bd0:	47b8      	blx	r7
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d1bf      	bne.n	8002b56 <_printf_float+0x31a>
 8002bd6:	e68c      	b.n	80028f2 <_printf_float+0xb6>
 8002bd8:	464b      	mov	r3, r9
 8002bda:	4631      	mov	r1, r6
 8002bdc:	4628      	mov	r0, r5
 8002bde:	eb08 020a 	add.w	r2, r8, sl
 8002be2:	47b8      	blx	r7
 8002be4:	3001      	adds	r0, #1
 8002be6:	d1c2      	bne.n	8002b6e <_printf_float+0x332>
 8002be8:	e683      	b.n	80028f2 <_printf_float+0xb6>
 8002bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bec:	2a01      	cmp	r2, #1
 8002bee:	dc01      	bgt.n	8002bf4 <_printf_float+0x3b8>
 8002bf0:	07db      	lsls	r3, r3, #31
 8002bf2:	d539      	bpl.n	8002c68 <_printf_float+0x42c>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4642      	mov	r2, r8
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	47b8      	blx	r7
 8002bfe:	3001      	adds	r0, #1
 8002c00:	f43f ae77 	beq.w	80028f2 <_printf_float+0xb6>
 8002c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c08:	4631      	mov	r1, r6
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	47b8      	blx	r7
 8002c0e:	3001      	adds	r0, #1
 8002c10:	f43f ae6f 	beq.w	80028f2 <_printf_float+0xb6>
 8002c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8002c20:	f7fd fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8002c24:	b9d8      	cbnz	r0, 8002c5e <_printf_float+0x422>
 8002c26:	f109 33ff 	add.w	r3, r9, #4294967295
 8002c2a:	f108 0201 	add.w	r2, r8, #1
 8002c2e:	4631      	mov	r1, r6
 8002c30:	4628      	mov	r0, r5
 8002c32:	47b8      	blx	r7
 8002c34:	3001      	adds	r0, #1
 8002c36:	d10e      	bne.n	8002c56 <_printf_float+0x41a>
 8002c38:	e65b      	b.n	80028f2 <_printf_float+0xb6>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	4631      	mov	r1, r6
 8002c40:	4628      	mov	r0, r5
 8002c42:	47b8      	blx	r7
 8002c44:	3001      	adds	r0, #1
 8002c46:	f43f ae54 	beq.w	80028f2 <_printf_float+0xb6>
 8002c4a:	f108 0801 	add.w	r8, r8, #1
 8002c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4543      	cmp	r3, r8
 8002c54:	dcf1      	bgt.n	8002c3a <_printf_float+0x3fe>
 8002c56:	4653      	mov	r3, sl
 8002c58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002c5c:	e6de      	b.n	8002a1c <_printf_float+0x1e0>
 8002c5e:	f04f 0800 	mov.w	r8, #0
 8002c62:	f104 091a 	add.w	r9, r4, #26
 8002c66:	e7f2      	b.n	8002c4e <_printf_float+0x412>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	4642      	mov	r2, r8
 8002c6c:	e7df      	b.n	8002c2e <_printf_float+0x3f2>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	464a      	mov	r2, r9
 8002c72:	4631      	mov	r1, r6
 8002c74:	4628      	mov	r0, r5
 8002c76:	47b8      	blx	r7
 8002c78:	3001      	adds	r0, #1
 8002c7a:	f43f ae3a 	beq.w	80028f2 <_printf_float+0xb6>
 8002c7e:	f108 0801 	add.w	r8, r8, #1
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c86:	1a5b      	subs	r3, r3, r1
 8002c88:	4543      	cmp	r3, r8
 8002c8a:	dcf0      	bgt.n	8002c6e <_printf_float+0x432>
 8002c8c:	e6fb      	b.n	8002a86 <_printf_float+0x24a>
 8002c8e:	f04f 0800 	mov.w	r8, #0
 8002c92:	f104 0919 	add.w	r9, r4, #25
 8002c96:	e7f4      	b.n	8002c82 <_printf_float+0x446>

08002c98 <_printf_common>:
 8002c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	688a      	ldr	r2, [r1, #8]
 8002ca2:	690b      	ldr	r3, [r1, #16]
 8002ca4:	4607      	mov	r7, r0
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	bfb8      	it	lt
 8002caa:	4613      	movlt	r3, r2
 8002cac:	6033      	str	r3, [r6, #0]
 8002cae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cb8:	b10a      	cbz	r2, 8002cbe <_printf_common+0x26>
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6033      	str	r3, [r6, #0]
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	0699      	lsls	r1, r3, #26
 8002cc2:	bf42      	ittt	mi
 8002cc4:	6833      	ldrmi	r3, [r6, #0]
 8002cc6:	3302      	addmi	r3, #2
 8002cc8:	6033      	strmi	r3, [r6, #0]
 8002cca:	6825      	ldr	r5, [r4, #0]
 8002ccc:	f015 0506 	ands.w	r5, r5, #6
 8002cd0:	d106      	bne.n	8002ce0 <_printf_common+0x48>
 8002cd2:	f104 0a19 	add.w	sl, r4, #25
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	6832      	ldr	r2, [r6, #0]
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	dc2b      	bgt.n	8002d38 <_printf_common+0xa0>
 8002ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ce4:	1e13      	subs	r3, r2, #0
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	bf18      	it	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	0692      	lsls	r2, r2, #26
 8002cee:	d430      	bmi.n	8002d52 <_printf_common+0xba>
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf8:	47c0      	blx	r8
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d023      	beq.n	8002d46 <_printf_common+0xae>
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	6922      	ldr	r2, [r4, #16]
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf14      	ite	ne
 8002d0a:	2500      	movne	r5, #0
 8002d0c:	6833      	ldreq	r3, [r6, #0]
 8002d0e:	f04f 0600 	mov.w	r6, #0
 8002d12:	bf08      	it	eq
 8002d14:	68e5      	ldreq	r5, [r4, #12]
 8002d16:	f104 041a 	add.w	r4, r4, #26
 8002d1a:	bf08      	it	eq
 8002d1c:	1aed      	subeq	r5, r5, r3
 8002d1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d22:	bf08      	it	eq
 8002d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bfc4      	itt	gt
 8002d2c:	1a9b      	subgt	r3, r3, r2
 8002d2e:	18ed      	addgt	r5, r5, r3
 8002d30:	42b5      	cmp	r5, r6
 8002d32:	d11a      	bne.n	8002d6a <_printf_common+0xd2>
 8002d34:	2000      	movs	r0, #0
 8002d36:	e008      	b.n	8002d4a <_printf_common+0xb2>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4652      	mov	r2, sl
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	4638      	mov	r0, r7
 8002d40:	47c0      	blx	r8
 8002d42:	3001      	adds	r0, #1
 8002d44:	d103      	bne.n	8002d4e <_printf_common+0xb6>
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7c1      	b.n	8002cd6 <_printf_common+0x3e>
 8002d52:	2030      	movs	r0, #48	; 0x30
 8002d54:	18e1      	adds	r1, r4, r3
 8002d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d60:	4422      	add	r2, r4
 8002d62:	3302      	adds	r3, #2
 8002d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d68:	e7c2      	b.n	8002cf0 <_printf_common+0x58>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	4649      	mov	r1, r9
 8002d70:	4638      	mov	r0, r7
 8002d72:	47c0      	blx	r8
 8002d74:	3001      	adds	r0, #1
 8002d76:	d0e6      	beq.n	8002d46 <_printf_common+0xae>
 8002d78:	3601      	adds	r6, #1
 8002d7a:	e7d9      	b.n	8002d30 <_printf_common+0x98>

08002d7c <_printf_i>:
 8002d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	7e0f      	ldrb	r7, [r1, #24]
 8002d82:	4691      	mov	r9, r2
 8002d84:	2f78      	cmp	r7, #120	; 0x78
 8002d86:	4680      	mov	r8, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	469a      	mov	sl, r3
 8002d8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d92:	d807      	bhi.n	8002da4 <_printf_i+0x28>
 8002d94:	2f62      	cmp	r7, #98	; 0x62
 8002d96:	d80a      	bhi.n	8002dae <_printf_i+0x32>
 8002d98:	2f00      	cmp	r7, #0
 8002d9a:	f000 80d5 	beq.w	8002f48 <_printf_i+0x1cc>
 8002d9e:	2f58      	cmp	r7, #88	; 0x58
 8002da0:	f000 80c1 	beq.w	8002f26 <_printf_i+0x1aa>
 8002da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dac:	e03a      	b.n	8002e24 <_printf_i+0xa8>
 8002dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002db2:	2b15      	cmp	r3, #21
 8002db4:	d8f6      	bhi.n	8002da4 <_printf_i+0x28>
 8002db6:	a101      	add	r1, pc, #4	; (adr r1, 8002dbc <_printf_i+0x40>)
 8002db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dbc:	08002e15 	.word	0x08002e15
 8002dc0:	08002e29 	.word	0x08002e29
 8002dc4:	08002da5 	.word	0x08002da5
 8002dc8:	08002da5 	.word	0x08002da5
 8002dcc:	08002da5 	.word	0x08002da5
 8002dd0:	08002da5 	.word	0x08002da5
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002da5 	.word	0x08002da5
 8002ddc:	08002da5 	.word	0x08002da5
 8002de0:	08002da5 	.word	0x08002da5
 8002de4:	08002da5 	.word	0x08002da5
 8002de8:	08002f2f 	.word	0x08002f2f
 8002dec:	08002e55 	.word	0x08002e55
 8002df0:	08002ee9 	.word	0x08002ee9
 8002df4:	08002da5 	.word	0x08002da5
 8002df8:	08002da5 	.word	0x08002da5
 8002dfc:	08002f51 	.word	0x08002f51
 8002e00:	08002da5 	.word	0x08002da5
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08002da5 	.word	0x08002da5
 8002e0c:	08002da5 	.word	0x08002da5
 8002e10:	08002ef1 	.word	0x08002ef1
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	602a      	str	r2, [r5, #0]
 8002e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0a0      	b.n	8002f6a <_printf_i+0x1ee>
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	682b      	ldr	r3, [r5, #0]
 8002e2c:	0607      	lsls	r7, r0, #24
 8002e2e:	f103 0104 	add.w	r1, r3, #4
 8002e32:	6029      	str	r1, [r5, #0]
 8002e34:	d501      	bpl.n	8002e3a <_printf_i+0xbe>
 8002e36:	681e      	ldr	r6, [r3, #0]
 8002e38:	e003      	b.n	8002e42 <_printf_i+0xc6>
 8002e3a:	0646      	lsls	r6, r0, #25
 8002e3c:	d5fb      	bpl.n	8002e36 <_printf_i+0xba>
 8002e3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	da03      	bge.n	8002e4e <_printf_i+0xd2>
 8002e46:	232d      	movs	r3, #45	; 0x2d
 8002e48:	4276      	negs	r6, r6
 8002e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e4e:	230a      	movs	r3, #10
 8002e50:	4859      	ldr	r0, [pc, #356]	; (8002fb8 <_printf_i+0x23c>)
 8002e52:	e012      	b.n	8002e7a <_printf_i+0xfe>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	6820      	ldr	r0, [r4, #0]
 8002e58:	1d19      	adds	r1, r3, #4
 8002e5a:	6029      	str	r1, [r5, #0]
 8002e5c:	0605      	lsls	r5, r0, #24
 8002e5e:	d501      	bpl.n	8002e64 <_printf_i+0xe8>
 8002e60:	681e      	ldr	r6, [r3, #0]
 8002e62:	e002      	b.n	8002e6a <_printf_i+0xee>
 8002e64:	0641      	lsls	r1, r0, #25
 8002e66:	d5fb      	bpl.n	8002e60 <_printf_i+0xe4>
 8002e68:	881e      	ldrh	r6, [r3, #0]
 8002e6a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2308      	moveq	r3, #8
 8002e70:	230a      	movne	r3, #10
 8002e72:	4851      	ldr	r0, [pc, #324]	; (8002fb8 <_printf_i+0x23c>)
 8002e74:	2100      	movs	r1, #0
 8002e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e7a:	6865      	ldr	r5, [r4, #4]
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	bfa8      	it	ge
 8002e80:	6821      	ldrge	r1, [r4, #0]
 8002e82:	60a5      	str	r5, [r4, #8]
 8002e84:	bfa4      	itt	ge
 8002e86:	f021 0104 	bicge.w	r1, r1, #4
 8002e8a:	6021      	strge	r1, [r4, #0]
 8002e8c:	b90e      	cbnz	r6, 8002e92 <_printf_i+0x116>
 8002e8e:	2d00      	cmp	r5, #0
 8002e90:	d04b      	beq.n	8002f2a <_printf_i+0x1ae>
 8002e92:	4615      	mov	r5, r2
 8002e94:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e98:	fb03 6711 	mls	r7, r3, r1, r6
 8002e9c:	5dc7      	ldrb	r7, [r0, r7]
 8002e9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ea2:	4637      	mov	r7, r6
 8002ea4:	42bb      	cmp	r3, r7
 8002ea6:	460e      	mov	r6, r1
 8002ea8:	d9f4      	bls.n	8002e94 <_printf_i+0x118>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d10b      	bne.n	8002ec6 <_printf_i+0x14a>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	07de      	lsls	r6, r3, #31
 8002eb2:	d508      	bpl.n	8002ec6 <_printf_i+0x14a>
 8002eb4:	6923      	ldr	r3, [r4, #16]
 8002eb6:	6861      	ldr	r1, [r4, #4]
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	bfde      	ittt	le
 8002ebc:	2330      	movle	r3, #48	; 0x30
 8002ebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ec2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ec6:	1b52      	subs	r2, r2, r5
 8002ec8:	6122      	str	r2, [r4, #16]
 8002eca:	464b      	mov	r3, r9
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4640      	mov	r0, r8
 8002ed0:	f8cd a000 	str.w	sl, [sp]
 8002ed4:	aa03      	add	r2, sp, #12
 8002ed6:	f7ff fedf 	bl	8002c98 <_printf_common>
 8002eda:	3001      	adds	r0, #1
 8002edc:	d14a      	bne.n	8002f74 <_printf_i+0x1f8>
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee2:	b004      	add	sp, #16
 8002ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	2778      	movs	r7, #120	; 0x78
 8002ef2:	4832      	ldr	r0, [pc, #200]	; (8002fbc <_printf_i+0x240>)
 8002ef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	6829      	ldr	r1, [r5, #0]
 8002efc:	061f      	lsls	r7, r3, #24
 8002efe:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f02:	d402      	bmi.n	8002f0a <_printf_i+0x18e>
 8002f04:	065f      	lsls	r7, r3, #25
 8002f06:	bf48      	it	mi
 8002f08:	b2b6      	uxthmi	r6, r6
 8002f0a:	07df      	lsls	r7, r3, #31
 8002f0c:	bf48      	it	mi
 8002f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8002f12:	6029      	str	r1, [r5, #0]
 8002f14:	bf48      	it	mi
 8002f16:	6023      	strmi	r3, [r4, #0]
 8002f18:	b91e      	cbnz	r6, 8002f22 <_printf_i+0x1a6>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	f023 0320 	bic.w	r3, r3, #32
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	2310      	movs	r3, #16
 8002f24:	e7a6      	b.n	8002e74 <_printf_i+0xf8>
 8002f26:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <_printf_i+0x23c>)
 8002f28:	e7e4      	b.n	8002ef4 <_printf_i+0x178>
 8002f2a:	4615      	mov	r5, r2
 8002f2c:	e7bd      	b.n	8002eaa <_printf_i+0x12e>
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	6826      	ldr	r6, [r4, #0]
 8002f32:	1d18      	adds	r0, r3, #4
 8002f34:	6961      	ldr	r1, [r4, #20]
 8002f36:	6028      	str	r0, [r5, #0]
 8002f38:	0635      	lsls	r5, r6, #24
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	d501      	bpl.n	8002f42 <_printf_i+0x1c6>
 8002f3e:	6019      	str	r1, [r3, #0]
 8002f40:	e002      	b.n	8002f48 <_printf_i+0x1cc>
 8002f42:	0670      	lsls	r0, r6, #25
 8002f44:	d5fb      	bpl.n	8002f3e <_printf_i+0x1c2>
 8002f46:	8019      	strh	r1, [r3, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	6123      	str	r3, [r4, #16]
 8002f4e:	e7bc      	b.n	8002eca <_printf_i+0x14e>
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	1d1a      	adds	r2, r3, #4
 8002f56:	602a      	str	r2, [r5, #0]
 8002f58:	681d      	ldr	r5, [r3, #0]
 8002f5a:	6862      	ldr	r2, [r4, #4]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 fbe2 	bl	8003726 <memchr>
 8002f62:	b108      	cbz	r0, 8002f68 <_printf_i+0x1ec>
 8002f64:	1b40      	subs	r0, r0, r5
 8002f66:	6060      	str	r0, [r4, #4]
 8002f68:	6863      	ldr	r3, [r4, #4]
 8002f6a:	6123      	str	r3, [r4, #16]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f72:	e7aa      	b.n	8002eca <_printf_i+0x14e>
 8002f74:	462a      	mov	r2, r5
 8002f76:	4649      	mov	r1, r9
 8002f78:	4640      	mov	r0, r8
 8002f7a:	6923      	ldr	r3, [r4, #16]
 8002f7c:	47d0      	blx	sl
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d0ad      	beq.n	8002ede <_printf_i+0x162>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	079b      	lsls	r3, r3, #30
 8002f86:	d413      	bmi.n	8002fb0 <_printf_i+0x234>
 8002f88:	68e0      	ldr	r0, [r4, #12]
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	bfb8      	it	lt
 8002f90:	4618      	movlt	r0, r3
 8002f92:	e7a6      	b.n	8002ee2 <_printf_i+0x166>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4632      	mov	r2, r6
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	47d0      	blx	sl
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d09d      	beq.n	8002ede <_printf_i+0x162>
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	9903      	ldr	r1, [sp, #12]
 8002fa8:	1a5b      	subs	r3, r3, r1
 8002faa:	42ab      	cmp	r3, r5
 8002fac:	dcf2      	bgt.n	8002f94 <_printf_i+0x218>
 8002fae:	e7eb      	b.n	8002f88 <_printf_i+0x20c>
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	f104 0619 	add.w	r6, r4, #25
 8002fb6:	e7f5      	b.n	8002fa4 <_printf_i+0x228>
 8002fb8:	08006ebc 	.word	0x08006ebc
 8002fbc:	08006ecd 	.word	0x08006ecd

08002fc0 <_scanf_float>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	b087      	sub	sp, #28
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	688b      	ldr	r3, [r1, #8]
 8002fca:	4617      	mov	r7, r2
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002fd2:	bf85      	ittet	hi
 8002fd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002fd8:	195b      	addhi	r3, r3, r5
 8002fda:	2300      	movls	r3, #0
 8002fdc:	9302      	strhi	r3, [sp, #8]
 8002fde:	bf88      	it	hi
 8002fe0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002fe4:	468b      	mov	fp, r1
 8002fe6:	f04f 0500 	mov.w	r5, #0
 8002fea:	bf8c      	ite	hi
 8002fec:	608b      	strhi	r3, [r1, #8]
 8002fee:	9302      	strls	r3, [sp, #8]
 8002ff0:	680b      	ldr	r3, [r1, #0]
 8002ff2:	4680      	mov	r8, r0
 8002ff4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002ff8:	f84b 3b1c 	str.w	r3, [fp], #28
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	465e      	mov	r6, fp
 8003000:	46aa      	mov	sl, r5
 8003002:	46a9      	mov	r9, r5
 8003004:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003008:	9501      	str	r5, [sp, #4]
 800300a:	68a2      	ldr	r2, [r4, #8]
 800300c:	b152      	cbz	r2, 8003024 <_scanf_float+0x64>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b4e      	cmp	r3, #78	; 0x4e
 8003014:	d864      	bhi.n	80030e0 <_scanf_float+0x120>
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d83c      	bhi.n	8003094 <_scanf_float+0xd4>
 800301a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800301e:	b2c8      	uxtb	r0, r1
 8003020:	280e      	cmp	r0, #14
 8003022:	d93a      	bls.n	800309a <_scanf_float+0xda>
 8003024:	f1b9 0f00 	cmp.w	r9, #0
 8003028:	d003      	beq.n	8003032 <_scanf_float+0x72>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003036:	f1ba 0f01 	cmp.w	sl, #1
 800303a:	f200 8113 	bhi.w	8003264 <_scanf_float+0x2a4>
 800303e:	455e      	cmp	r6, fp
 8003040:	f200 8105 	bhi.w	800324e <_scanf_float+0x28e>
 8003044:	2501      	movs	r5, #1
 8003046:	4628      	mov	r0, r5
 8003048:	b007      	add	sp, #28
 800304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003052:	2a0d      	cmp	r2, #13
 8003054:	d8e6      	bhi.n	8003024 <_scanf_float+0x64>
 8003056:	a101      	add	r1, pc, #4	; (adr r1, 800305c <_scanf_float+0x9c>)
 8003058:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800305c:	0800319b 	.word	0x0800319b
 8003060:	08003025 	.word	0x08003025
 8003064:	08003025 	.word	0x08003025
 8003068:	08003025 	.word	0x08003025
 800306c:	080031fb 	.word	0x080031fb
 8003070:	080031d3 	.word	0x080031d3
 8003074:	08003025 	.word	0x08003025
 8003078:	08003025 	.word	0x08003025
 800307c:	080031a9 	.word	0x080031a9
 8003080:	08003025 	.word	0x08003025
 8003084:	08003025 	.word	0x08003025
 8003088:	08003025 	.word	0x08003025
 800308c:	08003025 	.word	0x08003025
 8003090:	08003161 	.word	0x08003161
 8003094:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003098:	e7db      	b.n	8003052 <_scanf_float+0x92>
 800309a:	290e      	cmp	r1, #14
 800309c:	d8c2      	bhi.n	8003024 <_scanf_float+0x64>
 800309e:	a001      	add	r0, pc, #4	; (adr r0, 80030a4 <_scanf_float+0xe4>)
 80030a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80030a4:	08003153 	.word	0x08003153
 80030a8:	08003025 	.word	0x08003025
 80030ac:	08003153 	.word	0x08003153
 80030b0:	080031e7 	.word	0x080031e7
 80030b4:	08003025 	.word	0x08003025
 80030b8:	08003101 	.word	0x08003101
 80030bc:	0800313d 	.word	0x0800313d
 80030c0:	0800313d 	.word	0x0800313d
 80030c4:	0800313d 	.word	0x0800313d
 80030c8:	0800313d 	.word	0x0800313d
 80030cc:	0800313d 	.word	0x0800313d
 80030d0:	0800313d 	.word	0x0800313d
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	0800313d 	.word	0x0800313d
 80030e0:	2b6e      	cmp	r3, #110	; 0x6e
 80030e2:	d809      	bhi.n	80030f8 <_scanf_float+0x138>
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d8b2      	bhi.n	800304e <_scanf_float+0x8e>
 80030e8:	2b54      	cmp	r3, #84	; 0x54
 80030ea:	d077      	beq.n	80031dc <_scanf_float+0x21c>
 80030ec:	2b59      	cmp	r3, #89	; 0x59
 80030ee:	d199      	bne.n	8003024 <_scanf_float+0x64>
 80030f0:	2d07      	cmp	r5, #7
 80030f2:	d197      	bne.n	8003024 <_scanf_float+0x64>
 80030f4:	2508      	movs	r5, #8
 80030f6:	e029      	b.n	800314c <_scanf_float+0x18c>
 80030f8:	2b74      	cmp	r3, #116	; 0x74
 80030fa:	d06f      	beq.n	80031dc <_scanf_float+0x21c>
 80030fc:	2b79      	cmp	r3, #121	; 0x79
 80030fe:	e7f6      	b.n	80030ee <_scanf_float+0x12e>
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	05c8      	lsls	r0, r1, #23
 8003104:	d51a      	bpl.n	800313c <_scanf_float+0x17c>
 8003106:	9b02      	ldr	r3, [sp, #8]
 8003108:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800310c:	6021      	str	r1, [r4, #0]
 800310e:	f109 0901 	add.w	r9, r9, #1
 8003112:	b11b      	cbz	r3, 800311c <_scanf_float+0x15c>
 8003114:	3b01      	subs	r3, #1
 8003116:	3201      	adds	r2, #1
 8003118:	9302      	str	r3, [sp, #8]
 800311a:	60a2      	str	r2, [r4, #8]
 800311c:	68a3      	ldr	r3, [r4, #8]
 800311e:	3b01      	subs	r3, #1
 8003120:	60a3      	str	r3, [r4, #8]
 8003122:	6923      	ldr	r3, [r4, #16]
 8003124:	3301      	adds	r3, #1
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	f340 8084 	ble.w	800323c <_scanf_float+0x27c>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	e766      	b.n	800300a <_scanf_float+0x4a>
 800313c:	eb1a 0f05 	cmn.w	sl, r5
 8003140:	f47f af70 	bne.w	8003024 <_scanf_float+0x64>
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800314a:	6022      	str	r2, [r4, #0]
 800314c:	f806 3b01 	strb.w	r3, [r6], #1
 8003150:	e7e4      	b.n	800311c <_scanf_float+0x15c>
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	0610      	lsls	r0, r2, #24
 8003156:	f57f af65 	bpl.w	8003024 <_scanf_float+0x64>
 800315a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315e:	e7f4      	b.n	800314a <_scanf_float+0x18a>
 8003160:	f1ba 0f00 	cmp.w	sl, #0
 8003164:	d10e      	bne.n	8003184 <_scanf_float+0x1c4>
 8003166:	f1b9 0f00 	cmp.w	r9, #0
 800316a:	d10e      	bne.n	800318a <_scanf_float+0x1ca>
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003172:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003176:	d108      	bne.n	800318a <_scanf_float+0x1ca>
 8003178:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800317c:	f04f 0a01 	mov.w	sl, #1
 8003180:	6022      	str	r2, [r4, #0]
 8003182:	e7e3      	b.n	800314c <_scanf_float+0x18c>
 8003184:	f1ba 0f02 	cmp.w	sl, #2
 8003188:	d055      	beq.n	8003236 <_scanf_float+0x276>
 800318a:	2d01      	cmp	r5, #1
 800318c:	d002      	beq.n	8003194 <_scanf_float+0x1d4>
 800318e:	2d04      	cmp	r5, #4
 8003190:	f47f af48 	bne.w	8003024 <_scanf_float+0x64>
 8003194:	3501      	adds	r5, #1
 8003196:	b2ed      	uxtb	r5, r5
 8003198:	e7d8      	b.n	800314c <_scanf_float+0x18c>
 800319a:	f1ba 0f01 	cmp.w	sl, #1
 800319e:	f47f af41 	bne.w	8003024 <_scanf_float+0x64>
 80031a2:	f04f 0a02 	mov.w	sl, #2
 80031a6:	e7d1      	b.n	800314c <_scanf_float+0x18c>
 80031a8:	b97d      	cbnz	r5, 80031ca <_scanf_float+0x20a>
 80031aa:	f1b9 0f00 	cmp.w	r9, #0
 80031ae:	f47f af3c 	bne.w	800302a <_scanf_float+0x6a>
 80031b2:	6822      	ldr	r2, [r4, #0]
 80031b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80031b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80031bc:	f47f af39 	bne.w	8003032 <_scanf_float+0x72>
 80031c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80031c4:	2501      	movs	r5, #1
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	e7c0      	b.n	800314c <_scanf_float+0x18c>
 80031ca:	2d03      	cmp	r5, #3
 80031cc:	d0e2      	beq.n	8003194 <_scanf_float+0x1d4>
 80031ce:	2d05      	cmp	r5, #5
 80031d0:	e7de      	b.n	8003190 <_scanf_float+0x1d0>
 80031d2:	2d02      	cmp	r5, #2
 80031d4:	f47f af26 	bne.w	8003024 <_scanf_float+0x64>
 80031d8:	2503      	movs	r5, #3
 80031da:	e7b7      	b.n	800314c <_scanf_float+0x18c>
 80031dc:	2d06      	cmp	r5, #6
 80031de:	f47f af21 	bne.w	8003024 <_scanf_float+0x64>
 80031e2:	2507      	movs	r5, #7
 80031e4:	e7b2      	b.n	800314c <_scanf_float+0x18c>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	0591      	lsls	r1, r2, #22
 80031ea:	f57f af1b 	bpl.w	8003024 <_scanf_float+0x64>
 80031ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80031f2:	6022      	str	r2, [r4, #0]
 80031f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80031f8:	e7a8      	b.n	800314c <_scanf_float+0x18c>
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003200:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003204:	d006      	beq.n	8003214 <_scanf_float+0x254>
 8003206:	0550      	lsls	r0, r2, #21
 8003208:	f57f af0c 	bpl.w	8003024 <_scanf_float+0x64>
 800320c:	f1b9 0f00 	cmp.w	r9, #0
 8003210:	f43f af0f 	beq.w	8003032 <_scanf_float+0x72>
 8003214:	0591      	lsls	r1, r2, #22
 8003216:	bf58      	it	pl
 8003218:	9901      	ldrpl	r1, [sp, #4]
 800321a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800321e:	bf58      	it	pl
 8003220:	eba9 0101 	subpl.w	r1, r9, r1
 8003224:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003228:	f04f 0900 	mov.w	r9, #0
 800322c:	bf58      	it	pl
 800322e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003232:	6022      	str	r2, [r4, #0]
 8003234:	e78a      	b.n	800314c <_scanf_float+0x18c>
 8003236:	f04f 0a03 	mov.w	sl, #3
 800323a:	e787      	b.n	800314c <_scanf_float+0x18c>
 800323c:	4639      	mov	r1, r7
 800323e:	4640      	mov	r0, r8
 8003240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003244:	4798      	blx	r3
 8003246:	2800      	cmp	r0, #0
 8003248:	f43f aedf 	beq.w	800300a <_scanf_float+0x4a>
 800324c:	e6ea      	b.n	8003024 <_scanf_float+0x64>
 800324e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003252:	463a      	mov	r2, r7
 8003254:	4640      	mov	r0, r8
 8003256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800325a:	4798      	blx	r3
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	3b01      	subs	r3, #1
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	e6ec      	b.n	800303e <_scanf_float+0x7e>
 8003264:	1e6b      	subs	r3, r5, #1
 8003266:	2b06      	cmp	r3, #6
 8003268:	d825      	bhi.n	80032b6 <_scanf_float+0x2f6>
 800326a:	2d02      	cmp	r5, #2
 800326c:	d836      	bhi.n	80032dc <_scanf_float+0x31c>
 800326e:	455e      	cmp	r6, fp
 8003270:	f67f aee8 	bls.w	8003044 <_scanf_float+0x84>
 8003274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003278:	463a      	mov	r2, r7
 800327a:	4640      	mov	r0, r8
 800327c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003280:	4798      	blx	r3
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	3b01      	subs	r3, #1
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	e7f1      	b.n	800326e <_scanf_float+0x2ae>
 800328a:	9802      	ldr	r0, [sp, #8]
 800328c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003290:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003294:	463a      	mov	r2, r7
 8003296:	9002      	str	r0, [sp, #8]
 8003298:	4640      	mov	r0, r8
 800329a:	4798      	blx	r3
 800329c:	6923      	ldr	r3, [r4, #16]
 800329e:	3b01      	subs	r3, #1
 80032a0:	6123      	str	r3, [r4, #16]
 80032a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032a6:	fa5f fa8a 	uxtb.w	sl, sl
 80032aa:	f1ba 0f02 	cmp.w	sl, #2
 80032ae:	d1ec      	bne.n	800328a <_scanf_float+0x2ca>
 80032b0:	3d03      	subs	r5, #3
 80032b2:	b2ed      	uxtb	r5, r5
 80032b4:	1b76      	subs	r6, r6, r5
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	05da      	lsls	r2, r3, #23
 80032ba:	d52f      	bpl.n	800331c <_scanf_float+0x35c>
 80032bc:	055b      	lsls	r3, r3, #21
 80032be:	d510      	bpl.n	80032e2 <_scanf_float+0x322>
 80032c0:	455e      	cmp	r6, fp
 80032c2:	f67f aebf 	bls.w	8003044 <_scanf_float+0x84>
 80032c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80032ca:	463a      	mov	r2, r7
 80032cc:	4640      	mov	r0, r8
 80032ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80032d2:	4798      	blx	r3
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	e7f1      	b.n	80032c0 <_scanf_float+0x300>
 80032dc:	46aa      	mov	sl, r5
 80032de:	9602      	str	r6, [sp, #8]
 80032e0:	e7df      	b.n	80032a2 <_scanf_float+0x2e2>
 80032e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	2965      	cmp	r1, #101	; 0x65
 80032ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80032ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80032f2:	6123      	str	r3, [r4, #16]
 80032f4:	d00c      	beq.n	8003310 <_scanf_float+0x350>
 80032f6:	2945      	cmp	r1, #69	; 0x45
 80032f8:	d00a      	beq.n	8003310 <_scanf_float+0x350>
 80032fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80032fe:	463a      	mov	r2, r7
 8003300:	4640      	mov	r0, r8
 8003302:	4798      	blx	r3
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800330a:	3b01      	subs	r3, #1
 800330c:	1eb5      	subs	r5, r6, #2
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	463a      	mov	r2, r7
 8003312:	4640      	mov	r0, r8
 8003314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003318:	4798      	blx	r3
 800331a:	462e      	mov	r6, r5
 800331c:	6825      	ldr	r5, [r4, #0]
 800331e:	f015 0510 	ands.w	r5, r5, #16
 8003322:	d155      	bne.n	80033d0 <_scanf_float+0x410>
 8003324:	7035      	strb	r5, [r6, #0]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d11d      	bne.n	800336e <_scanf_float+0x3ae>
 8003332:	9b01      	ldr	r3, [sp, #4]
 8003334:	454b      	cmp	r3, r9
 8003336:	eba3 0209 	sub.w	r2, r3, r9
 800333a:	d125      	bne.n	8003388 <_scanf_float+0x3c8>
 800333c:	2200      	movs	r2, #0
 800333e:	4659      	mov	r1, fp
 8003340:	4640      	mov	r0, r8
 8003342:	f002 fc21 	bl	8005b88 <_strtod_r>
 8003346:	9b03      	ldr	r3, [sp, #12]
 8003348:	f8d4 c000 	ldr.w	ip, [r4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f01c 0f02 	tst.w	ip, #2
 8003352:	4606      	mov	r6, r0
 8003354:	460f      	mov	r7, r1
 8003356:	f103 0204 	add.w	r2, r3, #4
 800335a:	d020      	beq.n	800339e <_scanf_float+0x3de>
 800335c:	9903      	ldr	r1, [sp, #12]
 800335e:	600a      	str	r2, [r1, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	e9c3 6700 	strd	r6, r7, [r3]
 8003366:	68e3      	ldr	r3, [r4, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	60e3      	str	r3, [r4, #12]
 800336c:	e66b      	b.n	8003046 <_scanf_float+0x86>
 800336e:	9b04      	ldr	r3, [sp, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0e3      	beq.n	800333c <_scanf_float+0x37c>
 8003374:	9905      	ldr	r1, [sp, #20]
 8003376:	230a      	movs	r3, #10
 8003378:	462a      	mov	r2, r5
 800337a:	4640      	mov	r0, r8
 800337c:	3101      	adds	r1, #1
 800337e:	f002 fc87 	bl	8005c90 <_strtol_r>
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	9e05      	ldr	r6, [sp, #20]
 8003386:	1ac2      	subs	r2, r0, r3
 8003388:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800338c:	429e      	cmp	r6, r3
 800338e:	bf28      	it	cs
 8003390:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003394:	4630      	mov	r0, r6
 8003396:	490f      	ldr	r1, [pc, #60]	; (80033d4 <_scanf_float+0x414>)
 8003398:	f000 f8e2 	bl	8003560 <siprintf>
 800339c:	e7ce      	b.n	800333c <_scanf_float+0x37c>
 800339e:	f01c 0f04 	tst.w	ip, #4
 80033a2:	d1db      	bne.n	800335c <_scanf_float+0x39c>
 80033a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80033a8:	f8cc 2000 	str.w	r2, [ip]
 80033ac:	f8d3 8000 	ldr.w	r8, [r3]
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	f7fd fb2a 	bl	8000a0c <__aeabi_dcmpun>
 80033b8:	b128      	cbz	r0, 80033c6 <_scanf_float+0x406>
 80033ba:	4807      	ldr	r0, [pc, #28]	; (80033d8 <_scanf_float+0x418>)
 80033bc:	f000 f9c2 	bl	8003744 <nanf>
 80033c0:	f8c8 0000 	str.w	r0, [r8]
 80033c4:	e7cf      	b.n	8003366 <_scanf_float+0x3a6>
 80033c6:	4630      	mov	r0, r6
 80033c8:	4639      	mov	r1, r7
 80033ca:	f7fd fb7d 	bl	8000ac8 <__aeabi_d2f>
 80033ce:	e7f7      	b.n	80033c0 <_scanf_float+0x400>
 80033d0:	2500      	movs	r5, #0
 80033d2:	e638      	b.n	8003046 <_scanf_float+0x86>
 80033d4:	08006ede 	.word	0x08006ede
 80033d8:	08007275 	.word	0x08007275

080033dc <std>:
 80033dc:	2300      	movs	r3, #0
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	e9c0 3300 	strd	r3, r3, [r0]
 80033e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ea:	6083      	str	r3, [r0, #8]
 80033ec:	8181      	strh	r1, [r0, #12]
 80033ee:	6643      	str	r3, [r0, #100]	; 0x64
 80033f0:	81c2      	strh	r2, [r0, #14]
 80033f2:	6183      	str	r3, [r0, #24]
 80033f4:	4619      	mov	r1, r3
 80033f6:	2208      	movs	r2, #8
 80033f8:	305c      	adds	r0, #92	; 0x5c
 80033fa:	f000 f914 	bl	8003626 <memset>
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <std+0x58>)
 8003400:	6224      	str	r4, [r4, #32]
 8003402:	6263      	str	r3, [r4, #36]	; 0x24
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <std+0x5c>)
 8003406:	62a3      	str	r3, [r4, #40]	; 0x28
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <std+0x60>)
 800340a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <std+0x64>)
 800340e:	6323      	str	r3, [r4, #48]	; 0x30
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <std+0x68>)
 8003412:	429c      	cmp	r4, r3
 8003414:	d006      	beq.n	8003424 <std+0x48>
 8003416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800341a:	4294      	cmp	r4, r2
 800341c:	d002      	beq.n	8003424 <std+0x48>
 800341e:	33d0      	adds	r3, #208	; 0xd0
 8003420:	429c      	cmp	r4, r3
 8003422:	d105      	bne.n	8003430 <std+0x54>
 8003424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f000 b978 	b.w	8003720 <__retarget_lock_init_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	080035a1 	.word	0x080035a1
 8003438:	080035c3 	.word	0x080035c3
 800343c:	080035fb 	.word	0x080035fb
 8003440:	0800361f 	.word	0x0800361f
 8003444:	20000230 	.word	0x20000230

08003448 <stdio_exit_handler>:
 8003448:	4a02      	ldr	r2, [pc, #8]	; (8003454 <stdio_exit_handler+0xc>)
 800344a:	4903      	ldr	r1, [pc, #12]	; (8003458 <stdio_exit_handler+0x10>)
 800344c:	4803      	ldr	r0, [pc, #12]	; (800345c <stdio_exit_handler+0x14>)
 800344e:	f000 b869 	b.w	8003524 <_fwalk_sglue>
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c
 8003458:	08006049 	.word	0x08006049
 800345c:	20000018 	.word	0x20000018

08003460 <cleanup_stdio>:
 8003460:	6841      	ldr	r1, [r0, #4]
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <cleanup_stdio+0x34>)
 8003464:	b510      	push	{r4, lr}
 8003466:	4299      	cmp	r1, r3
 8003468:	4604      	mov	r4, r0
 800346a:	d001      	beq.n	8003470 <cleanup_stdio+0x10>
 800346c:	f002 fdec 	bl	8006048 <_fflush_r>
 8003470:	68a1      	ldr	r1, [r4, #8]
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <cleanup_stdio+0x38>)
 8003474:	4299      	cmp	r1, r3
 8003476:	d002      	beq.n	800347e <cleanup_stdio+0x1e>
 8003478:	4620      	mov	r0, r4
 800347a:	f002 fde5 	bl	8006048 <_fflush_r>
 800347e:	68e1      	ldr	r1, [r4, #12]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <cleanup_stdio+0x3c>)
 8003482:	4299      	cmp	r1, r3
 8003484:	d004      	beq.n	8003490 <cleanup_stdio+0x30>
 8003486:	4620      	mov	r0, r4
 8003488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800348c:	f002 bddc 	b.w	8006048 <_fflush_r>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	20000230 	.word	0x20000230
 8003498:	20000298 	.word	0x20000298
 800349c:	20000300 	.word	0x20000300

080034a0 <global_stdio_init.part.0>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <global_stdio_init.part.0+0x30>)
 80034a4:	4c0b      	ldr	r4, [pc, #44]	; (80034d4 <global_stdio_init.part.0+0x34>)
 80034a6:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <global_stdio_init.part.0+0x38>)
 80034a8:	4620      	mov	r0, r4
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	2104      	movs	r1, #4
 80034ae:	2200      	movs	r2, #0
 80034b0:	f7ff ff94 	bl	80033dc <std>
 80034b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80034b8:	2201      	movs	r2, #1
 80034ba:	2109      	movs	r1, #9
 80034bc:	f7ff ff8e 	bl	80033dc <std>
 80034c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80034c4:	2202      	movs	r2, #2
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ca:	2112      	movs	r1, #18
 80034cc:	f7ff bf86 	b.w	80033dc <std>
 80034d0:	20000368 	.word	0x20000368
 80034d4:	20000230 	.word	0x20000230
 80034d8:	08003449 	.word	0x08003449

080034dc <__sfp_lock_acquire>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__sfp_lock_acquire+0x8>)
 80034de:	f000 b920 	b.w	8003722 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000371 	.word	0x20000371

080034e8 <__sfp_lock_release>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__sfp_lock_release+0x8>)
 80034ea:	f000 b91b 	b.w	8003724 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000371 	.word	0x20000371

080034f4 <__sinit>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4604      	mov	r4, r0
 80034f8:	f7ff fff0 	bl	80034dc <__sfp_lock_acquire>
 80034fc:	6a23      	ldr	r3, [r4, #32]
 80034fe:	b11b      	cbz	r3, 8003508 <__sinit+0x14>
 8003500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003504:	f7ff bff0 	b.w	80034e8 <__sfp_lock_release>
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__sinit+0x28>)
 800350a:	6223      	str	r3, [r4, #32]
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <__sinit+0x2c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f5      	bne.n	8003500 <__sinit+0xc>
 8003514:	f7ff ffc4 	bl	80034a0 <global_stdio_init.part.0>
 8003518:	e7f2      	b.n	8003500 <__sinit+0xc>
 800351a:	bf00      	nop
 800351c:	08003461 	.word	0x08003461
 8003520:	20000368 	.word	0x20000368

08003524 <_fwalk_sglue>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	4607      	mov	r7, r0
 800352a:	4688      	mov	r8, r1
 800352c:	4614      	mov	r4, r2
 800352e:	2600      	movs	r6, #0
 8003530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003534:	f1b9 0901 	subs.w	r9, r9, #1
 8003538:	d505      	bpl.n	8003546 <_fwalk_sglue+0x22>
 800353a:	6824      	ldr	r4, [r4, #0]
 800353c:	2c00      	cmp	r4, #0
 800353e:	d1f7      	bne.n	8003530 <_fwalk_sglue+0xc>
 8003540:	4630      	mov	r0, r6
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003546:	89ab      	ldrh	r3, [r5, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d907      	bls.n	800355c <_fwalk_sglue+0x38>
 800354c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003550:	3301      	adds	r3, #1
 8003552:	d003      	beq.n	800355c <_fwalk_sglue+0x38>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	47c0      	blx	r8
 800355a:	4306      	orrs	r6, r0
 800355c:	3568      	adds	r5, #104	; 0x68
 800355e:	e7e9      	b.n	8003534 <_fwalk_sglue+0x10>

08003560 <siprintf>:
 8003560:	b40e      	push	{r1, r2, r3}
 8003562:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003566:	b500      	push	{lr}
 8003568:	b09c      	sub	sp, #112	; 0x70
 800356a:	ab1d      	add	r3, sp, #116	; 0x74
 800356c:	9002      	str	r0, [sp, #8]
 800356e:	9006      	str	r0, [sp, #24]
 8003570:	9107      	str	r1, [sp, #28]
 8003572:	9104      	str	r1, [sp, #16]
 8003574:	4808      	ldr	r0, [pc, #32]	; (8003598 <siprintf+0x38>)
 8003576:	4909      	ldr	r1, [pc, #36]	; (800359c <siprintf+0x3c>)
 8003578:	f853 2b04 	ldr.w	r2, [r3], #4
 800357c:	9105      	str	r1, [sp, #20]
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	a902      	add	r1, sp, #8
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f002 fbe0 	bl	8005d48 <_svfiprintf_r>
 8003588:	2200      	movs	r2, #0
 800358a:	9b02      	ldr	r3, [sp, #8]
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	b01c      	add	sp, #112	; 0x70
 8003590:	f85d eb04 	ldr.w	lr, [sp], #4
 8003594:	b003      	add	sp, #12
 8003596:	4770      	bx	lr
 8003598:	20000064 	.word	0x20000064
 800359c:	ffff0208 	.word	0xffff0208

080035a0 <__sread>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	460c      	mov	r4, r1
 80035a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a8:	f000 f86c 	bl	8003684 <_read_r>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	bfab      	itete	ge
 80035b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035b2:	89a3      	ldrhlt	r3, [r4, #12]
 80035b4:	181b      	addge	r3, r3, r0
 80035b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035ba:	bfac      	ite	ge
 80035bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80035be:	81a3      	strhlt	r3, [r4, #12]
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <__swrite>:
 80035c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c6:	461f      	mov	r7, r3
 80035c8:	898b      	ldrh	r3, [r1, #12]
 80035ca:	4605      	mov	r5, r0
 80035cc:	05db      	lsls	r3, r3, #23
 80035ce:	460c      	mov	r4, r1
 80035d0:	4616      	mov	r6, r2
 80035d2:	d505      	bpl.n	80035e0 <__swrite+0x1e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	2200      	movs	r2, #0
 80035d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035dc:	f000 f840 	bl	8003660 <_lseek_r>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	4632      	mov	r2, r6
 80035e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	4628      	mov	r0, r5
 80035ec:	463b      	mov	r3, r7
 80035ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035f6:	f000 b857 	b.w	80036a8 <_write_r>

080035fa <__sseek>:
 80035fa:	b510      	push	{r4, lr}
 80035fc:	460c      	mov	r4, r1
 80035fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003602:	f000 f82d 	bl	8003660 <_lseek_r>
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	bf15      	itete	ne
 800360c:	6560      	strne	r0, [r4, #84]	; 0x54
 800360e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003616:	81a3      	strheq	r3, [r4, #12]
 8003618:	bf18      	it	ne
 800361a:	81a3      	strhne	r3, [r4, #12]
 800361c:	bd10      	pop	{r4, pc}

0800361e <__sclose>:
 800361e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003622:	f000 b80d 	b.w	8003640 <_close_r>

08003626 <memset>:
 8003626:	4603      	mov	r3, r0
 8003628:	4402      	add	r2, r0
 800362a:	4293      	cmp	r3, r2
 800362c:	d100      	bne.n	8003630 <memset+0xa>
 800362e:	4770      	bx	lr
 8003630:	f803 1b01 	strb.w	r1, [r3], #1
 8003634:	e7f9      	b.n	800362a <memset+0x4>
	...

08003638 <_localeconv_r>:
 8003638:	4800      	ldr	r0, [pc, #0]	; (800363c <_localeconv_r+0x4>)
 800363a:	4770      	bx	lr
 800363c:	20000158 	.word	0x20000158

08003640 <_close_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	2300      	movs	r3, #0
 8003644:	4d05      	ldr	r5, [pc, #20]	; (800365c <_close_r+0x1c>)
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f7fd fd91 	bl	8001172 <_close>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_close_r+0x1a>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	b103      	cbz	r3, 800365a <_close_r+0x1a>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	2000036c 	.word	0x2000036c

08003660 <_lseek_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	2200      	movs	r2, #0
 800366a:	4d05      	ldr	r5, [pc, #20]	; (8003680 <_lseek_r+0x20>)
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	f7fd fda3 	bl	80011ba <_lseek>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d102      	bne.n	800367e <_lseek_r+0x1e>
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	b103      	cbz	r3, 800367e <_lseek_r+0x1e>
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	2000036c 	.word	0x2000036c

08003684 <_read_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	2200      	movs	r2, #0
 800368e:	4d05      	ldr	r5, [pc, #20]	; (80036a4 <_read_r+0x20>)
 8003690:	602a      	str	r2, [r5, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	f7fd fd34 	bl	8001100 <_read>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_read_r+0x1e>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_read_r+0x1e>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	2000036c 	.word	0x2000036c

080036a8 <_write_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	4d05      	ldr	r5, [pc, #20]	; (80036c8 <_write_r+0x20>)
 80036b4:	602a      	str	r2, [r5, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f7fd fd3f 	bl	800113a <_write>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_write_r+0x1e>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_write_r+0x1e>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	2000036c 	.word	0x2000036c

080036cc <__errno>:
 80036cc:	4b01      	ldr	r3, [pc, #4]	; (80036d4 <__errno+0x8>)
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000064 	.word	0x20000064

080036d8 <__libc_init_array>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	2600      	movs	r6, #0
 80036dc:	4d0c      	ldr	r5, [pc, #48]	; (8003710 <__libc_init_array+0x38>)
 80036de:	4c0d      	ldr	r4, [pc, #52]	; (8003714 <__libc_init_array+0x3c>)
 80036e0:	1b64      	subs	r4, r4, r5
 80036e2:	10a4      	asrs	r4, r4, #2
 80036e4:	42a6      	cmp	r6, r4
 80036e6:	d109      	bne.n	80036fc <__libc_init_array+0x24>
 80036e8:	f003 fbc0 	bl	8006e6c <_init>
 80036ec:	2600      	movs	r6, #0
 80036ee:	4d0a      	ldr	r5, [pc, #40]	; (8003718 <__libc_init_array+0x40>)
 80036f0:	4c0a      	ldr	r4, [pc, #40]	; (800371c <__libc_init_array+0x44>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	42a6      	cmp	r6, r4
 80036f8:	d105      	bne.n	8003706 <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003700:	4798      	blx	r3
 8003702:	3601      	adds	r6, #1
 8003704:	e7ee      	b.n	80036e4 <__libc_init_array+0xc>
 8003706:	f855 3b04 	ldr.w	r3, [r5], #4
 800370a:	4798      	blx	r3
 800370c:	3601      	adds	r6, #1
 800370e:	e7f2      	b.n	80036f6 <__libc_init_array+0x1e>
 8003710:	080072d8 	.word	0x080072d8
 8003714:	080072d8 	.word	0x080072d8
 8003718:	080072d8 	.word	0x080072d8
 800371c:	080072dc 	.word	0x080072dc

08003720 <__retarget_lock_init_recursive>:
 8003720:	4770      	bx	lr

08003722 <__retarget_lock_acquire_recursive>:
 8003722:	4770      	bx	lr

08003724 <__retarget_lock_release_recursive>:
 8003724:	4770      	bx	lr

08003726 <memchr>:
 8003726:	4603      	mov	r3, r0
 8003728:	b510      	push	{r4, lr}
 800372a:	b2c9      	uxtb	r1, r1
 800372c:	4402      	add	r2, r0
 800372e:	4293      	cmp	r3, r2
 8003730:	4618      	mov	r0, r3
 8003732:	d101      	bne.n	8003738 <memchr+0x12>
 8003734:	2000      	movs	r0, #0
 8003736:	e003      	b.n	8003740 <memchr+0x1a>
 8003738:	7804      	ldrb	r4, [r0, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	428c      	cmp	r4, r1
 800373e:	d1f6      	bne.n	800372e <memchr+0x8>
 8003740:	bd10      	pop	{r4, pc}
	...

08003744 <nanf>:
 8003744:	4800      	ldr	r0, [pc, #0]	; (8003748 <nanf+0x4>)
 8003746:	4770      	bx	lr
 8003748:	7fc00000 	.word	0x7fc00000

0800374c <quorem>:
 800374c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003750:	6903      	ldr	r3, [r0, #16]
 8003752:	690c      	ldr	r4, [r1, #16]
 8003754:	4607      	mov	r7, r0
 8003756:	42a3      	cmp	r3, r4
 8003758:	db7f      	blt.n	800385a <quorem+0x10e>
 800375a:	3c01      	subs	r4, #1
 800375c:	f100 0514 	add.w	r5, r0, #20
 8003760:	f101 0814 	add.w	r8, r1, #20
 8003764:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800376e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003772:	3301      	adds	r3, #1
 8003774:	429a      	cmp	r2, r3
 8003776:	fbb2 f6f3 	udiv	r6, r2, r3
 800377a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800377e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003782:	d331      	bcc.n	80037e8 <quorem+0x9c>
 8003784:	f04f 0e00 	mov.w	lr, #0
 8003788:	4640      	mov	r0, r8
 800378a:	46ac      	mov	ip, r5
 800378c:	46f2      	mov	sl, lr
 800378e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003792:	b293      	uxth	r3, r2
 8003794:	fb06 e303 	mla	r3, r6, r3, lr
 8003798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800379c:	0c1a      	lsrs	r2, r3, #16
 800379e:	b29b      	uxth	r3, r3
 80037a0:	fb06 220e 	mla	r2, r6, lr, r2
 80037a4:	ebaa 0303 	sub.w	r3, sl, r3
 80037a8:	f8dc a000 	ldr.w	sl, [ip]
 80037ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80037b0:	fa1f fa8a 	uxth.w	sl, sl
 80037b4:	4453      	add	r3, sl
 80037b6:	f8dc a000 	ldr.w	sl, [ip]
 80037ba:	b292      	uxth	r2, r2
 80037bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80037c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037ca:	4581      	cmp	r9, r0
 80037cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80037d0:	f84c 3b04 	str.w	r3, [ip], #4
 80037d4:	d2db      	bcs.n	800378e <quorem+0x42>
 80037d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80037da:	b92b      	cbnz	r3, 80037e8 <quorem+0x9c>
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	3b04      	subs	r3, #4
 80037e0:	429d      	cmp	r5, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	d32d      	bcc.n	8003842 <quorem+0xf6>
 80037e6:	613c      	str	r4, [r7, #16]
 80037e8:	4638      	mov	r0, r7
 80037ea:	f001 f9dd 	bl	8004ba8 <__mcmp>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	db23      	blt.n	800383a <quorem+0xee>
 80037f2:	4629      	mov	r1, r5
 80037f4:	2000      	movs	r0, #0
 80037f6:	3601      	adds	r6, #1
 80037f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80037fc:	f8d1 c000 	ldr.w	ip, [r1]
 8003800:	b293      	uxth	r3, r2
 8003802:	1ac3      	subs	r3, r0, r3
 8003804:	0c12      	lsrs	r2, r2, #16
 8003806:	fa1f f08c 	uxth.w	r0, ip
 800380a:	4403      	add	r3, r0
 800380c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003810:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003814:	b29b      	uxth	r3, r3
 8003816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800381a:	45c1      	cmp	r9, r8
 800381c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003820:	f841 3b04 	str.w	r3, [r1], #4
 8003824:	d2e8      	bcs.n	80037f8 <quorem+0xac>
 8003826:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800382a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800382e:	b922      	cbnz	r2, 800383a <quorem+0xee>
 8003830:	3b04      	subs	r3, #4
 8003832:	429d      	cmp	r5, r3
 8003834:	461a      	mov	r2, r3
 8003836:	d30a      	bcc.n	800384e <quorem+0x102>
 8003838:	613c      	str	r4, [r7, #16]
 800383a:	4630      	mov	r0, r6
 800383c:	b003      	add	sp, #12
 800383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	3b04      	subs	r3, #4
 8003846:	2a00      	cmp	r2, #0
 8003848:	d1cd      	bne.n	80037e6 <quorem+0x9a>
 800384a:	3c01      	subs	r4, #1
 800384c:	e7c8      	b.n	80037e0 <quorem+0x94>
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	3b04      	subs	r3, #4
 8003852:	2a00      	cmp	r2, #0
 8003854:	d1f0      	bne.n	8003838 <quorem+0xec>
 8003856:	3c01      	subs	r4, #1
 8003858:	e7eb      	b.n	8003832 <quorem+0xe6>
 800385a:	2000      	movs	r0, #0
 800385c:	e7ee      	b.n	800383c <quorem+0xf0>
	...

08003860 <_dtoa_r>:
 8003860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003864:	4616      	mov	r6, r2
 8003866:	461f      	mov	r7, r3
 8003868:	69c4      	ldr	r4, [r0, #28]
 800386a:	b099      	sub	sp, #100	; 0x64
 800386c:	4605      	mov	r5, r0
 800386e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003872:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003876:	b974      	cbnz	r4, 8003896 <_dtoa_r+0x36>
 8003878:	2010      	movs	r0, #16
 800387a:	f000 fe1d 	bl	80044b8 <malloc>
 800387e:	4602      	mov	r2, r0
 8003880:	61e8      	str	r0, [r5, #28]
 8003882:	b920      	cbnz	r0, 800388e <_dtoa_r+0x2e>
 8003884:	21ef      	movs	r1, #239	; 0xef
 8003886:	4bac      	ldr	r3, [pc, #688]	; (8003b38 <_dtoa_r+0x2d8>)
 8003888:	48ac      	ldr	r0, [pc, #688]	; (8003b3c <_dtoa_r+0x2dc>)
 800388a:	f002 fc55 	bl	8006138 <__assert_func>
 800388e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003892:	6004      	str	r4, [r0, #0]
 8003894:	60c4      	str	r4, [r0, #12]
 8003896:	69eb      	ldr	r3, [r5, #28]
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	b151      	cbz	r1, 80038b2 <_dtoa_r+0x52>
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	2301      	movs	r3, #1
 80038a0:	4093      	lsls	r3, r2
 80038a2:	604a      	str	r2, [r1, #4]
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 fefa 	bl	80046a0 <_Bfree>
 80038ac:	2200      	movs	r2, #0
 80038ae:	69eb      	ldr	r3, [r5, #28]
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	1e3b      	subs	r3, r7, #0
 80038b4:	bfaf      	iteee	ge
 80038b6:	2300      	movge	r3, #0
 80038b8:	2201      	movlt	r2, #1
 80038ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80038be:	9305      	strlt	r3, [sp, #20]
 80038c0:	bfa8      	it	ge
 80038c2:	f8c8 3000 	strge.w	r3, [r8]
 80038c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80038ca:	4b9d      	ldr	r3, [pc, #628]	; (8003b40 <_dtoa_r+0x2e0>)
 80038cc:	bfb8      	it	lt
 80038ce:	f8c8 2000 	strlt.w	r2, [r8]
 80038d2:	ea33 0309 	bics.w	r3, r3, r9
 80038d6:	d119      	bne.n	800390c <_dtoa_r+0xac>
 80038d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80038dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80038e4:	4333      	orrs	r3, r6
 80038e6:	f000 8589 	beq.w	80043fc <_dtoa_r+0xb9c>
 80038ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038ec:	b953      	cbnz	r3, 8003904 <_dtoa_r+0xa4>
 80038ee:	4b95      	ldr	r3, [pc, #596]	; (8003b44 <_dtoa_r+0x2e4>)
 80038f0:	e023      	b.n	800393a <_dtoa_r+0xda>
 80038f2:	4b95      	ldr	r3, [pc, #596]	; (8003b48 <_dtoa_r+0x2e8>)
 80038f4:	9303      	str	r3, [sp, #12]
 80038f6:	3308      	adds	r3, #8
 80038f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	9803      	ldr	r0, [sp, #12]
 80038fe:	b019      	add	sp, #100	; 0x64
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <_dtoa_r+0x2e4>)
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	3303      	adds	r3, #3
 800390a:	e7f5      	b.n	80038f8 <_dtoa_r+0x98>
 800390c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003910:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003918:	2200      	movs	r2, #0
 800391a:	2300      	movs	r3, #0
 800391c:	f7fd f844 	bl	80009a8 <__aeabi_dcmpeq>
 8003920:	4680      	mov	r8, r0
 8003922:	b160      	cbz	r0, 800393e <_dtoa_r+0xde>
 8003924:	2301      	movs	r3, #1
 8003926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8562 	beq.w	80043f6 <_dtoa_r+0xb96>
 8003932:	4b86      	ldr	r3, [pc, #536]	; (8003b4c <_dtoa_r+0x2ec>)
 8003934:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	3b01      	subs	r3, #1
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	e7de      	b.n	80038fc <_dtoa_r+0x9c>
 800393e:	ab16      	add	r3, sp, #88	; 0x58
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	ab17      	add	r3, sp, #92	; 0x5c
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4628      	mov	r0, r5
 8003948:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800394c:	f001 fa3c 	bl	8004dc8 <__d2b>
 8003950:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003954:	4682      	mov	sl, r0
 8003956:	2c00      	cmp	r4, #0
 8003958:	d07e      	beq.n	8003a58 <_dtoa_r+0x1f8>
 800395a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800395e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003960:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003968:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800396c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003970:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003974:	4619      	mov	r1, r3
 8003976:	2200      	movs	r2, #0
 8003978:	4b75      	ldr	r3, [pc, #468]	; (8003b50 <_dtoa_r+0x2f0>)
 800397a:	f7fc fbf5 	bl	8000168 <__aeabi_dsub>
 800397e:	a368      	add	r3, pc, #416	; (adr r3, 8003b20 <_dtoa_r+0x2c0>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f7fc fda8 	bl	80004d8 <__aeabi_dmul>
 8003988:	a367      	add	r3, pc, #412	; (adr r3, 8003b28 <_dtoa_r+0x2c8>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f7fc fbed 	bl	800016c <__adddf3>
 8003992:	4606      	mov	r6, r0
 8003994:	4620      	mov	r0, r4
 8003996:	460f      	mov	r7, r1
 8003998:	f7fc fd34 	bl	8000404 <__aeabi_i2d>
 800399c:	a364      	add	r3, pc, #400	; (adr r3, 8003b30 <_dtoa_r+0x2d0>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fd99 	bl	80004d8 <__aeabi_dmul>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4630      	mov	r0, r6
 80039ac:	4639      	mov	r1, r7
 80039ae:	f7fc fbdd 	bl	800016c <__adddf3>
 80039b2:	4606      	mov	r6, r0
 80039b4:	460f      	mov	r7, r1
 80039b6:	f7fd f83f 	bl	8000a38 <__aeabi_d2iz>
 80039ba:	2200      	movs	r2, #0
 80039bc:	4683      	mov	fp, r0
 80039be:	2300      	movs	r3, #0
 80039c0:	4630      	mov	r0, r6
 80039c2:	4639      	mov	r1, r7
 80039c4:	f7fc fffa 	bl	80009bc <__aeabi_dcmplt>
 80039c8:	b148      	cbz	r0, 80039de <_dtoa_r+0x17e>
 80039ca:	4658      	mov	r0, fp
 80039cc:	f7fc fd1a 	bl	8000404 <__aeabi_i2d>
 80039d0:	4632      	mov	r2, r6
 80039d2:	463b      	mov	r3, r7
 80039d4:	f7fc ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80039d8:	b908      	cbnz	r0, 80039de <_dtoa_r+0x17e>
 80039da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039de:	f1bb 0f16 	cmp.w	fp, #22
 80039e2:	d857      	bhi.n	8003a94 <_dtoa_r+0x234>
 80039e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039e8:	4b5a      	ldr	r3, [pc, #360]	; (8003b54 <_dtoa_r+0x2f4>)
 80039ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc ffe3 	bl	80009bc <__aeabi_dcmplt>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d04e      	beq.n	8003a98 <_dtoa_r+0x238>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a04:	1b1b      	subs	r3, r3, r4
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	bf46      	itte	mi
 8003a0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8003a0e:	2300      	movmi	r3, #0
 8003a10:	f04f 0900 	movpl.w	r9, #0
 8003a14:	9209      	str	r2, [sp, #36]	; 0x24
 8003a16:	bf48      	it	mi
 8003a18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003a1a:	f1bb 0f00 	cmp.w	fp, #0
 8003a1e:	db3d      	blt.n	8003a9c <_dtoa_r+0x23c>
 8003a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003a26:	445b      	add	r3, fp
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8003a2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d867      	bhi.n	8003b04 <_dtoa_r+0x2a4>
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	bfc4      	itt	gt
 8003a38:	3b04      	subgt	r3, #4
 8003a3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a3e:	bfc8      	it	gt
 8003a40:	2400      	movgt	r4, #0
 8003a42:	f1a3 0302 	sub.w	r3, r3, #2
 8003a46:	bfd8      	it	le
 8003a48:	2401      	movle	r4, #1
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	f200 8086 	bhi.w	8003b5c <_dtoa_r+0x2fc>
 8003a50:	e8df f003 	tbb	[pc, r3]
 8003a54:	5637392c 	.word	0x5637392c
 8003a58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003a5c:	441c      	add	r4, r3
 8003a5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	bfc1      	itttt	gt
 8003a66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003a6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8003a6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003a72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003a76:	bfd6      	itet	le
 8003a78:	f1c3 0320 	rsble	r3, r3, #32
 8003a7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8003a80:	fa06 f003 	lslle.w	r0, r6, r3
 8003a84:	f7fc fcae 	bl	80003e4 <__aeabi_ui2d>
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003a8e:	3c01      	subs	r4, #1
 8003a90:	9213      	str	r2, [sp, #76]	; 0x4c
 8003a92:	e76f      	b.n	8003974 <_dtoa_r+0x114>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e7b3      	b.n	8003a00 <_dtoa_r+0x1a0>
 8003a98:	900f      	str	r0, [sp, #60]	; 0x3c
 8003a9a:	e7b2      	b.n	8003a02 <_dtoa_r+0x1a2>
 8003a9c:	f1cb 0300 	rsb	r3, fp, #0
 8003aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	eba9 090b 	sub.w	r9, r9, fp
 8003aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8003aaa:	e7c0      	b.n	8003a2e <_dtoa_r+0x1ce>
 8003aac:	2300      	movs	r3, #0
 8003aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ab0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	dc55      	bgt.n	8003b62 <_dtoa_r+0x302>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	9306      	str	r3, [sp, #24]
 8003abc:	9308      	str	r3, [sp, #32]
 8003abe:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ac0:	e00b      	b.n	8003ada <_dtoa_r+0x27a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e7f3      	b.n	8003aae <_dtoa_r+0x24e>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003acc:	445b      	add	r3, fp
 8003ace:	9306      	str	r3, [sp, #24]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	9308      	str	r3, [sp, #32]
 8003ad6:	bfb8      	it	lt
 8003ad8:	2301      	movlt	r3, #1
 8003ada:	2100      	movs	r1, #0
 8003adc:	2204      	movs	r2, #4
 8003ade:	69e8      	ldr	r0, [r5, #28]
 8003ae0:	f102 0614 	add.w	r6, r2, #20
 8003ae4:	429e      	cmp	r6, r3
 8003ae6:	d940      	bls.n	8003b6a <_dtoa_r+0x30a>
 8003ae8:	6041      	str	r1, [r0, #4]
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 fd98 	bl	8004620 <_Balloc>
 8003af0:	9003      	str	r0, [sp, #12]
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d13c      	bne.n	8003b70 <_dtoa_r+0x310>
 8003af6:	4602      	mov	r2, r0
 8003af8:	f240 11af 	movw	r1, #431	; 0x1af
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <_dtoa_r+0x2f8>)
 8003afe:	e6c3      	b.n	8003888 <_dtoa_r+0x28>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e7e1      	b.n	8003ac8 <_dtoa_r+0x268>
 8003b04:	2401      	movs	r4, #1
 8003b06:	2300      	movs	r3, #0
 8003b08:	940b      	str	r4, [sp, #44]	; 0x2c
 8003b0a:	9322      	str	r3, [sp, #136]	; 0x88
 8003b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b10:	2200      	movs	r2, #0
 8003b12:	9306      	str	r3, [sp, #24]
 8003b14:	9308      	str	r3, [sp, #32]
 8003b16:	2312      	movs	r3, #18
 8003b18:	e7d1      	b.n	8003abe <_dtoa_r+0x25e>
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w
 8003b20:	636f4361 	.word	0x636f4361
 8003b24:	3fd287a7 	.word	0x3fd287a7
 8003b28:	8b60c8b3 	.word	0x8b60c8b3
 8003b2c:	3fc68a28 	.word	0x3fc68a28
 8003b30:	509f79fb 	.word	0x509f79fb
 8003b34:	3fd34413 	.word	0x3fd34413
 8003b38:	08006ef0 	.word	0x08006ef0
 8003b3c:	08006f07 	.word	0x08006f07
 8003b40:	7ff00000 	.word	0x7ff00000
 8003b44:	08006eec 	.word	0x08006eec
 8003b48:	08006ee3 	.word	0x08006ee3
 8003b4c:	08006ebb 	.word	0x08006ebb
 8003b50:	3ff80000 	.word	0x3ff80000
 8003b54:	08006ff8 	.word	0x08006ff8
 8003b58:	08006f5f 	.word	0x08006f5f
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b60:	e7d4      	b.n	8003b0c <_dtoa_r+0x2ac>
 8003b62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b64:	9306      	str	r3, [sp, #24]
 8003b66:	9308      	str	r3, [sp, #32]
 8003b68:	e7b7      	b.n	8003ada <_dtoa_r+0x27a>
 8003b6a:	3101      	adds	r1, #1
 8003b6c:	0052      	lsls	r2, r2, #1
 8003b6e:	e7b7      	b.n	8003ae0 <_dtoa_r+0x280>
 8003b70:	69eb      	ldr	r3, [r5, #28]
 8003b72:	9a03      	ldr	r2, [sp, #12]
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	9b08      	ldr	r3, [sp, #32]
 8003b78:	2b0e      	cmp	r3, #14
 8003b7a:	f200 80a8 	bhi.w	8003cce <_dtoa_r+0x46e>
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	f000 80a5 	beq.w	8003cce <_dtoa_r+0x46e>
 8003b84:	f1bb 0f00 	cmp.w	fp, #0
 8003b88:	dd34      	ble.n	8003bf4 <_dtoa_r+0x394>
 8003b8a:	4b9a      	ldr	r3, [pc, #616]	; (8003df4 <_dtoa_r+0x594>)
 8003b8c:	f00b 020f 	and.w	r2, fp, #15
 8003b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003b98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ba0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003ba4:	d016      	beq.n	8003bd4 <_dtoa_r+0x374>
 8003ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003baa:	4b93      	ldr	r3, [pc, #588]	; (8003df8 <_dtoa_r+0x598>)
 8003bac:	2703      	movs	r7, #3
 8003bae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bb2:	f7fc fdbb 	bl	800072c <__aeabi_ddiv>
 8003bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bba:	f004 040f 	and.w	r4, r4, #15
 8003bbe:	4e8e      	ldr	r6, [pc, #568]	; (8003df8 <_dtoa_r+0x598>)
 8003bc0:	b954      	cbnz	r4, 8003bd8 <_dtoa_r+0x378>
 8003bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bca:	f7fc fdaf 	bl	800072c <__aeabi_ddiv>
 8003bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bd2:	e029      	b.n	8003c28 <_dtoa_r+0x3c8>
 8003bd4:	2702      	movs	r7, #2
 8003bd6:	e7f2      	b.n	8003bbe <_dtoa_r+0x35e>
 8003bd8:	07e1      	lsls	r1, r4, #31
 8003bda:	d508      	bpl.n	8003bee <_dtoa_r+0x38e>
 8003bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003be0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003be4:	f7fc fc78 	bl	80004d8 <__aeabi_dmul>
 8003be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003bec:	3701      	adds	r7, #1
 8003bee:	1064      	asrs	r4, r4, #1
 8003bf0:	3608      	adds	r6, #8
 8003bf2:	e7e5      	b.n	8003bc0 <_dtoa_r+0x360>
 8003bf4:	f000 80a5 	beq.w	8003d42 <_dtoa_r+0x4e2>
 8003bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003bfc:	f1cb 0400 	rsb	r4, fp, #0
 8003c00:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <_dtoa_r+0x594>)
 8003c02:	f004 020f 	and.w	r2, r4, #15
 8003c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fc63 	bl	80004d8 <__aeabi_dmul>
 8003c12:	2702      	movs	r7, #2
 8003c14:	2300      	movs	r3, #0
 8003c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c1a:	4e77      	ldr	r6, [pc, #476]	; (8003df8 <_dtoa_r+0x598>)
 8003c1c:	1124      	asrs	r4, r4, #4
 8003c1e:	2c00      	cmp	r4, #0
 8003c20:	f040 8084 	bne.w	8003d2c <_dtoa_r+0x4cc>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1d2      	bne.n	8003bce <_dtoa_r+0x36e>
 8003c28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8087 	beq.w	8003d46 <_dtoa_r+0x4e6>
 8003c38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <_dtoa_r+0x59c>)
 8003c40:	f7fc febc 	bl	80009bc <__aeabi_dcmplt>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d07e      	beq.n	8003d46 <_dtoa_r+0x4e6>
 8003c48:	9b08      	ldr	r3, [sp, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d07b      	beq.n	8003d46 <_dtoa_r+0x4e6>
 8003c4e:	9b06      	ldr	r3, [sp, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	dd38      	ble.n	8003cc6 <_dtoa_r+0x466>
 8003c54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4b69      	ldr	r3, [pc, #420]	; (8003e00 <_dtoa_r+0x5a0>)
 8003c5c:	f7fc fc3c 	bl	80004d8 <__aeabi_dmul>
 8003c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c64:	9c06      	ldr	r4, [sp, #24]
 8003c66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003c6a:	3701      	adds	r7, #1
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f7fc fbc9 	bl	8000404 <__aeabi_i2d>
 8003c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c76:	f7fc fc2f 	bl	80004d8 <__aeabi_dmul>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <_dtoa_r+0x5a4>)
 8003c7e:	f7fc fa75 	bl	800016c <__adddf3>
 8003c82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003c86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c8a:	9611      	str	r6, [sp, #68]	; 0x44
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	d15d      	bne.n	8003d4c <_dtoa_r+0x4ec>
 8003c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c94:	2200      	movs	r2, #0
 8003c96:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <_dtoa_r+0x5a8>)
 8003c98:	f7fc fa66 	bl	8000168 <__aeabi_dsub>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ca4:	4633      	mov	r3, r6
 8003ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ca8:	f7fc fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f040 8295 	bne.w	80041dc <_dtoa_r+0x97c>
 8003cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003cb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003cbc:	f7fc fe7e 	bl	80009bc <__aeabi_dcmplt>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f040 8289 	bne.w	80041d8 <_dtoa_r+0x978>
 8003cc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003cca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003cce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f2c0 8151 	blt.w	8003f78 <_dtoa_r+0x718>
 8003cd6:	f1bb 0f0e 	cmp.w	fp, #14
 8003cda:	f300 814d 	bgt.w	8003f78 <_dtoa_r+0x718>
 8003cde:	4b45      	ldr	r3, [pc, #276]	; (8003df4 <_dtoa_r+0x594>)
 8003ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003ce4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003cec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f280 80da 	bge.w	8003ea8 <_dtoa_r+0x648>
 8003cf4:	9b08      	ldr	r3, [sp, #32]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f300 80d6 	bgt.w	8003ea8 <_dtoa_r+0x648>
 8003cfc:	f040 826b 	bne.w	80041d6 <_dtoa_r+0x976>
 8003d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d04:	2200      	movs	r2, #0
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <_dtoa_r+0x5a8>)
 8003d08:	f7fc fbe6 	bl	80004d8 <__aeabi_dmul>
 8003d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d10:	f7fc fe68 	bl	80009e4 <__aeabi_dcmpge>
 8003d14:	9c08      	ldr	r4, [sp, #32]
 8003d16:	4626      	mov	r6, r4
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f040 8241 	bne.w	80041a0 <_dtoa_r+0x940>
 8003d1e:	2331      	movs	r3, #49	; 0x31
 8003d20:	9f03      	ldr	r7, [sp, #12]
 8003d22:	f10b 0b01 	add.w	fp, fp, #1
 8003d26:	f807 3b01 	strb.w	r3, [r7], #1
 8003d2a:	e23d      	b.n	80041a8 <_dtoa_r+0x948>
 8003d2c:	07e2      	lsls	r2, r4, #31
 8003d2e:	d505      	bpl.n	8003d3c <_dtoa_r+0x4dc>
 8003d30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d34:	f7fc fbd0 	bl	80004d8 <__aeabi_dmul>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	3701      	adds	r7, #1
 8003d3c:	1064      	asrs	r4, r4, #1
 8003d3e:	3608      	adds	r6, #8
 8003d40:	e76d      	b.n	8003c1e <_dtoa_r+0x3be>
 8003d42:	2702      	movs	r7, #2
 8003d44:	e770      	b.n	8003c28 <_dtoa_r+0x3c8>
 8003d46:	46d8      	mov	r8, fp
 8003d48:	9c08      	ldr	r4, [sp, #32]
 8003d4a:	e78f      	b.n	8003c6c <_dtoa_r+0x40c>
 8003d4c:	9903      	ldr	r1, [sp, #12]
 8003d4e:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <_dtoa_r+0x594>)
 8003d50:	4421      	add	r1, r4
 8003d52:	9112      	str	r1, [sp, #72]	; 0x48
 8003d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003d5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d62:	2900      	cmp	r1, #0
 8003d64:	d054      	beq.n	8003e10 <_dtoa_r+0x5b0>
 8003d66:	2000      	movs	r0, #0
 8003d68:	4928      	ldr	r1, [pc, #160]	; (8003e0c <_dtoa_r+0x5ac>)
 8003d6a:	f7fc fcdf 	bl	800072c <__aeabi_ddiv>
 8003d6e:	463b      	mov	r3, r7
 8003d70:	4632      	mov	r2, r6
 8003d72:	f7fc f9f9 	bl	8000168 <__aeabi_dsub>
 8003d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d7a:	9f03      	ldr	r7, [sp, #12]
 8003d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d80:	f7fc fe5a 	bl	8000a38 <__aeabi_d2iz>
 8003d84:	4604      	mov	r4, r0
 8003d86:	f7fc fb3d 	bl	8000404 <__aeabi_i2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d92:	f7fc f9e9 	bl	8000168 <__aeabi_dsub>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	3430      	adds	r4, #48	; 0x30
 8003d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003da4:	f807 4b01 	strb.w	r4, [r7], #1
 8003da8:	f7fc fe08 	bl	80009bc <__aeabi_dcmplt>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d173      	bne.n	8003e98 <_dtoa_r+0x638>
 8003db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003db4:	2000      	movs	r0, #0
 8003db6:	4911      	ldr	r1, [pc, #68]	; (8003dfc <_dtoa_r+0x59c>)
 8003db8:	f7fc f9d6 	bl	8000168 <__aeabi_dsub>
 8003dbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003dc0:	f7fc fdfc 	bl	80009bc <__aeabi_dcmplt>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f040 80b6 	bne.w	8003f36 <_dtoa_r+0x6d6>
 8003dca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003dcc:	429f      	cmp	r7, r3
 8003dce:	f43f af7a 	beq.w	8003cc6 <_dtoa_r+0x466>
 8003dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <_dtoa_r+0x5a0>)
 8003dda:	f7fc fb7d 	bl	80004d8 <__aeabi_dmul>
 8003dde:	2200      	movs	r2, #0
 8003de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <_dtoa_r+0x5a0>)
 8003dea:	f7fc fb75 	bl	80004d8 <__aeabi_dmul>
 8003dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003df2:	e7c3      	b.n	8003d7c <_dtoa_r+0x51c>
 8003df4:	08006ff8 	.word	0x08006ff8
 8003df8:	08006fd0 	.word	0x08006fd0
 8003dfc:	3ff00000 	.word	0x3ff00000
 8003e00:	40240000 	.word	0x40240000
 8003e04:	401c0000 	.word	0x401c0000
 8003e08:	40140000 	.word	0x40140000
 8003e0c:	3fe00000 	.word	0x3fe00000
 8003e10:	4630      	mov	r0, r6
 8003e12:	4639      	mov	r1, r7
 8003e14:	f7fc fb60 	bl	80004d8 <__aeabi_dmul>
 8003e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e1e:	9c03      	ldr	r4, [sp, #12]
 8003e20:	9314      	str	r3, [sp, #80]	; 0x50
 8003e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e26:	f7fc fe07 	bl	8000a38 <__aeabi_d2iz>
 8003e2a:	9015      	str	r0, [sp, #84]	; 0x54
 8003e2c:	f7fc faea 	bl	8000404 <__aeabi_i2d>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e38:	f7fc f996 	bl	8000168 <__aeabi_dsub>
 8003e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e3e:	4606      	mov	r6, r0
 8003e40:	3330      	adds	r3, #48	; 0x30
 8003e42:	f804 3b01 	strb.w	r3, [r4], #1
 8003e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e48:	460f      	mov	r7, r1
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	d124      	bne.n	8003e9c <_dtoa_r+0x63c>
 8003e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e56:	4baf      	ldr	r3, [pc, #700]	; (8004114 <_dtoa_r+0x8b4>)
 8003e58:	f7fc f988 	bl	800016c <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4630      	mov	r0, r6
 8003e62:	4639      	mov	r1, r7
 8003e64:	f7fc fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d163      	bne.n	8003f34 <_dtoa_r+0x6d4>
 8003e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e70:	2000      	movs	r0, #0
 8003e72:	49a8      	ldr	r1, [pc, #672]	; (8004114 <_dtoa_r+0x8b4>)
 8003e74:	f7fc f978 	bl	8000168 <__aeabi_dsub>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	4639      	mov	r1, r7
 8003e80:	f7fc fd9c 	bl	80009bc <__aeabi_dcmplt>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	f43f af1e 	beq.w	8003cc6 <_dtoa_r+0x466>
 8003e8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003e8c:	1e7b      	subs	r3, r7, #1
 8003e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d0f8      	beq.n	8003e8a <_dtoa_r+0x62a>
 8003e98:	46c3      	mov	fp, r8
 8003e9a:	e03b      	b.n	8003f14 <_dtoa_r+0x6b4>
 8003e9c:	4b9e      	ldr	r3, [pc, #632]	; (8004118 <_dtoa_r+0x8b8>)
 8003e9e:	f7fc fb1b 	bl	80004d8 <__aeabi_dmul>
 8003ea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea6:	e7bc      	b.n	8003e22 <_dtoa_r+0x5c2>
 8003ea8:	9f03      	ldr	r7, [sp, #12]
 8003eaa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003eae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	f7fc fc39 	bl	800072c <__aeabi_ddiv>
 8003eba:	f7fc fdbd 	bl	8000a38 <__aeabi_d2iz>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	f7fc faa0 	bl	8000404 <__aeabi_i2d>
 8003ec4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ec8:	f7fc fb06 	bl	80004d8 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	f7fc f948 	bl	8000168 <__aeabi_dsub>
 8003ed8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003edc:	f807 6b01 	strb.w	r6, [r7], #1
 8003ee0:	9e03      	ldr	r6, [sp, #12]
 8003ee2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003ee6:	1bbe      	subs	r6, r7, r6
 8003ee8:	45b4      	cmp	ip, r6
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	d136      	bne.n	8003f5e <_dtoa_r+0x6fe>
 8003ef0:	f7fc f93c 	bl	800016c <__adddf3>
 8003ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4689      	mov	r9, r1
 8003efc:	f7fc fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8003f00:	bb58      	cbnz	r0, 8003f5a <_dtoa_r+0x6fa>
 8003f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f7fc fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8003f0e:	b108      	cbz	r0, 8003f14 <_dtoa_r+0x6b4>
 8003f10:	07e3      	lsls	r3, r4, #31
 8003f12:	d422      	bmi.n	8003f5a <_dtoa_r+0x6fa>
 8003f14:	4651      	mov	r1, sl
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 fbc2 	bl	80046a0 <_Bfree>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f20:	703b      	strb	r3, [r7, #0]
 8003f22:	f10b 0301 	add.w	r3, fp, #1
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f43f ace6 	beq.w	80038fc <_dtoa_r+0x9c>
 8003f30:	601f      	str	r7, [r3, #0]
 8003f32:	e4e3      	b.n	80038fc <_dtoa_r+0x9c>
 8003f34:	4627      	mov	r7, r4
 8003f36:	463b      	mov	r3, r7
 8003f38:	461f      	mov	r7, r3
 8003f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f3e:	2a39      	cmp	r2, #57	; 0x39
 8003f40:	d107      	bne.n	8003f52 <_dtoa_r+0x6f2>
 8003f42:	9a03      	ldr	r2, [sp, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1f7      	bne.n	8003f38 <_dtoa_r+0x6d8>
 8003f48:	2230      	movs	r2, #48	; 0x30
 8003f4a:	9903      	ldr	r1, [sp, #12]
 8003f4c:	f108 0801 	add.w	r8, r8, #1
 8003f50:	700a      	strb	r2, [r1, #0]
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	3201      	adds	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e79e      	b.n	8003e98 <_dtoa_r+0x638>
 8003f5a:	46d8      	mov	r8, fp
 8003f5c:	e7eb      	b.n	8003f36 <_dtoa_r+0x6d6>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <_dtoa_r+0x8b8>)
 8003f62:	f7fc fab9 	bl	80004d8 <__aeabi_dmul>
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4680      	mov	r8, r0
 8003f6c:	4689      	mov	r9, r1
 8003f6e:	f7fc fd1b 	bl	80009a8 <__aeabi_dcmpeq>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d09b      	beq.n	8003eae <_dtoa_r+0x64e>
 8003f76:	e7cd      	b.n	8003f14 <_dtoa_r+0x6b4>
 8003f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f7a:	2a00      	cmp	r2, #0
 8003f7c:	f000 80c4 	beq.w	8004108 <_dtoa_r+0x8a8>
 8003f80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f82:	2a01      	cmp	r2, #1
 8003f84:	f300 80a8 	bgt.w	80040d8 <_dtoa_r+0x878>
 8003f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	f000 80a0 	beq.w	80040d0 <_dtoa_r+0x870>
 8003f90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f94:	464f      	mov	r7, r9
 8003f96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	441a      	add	r2, r3
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	4499      	add	r9, r3
 8003fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fa4:	f000 fc7c 	bl	80048a0 <__i2b>
 8003fa8:	4606      	mov	r6, r0
 8003faa:	b15f      	cbz	r7, 8003fc4 <_dtoa_r+0x764>
 8003fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dd08      	ble.n	8003fc4 <_dtoa_r+0x764>
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	bfa8      	it	ge
 8003fb6:	463b      	movge	r3, r7
 8003fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fba:	eba9 0903 	sub.w	r9, r9, r3
 8003fbe:	1aff      	subs	r7, r7, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc6:	b1f3      	cbz	r3, 8004006 <_dtoa_r+0x7a6>
 8003fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a0 	beq.w	8004110 <_dtoa_r+0x8b0>
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	dd10      	ble.n	8003ff6 <_dtoa_r+0x796>
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 fd1f 	bl	8004a1c <__pow5mult>
 8003fde:	4652      	mov	r2, sl
 8003fe0:	4601      	mov	r1, r0
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 fc71 	bl	80048cc <__multiply>
 8003fea:	4680      	mov	r8, r0
 8003fec:	4651      	mov	r1, sl
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fb56 	bl	80046a0 <_Bfree>
 8003ff4:	46c2      	mov	sl, r8
 8003ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff8:	1b1a      	subs	r2, r3, r4
 8003ffa:	d004      	beq.n	8004006 <_dtoa_r+0x7a6>
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 fd0c 	bl	8004a1c <__pow5mult>
 8004004:	4682      	mov	sl, r0
 8004006:	2101      	movs	r1, #1
 8004008:	4628      	mov	r0, r5
 800400a:	f000 fc49 	bl	80048a0 <__i2b>
 800400e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004010:	4604      	mov	r4, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	f340 8082 	ble.w	800411c <_dtoa_r+0x8bc>
 8004018:	461a      	mov	r2, r3
 800401a:	4601      	mov	r1, r0
 800401c:	4628      	mov	r0, r5
 800401e:	f000 fcfd 	bl	8004a1c <__pow5mult>
 8004022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004024:	4604      	mov	r4, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	dd7b      	ble.n	8004122 <_dtoa_r+0x8c2>
 800402a:	f04f 0800 	mov.w	r8, #0
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004034:	6918      	ldr	r0, [r3, #16]
 8004036:	f000 fbe5 	bl	8004804 <__hi0bits>
 800403a:	f1c0 0020 	rsb	r0, r0, #32
 800403e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004040:	4418      	add	r0, r3
 8004042:	f010 001f 	ands.w	r0, r0, #31
 8004046:	f000 8092 	beq.w	800416e <_dtoa_r+0x90e>
 800404a:	f1c0 0320 	rsb	r3, r0, #32
 800404e:	2b04      	cmp	r3, #4
 8004050:	f340 8085 	ble.w	800415e <_dtoa_r+0x8fe>
 8004054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004056:	f1c0 001c 	rsb	r0, r0, #28
 800405a:	4403      	add	r3, r0
 800405c:	4481      	add	r9, r0
 800405e:	4407      	add	r7, r0
 8004060:	9309      	str	r3, [sp, #36]	; 0x24
 8004062:	f1b9 0f00 	cmp.w	r9, #0
 8004066:	dd05      	ble.n	8004074 <_dtoa_r+0x814>
 8004068:	4651      	mov	r1, sl
 800406a:	464a      	mov	r2, r9
 800406c:	4628      	mov	r0, r5
 800406e:	f000 fd2f 	bl	8004ad0 <__lshift>
 8004072:	4682      	mov	sl, r0
 8004074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	dd05      	ble.n	8004086 <_dtoa_r+0x826>
 800407a:	4621      	mov	r1, r4
 800407c:	461a      	mov	r2, r3
 800407e:	4628      	mov	r0, r5
 8004080:	f000 fd26 	bl	8004ad0 <__lshift>
 8004084:	4604      	mov	r4, r0
 8004086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d072      	beq.n	8004172 <_dtoa_r+0x912>
 800408c:	4621      	mov	r1, r4
 800408e:	4650      	mov	r0, sl
 8004090:	f000 fd8a 	bl	8004ba8 <__mcmp>
 8004094:	2800      	cmp	r0, #0
 8004096:	da6c      	bge.n	8004172 <_dtoa_r+0x912>
 8004098:	2300      	movs	r3, #0
 800409a:	4651      	mov	r1, sl
 800409c:	220a      	movs	r2, #10
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 fb20 	bl	80046e4 <__multadd>
 80040a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a6:	4682      	mov	sl, r0
 80040a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 81ac 	beq.w	800440a <_dtoa_r+0xbaa>
 80040b2:	2300      	movs	r3, #0
 80040b4:	4631      	mov	r1, r6
 80040b6:	220a      	movs	r2, #10
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fb13 	bl	80046e4 <__multadd>
 80040be:	9b06      	ldr	r3, [sp, #24]
 80040c0:	4606      	mov	r6, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f300 8093 	bgt.w	80041ee <_dtoa_r+0x98e>
 80040c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	dc59      	bgt.n	8004182 <_dtoa_r+0x922>
 80040ce:	e08e      	b.n	80041ee <_dtoa_r+0x98e>
 80040d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040d6:	e75d      	b.n	8003f94 <_dtoa_r+0x734>
 80040d8:	9b08      	ldr	r3, [sp, #32]
 80040da:	1e5c      	subs	r4, r3, #1
 80040dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040de:	42a3      	cmp	r3, r4
 80040e0:	bfbf      	itttt	lt
 80040e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80040e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80040e6:	1ae3      	sublt	r3, r4, r3
 80040e8:	18d2      	addlt	r2, r2, r3
 80040ea:	bfa8      	it	ge
 80040ec:	1b1c      	subge	r4, r3, r4
 80040ee:	9b08      	ldr	r3, [sp, #32]
 80040f0:	bfbe      	ittt	lt
 80040f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80040f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80040f6:	2400      	movlt	r4, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bfb5      	itete	lt
 80040fc:	eba9 0703 	sublt.w	r7, r9, r3
 8004100:	464f      	movge	r7, r9
 8004102:	2300      	movlt	r3, #0
 8004104:	9b08      	ldrge	r3, [sp, #32]
 8004106:	e747      	b.n	8003f98 <_dtoa_r+0x738>
 8004108:	464f      	mov	r7, r9
 800410a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800410c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800410e:	e74c      	b.n	8003faa <_dtoa_r+0x74a>
 8004110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004112:	e773      	b.n	8003ffc <_dtoa_r+0x79c>
 8004114:	3fe00000 	.word	0x3fe00000
 8004118:	40240000 	.word	0x40240000
 800411c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800411e:	2b01      	cmp	r3, #1
 8004120:	dc18      	bgt.n	8004154 <_dtoa_r+0x8f4>
 8004122:	9b04      	ldr	r3, [sp, #16]
 8004124:	b9b3      	cbnz	r3, 8004154 <_dtoa_r+0x8f4>
 8004126:	9b05      	ldr	r3, [sp, #20]
 8004128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800412c:	b993      	cbnz	r3, 8004154 <_dtoa_r+0x8f4>
 800412e:	9b05      	ldr	r3, [sp, #20]
 8004130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004134:	0d1b      	lsrs	r3, r3, #20
 8004136:	051b      	lsls	r3, r3, #20
 8004138:	b17b      	cbz	r3, 800415a <_dtoa_r+0x8fa>
 800413a:	f04f 0801 	mov.w	r8, #1
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	f109 0901 	add.w	r9, r9, #1
 8004144:	3301      	adds	r3, #1
 8004146:	9309      	str	r3, [sp, #36]	; 0x24
 8004148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f af6f 	bne.w	800402e <_dtoa_r+0x7ce>
 8004150:	2001      	movs	r0, #1
 8004152:	e774      	b.n	800403e <_dtoa_r+0x7de>
 8004154:	f04f 0800 	mov.w	r8, #0
 8004158:	e7f6      	b.n	8004148 <_dtoa_r+0x8e8>
 800415a:	4698      	mov	r8, r3
 800415c:	e7f4      	b.n	8004148 <_dtoa_r+0x8e8>
 800415e:	d080      	beq.n	8004062 <_dtoa_r+0x802>
 8004160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004162:	331c      	adds	r3, #28
 8004164:	441a      	add	r2, r3
 8004166:	4499      	add	r9, r3
 8004168:	441f      	add	r7, r3
 800416a:	9209      	str	r2, [sp, #36]	; 0x24
 800416c:	e779      	b.n	8004062 <_dtoa_r+0x802>
 800416e:	4603      	mov	r3, r0
 8004170:	e7f6      	b.n	8004160 <_dtoa_r+0x900>
 8004172:	9b08      	ldr	r3, [sp, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	dc34      	bgt.n	80041e2 <_dtoa_r+0x982>
 8004178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800417a:	2b02      	cmp	r3, #2
 800417c:	dd31      	ble.n	80041e2 <_dtoa_r+0x982>
 800417e:	9b08      	ldr	r3, [sp, #32]
 8004180:	9306      	str	r3, [sp, #24]
 8004182:	9b06      	ldr	r3, [sp, #24]
 8004184:	b963      	cbnz	r3, 80041a0 <_dtoa_r+0x940>
 8004186:	4621      	mov	r1, r4
 8004188:	2205      	movs	r2, #5
 800418a:	4628      	mov	r0, r5
 800418c:	f000 faaa 	bl	80046e4 <__multadd>
 8004190:	4601      	mov	r1, r0
 8004192:	4604      	mov	r4, r0
 8004194:	4650      	mov	r0, sl
 8004196:	f000 fd07 	bl	8004ba8 <__mcmp>
 800419a:	2800      	cmp	r0, #0
 800419c:	f73f adbf 	bgt.w	8003d1e <_dtoa_r+0x4be>
 80041a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041a2:	9f03      	ldr	r7, [sp, #12]
 80041a4:	ea6f 0b03 	mvn.w	fp, r3
 80041a8:	f04f 0800 	mov.w	r8, #0
 80041ac:	4621      	mov	r1, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 fa76 	bl	80046a0 <_Bfree>
 80041b4:	2e00      	cmp	r6, #0
 80041b6:	f43f aead 	beq.w	8003f14 <_dtoa_r+0x6b4>
 80041ba:	f1b8 0f00 	cmp.w	r8, #0
 80041be:	d005      	beq.n	80041cc <_dtoa_r+0x96c>
 80041c0:	45b0      	cmp	r8, r6
 80041c2:	d003      	beq.n	80041cc <_dtoa_r+0x96c>
 80041c4:	4641      	mov	r1, r8
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fa6a 	bl	80046a0 <_Bfree>
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	f000 fa66 	bl	80046a0 <_Bfree>
 80041d4:	e69e      	b.n	8003f14 <_dtoa_r+0x6b4>
 80041d6:	2400      	movs	r4, #0
 80041d8:	4626      	mov	r6, r4
 80041da:	e7e1      	b.n	80041a0 <_dtoa_r+0x940>
 80041dc:	46c3      	mov	fp, r8
 80041de:	4626      	mov	r6, r4
 80041e0:	e59d      	b.n	8003d1e <_dtoa_r+0x4be>
 80041e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80c8 	beq.w	800437a <_dtoa_r+0xb1a>
 80041ea:	9b08      	ldr	r3, [sp, #32]
 80041ec:	9306      	str	r3, [sp, #24]
 80041ee:	2f00      	cmp	r7, #0
 80041f0:	dd05      	ble.n	80041fe <_dtoa_r+0x99e>
 80041f2:	4631      	mov	r1, r6
 80041f4:	463a      	mov	r2, r7
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 fc6a 	bl	8004ad0 <__lshift>
 80041fc:	4606      	mov	r6, r0
 80041fe:	f1b8 0f00 	cmp.w	r8, #0
 8004202:	d05b      	beq.n	80042bc <_dtoa_r+0xa5c>
 8004204:	4628      	mov	r0, r5
 8004206:	6871      	ldr	r1, [r6, #4]
 8004208:	f000 fa0a 	bl	8004620 <_Balloc>
 800420c:	4607      	mov	r7, r0
 800420e:	b928      	cbnz	r0, 800421c <_dtoa_r+0x9bc>
 8004210:	4602      	mov	r2, r0
 8004212:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004216:	4b81      	ldr	r3, [pc, #516]	; (800441c <_dtoa_r+0xbbc>)
 8004218:	f7ff bb36 	b.w	8003888 <_dtoa_r+0x28>
 800421c:	6932      	ldr	r2, [r6, #16]
 800421e:	f106 010c 	add.w	r1, r6, #12
 8004222:	3202      	adds	r2, #2
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	300c      	adds	r0, #12
 8004228:	f001 ff72 	bl	8006110 <memcpy>
 800422c:	2201      	movs	r2, #1
 800422e:	4639      	mov	r1, r7
 8004230:	4628      	mov	r0, r5
 8004232:	f000 fc4d 	bl	8004ad0 <__lshift>
 8004236:	46b0      	mov	r8, r6
 8004238:	4606      	mov	r6, r0
 800423a:	9b03      	ldr	r3, [sp, #12]
 800423c:	9a03      	ldr	r2, [sp, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	9308      	str	r3, [sp, #32]
 8004242:	9b06      	ldr	r3, [sp, #24]
 8004244:	4413      	add	r3, r2
 8004246:	930b      	str	r3, [sp, #44]	; 0x2c
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	930a      	str	r3, [sp, #40]	; 0x28
 8004250:	9b08      	ldr	r3, [sp, #32]
 8004252:	4621      	mov	r1, r4
 8004254:	3b01      	subs	r3, #1
 8004256:	4650      	mov	r0, sl
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	f7ff fa77 	bl	800374c <quorem>
 800425e:	4641      	mov	r1, r8
 8004260:	9006      	str	r0, [sp, #24]
 8004262:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004266:	4650      	mov	r0, sl
 8004268:	f000 fc9e 	bl	8004ba8 <__mcmp>
 800426c:	4632      	mov	r2, r6
 800426e:	9009      	str	r0, [sp, #36]	; 0x24
 8004270:	4621      	mov	r1, r4
 8004272:	4628      	mov	r0, r5
 8004274:	f000 fcb4 	bl	8004be0 <__mdiff>
 8004278:	68c2      	ldr	r2, [r0, #12]
 800427a:	4607      	mov	r7, r0
 800427c:	bb02      	cbnz	r2, 80042c0 <_dtoa_r+0xa60>
 800427e:	4601      	mov	r1, r0
 8004280:	4650      	mov	r0, sl
 8004282:	f000 fc91 	bl	8004ba8 <__mcmp>
 8004286:	4602      	mov	r2, r0
 8004288:	4639      	mov	r1, r7
 800428a:	4628      	mov	r0, r5
 800428c:	920c      	str	r2, [sp, #48]	; 0x30
 800428e:	f000 fa07 	bl	80046a0 <_Bfree>
 8004292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004296:	9f08      	ldr	r7, [sp, #32]
 8004298:	ea43 0102 	orr.w	r1, r3, r2
 800429c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800429e:	4319      	orrs	r1, r3
 80042a0:	d110      	bne.n	80042c4 <_dtoa_r+0xa64>
 80042a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80042a6:	d029      	beq.n	80042fc <_dtoa_r+0xa9c>
 80042a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dd02      	ble.n	80042b4 <_dtoa_r+0xa54>
 80042ae:	9b06      	ldr	r3, [sp, #24]
 80042b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	f883 9000 	strb.w	r9, [r3]
 80042ba:	e777      	b.n	80041ac <_dtoa_r+0x94c>
 80042bc:	4630      	mov	r0, r6
 80042be:	e7ba      	b.n	8004236 <_dtoa_r+0x9d6>
 80042c0:	2201      	movs	r2, #1
 80042c2:	e7e1      	b.n	8004288 <_dtoa_r+0xa28>
 80042c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db04      	blt.n	80042d4 <_dtoa_r+0xa74>
 80042ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80042cc:	430b      	orrs	r3, r1
 80042ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042d0:	430b      	orrs	r3, r1
 80042d2:	d120      	bne.n	8004316 <_dtoa_r+0xab6>
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	dded      	ble.n	80042b4 <_dtoa_r+0xa54>
 80042d8:	4651      	mov	r1, sl
 80042da:	2201      	movs	r2, #1
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 fbf7 	bl	8004ad0 <__lshift>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4682      	mov	sl, r0
 80042e6:	f000 fc5f 	bl	8004ba8 <__mcmp>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	dc03      	bgt.n	80042f6 <_dtoa_r+0xa96>
 80042ee:	d1e1      	bne.n	80042b4 <_dtoa_r+0xa54>
 80042f0:	f019 0f01 	tst.w	r9, #1
 80042f4:	d0de      	beq.n	80042b4 <_dtoa_r+0xa54>
 80042f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80042fa:	d1d8      	bne.n	80042ae <_dtoa_r+0xa4e>
 80042fc:	2339      	movs	r3, #57	; 0x39
 80042fe:	9a04      	ldr	r2, [sp, #16]
 8004300:	7013      	strb	r3, [r2, #0]
 8004302:	463b      	mov	r3, r7
 8004304:	461f      	mov	r7, r3
 8004306:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800430a:	3b01      	subs	r3, #1
 800430c:	2a39      	cmp	r2, #57	; 0x39
 800430e:	d06b      	beq.n	80043e8 <_dtoa_r+0xb88>
 8004310:	3201      	adds	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e74a      	b.n	80041ac <_dtoa_r+0x94c>
 8004316:	2a00      	cmp	r2, #0
 8004318:	dd07      	ble.n	800432a <_dtoa_r+0xaca>
 800431a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800431e:	d0ed      	beq.n	80042fc <_dtoa_r+0xa9c>
 8004320:	9a04      	ldr	r2, [sp, #16]
 8004322:	f109 0301 	add.w	r3, r9, #1
 8004326:	7013      	strb	r3, [r2, #0]
 8004328:	e740      	b.n	80041ac <_dtoa_r+0x94c>
 800432a:	9b08      	ldr	r3, [sp, #32]
 800432c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800432e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004332:	4293      	cmp	r3, r2
 8004334:	d042      	beq.n	80043bc <_dtoa_r+0xb5c>
 8004336:	4651      	mov	r1, sl
 8004338:	2300      	movs	r3, #0
 800433a:	220a      	movs	r2, #10
 800433c:	4628      	mov	r0, r5
 800433e:	f000 f9d1 	bl	80046e4 <__multadd>
 8004342:	45b0      	cmp	r8, r6
 8004344:	4682      	mov	sl, r0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f04f 020a 	mov.w	r2, #10
 800434e:	4641      	mov	r1, r8
 8004350:	4628      	mov	r0, r5
 8004352:	d107      	bne.n	8004364 <_dtoa_r+0xb04>
 8004354:	f000 f9c6 	bl	80046e4 <__multadd>
 8004358:	4680      	mov	r8, r0
 800435a:	4606      	mov	r6, r0
 800435c:	9b08      	ldr	r3, [sp, #32]
 800435e:	3301      	adds	r3, #1
 8004360:	9308      	str	r3, [sp, #32]
 8004362:	e775      	b.n	8004250 <_dtoa_r+0x9f0>
 8004364:	f000 f9be 	bl	80046e4 <__multadd>
 8004368:	4631      	mov	r1, r6
 800436a:	4680      	mov	r8, r0
 800436c:	2300      	movs	r3, #0
 800436e:	220a      	movs	r2, #10
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f9b7 	bl	80046e4 <__multadd>
 8004376:	4606      	mov	r6, r0
 8004378:	e7f0      	b.n	800435c <_dtoa_r+0xafc>
 800437a:	9b08      	ldr	r3, [sp, #32]
 800437c:	9306      	str	r3, [sp, #24]
 800437e:	9f03      	ldr	r7, [sp, #12]
 8004380:	4621      	mov	r1, r4
 8004382:	4650      	mov	r0, sl
 8004384:	f7ff f9e2 	bl	800374c <quorem>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800438e:	f807 9b01 	strb.w	r9, [r7], #1
 8004392:	1afa      	subs	r2, r7, r3
 8004394:	9b06      	ldr	r3, [sp, #24]
 8004396:	4293      	cmp	r3, r2
 8004398:	dd07      	ble.n	80043aa <_dtoa_r+0xb4a>
 800439a:	4651      	mov	r1, sl
 800439c:	2300      	movs	r3, #0
 800439e:	220a      	movs	r2, #10
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f99f 	bl	80046e4 <__multadd>
 80043a6:	4682      	mov	sl, r0
 80043a8:	e7ea      	b.n	8004380 <_dtoa_r+0xb20>
 80043aa:	9b06      	ldr	r3, [sp, #24]
 80043ac:	f04f 0800 	mov.w	r8, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bfcc      	ite	gt
 80043b4:	461f      	movgt	r7, r3
 80043b6:	2701      	movle	r7, #1
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	441f      	add	r7, r3
 80043bc:	4651      	mov	r1, sl
 80043be:	2201      	movs	r2, #1
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 fb85 	bl	8004ad0 <__lshift>
 80043c6:	4621      	mov	r1, r4
 80043c8:	4682      	mov	sl, r0
 80043ca:	f000 fbed 	bl	8004ba8 <__mcmp>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	dc97      	bgt.n	8004302 <_dtoa_r+0xaa2>
 80043d2:	d102      	bne.n	80043da <_dtoa_r+0xb7a>
 80043d4:	f019 0f01 	tst.w	r9, #1
 80043d8:	d193      	bne.n	8004302 <_dtoa_r+0xaa2>
 80043da:	463b      	mov	r3, r7
 80043dc:	461f      	mov	r7, r3
 80043de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043e2:	2a30      	cmp	r2, #48	; 0x30
 80043e4:	d0fa      	beq.n	80043dc <_dtoa_r+0xb7c>
 80043e6:	e6e1      	b.n	80041ac <_dtoa_r+0x94c>
 80043e8:	9a03      	ldr	r2, [sp, #12]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d18a      	bne.n	8004304 <_dtoa_r+0xaa4>
 80043ee:	2331      	movs	r3, #49	; 0x31
 80043f0:	f10b 0b01 	add.w	fp, fp, #1
 80043f4:	e797      	b.n	8004326 <_dtoa_r+0xac6>
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <_dtoa_r+0xbc0>)
 80043f8:	f7ff ba9f 	b.w	800393a <_dtoa_r+0xda>
 80043fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f47f aa77 	bne.w	80038f2 <_dtoa_r+0x92>
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <_dtoa_r+0xbc4>)
 8004406:	f7ff ba98 	b.w	800393a <_dtoa_r+0xda>
 800440a:	9b06      	ldr	r3, [sp, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dcb6      	bgt.n	800437e <_dtoa_r+0xb1e>
 8004410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004412:	2b02      	cmp	r3, #2
 8004414:	f73f aeb5 	bgt.w	8004182 <_dtoa_r+0x922>
 8004418:	e7b1      	b.n	800437e <_dtoa_r+0xb1e>
 800441a:	bf00      	nop
 800441c:	08006f5f 	.word	0x08006f5f
 8004420:	08006eba 	.word	0x08006eba
 8004424:	08006ee3 	.word	0x08006ee3

08004428 <_free_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4605      	mov	r5, r0
 800442c:	2900      	cmp	r1, #0
 800442e:	d040      	beq.n	80044b2 <_free_r+0x8a>
 8004430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004434:	1f0c      	subs	r4, r1, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfb8      	it	lt
 800443a:	18e4      	addlt	r4, r4, r3
 800443c:	f000 f8e4 	bl	8004608 <__malloc_lock>
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <_free_r+0x8c>)
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	b933      	cbnz	r3, 8004454 <_free_r+0x2c>
 8004446:	6063      	str	r3, [r4, #4]
 8004448:	6014      	str	r4, [r2, #0]
 800444a:	4628      	mov	r0, r5
 800444c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004450:	f000 b8e0 	b.w	8004614 <__malloc_unlock>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d908      	bls.n	800446a <_free_r+0x42>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	1821      	adds	r1, r4, r0
 800445c:	428b      	cmp	r3, r1
 800445e:	bf01      	itttt	eq
 8004460:	6819      	ldreq	r1, [r3, #0]
 8004462:	685b      	ldreq	r3, [r3, #4]
 8004464:	1809      	addeq	r1, r1, r0
 8004466:	6021      	streq	r1, [r4, #0]
 8004468:	e7ed      	b.n	8004446 <_free_r+0x1e>
 800446a:	461a      	mov	r2, r3
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	b10b      	cbz	r3, 8004474 <_free_r+0x4c>
 8004470:	42a3      	cmp	r3, r4
 8004472:	d9fa      	bls.n	800446a <_free_r+0x42>
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	1850      	adds	r0, r2, r1
 8004478:	42a0      	cmp	r0, r4
 800447a:	d10b      	bne.n	8004494 <_free_r+0x6c>
 800447c:	6820      	ldr	r0, [r4, #0]
 800447e:	4401      	add	r1, r0
 8004480:	1850      	adds	r0, r2, r1
 8004482:	4283      	cmp	r3, r0
 8004484:	6011      	str	r1, [r2, #0]
 8004486:	d1e0      	bne.n	800444a <_free_r+0x22>
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4408      	add	r0, r1
 800448e:	6010      	str	r0, [r2, #0]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	e7da      	b.n	800444a <_free_r+0x22>
 8004494:	d902      	bls.n	800449c <_free_r+0x74>
 8004496:	230c      	movs	r3, #12
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	e7d6      	b.n	800444a <_free_r+0x22>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	1821      	adds	r1, r4, r0
 80044a0:	428b      	cmp	r3, r1
 80044a2:	bf01      	itttt	eq
 80044a4:	6819      	ldreq	r1, [r3, #0]
 80044a6:	685b      	ldreq	r3, [r3, #4]
 80044a8:	1809      	addeq	r1, r1, r0
 80044aa:	6021      	streq	r1, [r4, #0]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	6054      	str	r4, [r2, #4]
 80044b0:	e7cb      	b.n	800444a <_free_r+0x22>
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20000374 	.word	0x20000374

080044b8 <malloc>:
 80044b8:	4b02      	ldr	r3, [pc, #8]	; (80044c4 <malloc+0xc>)
 80044ba:	4601      	mov	r1, r0
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	f000 b823 	b.w	8004508 <_malloc_r>
 80044c2:	bf00      	nop
 80044c4:	20000064 	.word	0x20000064

080044c8 <sbrk_aligned>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4e0e      	ldr	r6, [pc, #56]	; (8004504 <sbrk_aligned+0x3c>)
 80044cc:	460c      	mov	r4, r1
 80044ce:	6831      	ldr	r1, [r6, #0]
 80044d0:	4605      	mov	r5, r0
 80044d2:	b911      	cbnz	r1, 80044da <sbrk_aligned+0x12>
 80044d4:	f001 fe0c 	bl	80060f0 <_sbrk_r>
 80044d8:	6030      	str	r0, [r6, #0]
 80044da:	4621      	mov	r1, r4
 80044dc:	4628      	mov	r0, r5
 80044de:	f001 fe07 	bl	80060f0 <_sbrk_r>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d00a      	beq.n	80044fc <sbrk_aligned+0x34>
 80044e6:	1cc4      	adds	r4, r0, #3
 80044e8:	f024 0403 	bic.w	r4, r4, #3
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d007      	beq.n	8004500 <sbrk_aligned+0x38>
 80044f0:	1a21      	subs	r1, r4, r0
 80044f2:	4628      	mov	r0, r5
 80044f4:	f001 fdfc 	bl	80060f0 <_sbrk_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d101      	bne.n	8004500 <sbrk_aligned+0x38>
 80044fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004500:	4620      	mov	r0, r4
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	20000378 	.word	0x20000378

08004508 <_malloc_r>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	2d00      	cmp	r5, #0
 800451c:	4607      	mov	r7, r0
 800451e:	db01      	blt.n	8004524 <_malloc_r+0x1c>
 8004520:	42a9      	cmp	r1, r5
 8004522:	d905      	bls.n	8004530 <_malloc_r+0x28>
 8004524:	230c      	movs	r3, #12
 8004526:	2600      	movs	r6, #0
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4630      	mov	r0, r6
 800452c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004604 <_malloc_r+0xfc>
 8004534:	f000 f868 	bl	8004608 <__malloc_lock>
 8004538:	f8d8 3000 	ldr.w	r3, [r8]
 800453c:	461c      	mov	r4, r3
 800453e:	bb5c      	cbnz	r4, 8004598 <_malloc_r+0x90>
 8004540:	4629      	mov	r1, r5
 8004542:	4638      	mov	r0, r7
 8004544:	f7ff ffc0 	bl	80044c8 <sbrk_aligned>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	4604      	mov	r4, r0
 800454c:	d155      	bne.n	80045fa <_malloc_r+0xf2>
 800454e:	f8d8 4000 	ldr.w	r4, [r8]
 8004552:	4626      	mov	r6, r4
 8004554:	2e00      	cmp	r6, #0
 8004556:	d145      	bne.n	80045e4 <_malloc_r+0xdc>
 8004558:	2c00      	cmp	r4, #0
 800455a:	d048      	beq.n	80045ee <_malloc_r+0xe6>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	4631      	mov	r1, r6
 8004560:	4638      	mov	r0, r7
 8004562:	eb04 0903 	add.w	r9, r4, r3
 8004566:	f001 fdc3 	bl	80060f0 <_sbrk_r>
 800456a:	4581      	cmp	r9, r0
 800456c:	d13f      	bne.n	80045ee <_malloc_r+0xe6>
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	4638      	mov	r0, r7
 8004572:	1a6d      	subs	r5, r5, r1
 8004574:	4629      	mov	r1, r5
 8004576:	f7ff ffa7 	bl	80044c8 <sbrk_aligned>
 800457a:	3001      	adds	r0, #1
 800457c:	d037      	beq.n	80045ee <_malloc_r+0xe6>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	442b      	add	r3, r5
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	f8d8 3000 	ldr.w	r3, [r8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d038      	beq.n	80045fe <_malloc_r+0xf6>
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	42a2      	cmp	r2, r4
 8004590:	d12b      	bne.n	80045ea <_malloc_r+0xe2>
 8004592:	2200      	movs	r2, #0
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	e00f      	b.n	80045b8 <_malloc_r+0xb0>
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	1b52      	subs	r2, r2, r5
 800459c:	d41f      	bmi.n	80045de <_malloc_r+0xd6>
 800459e:	2a0b      	cmp	r2, #11
 80045a0:	d917      	bls.n	80045d2 <_malloc_r+0xca>
 80045a2:	1961      	adds	r1, r4, r5
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	6025      	str	r5, [r4, #0]
 80045a8:	bf18      	it	ne
 80045aa:	6059      	strne	r1, [r3, #4]
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	bf08      	it	eq
 80045b0:	f8c8 1000 	streq.w	r1, [r8]
 80045b4:	5162      	str	r2, [r4, r5]
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	4638      	mov	r0, r7
 80045ba:	f104 060b 	add.w	r6, r4, #11
 80045be:	f000 f829 	bl	8004614 <__malloc_unlock>
 80045c2:	f026 0607 	bic.w	r6, r6, #7
 80045c6:	1d23      	adds	r3, r4, #4
 80045c8:	1af2      	subs	r2, r6, r3
 80045ca:	d0ae      	beq.n	800452a <_malloc_r+0x22>
 80045cc:	1b9b      	subs	r3, r3, r6
 80045ce:	50a3      	str	r3, [r4, r2]
 80045d0:	e7ab      	b.n	800452a <_malloc_r+0x22>
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	6862      	ldr	r2, [r4, #4]
 80045d6:	d1dd      	bne.n	8004594 <_malloc_r+0x8c>
 80045d8:	f8c8 2000 	str.w	r2, [r8]
 80045dc:	e7ec      	b.n	80045b8 <_malloc_r+0xb0>
 80045de:	4623      	mov	r3, r4
 80045e0:	6864      	ldr	r4, [r4, #4]
 80045e2:	e7ac      	b.n	800453e <_malloc_r+0x36>
 80045e4:	4634      	mov	r4, r6
 80045e6:	6876      	ldr	r6, [r6, #4]
 80045e8:	e7b4      	b.n	8004554 <_malloc_r+0x4c>
 80045ea:	4613      	mov	r3, r2
 80045ec:	e7cc      	b.n	8004588 <_malloc_r+0x80>
 80045ee:	230c      	movs	r3, #12
 80045f0:	4638      	mov	r0, r7
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	f000 f80e 	bl	8004614 <__malloc_unlock>
 80045f8:	e797      	b.n	800452a <_malloc_r+0x22>
 80045fa:	6025      	str	r5, [r4, #0]
 80045fc:	e7dc      	b.n	80045b8 <_malloc_r+0xb0>
 80045fe:	605b      	str	r3, [r3, #4]
 8004600:	deff      	udf	#255	; 0xff
 8004602:	bf00      	nop
 8004604:	20000374 	.word	0x20000374

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_lock+0x8>)
 800460a:	f7ff b88a 	b.w	8003722 <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	20000370 	.word	0x20000370

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__malloc_unlock+0x8>)
 8004616:	f7ff b885 	b.w	8003724 <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	20000370 	.word	0x20000370

08004620 <_Balloc>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	69c6      	ldr	r6, [r0, #28]
 8004624:	4604      	mov	r4, r0
 8004626:	460d      	mov	r5, r1
 8004628:	b976      	cbnz	r6, 8004648 <_Balloc+0x28>
 800462a:	2010      	movs	r0, #16
 800462c:	f7ff ff44 	bl	80044b8 <malloc>
 8004630:	4602      	mov	r2, r0
 8004632:	61e0      	str	r0, [r4, #28]
 8004634:	b920      	cbnz	r0, 8004640 <_Balloc+0x20>
 8004636:	216b      	movs	r1, #107	; 0x6b
 8004638:	4b17      	ldr	r3, [pc, #92]	; (8004698 <_Balloc+0x78>)
 800463a:	4818      	ldr	r0, [pc, #96]	; (800469c <_Balloc+0x7c>)
 800463c:	f001 fd7c 	bl	8006138 <__assert_func>
 8004640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004644:	6006      	str	r6, [r0, #0]
 8004646:	60c6      	str	r6, [r0, #12]
 8004648:	69e6      	ldr	r6, [r4, #28]
 800464a:	68f3      	ldr	r3, [r6, #12]
 800464c:	b183      	cbz	r3, 8004670 <_Balloc+0x50>
 800464e:	69e3      	ldr	r3, [r4, #28]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004656:	b9b8      	cbnz	r0, 8004688 <_Balloc+0x68>
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f605 	lsl.w	r6, r1, r5
 800465e:	1d72      	adds	r2, r6, #5
 8004660:	4620      	mov	r0, r4
 8004662:	0092      	lsls	r2, r2, #2
 8004664:	f001 fd86 	bl	8006174 <_calloc_r>
 8004668:	b160      	cbz	r0, 8004684 <_Balloc+0x64>
 800466a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800466e:	e00e      	b.n	800468e <_Balloc+0x6e>
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	2104      	movs	r1, #4
 8004674:	4620      	mov	r0, r4
 8004676:	f001 fd7d 	bl	8006174 <_calloc_r>
 800467a:	69e3      	ldr	r3, [r4, #28]
 800467c:	60f0      	str	r0, [r6, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e4      	bne.n	800464e <_Balloc+0x2e>
 8004684:	2000      	movs	r0, #0
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	6802      	ldr	r2, [r0, #0]
 800468a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800468e:	2300      	movs	r3, #0
 8004690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004694:	e7f7      	b.n	8004686 <_Balloc+0x66>
 8004696:	bf00      	nop
 8004698:	08006ef0 	.word	0x08006ef0
 800469c:	08006f70 	.word	0x08006f70

080046a0 <_Bfree>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	69c6      	ldr	r6, [r0, #28]
 80046a4:	4605      	mov	r5, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	b976      	cbnz	r6, 80046c8 <_Bfree+0x28>
 80046aa:	2010      	movs	r0, #16
 80046ac:	f7ff ff04 	bl	80044b8 <malloc>
 80046b0:	4602      	mov	r2, r0
 80046b2:	61e8      	str	r0, [r5, #28]
 80046b4:	b920      	cbnz	r0, 80046c0 <_Bfree+0x20>
 80046b6:	218f      	movs	r1, #143	; 0x8f
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <_Bfree+0x3c>)
 80046ba:	4809      	ldr	r0, [pc, #36]	; (80046e0 <_Bfree+0x40>)
 80046bc:	f001 fd3c 	bl	8006138 <__assert_func>
 80046c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046c4:	6006      	str	r6, [r0, #0]
 80046c6:	60c6      	str	r6, [r0, #12]
 80046c8:	b13c      	cbz	r4, 80046da <_Bfree+0x3a>
 80046ca:	69eb      	ldr	r3, [r5, #28]
 80046cc:	6862      	ldr	r2, [r4, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046d4:	6021      	str	r1, [r4, #0]
 80046d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	08006ef0 	.word	0x08006ef0
 80046e0:	08006f70 	.word	0x08006f70

080046e4 <__multadd>:
 80046e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e8:	4607      	mov	r7, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	461e      	mov	r6, r3
 80046ee:	2000      	movs	r0, #0
 80046f0:	690d      	ldr	r5, [r1, #16]
 80046f2:	f101 0c14 	add.w	ip, r1, #20
 80046f6:	f8dc 3000 	ldr.w	r3, [ip]
 80046fa:	3001      	adds	r0, #1
 80046fc:	b299      	uxth	r1, r3
 80046fe:	fb02 6101 	mla	r1, r2, r1, r6
 8004702:	0c1e      	lsrs	r6, r3, #16
 8004704:	0c0b      	lsrs	r3, r1, #16
 8004706:	fb02 3306 	mla	r3, r2, r6, r3
 800470a:	b289      	uxth	r1, r1
 800470c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004710:	4285      	cmp	r5, r0
 8004712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004716:	f84c 1b04 	str.w	r1, [ip], #4
 800471a:	dcec      	bgt.n	80046f6 <__multadd+0x12>
 800471c:	b30e      	cbz	r6, 8004762 <__multadd+0x7e>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	42ab      	cmp	r3, r5
 8004722:	dc19      	bgt.n	8004758 <__multadd+0x74>
 8004724:	6861      	ldr	r1, [r4, #4]
 8004726:	4638      	mov	r0, r7
 8004728:	3101      	adds	r1, #1
 800472a:	f7ff ff79 	bl	8004620 <_Balloc>
 800472e:	4680      	mov	r8, r0
 8004730:	b928      	cbnz	r0, 800473e <__multadd+0x5a>
 8004732:	4602      	mov	r2, r0
 8004734:	21ba      	movs	r1, #186	; 0xba
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <__multadd+0x84>)
 8004738:	480c      	ldr	r0, [pc, #48]	; (800476c <__multadd+0x88>)
 800473a:	f001 fcfd 	bl	8006138 <__assert_func>
 800473e:	6922      	ldr	r2, [r4, #16]
 8004740:	f104 010c 	add.w	r1, r4, #12
 8004744:	3202      	adds	r2, #2
 8004746:	0092      	lsls	r2, r2, #2
 8004748:	300c      	adds	r0, #12
 800474a:	f001 fce1 	bl	8006110 <memcpy>
 800474e:	4621      	mov	r1, r4
 8004750:	4638      	mov	r0, r7
 8004752:	f7ff ffa5 	bl	80046a0 <_Bfree>
 8004756:	4644      	mov	r4, r8
 8004758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800475c:	3501      	adds	r5, #1
 800475e:	615e      	str	r6, [r3, #20]
 8004760:	6125      	str	r5, [r4, #16]
 8004762:	4620      	mov	r0, r4
 8004764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004768:	08006f5f 	.word	0x08006f5f
 800476c:	08006f70 	.word	0x08006f70

08004770 <__s2b>:
 8004770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004774:	4615      	mov	r5, r2
 8004776:	2209      	movs	r2, #9
 8004778:	461f      	mov	r7, r3
 800477a:	3308      	adds	r3, #8
 800477c:	460c      	mov	r4, r1
 800477e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004782:	4606      	mov	r6, r0
 8004784:	2201      	movs	r2, #1
 8004786:	2100      	movs	r1, #0
 8004788:	429a      	cmp	r2, r3
 800478a:	db09      	blt.n	80047a0 <__s2b+0x30>
 800478c:	4630      	mov	r0, r6
 800478e:	f7ff ff47 	bl	8004620 <_Balloc>
 8004792:	b940      	cbnz	r0, 80047a6 <__s2b+0x36>
 8004794:	4602      	mov	r2, r0
 8004796:	21d3      	movs	r1, #211	; 0xd3
 8004798:	4b18      	ldr	r3, [pc, #96]	; (80047fc <__s2b+0x8c>)
 800479a:	4819      	ldr	r0, [pc, #100]	; (8004800 <__s2b+0x90>)
 800479c:	f001 fccc 	bl	8006138 <__assert_func>
 80047a0:	0052      	lsls	r2, r2, #1
 80047a2:	3101      	adds	r1, #1
 80047a4:	e7f0      	b.n	8004788 <__s2b+0x18>
 80047a6:	9b08      	ldr	r3, [sp, #32]
 80047a8:	2d09      	cmp	r5, #9
 80047aa:	6143      	str	r3, [r0, #20]
 80047ac:	f04f 0301 	mov.w	r3, #1
 80047b0:	6103      	str	r3, [r0, #16]
 80047b2:	dd16      	ble.n	80047e2 <__s2b+0x72>
 80047b4:	f104 0909 	add.w	r9, r4, #9
 80047b8:	46c8      	mov	r8, r9
 80047ba:	442c      	add	r4, r5
 80047bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80047c0:	4601      	mov	r1, r0
 80047c2:	220a      	movs	r2, #10
 80047c4:	4630      	mov	r0, r6
 80047c6:	3b30      	subs	r3, #48	; 0x30
 80047c8:	f7ff ff8c 	bl	80046e4 <__multadd>
 80047cc:	45a0      	cmp	r8, r4
 80047ce:	d1f5      	bne.n	80047bc <__s2b+0x4c>
 80047d0:	f1a5 0408 	sub.w	r4, r5, #8
 80047d4:	444c      	add	r4, r9
 80047d6:	1b2d      	subs	r5, r5, r4
 80047d8:	1963      	adds	r3, r4, r5
 80047da:	42bb      	cmp	r3, r7
 80047dc:	db04      	blt.n	80047e8 <__s2b+0x78>
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	2509      	movs	r5, #9
 80047e4:	340a      	adds	r4, #10
 80047e6:	e7f6      	b.n	80047d6 <__s2b+0x66>
 80047e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047ec:	4601      	mov	r1, r0
 80047ee:	220a      	movs	r2, #10
 80047f0:	4630      	mov	r0, r6
 80047f2:	3b30      	subs	r3, #48	; 0x30
 80047f4:	f7ff ff76 	bl	80046e4 <__multadd>
 80047f8:	e7ee      	b.n	80047d8 <__s2b+0x68>
 80047fa:	bf00      	nop
 80047fc:	08006f5f 	.word	0x08006f5f
 8004800:	08006f70 	.word	0x08006f70

08004804 <__hi0bits>:
 8004804:	0c02      	lsrs	r2, r0, #16
 8004806:	0412      	lsls	r2, r2, #16
 8004808:	4603      	mov	r3, r0
 800480a:	b9ca      	cbnz	r2, 8004840 <__hi0bits+0x3c>
 800480c:	0403      	lsls	r3, r0, #16
 800480e:	2010      	movs	r0, #16
 8004810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004814:	bf04      	itt	eq
 8004816:	021b      	lsleq	r3, r3, #8
 8004818:	3008      	addeq	r0, #8
 800481a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800481e:	bf04      	itt	eq
 8004820:	011b      	lsleq	r3, r3, #4
 8004822:	3004      	addeq	r0, #4
 8004824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004828:	bf04      	itt	eq
 800482a:	009b      	lsleq	r3, r3, #2
 800482c:	3002      	addeq	r0, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	db05      	blt.n	800483e <__hi0bits+0x3a>
 8004832:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004836:	f100 0001 	add.w	r0, r0, #1
 800483a:	bf08      	it	eq
 800483c:	2020      	moveq	r0, #32
 800483e:	4770      	bx	lr
 8004840:	2000      	movs	r0, #0
 8004842:	e7e5      	b.n	8004810 <__hi0bits+0xc>

08004844 <__lo0bits>:
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	4602      	mov	r2, r0
 8004848:	f013 0007 	ands.w	r0, r3, #7
 800484c:	d00b      	beq.n	8004866 <__lo0bits+0x22>
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	d421      	bmi.n	8004896 <__lo0bits+0x52>
 8004852:	0798      	lsls	r0, r3, #30
 8004854:	bf49      	itett	mi
 8004856:	085b      	lsrmi	r3, r3, #1
 8004858:	089b      	lsrpl	r3, r3, #2
 800485a:	2001      	movmi	r0, #1
 800485c:	6013      	strmi	r3, [r2, #0]
 800485e:	bf5c      	itt	pl
 8004860:	2002      	movpl	r0, #2
 8004862:	6013      	strpl	r3, [r2, #0]
 8004864:	4770      	bx	lr
 8004866:	b299      	uxth	r1, r3
 8004868:	b909      	cbnz	r1, 800486e <__lo0bits+0x2a>
 800486a:	2010      	movs	r0, #16
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	b2d9      	uxtb	r1, r3
 8004870:	b909      	cbnz	r1, 8004876 <__lo0bits+0x32>
 8004872:	3008      	adds	r0, #8
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	0719      	lsls	r1, r3, #28
 8004878:	bf04      	itt	eq
 800487a:	091b      	lsreq	r3, r3, #4
 800487c:	3004      	addeq	r0, #4
 800487e:	0799      	lsls	r1, r3, #30
 8004880:	bf04      	itt	eq
 8004882:	089b      	lsreq	r3, r3, #2
 8004884:	3002      	addeq	r0, #2
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d403      	bmi.n	8004892 <__lo0bits+0x4e>
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	f100 0001 	add.w	r0, r0, #1
 8004890:	d003      	beq.n	800489a <__lo0bits+0x56>
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4770      	bx	lr
 8004896:	2000      	movs	r0, #0
 8004898:	4770      	bx	lr
 800489a:	2020      	movs	r0, #32
 800489c:	4770      	bx	lr
	...

080048a0 <__i2b>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	2101      	movs	r1, #1
 80048a6:	f7ff febb 	bl	8004620 <_Balloc>
 80048aa:	4602      	mov	r2, r0
 80048ac:	b928      	cbnz	r0, 80048ba <__i2b+0x1a>
 80048ae:	f240 1145 	movw	r1, #325	; 0x145
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <__i2b+0x24>)
 80048b4:	4804      	ldr	r0, [pc, #16]	; (80048c8 <__i2b+0x28>)
 80048b6:	f001 fc3f 	bl	8006138 <__assert_func>
 80048ba:	2301      	movs	r3, #1
 80048bc:	6144      	str	r4, [r0, #20]
 80048be:	6103      	str	r3, [r0, #16]
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	08006f5f 	.word	0x08006f5f
 80048c8:	08006f70 	.word	0x08006f70

080048cc <__multiply>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	4691      	mov	r9, r2
 80048d2:	690a      	ldr	r2, [r1, #16]
 80048d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048d8:	460c      	mov	r4, r1
 80048da:	429a      	cmp	r2, r3
 80048dc:	bfbe      	ittt	lt
 80048de:	460b      	movlt	r3, r1
 80048e0:	464c      	movlt	r4, r9
 80048e2:	4699      	movlt	r9, r3
 80048e4:	6927      	ldr	r7, [r4, #16]
 80048e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	6861      	ldr	r1, [r4, #4]
 80048ee:	eb07 060a 	add.w	r6, r7, sl
 80048f2:	42b3      	cmp	r3, r6
 80048f4:	b085      	sub	sp, #20
 80048f6:	bfb8      	it	lt
 80048f8:	3101      	addlt	r1, #1
 80048fa:	f7ff fe91 	bl	8004620 <_Balloc>
 80048fe:	b930      	cbnz	r0, 800490e <__multiply+0x42>
 8004900:	4602      	mov	r2, r0
 8004902:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <__multiply+0x148>)
 8004908:	4843      	ldr	r0, [pc, #268]	; (8004a18 <__multiply+0x14c>)
 800490a:	f001 fc15 	bl	8006138 <__assert_func>
 800490e:	f100 0514 	add.w	r5, r0, #20
 8004912:	462b      	mov	r3, r5
 8004914:	2200      	movs	r2, #0
 8004916:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800491a:	4543      	cmp	r3, r8
 800491c:	d321      	bcc.n	8004962 <__multiply+0x96>
 800491e:	f104 0314 	add.w	r3, r4, #20
 8004922:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004926:	f109 0314 	add.w	r3, r9, #20
 800492a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	1b3a      	subs	r2, r7, r4
 8004932:	3a15      	subs	r2, #21
 8004934:	f022 0203 	bic.w	r2, r2, #3
 8004938:	3204      	adds	r2, #4
 800493a:	f104 0115 	add.w	r1, r4, #21
 800493e:	428f      	cmp	r7, r1
 8004940:	bf38      	it	cc
 8004942:	2204      	movcc	r2, #4
 8004944:	9201      	str	r2, [sp, #4]
 8004946:	9a02      	ldr	r2, [sp, #8]
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	429a      	cmp	r2, r3
 800494c:	d80c      	bhi.n	8004968 <__multiply+0x9c>
 800494e:	2e00      	cmp	r6, #0
 8004950:	dd03      	ble.n	800495a <__multiply+0x8e>
 8004952:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004956:	2b00      	cmp	r3, #0
 8004958:	d05a      	beq.n	8004a10 <__multiply+0x144>
 800495a:	6106      	str	r6, [r0, #16]
 800495c:	b005      	add	sp, #20
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	f843 2b04 	str.w	r2, [r3], #4
 8004966:	e7d8      	b.n	800491a <__multiply+0x4e>
 8004968:	f8b3 a000 	ldrh.w	sl, [r3]
 800496c:	f1ba 0f00 	cmp.w	sl, #0
 8004970:	d023      	beq.n	80049ba <__multiply+0xee>
 8004972:	46a9      	mov	r9, r5
 8004974:	f04f 0c00 	mov.w	ip, #0
 8004978:	f104 0e14 	add.w	lr, r4, #20
 800497c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004980:	f8d9 1000 	ldr.w	r1, [r9]
 8004984:	fa1f fb82 	uxth.w	fp, r2
 8004988:	b289      	uxth	r1, r1
 800498a:	fb0a 110b 	mla	r1, sl, fp, r1
 800498e:	4461      	add	r1, ip
 8004990:	f8d9 c000 	ldr.w	ip, [r9]
 8004994:	0c12      	lsrs	r2, r2, #16
 8004996:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800499a:	fb0a c202 	mla	r2, sl, r2, ip
 800499e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049a2:	b289      	uxth	r1, r1
 80049a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049a8:	4577      	cmp	r7, lr
 80049aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049ae:	f849 1b04 	str.w	r1, [r9], #4
 80049b2:	d8e3      	bhi.n	800497c <__multiply+0xb0>
 80049b4:	9a01      	ldr	r2, [sp, #4]
 80049b6:	f845 c002 	str.w	ip, [r5, r2]
 80049ba:	9a03      	ldr	r2, [sp, #12]
 80049bc:	3304      	adds	r3, #4
 80049be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049c2:	f1b9 0f00 	cmp.w	r9, #0
 80049c6:	d021      	beq.n	8004a0c <__multiply+0x140>
 80049c8:	46ae      	mov	lr, r5
 80049ca:	f04f 0a00 	mov.w	sl, #0
 80049ce:	6829      	ldr	r1, [r5, #0]
 80049d0:	f104 0c14 	add.w	ip, r4, #20
 80049d4:	f8bc b000 	ldrh.w	fp, [ip]
 80049d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049dc:	b289      	uxth	r1, r1
 80049de:	fb09 220b 	mla	r2, r9, fp, r2
 80049e2:	4452      	add	r2, sl
 80049e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049e8:	f84e 1b04 	str.w	r1, [lr], #4
 80049ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80049f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80049f4:	f8be 1000 	ldrh.w	r1, [lr]
 80049f8:	4567      	cmp	r7, ip
 80049fa:	fb09 110a 	mla	r1, r9, sl, r1
 80049fe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a06:	d8e5      	bhi.n	80049d4 <__multiply+0x108>
 8004a08:	9a01      	ldr	r2, [sp, #4]
 8004a0a:	50a9      	str	r1, [r5, r2]
 8004a0c:	3504      	adds	r5, #4
 8004a0e:	e79a      	b.n	8004946 <__multiply+0x7a>
 8004a10:	3e01      	subs	r6, #1
 8004a12:	e79c      	b.n	800494e <__multiply+0x82>
 8004a14:	08006f5f 	.word	0x08006f5f
 8004a18:	08006f70 	.word	0x08006f70

08004a1c <__pow5mult>:
 8004a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a20:	4615      	mov	r5, r2
 8004a22:	f012 0203 	ands.w	r2, r2, #3
 8004a26:	4606      	mov	r6, r0
 8004a28:	460f      	mov	r7, r1
 8004a2a:	d007      	beq.n	8004a3c <__pow5mult+0x20>
 8004a2c:	4c25      	ldr	r4, [pc, #148]	; (8004ac4 <__pow5mult+0xa8>)
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	2300      	movs	r3, #0
 8004a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a36:	f7ff fe55 	bl	80046e4 <__multadd>
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	10ad      	asrs	r5, r5, #2
 8004a3e:	d03d      	beq.n	8004abc <__pow5mult+0xa0>
 8004a40:	69f4      	ldr	r4, [r6, #28]
 8004a42:	b97c      	cbnz	r4, 8004a64 <__pow5mult+0x48>
 8004a44:	2010      	movs	r0, #16
 8004a46:	f7ff fd37 	bl	80044b8 <malloc>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	61f0      	str	r0, [r6, #28]
 8004a4e:	b928      	cbnz	r0, 8004a5c <__pow5mult+0x40>
 8004a50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004a54:	4b1c      	ldr	r3, [pc, #112]	; (8004ac8 <__pow5mult+0xac>)
 8004a56:	481d      	ldr	r0, [pc, #116]	; (8004acc <__pow5mult+0xb0>)
 8004a58:	f001 fb6e 	bl	8006138 <__assert_func>
 8004a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a60:	6004      	str	r4, [r0, #0]
 8004a62:	60c4      	str	r4, [r0, #12]
 8004a64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a6c:	b94c      	cbnz	r4, 8004a82 <__pow5mult+0x66>
 8004a6e:	f240 2171 	movw	r1, #625	; 0x271
 8004a72:	4630      	mov	r0, r6
 8004a74:	f7ff ff14 	bl	80048a0 <__i2b>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a80:	6003      	str	r3, [r0, #0]
 8004a82:	f04f 0900 	mov.w	r9, #0
 8004a86:	07eb      	lsls	r3, r5, #31
 8004a88:	d50a      	bpl.n	8004aa0 <__pow5mult+0x84>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ff1c 	bl	80048cc <__multiply>
 8004a94:	4680      	mov	r8, r0
 8004a96:	4639      	mov	r1, r7
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff fe01 	bl	80046a0 <_Bfree>
 8004a9e:	4647      	mov	r7, r8
 8004aa0:	106d      	asrs	r5, r5, #1
 8004aa2:	d00b      	beq.n	8004abc <__pow5mult+0xa0>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	b938      	cbnz	r0, 8004ab8 <__pow5mult+0x9c>
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4630      	mov	r0, r6
 8004aae:	f7ff ff0d 	bl	80048cc <__multiply>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	f8c0 9000 	str.w	r9, [r0]
 8004ab8:	4604      	mov	r4, r0
 8004aba:	e7e4      	b.n	8004a86 <__pow5mult+0x6a>
 8004abc:	4638      	mov	r0, r7
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	bf00      	nop
 8004ac4:	080070c0 	.word	0x080070c0
 8004ac8:	08006ef0 	.word	0x08006ef0
 8004acc:	08006f70 	.word	0x08006f70

08004ad0 <__lshift>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	4607      	mov	r7, r0
 8004ad8:	4691      	mov	r9, r2
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6849      	ldr	r1, [r1, #4]
 8004ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ae2:	68a3      	ldr	r3, [r4, #8]
 8004ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ae8:	f108 0601 	add.w	r6, r8, #1
 8004aec:	42b3      	cmp	r3, r6
 8004aee:	db0b      	blt.n	8004b08 <__lshift+0x38>
 8004af0:	4638      	mov	r0, r7
 8004af2:	f7ff fd95 	bl	8004620 <_Balloc>
 8004af6:	4605      	mov	r5, r0
 8004af8:	b948      	cbnz	r0, 8004b0e <__lshift+0x3e>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <__lshift+0xd0>)
 8004b02:	4828      	ldr	r0, [pc, #160]	; (8004ba4 <__lshift+0xd4>)
 8004b04:	f001 fb18 	bl	8006138 <__assert_func>
 8004b08:	3101      	adds	r1, #1
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	e7ee      	b.n	8004aec <__lshift+0x1c>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f100 0114 	add.w	r1, r0, #20
 8004b14:	f100 0210 	add.w	r2, r0, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4553      	cmp	r3, sl
 8004b1c:	db33      	blt.n	8004b86 <__lshift+0xb6>
 8004b1e:	6920      	ldr	r0, [r4, #16]
 8004b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b24:	f104 0314 	add.w	r3, r4, #20
 8004b28:	f019 091f 	ands.w	r9, r9, #31
 8004b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b34:	d02b      	beq.n	8004b8e <__lshift+0xbe>
 8004b36:	468a      	mov	sl, r1
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	fa00 f009 	lsl.w	r0, r0, r9
 8004b44:	4310      	orrs	r0, r2
 8004b46:	f84a 0b04 	str.w	r0, [sl], #4
 8004b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b4e:	459c      	cmp	ip, r3
 8004b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b54:	d8f3      	bhi.n	8004b3e <__lshift+0x6e>
 8004b56:	ebac 0304 	sub.w	r3, ip, r4
 8004b5a:	3b15      	subs	r3, #21
 8004b5c:	f023 0303 	bic.w	r3, r3, #3
 8004b60:	3304      	adds	r3, #4
 8004b62:	f104 0015 	add.w	r0, r4, #21
 8004b66:	4584      	cmp	ip, r0
 8004b68:	bf38      	it	cc
 8004b6a:	2304      	movcc	r3, #4
 8004b6c:	50ca      	str	r2, [r1, r3]
 8004b6e:	b10a      	cbz	r2, 8004b74 <__lshift+0xa4>
 8004b70:	f108 0602 	add.w	r6, r8, #2
 8004b74:	3e01      	subs	r6, #1
 8004b76:	4638      	mov	r0, r7
 8004b78:	4621      	mov	r1, r4
 8004b7a:	612e      	str	r6, [r5, #16]
 8004b7c:	f7ff fd90 	bl	80046a0 <_Bfree>
 8004b80:	4628      	mov	r0, r5
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	e7c5      	b.n	8004b1a <__lshift+0x4a>
 8004b8e:	3904      	subs	r1, #4
 8004b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b94:	459c      	cmp	ip, r3
 8004b96:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b9a:	d8f9      	bhi.n	8004b90 <__lshift+0xc0>
 8004b9c:	e7ea      	b.n	8004b74 <__lshift+0xa4>
 8004b9e:	bf00      	nop
 8004ba0:	08006f5f 	.word	0x08006f5f
 8004ba4:	08006f70 	.word	0x08006f70

08004ba8 <__mcmp>:
 8004ba8:	4603      	mov	r3, r0
 8004baa:	690a      	ldr	r2, [r1, #16]
 8004bac:	6900      	ldr	r0, [r0, #16]
 8004bae:	b530      	push	{r4, r5, lr}
 8004bb0:	1a80      	subs	r0, r0, r2
 8004bb2:	d10d      	bne.n	8004bd0 <__mcmp+0x28>
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	3114      	adds	r1, #20
 8004bb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004bc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bc8:	4295      	cmp	r5, r2
 8004bca:	d002      	beq.n	8004bd2 <__mcmp+0x2a>
 8004bcc:	d304      	bcc.n	8004bd8 <__mcmp+0x30>
 8004bce:	2001      	movs	r0, #1
 8004bd0:	bd30      	pop	{r4, r5, pc}
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	d3f4      	bcc.n	8004bc0 <__mcmp+0x18>
 8004bd6:	e7fb      	b.n	8004bd0 <__mcmp+0x28>
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	e7f8      	b.n	8004bd0 <__mcmp+0x28>
	...

08004be0 <__mdiff>:
 8004be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	460d      	mov	r5, r1
 8004be6:	4607      	mov	r7, r0
 8004be8:	4611      	mov	r1, r2
 8004bea:	4628      	mov	r0, r5
 8004bec:	4614      	mov	r4, r2
 8004bee:	f7ff ffdb 	bl	8004ba8 <__mcmp>
 8004bf2:	1e06      	subs	r6, r0, #0
 8004bf4:	d111      	bne.n	8004c1a <__mdiff+0x3a>
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	f7ff fd11 	bl	8004620 <_Balloc>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	b928      	cbnz	r0, 8004c0e <__mdiff+0x2e>
 8004c02:	f240 2137 	movw	r1, #567	; 0x237
 8004c06:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <__mdiff+0x110>)
 8004c08:	483a      	ldr	r0, [pc, #232]	; (8004cf4 <__mdiff+0x114>)
 8004c0a:	f001 fa95 	bl	8006138 <__assert_func>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c14:	4610      	mov	r0, r2
 8004c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1a:	bfa4      	itt	ge
 8004c1c:	4623      	movge	r3, r4
 8004c1e:	462c      	movge	r4, r5
 8004c20:	4638      	mov	r0, r7
 8004c22:	6861      	ldr	r1, [r4, #4]
 8004c24:	bfa6      	itte	ge
 8004c26:	461d      	movge	r5, r3
 8004c28:	2600      	movge	r6, #0
 8004c2a:	2601      	movlt	r6, #1
 8004c2c:	f7ff fcf8 	bl	8004620 <_Balloc>
 8004c30:	4602      	mov	r2, r0
 8004c32:	b918      	cbnz	r0, 8004c3c <__mdiff+0x5c>
 8004c34:	f240 2145 	movw	r1, #581	; 0x245
 8004c38:	4b2d      	ldr	r3, [pc, #180]	; (8004cf0 <__mdiff+0x110>)
 8004c3a:	e7e5      	b.n	8004c08 <__mdiff+0x28>
 8004c3c:	f102 0814 	add.w	r8, r2, #20
 8004c40:	46c2      	mov	sl, r8
 8004c42:	f04f 0c00 	mov.w	ip, #0
 8004c46:	6927      	ldr	r7, [r4, #16]
 8004c48:	60c6      	str	r6, [r0, #12]
 8004c4a:	692e      	ldr	r6, [r5, #16]
 8004c4c:	f104 0014 	add.w	r0, r4, #20
 8004c50:	f105 0914 	add.w	r9, r5, #20
 8004c54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004c58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c5c:	3410      	adds	r4, #16
 8004c5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004c62:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c66:	fa1f f18b 	uxth.w	r1, fp
 8004c6a:	4461      	add	r1, ip
 8004c6c:	fa1f fc83 	uxth.w	ip, r3
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	eba1 010c 	sub.w	r1, r1, ip
 8004c76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c7e:	b289      	uxth	r1, r1
 8004c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004c84:	454e      	cmp	r6, r9
 8004c86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c8a:	f84a 1b04 	str.w	r1, [sl], #4
 8004c8e:	d8e6      	bhi.n	8004c5e <__mdiff+0x7e>
 8004c90:	1b73      	subs	r3, r6, r5
 8004c92:	3b15      	subs	r3, #21
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	3515      	adds	r5, #21
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	42ae      	cmp	r6, r5
 8004c9e:	bf38      	it	cc
 8004ca0:	2304      	movcc	r3, #4
 8004ca2:	4418      	add	r0, r3
 8004ca4:	4443      	add	r3, r8
 8004ca6:	461e      	mov	r6, r3
 8004ca8:	4605      	mov	r5, r0
 8004caa:	4575      	cmp	r5, lr
 8004cac:	d30e      	bcc.n	8004ccc <__mdiff+0xec>
 8004cae:	f10e 0103 	add.w	r1, lr, #3
 8004cb2:	1a09      	subs	r1, r1, r0
 8004cb4:	f021 0103 	bic.w	r1, r1, #3
 8004cb8:	3803      	subs	r0, #3
 8004cba:	4586      	cmp	lr, r0
 8004cbc:	bf38      	it	cc
 8004cbe:	2100      	movcc	r1, #0
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004cc6:	b189      	cbz	r1, 8004cec <__mdiff+0x10c>
 8004cc8:	6117      	str	r7, [r2, #16]
 8004cca:	e7a3      	b.n	8004c14 <__mdiff+0x34>
 8004ccc:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cd0:	fa1f f188 	uxth.w	r1, r8
 8004cd4:	4461      	add	r1, ip
 8004cd6:	140c      	asrs	r4, r1, #16
 8004cd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cdc:	b289      	uxth	r1, r1
 8004cde:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004ce2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004ce6:	f846 1b04 	str.w	r1, [r6], #4
 8004cea:	e7de      	b.n	8004caa <__mdiff+0xca>
 8004cec:	3f01      	subs	r7, #1
 8004cee:	e7e8      	b.n	8004cc2 <__mdiff+0xe2>
 8004cf0:	08006f5f 	.word	0x08006f5f
 8004cf4:	08006f70 	.word	0x08006f70

08004cf8 <__ulp>:
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <__ulp+0x3c>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dc08      	bgt.n	8004d16 <__ulp+0x1e>
 8004d04:	425b      	negs	r3, r3
 8004d06:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004d0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004d0e:	da04      	bge.n	8004d1a <__ulp+0x22>
 8004d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d14:	4113      	asrs	r3, r2
 8004d16:	2200      	movs	r2, #0
 8004d18:	e008      	b.n	8004d2c <__ulp+0x34>
 8004d1a:	f1a2 0314 	sub.w	r3, r2, #20
 8004d1e:	2b1e      	cmp	r3, #30
 8004d20:	bfd6      	itet	le
 8004d22:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004d26:	2201      	movgt	r2, #1
 8004d28:	40da      	lsrle	r2, r3
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	7ff00000 	.word	0x7ff00000

08004d38 <__b2d>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	6905      	ldr	r5, [r0, #16]
 8004d3c:	f100 0714 	add.w	r7, r0, #20
 8004d40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004d44:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004d48:	1f2e      	subs	r6, r5, #4
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7ff fd5a 	bl	8004804 <__hi0bits>
 8004d50:	f1c0 0220 	rsb	r2, r0, #32
 8004d54:	280a      	cmp	r0, #10
 8004d56:	4603      	mov	r3, r0
 8004d58:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004dc4 <__b2d+0x8c>
 8004d5c:	600a      	str	r2, [r1, #0]
 8004d5e:	dc12      	bgt.n	8004d86 <__b2d+0x4e>
 8004d60:	f1c0 0e0b 	rsb	lr, r0, #11
 8004d64:	fa24 f20e 	lsr.w	r2, r4, lr
 8004d68:	42b7      	cmp	r7, r6
 8004d6a:	ea42 010c 	orr.w	r1, r2, ip
 8004d6e:	bf2c      	ite	cs
 8004d70:	2200      	movcs	r2, #0
 8004d72:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004d76:	3315      	adds	r3, #21
 8004d78:	fa04 f303 	lsl.w	r3, r4, r3
 8004d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d80:	431a      	orrs	r2, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d86:	42b7      	cmp	r7, r6
 8004d88:	bf2e      	itee	cs
 8004d8a:	2200      	movcs	r2, #0
 8004d8c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004d90:	f1a5 0608 	subcc.w	r6, r5, #8
 8004d94:	3b0b      	subs	r3, #11
 8004d96:	d012      	beq.n	8004dbe <__b2d+0x86>
 8004d98:	f1c3 0520 	rsb	r5, r3, #32
 8004d9c:	fa22 f105 	lsr.w	r1, r2, r5
 8004da0:	409c      	lsls	r4, r3
 8004da2:	430c      	orrs	r4, r1
 8004da4:	42be      	cmp	r6, r7
 8004da6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8004daa:	bf94      	ite	ls
 8004dac:	2400      	movls	r4, #0
 8004dae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004db2:	409a      	lsls	r2, r3
 8004db4:	40ec      	lsrs	r4, r5
 8004db6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dba:	4322      	orrs	r2, r4
 8004dbc:	e7e1      	b.n	8004d82 <__b2d+0x4a>
 8004dbe:	ea44 010c 	orr.w	r1, r4, ip
 8004dc2:	e7de      	b.n	8004d82 <__b2d+0x4a>
 8004dc4:	3ff00000 	.word	0x3ff00000

08004dc8 <__d2b>:
 8004dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dca:	2101      	movs	r1, #1
 8004dcc:	4617      	mov	r7, r2
 8004dce:	461c      	mov	r4, r3
 8004dd0:	9e08      	ldr	r6, [sp, #32]
 8004dd2:	f7ff fc25 	bl	8004620 <_Balloc>
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	b930      	cbnz	r0, 8004de8 <__d2b+0x20>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	f240 310f 	movw	r1, #783	; 0x30f
 8004de0:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <__d2b+0xa4>)
 8004de2:	4823      	ldr	r0, [pc, #140]	; (8004e70 <__d2b+0xa8>)
 8004de4:	f001 f9a8 	bl	8006138 <__assert_func>
 8004de8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004dec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004df0:	bb24      	cbnz	r4, 8004e3c <__d2b+0x74>
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	d026      	beq.n	8004e46 <__d2b+0x7e>
 8004df8:	4668      	mov	r0, sp
 8004dfa:	9700      	str	r7, [sp, #0]
 8004dfc:	f7ff fd22 	bl	8004844 <__lo0bits>
 8004e00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e04:	b1e8      	cbz	r0, 8004e42 <__d2b+0x7a>
 8004e06:	f1c0 0320 	rsb	r3, r0, #32
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	40c2      	lsrs	r2, r0
 8004e12:	616b      	str	r3, [r5, #20]
 8004e14:	9201      	str	r2, [sp, #4]
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf14      	ite	ne
 8004e1c:	2102      	movne	r1, #2
 8004e1e:	2101      	moveq	r1, #1
 8004e20:	61ab      	str	r3, [r5, #24]
 8004e22:	6129      	str	r1, [r5, #16]
 8004e24:	b1bc      	cbz	r4, 8004e56 <__d2b+0x8e>
 8004e26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e2a:	4404      	add	r4, r0
 8004e2c:	6034      	str	r4, [r6, #0]
 8004e2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e34:	6018      	str	r0, [r3, #0]
 8004e36:	4628      	mov	r0, r5
 8004e38:	b003      	add	sp, #12
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e40:	e7d7      	b.n	8004df2 <__d2b+0x2a>
 8004e42:	6169      	str	r1, [r5, #20]
 8004e44:	e7e7      	b.n	8004e16 <__d2b+0x4e>
 8004e46:	a801      	add	r0, sp, #4
 8004e48:	f7ff fcfc 	bl	8004844 <__lo0bits>
 8004e4c:	9b01      	ldr	r3, [sp, #4]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	616b      	str	r3, [r5, #20]
 8004e52:	3020      	adds	r0, #32
 8004e54:	e7e5      	b.n	8004e22 <__d2b+0x5a>
 8004e56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e5a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004e5e:	6030      	str	r0, [r6, #0]
 8004e60:	6918      	ldr	r0, [r3, #16]
 8004e62:	f7ff fccf 	bl	8004804 <__hi0bits>
 8004e66:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e6a:	e7e2      	b.n	8004e32 <__d2b+0x6a>
 8004e6c:	08006f5f 	.word	0x08006f5f
 8004e70:	08006f70 	.word	0x08006f70

08004e74 <__ratio>:
 8004e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	4688      	mov	r8, r1
 8004e7a:	4669      	mov	r1, sp
 8004e7c:	4681      	mov	r9, r0
 8004e7e:	f7ff ff5b 	bl	8004d38 <__b2d>
 8004e82:	460f      	mov	r7, r1
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	4640      	mov	r0, r8
 8004e8a:	a901      	add	r1, sp, #4
 8004e8c:	f7ff ff54 	bl	8004d38 <__b2d>
 8004e90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004e94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004e98:	468b      	mov	fp, r1
 8004e9a:	eba3 0c02 	sub.w	ip, r3, r2
 8004e9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bfd5      	itete	le
 8004eac:	460a      	movle	r2, r1
 8004eae:	462a      	movgt	r2, r5
 8004eb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004eb4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004eb8:	bfd8      	it	le
 8004eba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004ebe:	465b      	mov	r3, fp
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7fb fc31 	bl	800072c <__aeabi_ddiv>
 8004eca:	b003      	add	sp, #12
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ed0 <__copybits>:
 8004ed0:	3901      	subs	r1, #1
 8004ed2:	b570      	push	{r4, r5, r6, lr}
 8004ed4:	1149      	asrs	r1, r1, #5
 8004ed6:	6914      	ldr	r4, [r2, #16]
 8004ed8:	3101      	adds	r1, #1
 8004eda:	f102 0314 	add.w	r3, r2, #20
 8004ede:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004ee2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ee6:	1f05      	subs	r5, r0, #4
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d30c      	bcc.n	8004f06 <__copybits+0x36>
 8004eec:	1aa3      	subs	r3, r4, r2
 8004eee:	3b11      	subs	r3, #17
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	3211      	adds	r2, #17
 8004ef6:	42a2      	cmp	r2, r4
 8004ef8:	bf88      	it	hi
 8004efa:	2300      	movhi	r3, #0
 8004efc:	4418      	add	r0, r3
 8004efe:	2300      	movs	r3, #0
 8004f00:	4288      	cmp	r0, r1
 8004f02:	d305      	bcc.n	8004f10 <__copybits+0x40>
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	f853 6b04 	ldr.w	r6, [r3], #4
 8004f0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8004f0e:	e7eb      	b.n	8004ee8 <__copybits+0x18>
 8004f10:	f840 3b04 	str.w	r3, [r0], #4
 8004f14:	e7f4      	b.n	8004f00 <__copybits+0x30>

08004f16 <__any_on>:
 8004f16:	f100 0214 	add.w	r2, r0, #20
 8004f1a:	6900      	ldr	r0, [r0, #16]
 8004f1c:	114b      	asrs	r3, r1, #5
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	b510      	push	{r4, lr}
 8004f22:	db11      	blt.n	8004f48 <__any_on+0x32>
 8004f24:	dd0a      	ble.n	8004f3c <__any_on+0x26>
 8004f26:	f011 011f 	ands.w	r1, r1, #31
 8004f2a:	d007      	beq.n	8004f3c <__any_on+0x26>
 8004f2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004f30:	fa24 f001 	lsr.w	r0, r4, r1
 8004f34:	fa00 f101 	lsl.w	r1, r0, r1
 8004f38:	428c      	cmp	r4, r1
 8004f3a:	d10b      	bne.n	8004f54 <__any_on+0x3e>
 8004f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d803      	bhi.n	8004f4c <__any_on+0x36>
 8004f44:	2000      	movs	r0, #0
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	4603      	mov	r3, r0
 8004f4a:	e7f7      	b.n	8004f3c <__any_on+0x26>
 8004f4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d0f5      	beq.n	8004f40 <__any_on+0x2a>
 8004f54:	2001      	movs	r0, #1
 8004f56:	e7f6      	b.n	8004f46 <__any_on+0x30>

08004f58 <sulp>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	460f      	mov	r7, r1
 8004f5e:	4690      	mov	r8, r2
 8004f60:	f7ff feca 	bl	8004cf8 <__ulp>
 8004f64:	4604      	mov	r4, r0
 8004f66:	460d      	mov	r5, r1
 8004f68:	f1b8 0f00 	cmp.w	r8, #0
 8004f6c:	d011      	beq.n	8004f92 <sulp+0x3a>
 8004f6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004f72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd0b      	ble.n	8004f92 <sulp+0x3a>
 8004f7a:	2400      	movs	r4, #0
 8004f7c:	051b      	lsls	r3, r3, #20
 8004f7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004f82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004f86:	4622      	mov	r2, r4
 8004f88:	462b      	mov	r3, r5
 8004f8a:	f7fb faa5 	bl	80004d8 <__aeabi_dmul>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	460d      	mov	r5, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9a:	0000      	movs	r0, r0
 8004f9c:	0000      	movs	r0, r0
	...

08004fa0 <_strtod_l>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	b09f      	sub	sp, #124	; 0x7c
 8004fa6:	9217      	str	r2, [sp, #92]	; 0x5c
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	921a      	str	r2, [sp, #104]	; 0x68
 8004fae:	460d      	mov	r5, r1
 8004fb0:	f04f 0800 	mov.w	r8, #0
 8004fb4:	f04f 0900 	mov.w	r9, #0
 8004fb8:	460a      	mov	r2, r1
 8004fba:	9219      	str	r2, [sp, #100]	; 0x64
 8004fbc:	7811      	ldrb	r1, [r2, #0]
 8004fbe:	292b      	cmp	r1, #43	; 0x2b
 8004fc0:	d04a      	beq.n	8005058 <_strtod_l+0xb8>
 8004fc2:	d838      	bhi.n	8005036 <_strtod_l+0x96>
 8004fc4:	290d      	cmp	r1, #13
 8004fc6:	d832      	bhi.n	800502e <_strtod_l+0x8e>
 8004fc8:	2908      	cmp	r1, #8
 8004fca:	d832      	bhi.n	8005032 <_strtod_l+0x92>
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d03b      	beq.n	8005048 <_strtod_l+0xa8>
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	920e      	str	r2, [sp, #56]	; 0x38
 8004fd4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004fd6:	7832      	ldrb	r2, [r6, #0]
 8004fd8:	2a30      	cmp	r2, #48	; 0x30
 8004fda:	f040 80b2 	bne.w	8005142 <_strtod_l+0x1a2>
 8004fde:	7872      	ldrb	r2, [r6, #1]
 8004fe0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004fe4:	2a58      	cmp	r2, #88	; 0x58
 8004fe6:	d16e      	bne.n	80050c6 <_strtod_l+0x126>
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fec:	4620      	mov	r0, r4
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	ab1a      	add	r3, sp, #104	; 0x68
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4a8c      	ldr	r2, [pc, #560]	; (8005228 <_strtod_l+0x288>)
 8004ff6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004ff8:	a919      	add	r1, sp, #100	; 0x64
 8004ffa:	f001 f937 	bl	800626c <__gethex>
 8004ffe:	f010 070f 	ands.w	r7, r0, #15
 8005002:	4605      	mov	r5, r0
 8005004:	d005      	beq.n	8005012 <_strtod_l+0x72>
 8005006:	2f06      	cmp	r7, #6
 8005008:	d128      	bne.n	800505c <_strtod_l+0xbc>
 800500a:	2300      	movs	r3, #0
 800500c:	3601      	adds	r6, #1
 800500e:	9619      	str	r6, [sp, #100]	; 0x64
 8005010:	930e      	str	r3, [sp, #56]	; 0x38
 8005012:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005014:	2b00      	cmp	r3, #0
 8005016:	f040 85a0 	bne.w	8005b5a <_strtod_l+0xbba>
 800501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800501c:	b1cb      	cbz	r3, 8005052 <_strtod_l+0xb2>
 800501e:	4642      	mov	r2, r8
 8005020:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	b01f      	add	sp, #124	; 0x7c
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502e:	2920      	cmp	r1, #32
 8005030:	d1ce      	bne.n	8004fd0 <_strtod_l+0x30>
 8005032:	3201      	adds	r2, #1
 8005034:	e7c1      	b.n	8004fba <_strtod_l+0x1a>
 8005036:	292d      	cmp	r1, #45	; 0x2d
 8005038:	d1ca      	bne.n	8004fd0 <_strtod_l+0x30>
 800503a:	2101      	movs	r1, #1
 800503c:	910e      	str	r1, [sp, #56]	; 0x38
 800503e:	1c51      	adds	r1, r2, #1
 8005040:	9119      	str	r1, [sp, #100]	; 0x64
 8005042:	7852      	ldrb	r2, [r2, #1]
 8005044:	2a00      	cmp	r2, #0
 8005046:	d1c5      	bne.n	8004fd4 <_strtod_l+0x34>
 8005048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800504a:	9519      	str	r5, [sp, #100]	; 0x64
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8582 	bne.w	8005b56 <_strtod_l+0xbb6>
 8005052:	4642      	mov	r2, r8
 8005054:	464b      	mov	r3, r9
 8005056:	e7e5      	b.n	8005024 <_strtod_l+0x84>
 8005058:	2100      	movs	r1, #0
 800505a:	e7ef      	b.n	800503c <_strtod_l+0x9c>
 800505c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800505e:	b13a      	cbz	r2, 8005070 <_strtod_l+0xd0>
 8005060:	2135      	movs	r1, #53	; 0x35
 8005062:	a81c      	add	r0, sp, #112	; 0x70
 8005064:	f7ff ff34 	bl	8004ed0 <__copybits>
 8005068:	4620      	mov	r0, r4
 800506a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800506c:	f7ff fb18 	bl	80046a0 <_Bfree>
 8005070:	3f01      	subs	r7, #1
 8005072:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005074:	2f04      	cmp	r7, #4
 8005076:	d806      	bhi.n	8005086 <_strtod_l+0xe6>
 8005078:	e8df f007 	tbb	[pc, r7]
 800507c:	201d0314 	.word	0x201d0314
 8005080:	14          	.byte	0x14
 8005081:	00          	.byte	0x00
 8005082:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005086:	05e9      	lsls	r1, r5, #23
 8005088:	bf48      	it	mi
 800508a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800508e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005092:	0d1b      	lsrs	r3, r3, #20
 8005094:	051b      	lsls	r3, r3, #20
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1bb      	bne.n	8005012 <_strtod_l+0x72>
 800509a:	f7fe fb17 	bl	80036cc <__errno>
 800509e:	2322      	movs	r3, #34	; 0x22
 80050a0:	6003      	str	r3, [r0, #0]
 80050a2:	e7b6      	b.n	8005012 <_strtod_l+0x72>
 80050a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80050a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80050ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80050b4:	e7e7      	b.n	8005086 <_strtod_l+0xe6>
 80050b6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800522c <_strtod_l+0x28c>
 80050ba:	e7e4      	b.n	8005086 <_strtod_l+0xe6>
 80050bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80050c0:	f04f 38ff 	mov.w	r8, #4294967295
 80050c4:	e7df      	b.n	8005086 <_strtod_l+0xe6>
 80050c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	9219      	str	r2, [sp, #100]	; 0x64
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	2b30      	cmp	r3, #48	; 0x30
 80050d0:	d0f9      	beq.n	80050c6 <_strtod_l+0x126>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d09d      	beq.n	8005012 <_strtod_l+0x72>
 80050d6:	2301      	movs	r3, #1
 80050d8:	f04f 0a00 	mov.w	sl, #0
 80050dc:	220a      	movs	r2, #10
 80050de:	46d3      	mov	fp, sl
 80050e0:	9305      	str	r3, [sp, #20]
 80050e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050e4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80050e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80050ec:	7806      	ldrb	r6, [r0, #0]
 80050ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80050f2:	b2d9      	uxtb	r1, r3
 80050f4:	2909      	cmp	r1, #9
 80050f6:	d926      	bls.n	8005146 <_strtod_l+0x1a6>
 80050f8:	2201      	movs	r2, #1
 80050fa:	494d      	ldr	r1, [pc, #308]	; (8005230 <_strtod_l+0x290>)
 80050fc:	f000 ffe6 	bl	80060cc <strncmp>
 8005100:	2800      	cmp	r0, #0
 8005102:	d030      	beq.n	8005166 <_strtod_l+0x1c6>
 8005104:	2000      	movs	r0, #0
 8005106:	4632      	mov	r2, r6
 8005108:	4603      	mov	r3, r0
 800510a:	465e      	mov	r6, fp
 800510c:	9008      	str	r0, [sp, #32]
 800510e:	2a65      	cmp	r2, #101	; 0x65
 8005110:	d001      	beq.n	8005116 <_strtod_l+0x176>
 8005112:	2a45      	cmp	r2, #69	; 0x45
 8005114:	d113      	bne.n	800513e <_strtod_l+0x19e>
 8005116:	b91e      	cbnz	r6, 8005120 <_strtod_l+0x180>
 8005118:	9a05      	ldr	r2, [sp, #20]
 800511a:	4302      	orrs	r2, r0
 800511c:	d094      	beq.n	8005048 <_strtod_l+0xa8>
 800511e:	2600      	movs	r6, #0
 8005120:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005122:	1c6a      	adds	r2, r5, #1
 8005124:	9219      	str	r2, [sp, #100]	; 0x64
 8005126:	786a      	ldrb	r2, [r5, #1]
 8005128:	2a2b      	cmp	r2, #43	; 0x2b
 800512a:	d074      	beq.n	8005216 <_strtod_l+0x276>
 800512c:	2a2d      	cmp	r2, #45	; 0x2d
 800512e:	d078      	beq.n	8005222 <_strtod_l+0x282>
 8005130:	f04f 0c00 	mov.w	ip, #0
 8005134:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005138:	2909      	cmp	r1, #9
 800513a:	d97f      	bls.n	800523c <_strtod_l+0x29c>
 800513c:	9519      	str	r5, [sp, #100]	; 0x64
 800513e:	2700      	movs	r7, #0
 8005140:	e09e      	b.n	8005280 <_strtod_l+0x2e0>
 8005142:	2300      	movs	r3, #0
 8005144:	e7c8      	b.n	80050d8 <_strtod_l+0x138>
 8005146:	f1bb 0f08 	cmp.w	fp, #8
 800514a:	bfd8      	it	le
 800514c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800514e:	f100 0001 	add.w	r0, r0, #1
 8005152:	bfd6      	itet	le
 8005154:	fb02 3301 	mlale	r3, r2, r1, r3
 8005158:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800515c:	930a      	strle	r3, [sp, #40]	; 0x28
 800515e:	f10b 0b01 	add.w	fp, fp, #1
 8005162:	9019      	str	r0, [sp, #100]	; 0x64
 8005164:	e7c1      	b.n	80050ea <_strtod_l+0x14a>
 8005166:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	9219      	str	r2, [sp, #100]	; 0x64
 800516c:	785a      	ldrb	r2, [r3, #1]
 800516e:	f1bb 0f00 	cmp.w	fp, #0
 8005172:	d037      	beq.n	80051e4 <_strtod_l+0x244>
 8005174:	465e      	mov	r6, fp
 8005176:	9008      	str	r0, [sp, #32]
 8005178:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800517c:	2b09      	cmp	r3, #9
 800517e:	d912      	bls.n	80051a6 <_strtod_l+0x206>
 8005180:	2301      	movs	r3, #1
 8005182:	e7c4      	b.n	800510e <_strtod_l+0x16e>
 8005184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005186:	3001      	adds	r0, #1
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	9219      	str	r2, [sp, #100]	; 0x64
 800518c:	785a      	ldrb	r2, [r3, #1]
 800518e:	2a30      	cmp	r2, #48	; 0x30
 8005190:	d0f8      	beq.n	8005184 <_strtod_l+0x1e4>
 8005192:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005196:	2b08      	cmp	r3, #8
 8005198:	f200 84e4 	bhi.w	8005b64 <_strtod_l+0xbc4>
 800519c:	9008      	str	r0, [sp, #32]
 800519e:	2000      	movs	r0, #0
 80051a0:	4606      	mov	r6, r0
 80051a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a6:	3a30      	subs	r2, #48	; 0x30
 80051a8:	f100 0301 	add.w	r3, r0, #1
 80051ac:	d014      	beq.n	80051d8 <_strtod_l+0x238>
 80051ae:	9908      	ldr	r1, [sp, #32]
 80051b0:	eb00 0c06 	add.w	ip, r0, r6
 80051b4:	4419      	add	r1, r3
 80051b6:	9108      	str	r1, [sp, #32]
 80051b8:	4633      	mov	r3, r6
 80051ba:	210a      	movs	r1, #10
 80051bc:	4563      	cmp	r3, ip
 80051be:	d113      	bne.n	80051e8 <_strtod_l+0x248>
 80051c0:	1833      	adds	r3, r6, r0
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	f106 0601 	add.w	r6, r6, #1
 80051c8:	4406      	add	r6, r0
 80051ca:	dc1a      	bgt.n	8005202 <_strtod_l+0x262>
 80051cc:	230a      	movs	r3, #10
 80051ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051d0:	fb03 2301 	mla	r3, r3, r1, r2
 80051d4:	930a      	str	r3, [sp, #40]	; 0x28
 80051d6:	2300      	movs	r3, #0
 80051d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051da:	4618      	mov	r0, r3
 80051dc:	1c51      	adds	r1, r2, #1
 80051de:	9119      	str	r1, [sp, #100]	; 0x64
 80051e0:	7852      	ldrb	r2, [r2, #1]
 80051e2:	e7c9      	b.n	8005178 <_strtod_l+0x1d8>
 80051e4:	4658      	mov	r0, fp
 80051e6:	e7d2      	b.n	800518e <_strtod_l+0x1ee>
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	f103 0301 	add.w	r3, r3, #1
 80051ee:	dc03      	bgt.n	80051f8 <_strtod_l+0x258>
 80051f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80051f2:	434f      	muls	r7, r1
 80051f4:	970a      	str	r7, [sp, #40]	; 0x28
 80051f6:	e7e1      	b.n	80051bc <_strtod_l+0x21c>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	bfd8      	it	le
 80051fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005200:	e7dc      	b.n	80051bc <_strtod_l+0x21c>
 8005202:	2e10      	cmp	r6, #16
 8005204:	bfdc      	itt	le
 8005206:	230a      	movle	r3, #10
 8005208:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800520c:	e7e3      	b.n	80051d6 <_strtod_l+0x236>
 800520e:	2300      	movs	r3, #0
 8005210:	9308      	str	r3, [sp, #32]
 8005212:	2301      	movs	r3, #1
 8005214:	e780      	b.n	8005118 <_strtod_l+0x178>
 8005216:	f04f 0c00 	mov.w	ip, #0
 800521a:	1caa      	adds	r2, r5, #2
 800521c:	9219      	str	r2, [sp, #100]	; 0x64
 800521e:	78aa      	ldrb	r2, [r5, #2]
 8005220:	e788      	b.n	8005134 <_strtod_l+0x194>
 8005222:	f04f 0c01 	mov.w	ip, #1
 8005226:	e7f8      	b.n	800521a <_strtod_l+0x27a>
 8005228:	080070d0 	.word	0x080070d0
 800522c:	7ff00000 	.word	0x7ff00000
 8005230:	080070cc 	.word	0x080070cc
 8005234:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005236:	1c51      	adds	r1, r2, #1
 8005238:	9119      	str	r1, [sp, #100]	; 0x64
 800523a:	7852      	ldrb	r2, [r2, #1]
 800523c:	2a30      	cmp	r2, #48	; 0x30
 800523e:	d0f9      	beq.n	8005234 <_strtod_l+0x294>
 8005240:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005244:	2908      	cmp	r1, #8
 8005246:	f63f af7a 	bhi.w	800513e <_strtod_l+0x19e>
 800524a:	3a30      	subs	r2, #48	; 0x30
 800524c:	9209      	str	r2, [sp, #36]	; 0x24
 800524e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005250:	920c      	str	r2, [sp, #48]	; 0x30
 8005252:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005254:	1c57      	adds	r7, r2, #1
 8005256:	9719      	str	r7, [sp, #100]	; 0x64
 8005258:	7852      	ldrb	r2, [r2, #1]
 800525a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800525e:	f1be 0f09 	cmp.w	lr, #9
 8005262:	d938      	bls.n	80052d6 <_strtod_l+0x336>
 8005264:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005266:	1a7f      	subs	r7, r7, r1
 8005268:	2f08      	cmp	r7, #8
 800526a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800526e:	dc03      	bgt.n	8005278 <_strtod_l+0x2d8>
 8005270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005272:	428f      	cmp	r7, r1
 8005274:	bfa8      	it	ge
 8005276:	460f      	movge	r7, r1
 8005278:	f1bc 0f00 	cmp.w	ip, #0
 800527c:	d000      	beq.n	8005280 <_strtod_l+0x2e0>
 800527e:	427f      	negs	r7, r7
 8005280:	2e00      	cmp	r6, #0
 8005282:	d14f      	bne.n	8005324 <_strtod_l+0x384>
 8005284:	9905      	ldr	r1, [sp, #20]
 8005286:	4301      	orrs	r1, r0
 8005288:	f47f aec3 	bne.w	8005012 <_strtod_l+0x72>
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f aedb 	bne.w	8005048 <_strtod_l+0xa8>
 8005292:	2a69      	cmp	r2, #105	; 0x69
 8005294:	d029      	beq.n	80052ea <_strtod_l+0x34a>
 8005296:	dc26      	bgt.n	80052e6 <_strtod_l+0x346>
 8005298:	2a49      	cmp	r2, #73	; 0x49
 800529a:	d026      	beq.n	80052ea <_strtod_l+0x34a>
 800529c:	2a4e      	cmp	r2, #78	; 0x4e
 800529e:	f47f aed3 	bne.w	8005048 <_strtod_l+0xa8>
 80052a2:	499a      	ldr	r1, [pc, #616]	; (800550c <_strtod_l+0x56c>)
 80052a4:	a819      	add	r0, sp, #100	; 0x64
 80052a6:	f001 fa23 	bl	80066f0 <__match>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f43f aecc 	beq.w	8005048 <_strtod_l+0xa8>
 80052b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b28      	cmp	r3, #40	; 0x28
 80052b6:	d12f      	bne.n	8005318 <_strtod_l+0x378>
 80052b8:	4995      	ldr	r1, [pc, #596]	; (8005510 <_strtod_l+0x570>)
 80052ba:	aa1c      	add	r2, sp, #112	; 0x70
 80052bc:	a819      	add	r0, sp, #100	; 0x64
 80052be:	f001 fa2b 	bl	8006718 <__hexnan>
 80052c2:	2805      	cmp	r0, #5
 80052c4:	d128      	bne.n	8005318 <_strtod_l+0x378>
 80052c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80052cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80052d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80052d4:	e69d      	b.n	8005012 <_strtod_l+0x72>
 80052d6:	210a      	movs	r1, #10
 80052d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052da:	fb01 2107 	mla	r1, r1, r7, r2
 80052de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80052e2:	9209      	str	r2, [sp, #36]	; 0x24
 80052e4:	e7b5      	b.n	8005252 <_strtod_l+0x2b2>
 80052e6:	2a6e      	cmp	r2, #110	; 0x6e
 80052e8:	e7d9      	b.n	800529e <_strtod_l+0x2fe>
 80052ea:	498a      	ldr	r1, [pc, #552]	; (8005514 <_strtod_l+0x574>)
 80052ec:	a819      	add	r0, sp, #100	; 0x64
 80052ee:	f001 f9ff 	bl	80066f0 <__match>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f43f aea8 	beq.w	8005048 <_strtod_l+0xa8>
 80052f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052fa:	4987      	ldr	r1, [pc, #540]	; (8005518 <_strtod_l+0x578>)
 80052fc:	3b01      	subs	r3, #1
 80052fe:	a819      	add	r0, sp, #100	; 0x64
 8005300:	9319      	str	r3, [sp, #100]	; 0x64
 8005302:	f001 f9f5 	bl	80066f0 <__match>
 8005306:	b910      	cbnz	r0, 800530e <_strtod_l+0x36e>
 8005308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800530a:	3301      	adds	r3, #1
 800530c:	9319      	str	r3, [sp, #100]	; 0x64
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800551c <_strtod_l+0x57c>
 8005316:	e67c      	b.n	8005012 <_strtod_l+0x72>
 8005318:	4881      	ldr	r0, [pc, #516]	; (8005520 <_strtod_l+0x580>)
 800531a:	f000 ff07 	bl	800612c <nan>
 800531e:	4680      	mov	r8, r0
 8005320:	4689      	mov	r9, r1
 8005322:	e676      	b.n	8005012 <_strtod_l+0x72>
 8005324:	9b08      	ldr	r3, [sp, #32]
 8005326:	f1bb 0f00 	cmp.w	fp, #0
 800532a:	bf08      	it	eq
 800532c:	46b3      	moveq	fp, r6
 800532e:	1afb      	subs	r3, r7, r3
 8005330:	2e10      	cmp	r6, #16
 8005332:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005334:	4635      	mov	r5, r6
 8005336:	9309      	str	r3, [sp, #36]	; 0x24
 8005338:	bfa8      	it	ge
 800533a:	2510      	movge	r5, #16
 800533c:	f7fb f852 	bl	80003e4 <__aeabi_ui2d>
 8005340:	2e09      	cmp	r6, #9
 8005342:	4680      	mov	r8, r0
 8005344:	4689      	mov	r9, r1
 8005346:	dd13      	ble.n	8005370 <_strtod_l+0x3d0>
 8005348:	4b76      	ldr	r3, [pc, #472]	; (8005524 <_strtod_l+0x584>)
 800534a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800534e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005352:	f7fb f8c1 	bl	80004d8 <__aeabi_dmul>
 8005356:	4680      	mov	r8, r0
 8005358:	4650      	mov	r0, sl
 800535a:	4689      	mov	r9, r1
 800535c:	f7fb f842 	bl	80003e4 <__aeabi_ui2d>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fa ff00 	bl	800016c <__adddf3>
 800536c:	4680      	mov	r8, r0
 800536e:	4689      	mov	r9, r1
 8005370:	2e0f      	cmp	r6, #15
 8005372:	dc36      	bgt.n	80053e2 <_strtod_l+0x442>
 8005374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	f43f ae4b 	beq.w	8005012 <_strtod_l+0x72>
 800537c:	dd22      	ble.n	80053c4 <_strtod_l+0x424>
 800537e:	2b16      	cmp	r3, #22
 8005380:	dc09      	bgt.n	8005396 <_strtod_l+0x3f6>
 8005382:	4968      	ldr	r1, [pc, #416]	; (8005524 <_strtod_l+0x584>)
 8005384:	4642      	mov	r2, r8
 8005386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800538a:	464b      	mov	r3, r9
 800538c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005390:	f7fb f8a2 	bl	80004d8 <__aeabi_dmul>
 8005394:	e7c3      	b.n	800531e <_strtod_l+0x37e>
 8005396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005398:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800539c:	4293      	cmp	r3, r2
 800539e:	db20      	blt.n	80053e2 <_strtod_l+0x442>
 80053a0:	4c60      	ldr	r4, [pc, #384]	; (8005524 <_strtod_l+0x584>)
 80053a2:	f1c6 060f 	rsb	r6, r6, #15
 80053a6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80053aa:	4642      	mov	r2, r8
 80053ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b0:	464b      	mov	r3, r9
 80053b2:	f7fb f891 	bl	80004d8 <__aeabi_dmul>
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	1b9e      	subs	r6, r3, r6
 80053ba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80053be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80053c2:	e7e5      	b.n	8005390 <_strtod_l+0x3f0>
 80053c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c6:	3316      	adds	r3, #22
 80053c8:	db0b      	blt.n	80053e2 <_strtod_l+0x442>
 80053ca:	9b08      	ldr	r3, [sp, #32]
 80053cc:	4640      	mov	r0, r8
 80053ce:	1bdf      	subs	r7, r3, r7
 80053d0:	4b54      	ldr	r3, [pc, #336]	; (8005524 <_strtod_l+0x584>)
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80053d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053dc:	f7fb f9a6 	bl	800072c <__aeabi_ddiv>
 80053e0:	e79d      	b.n	800531e <_strtod_l+0x37e>
 80053e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e4:	1b75      	subs	r5, r6, r5
 80053e6:	441d      	add	r5, r3
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	dd70      	ble.n	80054ce <_strtod_l+0x52e>
 80053ec:	f015 030f 	ands.w	r3, r5, #15
 80053f0:	d00a      	beq.n	8005408 <_strtod_l+0x468>
 80053f2:	494c      	ldr	r1, [pc, #304]	; (8005524 <_strtod_l+0x584>)
 80053f4:	4642      	mov	r2, r8
 80053f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053fe:	464b      	mov	r3, r9
 8005400:	f7fb f86a 	bl	80004d8 <__aeabi_dmul>
 8005404:	4680      	mov	r8, r0
 8005406:	4689      	mov	r9, r1
 8005408:	f035 050f 	bics.w	r5, r5, #15
 800540c:	d04d      	beq.n	80054aa <_strtod_l+0x50a>
 800540e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005412:	dd22      	ble.n	800545a <_strtod_l+0x4ba>
 8005414:	2600      	movs	r6, #0
 8005416:	46b3      	mov	fp, r6
 8005418:	960b      	str	r6, [sp, #44]	; 0x2c
 800541a:	9608      	str	r6, [sp, #32]
 800541c:	2322      	movs	r3, #34	; 0x22
 800541e:	f04f 0800 	mov.w	r8, #0
 8005422:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800551c <_strtod_l+0x57c>
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	f43f adf1 	beq.w	8005012 <_strtod_l+0x72>
 8005430:	4620      	mov	r0, r4
 8005432:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005434:	f7ff f934 	bl	80046a0 <_Bfree>
 8005438:	4620      	mov	r0, r4
 800543a:	9908      	ldr	r1, [sp, #32]
 800543c:	f7ff f930 	bl	80046a0 <_Bfree>
 8005440:	4659      	mov	r1, fp
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff f92c 	bl	80046a0 <_Bfree>
 8005448:	4620      	mov	r0, r4
 800544a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800544c:	f7ff f928 	bl	80046a0 <_Bfree>
 8005450:	4631      	mov	r1, r6
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff f924 	bl	80046a0 <_Bfree>
 8005458:	e5db      	b.n	8005012 <_strtod_l+0x72>
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <_strtod_l+0x588>)
 800545c:	4640      	mov	r0, r8
 800545e:	9305      	str	r3, [sp, #20]
 8005460:	2300      	movs	r3, #0
 8005462:	4649      	mov	r1, r9
 8005464:	469a      	mov	sl, r3
 8005466:	112d      	asrs	r5, r5, #4
 8005468:	2d01      	cmp	r5, #1
 800546a:	dc21      	bgt.n	80054b0 <_strtod_l+0x510>
 800546c:	b10b      	cbz	r3, 8005472 <_strtod_l+0x4d2>
 800546e:	4680      	mov	r8, r0
 8005470:	4689      	mov	r9, r1
 8005472:	492d      	ldr	r1, [pc, #180]	; (8005528 <_strtod_l+0x588>)
 8005474:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005478:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800547c:	4642      	mov	r2, r8
 800547e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005482:	464b      	mov	r3, r9
 8005484:	f7fb f828 	bl	80004d8 <__aeabi_dmul>
 8005488:	4b24      	ldr	r3, [pc, #144]	; (800551c <_strtod_l+0x57c>)
 800548a:	460a      	mov	r2, r1
 800548c:	400b      	ands	r3, r1
 800548e:	4927      	ldr	r1, [pc, #156]	; (800552c <_strtod_l+0x58c>)
 8005490:	4680      	mov	r8, r0
 8005492:	428b      	cmp	r3, r1
 8005494:	d8be      	bhi.n	8005414 <_strtod_l+0x474>
 8005496:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800549a:	428b      	cmp	r3, r1
 800549c:	bf86      	itte	hi
 800549e:	f04f 38ff 	movhi.w	r8, #4294967295
 80054a2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005530 <_strtod_l+0x590>
 80054a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80054aa:	2300      	movs	r3, #0
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	e07b      	b.n	80055a8 <_strtod_l+0x608>
 80054b0:	07ea      	lsls	r2, r5, #31
 80054b2:	d505      	bpl.n	80054c0 <_strtod_l+0x520>
 80054b4:	9b05      	ldr	r3, [sp, #20]
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fb f80d 	bl	80004d8 <__aeabi_dmul>
 80054be:	2301      	movs	r3, #1
 80054c0:	9a05      	ldr	r2, [sp, #20]
 80054c2:	f10a 0a01 	add.w	sl, sl, #1
 80054c6:	3208      	adds	r2, #8
 80054c8:	106d      	asrs	r5, r5, #1
 80054ca:	9205      	str	r2, [sp, #20]
 80054cc:	e7cc      	b.n	8005468 <_strtod_l+0x4c8>
 80054ce:	d0ec      	beq.n	80054aa <_strtod_l+0x50a>
 80054d0:	426d      	negs	r5, r5
 80054d2:	f015 020f 	ands.w	r2, r5, #15
 80054d6:	d00a      	beq.n	80054ee <_strtod_l+0x54e>
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <_strtod_l+0x584>)
 80054da:	4640      	mov	r0, r8
 80054dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054e0:	4649      	mov	r1, r9
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb f921 	bl	800072c <__aeabi_ddiv>
 80054ea:	4680      	mov	r8, r0
 80054ec:	4689      	mov	r9, r1
 80054ee:	112d      	asrs	r5, r5, #4
 80054f0:	d0db      	beq.n	80054aa <_strtod_l+0x50a>
 80054f2:	2d1f      	cmp	r5, #31
 80054f4:	dd1e      	ble.n	8005534 <_strtod_l+0x594>
 80054f6:	2600      	movs	r6, #0
 80054f8:	46b3      	mov	fp, r6
 80054fa:	960b      	str	r6, [sp, #44]	; 0x2c
 80054fc:	9608      	str	r6, [sp, #32]
 80054fe:	2322      	movs	r3, #34	; 0x22
 8005500:	f04f 0800 	mov.w	r8, #0
 8005504:	f04f 0900 	mov.w	r9, #0
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	e78d      	b.n	8005428 <_strtod_l+0x488>
 800550c:	08006eb7 	.word	0x08006eb7
 8005510:	080070e4 	.word	0x080070e4
 8005514:	08006eaf 	.word	0x08006eaf
 8005518:	08006ee6 	.word	0x08006ee6
 800551c:	7ff00000 	.word	0x7ff00000
 8005520:	08007275 	.word	0x08007275
 8005524:	08006ff8 	.word	0x08006ff8
 8005528:	08006fd0 	.word	0x08006fd0
 800552c:	7ca00000 	.word	0x7ca00000
 8005530:	7fefffff 	.word	0x7fefffff
 8005534:	f015 0310 	ands.w	r3, r5, #16
 8005538:	bf18      	it	ne
 800553a:	236a      	movne	r3, #106	; 0x6a
 800553c:	4640      	mov	r0, r8
 800553e:	9305      	str	r3, [sp, #20]
 8005540:	4649      	mov	r1, r9
 8005542:	2300      	movs	r3, #0
 8005544:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005810 <_strtod_l+0x870>
 8005548:	07ea      	lsls	r2, r5, #31
 800554a:	d504      	bpl.n	8005556 <_strtod_l+0x5b6>
 800554c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005550:	f7fa ffc2 	bl	80004d8 <__aeabi_dmul>
 8005554:	2301      	movs	r3, #1
 8005556:	106d      	asrs	r5, r5, #1
 8005558:	f10a 0a08 	add.w	sl, sl, #8
 800555c:	d1f4      	bne.n	8005548 <_strtod_l+0x5a8>
 800555e:	b10b      	cbz	r3, 8005564 <_strtod_l+0x5c4>
 8005560:	4680      	mov	r8, r0
 8005562:	4689      	mov	r9, r1
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	b1bb      	cbz	r3, 8005598 <_strtod_l+0x5f8>
 8005568:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800556c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005570:	2b00      	cmp	r3, #0
 8005572:	4649      	mov	r1, r9
 8005574:	dd10      	ble.n	8005598 <_strtod_l+0x5f8>
 8005576:	2b1f      	cmp	r3, #31
 8005578:	f340 8128 	ble.w	80057cc <_strtod_l+0x82c>
 800557c:	2b34      	cmp	r3, #52	; 0x34
 800557e:	bfd8      	it	le
 8005580:	f04f 33ff 	movle.w	r3, #4294967295
 8005584:	f04f 0800 	mov.w	r8, #0
 8005588:	bfcf      	iteee	gt
 800558a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800558e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005592:	4093      	lslle	r3, r2
 8005594:	ea03 0901 	andle.w	r9, r3, r1
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4640      	mov	r0, r8
 800559e:	4649      	mov	r1, r9
 80055a0:	f7fb fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d1a6      	bne.n	80054f6 <_strtod_l+0x556>
 80055a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055aa:	465a      	mov	r2, fp
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4620      	mov	r0, r4
 80055b0:	4633      	mov	r3, r6
 80055b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055b4:	f7ff f8dc 	bl	8004770 <__s2b>
 80055b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f43f af2a 	beq.w	8005414 <_strtod_l+0x474>
 80055c0:	2600      	movs	r6, #0
 80055c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c4:	9b08      	ldr	r3, [sp, #32]
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	eba3 0307 	sub.w	r3, r3, r7
 80055cc:	bfa8      	it	ge
 80055ce:	2300      	movge	r3, #0
 80055d0:	46b3      	mov	fp, r6
 80055d2:	9312      	str	r3, [sp, #72]	; 0x48
 80055d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80055d8:	9316      	str	r3, [sp, #88]	; 0x58
 80055da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055dc:	4620      	mov	r0, r4
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	f7ff f81e 	bl	8004620 <_Balloc>
 80055e4:	9008      	str	r0, [sp, #32]
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f af18 	beq.w	800541c <_strtod_l+0x47c>
 80055ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ee:	300c      	adds	r0, #12
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	f103 010c 	add.w	r1, r3, #12
 80055f6:	3202      	adds	r2, #2
 80055f8:	0092      	lsls	r2, r2, #2
 80055fa:	f000 fd89 	bl	8006110 <memcpy>
 80055fe:	ab1c      	add	r3, sp, #112	; 0x70
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	ab1b      	add	r3, sp, #108	; 0x6c
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4642      	mov	r2, r8
 8005608:	464b      	mov	r3, r9
 800560a:	4620      	mov	r0, r4
 800560c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005610:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005614:	f7ff fbd8 	bl	8004dc8 <__d2b>
 8005618:	901a      	str	r0, [sp, #104]	; 0x68
 800561a:	2800      	cmp	r0, #0
 800561c:	f43f aefe 	beq.w	800541c <_strtod_l+0x47c>
 8005620:	2101      	movs	r1, #1
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff f93c 	bl	80048a0 <__i2b>
 8005628:	4683      	mov	fp, r0
 800562a:	2800      	cmp	r0, #0
 800562c:	f43f aef6 	beq.w	800541c <_strtod_l+0x47c>
 8005630:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005632:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005634:	2f00      	cmp	r7, #0
 8005636:	bfab      	itete	ge
 8005638:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800563a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800563c:	eb07 0a03 	addge.w	sl, r7, r3
 8005640:	1bdd      	sublt	r5, r3, r7
 8005642:	9b05      	ldr	r3, [sp, #20]
 8005644:	bfa8      	it	ge
 8005646:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005648:	eba7 0703 	sub.w	r7, r7, r3
 800564c:	4417      	add	r7, r2
 800564e:	4b71      	ldr	r3, [pc, #452]	; (8005814 <_strtod_l+0x874>)
 8005650:	f107 37ff 	add.w	r7, r7, #4294967295
 8005654:	bfb8      	it	lt
 8005656:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800565a:	429f      	cmp	r7, r3
 800565c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005660:	f280 80c7 	bge.w	80057f2 <_strtod_l+0x852>
 8005664:	1bdb      	subs	r3, r3, r7
 8005666:	2b1f      	cmp	r3, #31
 8005668:	f04f 0101 	mov.w	r1, #1
 800566c:	eba2 0203 	sub.w	r2, r2, r3
 8005670:	f300 80b3 	bgt.w	80057da <_strtod_l+0x83a>
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	9313      	str	r3, [sp, #76]	; 0x4c
 800567a:	2300      	movs	r3, #0
 800567c:	9310      	str	r3, [sp, #64]	; 0x40
 800567e:	eb0a 0702 	add.w	r7, sl, r2
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	45ba      	cmp	sl, r7
 8005686:	4415      	add	r5, r2
 8005688:	441d      	add	r5, r3
 800568a:	4653      	mov	r3, sl
 800568c:	bfa8      	it	ge
 800568e:	463b      	movge	r3, r7
 8005690:	42ab      	cmp	r3, r5
 8005692:	bfa8      	it	ge
 8005694:	462b      	movge	r3, r5
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfc2      	ittt	gt
 800569a:	1aff      	subgt	r7, r7, r3
 800569c:	1aed      	subgt	r5, r5, r3
 800569e:	ebaa 0a03 	subgt.w	sl, sl, r3
 80056a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd17      	ble.n	80056d8 <_strtod_l+0x738>
 80056a8:	4659      	mov	r1, fp
 80056aa:	461a      	mov	r2, r3
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff f9b5 	bl	8004a1c <__pow5mult>
 80056b2:	4683      	mov	fp, r0
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f43f aeb1 	beq.w	800541c <_strtod_l+0x47c>
 80056ba:	4601      	mov	r1, r0
 80056bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff f904 	bl	80048cc <__multiply>
 80056c4:	900a      	str	r0, [sp, #40]	; 0x28
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f43f aea8 	beq.w	800541c <_strtod_l+0x47c>
 80056cc:	4620      	mov	r0, r4
 80056ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056d0:	f7fe ffe6 	bl	80046a0 <_Bfree>
 80056d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d6:	931a      	str	r3, [sp, #104]	; 0x68
 80056d8:	2f00      	cmp	r7, #0
 80056da:	f300 808f 	bgt.w	80057fc <_strtod_l+0x85c>
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dd08      	ble.n	80056f6 <_strtod_l+0x756>
 80056e4:	4620      	mov	r0, r4
 80056e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80056e8:	9908      	ldr	r1, [sp, #32]
 80056ea:	f7ff f997 	bl	8004a1c <__pow5mult>
 80056ee:	9008      	str	r0, [sp, #32]
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f43f ae93 	beq.w	800541c <_strtod_l+0x47c>
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	dd08      	ble.n	800570c <_strtod_l+0x76c>
 80056fa:	462a      	mov	r2, r5
 80056fc:	4620      	mov	r0, r4
 80056fe:	9908      	ldr	r1, [sp, #32]
 8005700:	f7ff f9e6 	bl	8004ad0 <__lshift>
 8005704:	9008      	str	r0, [sp, #32]
 8005706:	2800      	cmp	r0, #0
 8005708:	f43f ae88 	beq.w	800541c <_strtod_l+0x47c>
 800570c:	f1ba 0f00 	cmp.w	sl, #0
 8005710:	dd08      	ble.n	8005724 <_strtod_l+0x784>
 8005712:	4659      	mov	r1, fp
 8005714:	4652      	mov	r2, sl
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff f9da 	bl	8004ad0 <__lshift>
 800571c:	4683      	mov	fp, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	f43f ae7c 	beq.w	800541c <_strtod_l+0x47c>
 8005724:	4620      	mov	r0, r4
 8005726:	9a08      	ldr	r2, [sp, #32]
 8005728:	991a      	ldr	r1, [sp, #104]	; 0x68
 800572a:	f7ff fa59 	bl	8004be0 <__mdiff>
 800572e:	4606      	mov	r6, r0
 8005730:	2800      	cmp	r0, #0
 8005732:	f43f ae73 	beq.w	800541c <_strtod_l+0x47c>
 8005736:	2500      	movs	r5, #0
 8005738:	68c3      	ldr	r3, [r0, #12]
 800573a:	4659      	mov	r1, fp
 800573c:	60c5      	str	r5, [r0, #12]
 800573e:	930a      	str	r3, [sp, #40]	; 0x28
 8005740:	f7ff fa32 	bl	8004ba8 <__mcmp>
 8005744:	42a8      	cmp	r0, r5
 8005746:	da6b      	bge.n	8005820 <_strtod_l+0x880>
 8005748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574a:	ea53 0308 	orrs.w	r3, r3, r8
 800574e:	f040 808f 	bne.w	8005870 <_strtod_l+0x8d0>
 8005752:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 808a 	bne.w	8005870 <_strtod_l+0x8d0>
 800575c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005760:	0d1b      	lsrs	r3, r3, #20
 8005762:	051b      	lsls	r3, r3, #20
 8005764:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005768:	f240 8082 	bls.w	8005870 <_strtod_l+0x8d0>
 800576c:	6973      	ldr	r3, [r6, #20]
 800576e:	b913      	cbnz	r3, 8005776 <_strtod_l+0x7d6>
 8005770:	6933      	ldr	r3, [r6, #16]
 8005772:	2b01      	cmp	r3, #1
 8005774:	dd7c      	ble.n	8005870 <_strtod_l+0x8d0>
 8005776:	4631      	mov	r1, r6
 8005778:	2201      	movs	r2, #1
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff f9a8 	bl	8004ad0 <__lshift>
 8005780:	4659      	mov	r1, fp
 8005782:	4606      	mov	r6, r0
 8005784:	f7ff fa10 	bl	8004ba8 <__mcmp>
 8005788:	2800      	cmp	r0, #0
 800578a:	dd71      	ble.n	8005870 <_strtod_l+0x8d0>
 800578c:	9905      	ldr	r1, [sp, #20]
 800578e:	464b      	mov	r3, r9
 8005790:	4a21      	ldr	r2, [pc, #132]	; (8005818 <_strtod_l+0x878>)
 8005792:	2900      	cmp	r1, #0
 8005794:	f000 808d 	beq.w	80058b2 <_strtod_l+0x912>
 8005798:	ea02 0109 	and.w	r1, r2, r9
 800579c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80057a0:	f300 8087 	bgt.w	80058b2 <_strtod_l+0x912>
 80057a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80057a8:	f77f aea9 	ble.w	80054fe <_strtod_l+0x55e>
 80057ac:	4640      	mov	r0, r8
 80057ae:	4649      	mov	r1, r9
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <_strtod_l+0x87c>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	f7fa fe90 	bl	80004d8 <__aeabi_dmul>
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <_strtod_l+0x878>)
 80057ba:	4680      	mov	r8, r0
 80057bc:	400b      	ands	r3, r1
 80057be:	4689      	mov	r9, r1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f47f ae35 	bne.w	8005430 <_strtod_l+0x490>
 80057c6:	2322      	movs	r3, #34	; 0x22
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	e631      	b.n	8005430 <_strtod_l+0x490>
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	ea03 0808 	and.w	r8, r3, r8
 80057d8:	e6de      	b.n	8005598 <_strtod_l+0x5f8>
 80057da:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80057de:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80057e2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80057e6:	37e2      	adds	r7, #226	; 0xe2
 80057e8:	fa01 f307 	lsl.w	r3, r1, r7
 80057ec:	9310      	str	r3, [sp, #64]	; 0x40
 80057ee:	9113      	str	r1, [sp, #76]	; 0x4c
 80057f0:	e745      	b.n	800567e <_strtod_l+0x6de>
 80057f2:	2300      	movs	r3, #0
 80057f4:	9310      	str	r3, [sp, #64]	; 0x40
 80057f6:	2301      	movs	r3, #1
 80057f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80057fa:	e740      	b.n	800567e <_strtod_l+0x6de>
 80057fc:	463a      	mov	r2, r7
 80057fe:	4620      	mov	r0, r4
 8005800:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005802:	f7ff f965 	bl	8004ad0 <__lshift>
 8005806:	901a      	str	r0, [sp, #104]	; 0x68
 8005808:	2800      	cmp	r0, #0
 800580a:	f47f af68 	bne.w	80056de <_strtod_l+0x73e>
 800580e:	e605      	b.n	800541c <_strtod_l+0x47c>
 8005810:	080070f8 	.word	0x080070f8
 8005814:	fffffc02 	.word	0xfffffc02
 8005818:	7ff00000 	.word	0x7ff00000
 800581c:	39500000 	.word	0x39500000
 8005820:	46ca      	mov	sl, r9
 8005822:	d165      	bne.n	80058f0 <_strtod_l+0x950>
 8005824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005826:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800582a:	b352      	cbz	r2, 8005882 <_strtod_l+0x8e2>
 800582c:	4a9e      	ldr	r2, [pc, #632]	; (8005aa8 <_strtod_l+0xb08>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d12a      	bne.n	8005888 <_strtod_l+0x8e8>
 8005832:	9b05      	ldr	r3, [sp, #20]
 8005834:	4641      	mov	r1, r8
 8005836:	b1fb      	cbz	r3, 8005878 <_strtod_l+0x8d8>
 8005838:	4b9c      	ldr	r3, [pc, #624]	; (8005aac <_strtod_l+0xb0c>)
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	ea09 0303 	and.w	r3, r9, r3
 8005842:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005846:	d81a      	bhi.n	800587e <_strtod_l+0x8de>
 8005848:	0d1b      	lsrs	r3, r3, #20
 800584a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	4299      	cmp	r1, r3
 8005854:	d118      	bne.n	8005888 <_strtod_l+0x8e8>
 8005856:	4b96      	ldr	r3, [pc, #600]	; (8005ab0 <_strtod_l+0xb10>)
 8005858:	459a      	cmp	sl, r3
 800585a:	d102      	bne.n	8005862 <_strtod_l+0x8c2>
 800585c:	3101      	adds	r1, #1
 800585e:	f43f addd 	beq.w	800541c <_strtod_l+0x47c>
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	4b91      	ldr	r3, [pc, #580]	; (8005aac <_strtod_l+0xb0c>)
 8005868:	ea0a 0303 	and.w	r3, sl, r3
 800586c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d19a      	bne.n	80057ac <_strtod_l+0x80c>
 8005876:	e5db      	b.n	8005430 <_strtod_l+0x490>
 8005878:	f04f 33ff 	mov.w	r3, #4294967295
 800587c:	e7e9      	b.n	8005852 <_strtod_l+0x8b2>
 800587e:	4613      	mov	r3, r2
 8005880:	e7e7      	b.n	8005852 <_strtod_l+0x8b2>
 8005882:	ea53 0308 	orrs.w	r3, r3, r8
 8005886:	d081      	beq.n	800578c <_strtod_l+0x7ec>
 8005888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800588a:	b1e3      	cbz	r3, 80058c6 <_strtod_l+0x926>
 800588c:	ea13 0f0a 	tst.w	r3, sl
 8005890:	d0ee      	beq.n	8005870 <_strtod_l+0x8d0>
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	4640      	mov	r0, r8
 8005896:	4649      	mov	r1, r9
 8005898:	9a05      	ldr	r2, [sp, #20]
 800589a:	b1c3      	cbz	r3, 80058ce <_strtod_l+0x92e>
 800589c:	f7ff fb5c 	bl	8004f58 <sulp>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058a8:	f7fa fc60 	bl	800016c <__adddf3>
 80058ac:	4680      	mov	r8, r0
 80058ae:	4689      	mov	r9, r1
 80058b0:	e7de      	b.n	8005870 <_strtod_l+0x8d0>
 80058b2:	4013      	ands	r3, r2
 80058b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80058b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80058bc:	f04f 38ff 	mov.w	r8, #4294967295
 80058c0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80058c4:	e7d4      	b.n	8005870 <_strtod_l+0x8d0>
 80058c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058c8:	ea13 0f08 	tst.w	r3, r8
 80058cc:	e7e0      	b.n	8005890 <_strtod_l+0x8f0>
 80058ce:	f7ff fb43 	bl	8004f58 <sulp>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058da:	f7fa fc45 	bl	8000168 <__aeabi_dsub>
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	4680      	mov	r8, r0
 80058e4:	4689      	mov	r9, r1
 80058e6:	f7fb f85f 	bl	80009a8 <__aeabi_dcmpeq>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0c0      	beq.n	8005870 <_strtod_l+0x8d0>
 80058ee:	e606      	b.n	80054fe <_strtod_l+0x55e>
 80058f0:	4659      	mov	r1, fp
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff fabe 	bl	8004e74 <__ratio>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005900:	2200      	movs	r2, #0
 8005902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005906:	f7fb f863 	bl	80009d0 <__aeabi_dcmple>
 800590a:	2800      	cmp	r0, #0
 800590c:	d06f      	beq.n	80059ee <_strtod_l+0xa4e>
 800590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d17c      	bne.n	8005a0e <_strtod_l+0xa6e>
 8005914:	f1b8 0f00 	cmp.w	r8, #0
 8005918:	d159      	bne.n	80059ce <_strtod_l+0xa2e>
 800591a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800591e:	2b00      	cmp	r3, #0
 8005920:	d17b      	bne.n	8005a1a <_strtod_l+0xa7a>
 8005922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005926:	2200      	movs	r2, #0
 8005928:	4b62      	ldr	r3, [pc, #392]	; (8005ab4 <_strtod_l+0xb14>)
 800592a:	f7fb f847 	bl	80009bc <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d15a      	bne.n	80059e8 <_strtod_l+0xa48>
 8005932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005936:	2200      	movs	r2, #0
 8005938:	4b5f      	ldr	r3, [pc, #380]	; (8005ab8 <_strtod_l+0xb18>)
 800593a:	f7fa fdcd 	bl	80004d8 <__aeabi_dmul>
 800593e:	4605      	mov	r5, r0
 8005940:	460f      	mov	r7, r1
 8005942:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005946:	9506      	str	r5, [sp, #24]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800594e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005952:	4b56      	ldr	r3, [pc, #344]	; (8005aac <_strtod_l+0xb0c>)
 8005954:	4a55      	ldr	r2, [pc, #340]	; (8005aac <_strtod_l+0xb0c>)
 8005956:	ea0a 0303 	and.w	r3, sl, r3
 800595a:	9313      	str	r3, [sp, #76]	; 0x4c
 800595c:	4b57      	ldr	r3, [pc, #348]	; (8005abc <_strtod_l+0xb1c>)
 800595e:	ea0a 0202 	and.w	r2, sl, r2
 8005962:	429a      	cmp	r2, r3
 8005964:	f040 80b0 	bne.w	8005ac8 <_strtod_l+0xb28>
 8005968:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7ff f9c2 	bl	8004cf8 <__ulp>
 8005974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005978:	f7fa fdae 	bl	80004d8 <__aeabi_dmul>
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	f7fa fbf4 	bl	800016c <__adddf3>
 8005984:	f8df a124 	ldr.w	sl, [pc, #292]	; 8005aac <_strtod_l+0xb0c>
 8005988:	4a4d      	ldr	r2, [pc, #308]	; (8005ac0 <_strtod_l+0xb20>)
 800598a:	ea01 0a0a 	and.w	sl, r1, sl
 800598e:	4592      	cmp	sl, r2
 8005990:	4680      	mov	r8, r0
 8005992:	d948      	bls.n	8005a26 <_strtod_l+0xa86>
 8005994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005996:	4b46      	ldr	r3, [pc, #280]	; (8005ab0 <_strtod_l+0xb10>)
 8005998:	429a      	cmp	r2, r3
 800599a:	d103      	bne.n	80059a4 <_strtod_l+0xa04>
 800599c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800599e:	3301      	adds	r3, #1
 80059a0:	f43f ad3c 	beq.w	800541c <_strtod_l+0x47c>
 80059a4:	f04f 38ff 	mov.w	r8, #4294967295
 80059a8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005ab0 <_strtod_l+0xb10>
 80059ac:	4620      	mov	r0, r4
 80059ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059b0:	f7fe fe76 	bl	80046a0 <_Bfree>
 80059b4:	4620      	mov	r0, r4
 80059b6:	9908      	ldr	r1, [sp, #32]
 80059b8:	f7fe fe72 	bl	80046a0 <_Bfree>
 80059bc:	4659      	mov	r1, fp
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fe fe6e 	bl	80046a0 <_Bfree>
 80059c4:	4631      	mov	r1, r6
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fe fe6a 	bl	80046a0 <_Bfree>
 80059cc:	e605      	b.n	80055da <_strtod_l+0x63a>
 80059ce:	f1b8 0f01 	cmp.w	r8, #1
 80059d2:	d103      	bne.n	80059dc <_strtod_l+0xa3c>
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	f43f ad91 	beq.w	80054fe <_strtod_l+0x55e>
 80059dc:	2200      	movs	r2, #0
 80059de:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <_strtod_l+0xb24>)
 80059e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80059e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059e6:	e016      	b.n	8005a16 <_strtod_l+0xa76>
 80059e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80059ea:	4f33      	ldr	r7, [pc, #204]	; (8005ab8 <_strtod_l+0xb18>)
 80059ec:	e7a9      	b.n	8005942 <_strtod_l+0x9a2>
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <_strtod_l+0xb18>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059f6:	f7fa fd6f 	bl	80004d8 <__aeabi_dmul>
 80059fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fc:	4605      	mov	r5, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d09e      	beq.n	8005942 <_strtod_l+0x9a2>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a0c:	e79d      	b.n	800594a <_strtod_l+0x9aa>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <_strtod_l+0xb14>)
 8005a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a16:	4f27      	ldr	r7, [pc, #156]	; (8005ab4 <_strtod_l+0xb14>)
 8005a18:	e797      	b.n	800594a <_strtod_l+0x9aa>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <_strtod_l+0xb24>)
 8005a1e:	4645      	mov	r5, r8
 8005a20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a24:	e7f7      	b.n	8005a16 <_strtod_l+0xa76>
 8005a26:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8005a2a:	9b05      	ldr	r3, [sp, #20]
 8005a2c:	46ca      	mov	sl, r9
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1bc      	bne.n	80059ac <_strtod_l+0xa0c>
 8005a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	051b      	lsls	r3, r3, #20
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d1b5      	bne.n	80059ac <_strtod_l+0xa0c>
 8005a40:	4628      	mov	r0, r5
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fb f890 	bl	8000b68 <__aeabi_d2lz>
 8005a48:	f7fa fd18 	bl	800047c <__aeabi_l2d>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4628      	mov	r0, r5
 8005a52:	4639      	mov	r1, r7
 8005a54:	f7fa fb88 	bl	8000168 <__aeabi_dsub>
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8005a60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a66:	ea4a 0a08 	orr.w	sl, sl, r8
 8005a6a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005a6e:	d06c      	beq.n	8005b4a <_strtod_l+0xbaa>
 8005a70:	a309      	add	r3, pc, #36	; (adr r3, 8005a98 <_strtod_l+0xaf8>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa ffa1 	bl	80009bc <__aeabi_dcmplt>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f47f acd8 	bne.w	8005430 <_strtod_l+0x490>
 8005a80:	a307      	add	r3, pc, #28	; (adr r3, 8005aa0 <_strtod_l+0xb00>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a8a:	f7fa ffb5 	bl	80009f8 <__aeabi_dcmpgt>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d08c      	beq.n	80059ac <_strtod_l+0xa0c>
 8005a92:	e4cd      	b.n	8005430 <_strtod_l+0x490>
 8005a94:	f3af 8000 	nop.w
 8005a98:	94a03595 	.word	0x94a03595
 8005a9c:	3fdfffff 	.word	0x3fdfffff
 8005aa0:	35afe535 	.word	0x35afe535
 8005aa4:	3fe00000 	.word	0x3fe00000
 8005aa8:	000fffff 	.word	0x000fffff
 8005aac:	7ff00000 	.word	0x7ff00000
 8005ab0:	7fefffff 	.word	0x7fefffff
 8005ab4:	3ff00000 	.word	0x3ff00000
 8005ab8:	3fe00000 	.word	0x3fe00000
 8005abc:	7fe00000 	.word	0x7fe00000
 8005ac0:	7c9fffff 	.word	0x7c9fffff
 8005ac4:	bff00000 	.word	0xbff00000
 8005ac8:	9b05      	ldr	r3, [sp, #20]
 8005aca:	b333      	cbz	r3, 8005b1a <_strtod_l+0xb7a>
 8005acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ace:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ad2:	d822      	bhi.n	8005b1a <_strtod_l+0xb7a>
 8005ad4:	a328      	add	r3, pc, #160	; (adr r3, 8005b78 <_strtod_l+0xbd8>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	4628      	mov	r0, r5
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa ff77 	bl	80009d0 <__aeabi_dcmple>
 8005ae2:	b1a0      	cbz	r0, 8005b0e <_strtod_l+0xb6e>
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7fa ffce 	bl	8000a88 <__aeabi_d2uiz>
 8005aec:	2801      	cmp	r0, #1
 8005aee:	bf38      	it	cc
 8005af0:	2001      	movcc	r0, #1
 8005af2:	f7fa fc77 	bl	80003e4 <__aeabi_ui2d>
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	4605      	mov	r5, r0
 8005afa:	460f      	mov	r7, r1
 8005afc:	bb03      	cbnz	r3, 8005b40 <_strtod_l+0xba0>
 8005afe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b02:	9014      	str	r0, [sp, #80]	; 0x50
 8005b04:	9315      	str	r3, [sp, #84]	; 0x54
 8005b06:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b12:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	9311      	str	r3, [sp, #68]	; 0x44
 8005b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b1e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8005b22:	f7ff f8e9 	bl	8004cf8 <__ulp>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fcd3 	bl	80004d8 <__aeabi_dmul>
 8005b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b36:	f7fa fb19 	bl	800016c <__adddf3>
 8005b3a:	4680      	mov	r8, r0
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	e774      	b.n	8005a2a <_strtod_l+0xa8a>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005b48:	e7dd      	b.n	8005b06 <_strtod_l+0xb66>
 8005b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8005b80 <_strtod_l+0xbe0>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa ff34 	bl	80009bc <__aeabi_dcmplt>
 8005b54:	e79b      	b.n	8005a8e <_strtod_l+0xaee>
 8005b56:	2300      	movs	r3, #0
 8005b58:	930e      	str	r3, [sp, #56]	; 0x38
 8005b5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	f7ff ba5b 	b.w	800501a <_strtod_l+0x7a>
 8005b64:	2a65      	cmp	r2, #101	; 0x65
 8005b66:	f43f ab52 	beq.w	800520e <_strtod_l+0x26e>
 8005b6a:	2a45      	cmp	r2, #69	; 0x45
 8005b6c:	f43f ab4f 	beq.w	800520e <_strtod_l+0x26e>
 8005b70:	2301      	movs	r3, #1
 8005b72:	f7ff bb87 	b.w	8005284 <_strtod_l+0x2e4>
 8005b76:	bf00      	nop
 8005b78:	ffc00000 	.word	0xffc00000
 8005b7c:	41dfffff 	.word	0x41dfffff
 8005b80:	94a03595 	.word	0x94a03595
 8005b84:	3fcfffff 	.word	0x3fcfffff

08005b88 <_strtod_r>:
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <_strtod_r+0x8>)
 8005b8a:	f7ff ba09 	b.w	8004fa0 <_strtod_l>
 8005b8e:	bf00      	nop
 8005b90:	20000068 	.word	0x20000068

08005b94 <_strtol_l.constprop.0>:
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9a:	4686      	mov	lr, r0
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	d001      	beq.n	8005ba4 <_strtol_l.constprop.0+0x10>
 8005ba0:	2b24      	cmp	r3, #36	; 0x24
 8005ba2:	d906      	bls.n	8005bb2 <_strtol_l.constprop.0+0x1e>
 8005ba4:	f7fd fd92 	bl	80036cc <__errno>
 8005ba8:	2316      	movs	r3, #22
 8005baa:	6003      	str	r3, [r0, #0]
 8005bac:	2000      	movs	r0, #0
 8005bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	4835      	ldr	r0, [pc, #212]	; (8005c8c <_strtol_l.constprop.0+0xf8>)
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bbc:	5d06      	ldrb	r6, [r0, r4]
 8005bbe:	f016 0608 	ands.w	r6, r6, #8
 8005bc2:	d1f8      	bne.n	8005bb6 <_strtol_l.constprop.0+0x22>
 8005bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8005bc6:	d12e      	bne.n	8005c26 <_strtol_l.constprop.0+0x92>
 8005bc8:	2601      	movs	r6, #1
 8005bca:	782c      	ldrb	r4, [r5, #0]
 8005bcc:	1c95      	adds	r5, r2, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d057      	beq.n	8005c82 <_strtol_l.constprop.0+0xee>
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d109      	bne.n	8005bea <_strtol_l.constprop.0+0x56>
 8005bd6:	2c30      	cmp	r4, #48	; 0x30
 8005bd8:	d107      	bne.n	8005bea <_strtol_l.constprop.0+0x56>
 8005bda:	782a      	ldrb	r2, [r5, #0]
 8005bdc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005be0:	2a58      	cmp	r2, #88	; 0x58
 8005be2:	d149      	bne.n	8005c78 <_strtol_l.constprop.0+0xe4>
 8005be4:	2310      	movs	r3, #16
 8005be6:	786c      	ldrb	r4, [r5, #1]
 8005be8:	3502      	adds	r5, #2
 8005bea:	2200      	movs	r2, #0
 8005bec:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005bf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bf4:	fbbc f9f3 	udiv	r9, ip, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	fb03 ca19 	mls	sl, r3, r9, ip
 8005bfe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005c02:	2f09      	cmp	r7, #9
 8005c04:	d814      	bhi.n	8005c30 <_strtol_l.constprop.0+0x9c>
 8005c06:	463c      	mov	r4, r7
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	dd20      	ble.n	8005c4e <_strtol_l.constprop.0+0xba>
 8005c0c:	1c57      	adds	r7, r2, #1
 8005c0e:	d007      	beq.n	8005c20 <_strtol_l.constprop.0+0x8c>
 8005c10:	4581      	cmp	r9, r0
 8005c12:	d319      	bcc.n	8005c48 <_strtol_l.constprop.0+0xb4>
 8005c14:	d101      	bne.n	8005c1a <_strtol_l.constprop.0+0x86>
 8005c16:	45a2      	cmp	sl, r4
 8005c18:	db16      	blt.n	8005c48 <_strtol_l.constprop.0+0xb4>
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	fb00 4003 	mla	r0, r0, r3, r4
 8005c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c24:	e7eb      	b.n	8005bfe <_strtol_l.constprop.0+0x6a>
 8005c26:	2c2b      	cmp	r4, #43	; 0x2b
 8005c28:	bf04      	itt	eq
 8005c2a:	782c      	ldrbeq	r4, [r5, #0]
 8005c2c:	1c95      	addeq	r5, r2, #2
 8005c2e:	e7ce      	b.n	8005bce <_strtol_l.constprop.0+0x3a>
 8005c30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005c34:	2f19      	cmp	r7, #25
 8005c36:	d801      	bhi.n	8005c3c <_strtol_l.constprop.0+0xa8>
 8005c38:	3c37      	subs	r4, #55	; 0x37
 8005c3a:	e7e5      	b.n	8005c08 <_strtol_l.constprop.0+0x74>
 8005c3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005c40:	2f19      	cmp	r7, #25
 8005c42:	d804      	bhi.n	8005c4e <_strtol_l.constprop.0+0xba>
 8005c44:	3c57      	subs	r4, #87	; 0x57
 8005c46:	e7df      	b.n	8005c08 <_strtol_l.constprop.0+0x74>
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4c:	e7e8      	b.n	8005c20 <_strtol_l.constprop.0+0x8c>
 8005c4e:	1c53      	adds	r3, r2, #1
 8005c50:	d108      	bne.n	8005c64 <_strtol_l.constprop.0+0xd0>
 8005c52:	2322      	movs	r3, #34	; 0x22
 8005c54:	4660      	mov	r0, ip
 8005c56:	f8ce 3000 	str.w	r3, [lr]
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	d0a6      	beq.n	8005bae <_strtol_l.constprop.0+0x1a>
 8005c60:	1e69      	subs	r1, r5, #1
 8005c62:	e006      	b.n	8005c72 <_strtol_l.constprop.0+0xde>
 8005c64:	b106      	cbz	r6, 8005c68 <_strtol_l.constprop.0+0xd4>
 8005c66:	4240      	negs	r0, r0
 8005c68:	f1b8 0f00 	cmp.w	r8, #0
 8005c6c:	d09f      	beq.n	8005bae <_strtol_l.constprop.0+0x1a>
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	d1f6      	bne.n	8005c60 <_strtol_l.constprop.0+0xcc>
 8005c72:	f8c8 1000 	str.w	r1, [r8]
 8005c76:	e79a      	b.n	8005bae <_strtol_l.constprop.0+0x1a>
 8005c78:	2430      	movs	r4, #48	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1b5      	bne.n	8005bea <_strtol_l.constprop.0+0x56>
 8005c7e:	2308      	movs	r3, #8
 8005c80:	e7b3      	b.n	8005bea <_strtol_l.constprop.0+0x56>
 8005c82:	2c30      	cmp	r4, #48	; 0x30
 8005c84:	d0a9      	beq.n	8005bda <_strtol_l.constprop.0+0x46>
 8005c86:	230a      	movs	r3, #10
 8005c88:	e7af      	b.n	8005bea <_strtol_l.constprop.0+0x56>
 8005c8a:	bf00      	nop
 8005c8c:	08007121 	.word	0x08007121

08005c90 <_strtol_r>:
 8005c90:	f7ff bf80 	b.w	8005b94 <_strtol_l.constprop.0>

08005c94 <__ssputs_r>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	461f      	mov	r7, r3
 8005c9a:	688e      	ldr	r6, [r1, #8]
 8005c9c:	4682      	mov	sl, r0
 8005c9e:	42be      	cmp	r6, r7
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	4690      	mov	r8, r2
 8005ca4:	680b      	ldr	r3, [r1, #0]
 8005ca6:	d82c      	bhi.n	8005d02 <__ssputs_r+0x6e>
 8005ca8:	898a      	ldrh	r2, [r1, #12]
 8005caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cae:	d026      	beq.n	8005cfe <__ssputs_r+0x6a>
 8005cb0:	6965      	ldr	r5, [r4, #20]
 8005cb2:	6909      	ldr	r1, [r1, #16]
 8005cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb8:	eba3 0901 	sub.w	r9, r3, r1
 8005cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc0:	1c7b      	adds	r3, r7, #1
 8005cc2:	444b      	add	r3, r9
 8005cc4:	106d      	asrs	r5, r5, #1
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	bf38      	it	cc
 8005cca:	461d      	movcc	r5, r3
 8005ccc:	0553      	lsls	r3, r2, #21
 8005cce:	d527      	bpl.n	8005d20 <__ssputs_r+0x8c>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fe fc19 	bl	8004508 <_malloc_r>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	b360      	cbz	r0, 8005d34 <__ssputs_r+0xa0>
 8005cda:	464a      	mov	r2, r9
 8005cdc:	6921      	ldr	r1, [r4, #16]
 8005cde:	f000 fa17 	bl	8006110 <memcpy>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	6126      	str	r6, [r4, #16]
 8005cf0:	444e      	add	r6, r9
 8005cf2:	6026      	str	r6, [r4, #0]
 8005cf4:	463e      	mov	r6, r7
 8005cf6:	6165      	str	r5, [r4, #20]
 8005cf8:	eba5 0509 	sub.w	r5, r5, r9
 8005cfc:	60a5      	str	r5, [r4, #8]
 8005cfe:	42be      	cmp	r6, r7
 8005d00:	d900      	bls.n	8005d04 <__ssputs_r+0x70>
 8005d02:	463e      	mov	r6, r7
 8005d04:	4632      	mov	r2, r6
 8005d06:	4641      	mov	r1, r8
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	f000 f9c5 	bl	8006098 <memmove>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	68a3      	ldr	r3, [r4, #8]
 8005d12:	1b9b      	subs	r3, r3, r6
 8005d14:	60a3      	str	r3, [r4, #8]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	4433      	add	r3, r6
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	462a      	mov	r2, r5
 8005d22:	f000 fda6 	bl	8006872 <_realloc_r>
 8005d26:	4606      	mov	r6, r0
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d1e0      	bne.n	8005cee <__ssputs_r+0x5a>
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	6921      	ldr	r1, [r4, #16]
 8005d30:	f7fe fb7a 	bl	8004428 <_free_r>
 8005d34:	230c      	movs	r3, #12
 8005d36:	f8ca 3000 	str.w	r3, [sl]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	e7e9      	b.n	8005d1c <__ssputs_r+0x88>

08005d48 <_svfiprintf_r>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	4698      	mov	r8, r3
 8005d4e:	898b      	ldrh	r3, [r1, #12]
 8005d50:	4607      	mov	r7, r0
 8005d52:	061b      	lsls	r3, r3, #24
 8005d54:	460d      	mov	r5, r1
 8005d56:	4614      	mov	r4, r2
 8005d58:	b09d      	sub	sp, #116	; 0x74
 8005d5a:	d50e      	bpl.n	8005d7a <_svfiprintf_r+0x32>
 8005d5c:	690b      	ldr	r3, [r1, #16]
 8005d5e:	b963      	cbnz	r3, 8005d7a <_svfiprintf_r+0x32>
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	f7fe fbd1 	bl	8004508 <_malloc_r>
 8005d66:	6028      	str	r0, [r5, #0]
 8005d68:	6128      	str	r0, [r5, #16]
 8005d6a:	b920      	cbnz	r0, 8005d76 <_svfiprintf_r+0x2e>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e0d0      	b.n	8005f18 <_svfiprintf_r+0x1d0>
 8005d76:	2340      	movs	r3, #64	; 0x40
 8005d78:	616b      	str	r3, [r5, #20]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7e:	2320      	movs	r3, #32
 8005d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d84:	2330      	movs	r3, #48	; 0x30
 8005d86:	f04f 0901 	mov.w	r9, #1
 8005d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005f30 <_svfiprintf_r+0x1e8>
 8005d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d96:	4623      	mov	r3, r4
 8005d98:	469a      	mov	sl, r3
 8005d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d9e:	b10a      	cbz	r2, 8005da4 <_svfiprintf_r+0x5c>
 8005da0:	2a25      	cmp	r2, #37	; 0x25
 8005da2:	d1f9      	bne.n	8005d98 <_svfiprintf_r+0x50>
 8005da4:	ebba 0b04 	subs.w	fp, sl, r4
 8005da8:	d00b      	beq.n	8005dc2 <_svfiprintf_r+0x7a>
 8005daa:	465b      	mov	r3, fp
 8005dac:	4622      	mov	r2, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ff6f 	bl	8005c94 <__ssputs_r>
 8005db6:	3001      	adds	r0, #1
 8005db8:	f000 80a9 	beq.w	8005f0e <_svfiprintf_r+0x1c6>
 8005dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dbe:	445a      	add	r2, fp
 8005dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80a1 	beq.w	8005f0e <_svfiprintf_r+0x1c6>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd6:	f10a 0a01 	add.w	sl, sl, #1
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de2:	931a      	str	r3, [sp, #104]	; 0x68
 8005de4:	4654      	mov	r4, sl
 8005de6:	2205      	movs	r2, #5
 8005de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dec:	4850      	ldr	r0, [pc, #320]	; (8005f30 <_svfiprintf_r+0x1e8>)
 8005dee:	f7fd fc9a 	bl	8003726 <memchr>
 8005df2:	9a04      	ldr	r2, [sp, #16]
 8005df4:	b9d8      	cbnz	r0, 8005e2e <_svfiprintf_r+0xe6>
 8005df6:	06d0      	lsls	r0, r2, #27
 8005df8:	bf44      	itt	mi
 8005dfa:	2320      	movmi	r3, #32
 8005dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e00:	0711      	lsls	r1, r2, #28
 8005e02:	bf44      	itt	mi
 8005e04:	232b      	movmi	r3, #43	; 0x2b
 8005e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e10:	d015      	beq.n	8005e3e <_svfiprintf_r+0xf6>
 8005e12:	4654      	mov	r4, sl
 8005e14:	2000      	movs	r0, #0
 8005e16:	f04f 0c0a 	mov.w	ip, #10
 8005e1a:	9a07      	ldr	r2, [sp, #28]
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e22:	3b30      	subs	r3, #48	; 0x30
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d94d      	bls.n	8005ec4 <_svfiprintf_r+0x17c>
 8005e28:	b1b0      	cbz	r0, 8005e58 <_svfiprintf_r+0x110>
 8005e2a:	9207      	str	r2, [sp, #28]
 8005e2c:	e014      	b.n	8005e58 <_svfiprintf_r+0x110>
 8005e2e:	eba0 0308 	sub.w	r3, r0, r8
 8005e32:	fa09 f303 	lsl.w	r3, r9, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	46a2      	mov	sl, r4
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	e7d2      	b.n	8005de4 <_svfiprintf_r+0x9c>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	1d19      	adds	r1, r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	9103      	str	r1, [sp, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfbb      	ittet	lt
 8005e4a:	425b      	neglt	r3, r3
 8005e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e50:	9307      	strge	r3, [sp, #28]
 8005e52:	9307      	strlt	r3, [sp, #28]
 8005e54:	bfb8      	it	lt
 8005e56:	9204      	strlt	r2, [sp, #16]
 8005e58:	7823      	ldrb	r3, [r4, #0]
 8005e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e5c:	d10c      	bne.n	8005e78 <_svfiprintf_r+0x130>
 8005e5e:	7863      	ldrb	r3, [r4, #1]
 8005e60:	2b2a      	cmp	r3, #42	; 0x2a
 8005e62:	d134      	bne.n	8005ece <_svfiprintf_r+0x186>
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	3402      	adds	r4, #2
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfb8      	it	lt
 8005e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005f34 <_svfiprintf_r+0x1ec>
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	4650      	mov	r0, sl
 8005e80:	7821      	ldrb	r1, [r4, #0]
 8005e82:	f7fd fc50 	bl	8003726 <memchr>
 8005e86:	b138      	cbz	r0, 8005e98 <_svfiprintf_r+0x150>
 8005e88:	2240      	movs	r2, #64	; 0x40
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	eba0 000a 	sub.w	r0, r0, sl
 8005e90:	4082      	lsls	r2, r0
 8005e92:	4313      	orrs	r3, r2
 8005e94:	3401      	adds	r4, #1
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9c:	2206      	movs	r2, #6
 8005e9e:	4826      	ldr	r0, [pc, #152]	; (8005f38 <_svfiprintf_r+0x1f0>)
 8005ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ea4:	f7fd fc3f 	bl	8003726 <memchr>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d038      	beq.n	8005f1e <_svfiprintf_r+0x1d6>
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <_svfiprintf_r+0x1f4>)
 8005eae:	bb1b      	cbnz	r3, 8005ef8 <_svfiprintf_r+0x1b0>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	3308      	adds	r3, #8
 8005eba:	9303      	str	r3, [sp, #12]
 8005ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ebe:	4433      	add	r3, r6
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	e768      	b.n	8005d96 <_svfiprintf_r+0x4e>
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ecc:	e7a6      	b.n	8005e1c <_svfiprintf_r+0xd4>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f04f 0c0a 	mov.w	ip, #10
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	9305      	str	r3, [sp, #20]
 8005eda:	4620      	mov	r0, r4
 8005edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee0:	3a30      	subs	r2, #48	; 0x30
 8005ee2:	2a09      	cmp	r2, #9
 8005ee4:	d903      	bls.n	8005eee <_svfiprintf_r+0x1a6>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0c6      	beq.n	8005e78 <_svfiprintf_r+0x130>
 8005eea:	9105      	str	r1, [sp, #20]
 8005eec:	e7c4      	b.n	8005e78 <_svfiprintf_r+0x130>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef6:	e7f0      	b.n	8005eda <_svfiprintf_r+0x192>
 8005ef8:	ab03      	add	r3, sp, #12
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	462a      	mov	r2, r5
 8005efe:	4638      	mov	r0, r7
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <_svfiprintf_r+0x1f8>)
 8005f02:	a904      	add	r1, sp, #16
 8005f04:	f7fc fc9a 	bl	800283c <_printf_float>
 8005f08:	1c42      	adds	r2, r0, #1
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	d1d6      	bne.n	8005ebc <_svfiprintf_r+0x174>
 8005f0e:	89ab      	ldrh	r3, [r5, #12]
 8005f10:	065b      	lsls	r3, r3, #25
 8005f12:	f53f af2d 	bmi.w	8005d70 <_svfiprintf_r+0x28>
 8005f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f18:	b01d      	add	sp, #116	; 0x74
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	ab03      	add	r3, sp, #12
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	462a      	mov	r2, r5
 8005f24:	4638      	mov	r0, r7
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <_svfiprintf_r+0x1f8>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	f7fc ff27 	bl	8002d7c <_printf_i>
 8005f2e:	e7eb      	b.n	8005f08 <_svfiprintf_r+0x1c0>
 8005f30:	08007221 	.word	0x08007221
 8005f34:	08007227 	.word	0x08007227
 8005f38:	0800722b 	.word	0x0800722b
 8005f3c:	0800283d 	.word	0x0800283d
 8005f40:	08005c95 	.word	0x08005c95

08005f44 <__sflush_r>:
 8005f44:	898a      	ldrh	r2, [r1, #12]
 8005f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f48:	4605      	mov	r5, r0
 8005f4a:	0710      	lsls	r0, r2, #28
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	d457      	bmi.n	8006000 <__sflush_r+0xbc>
 8005f50:	684b      	ldr	r3, [r1, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dc04      	bgt.n	8005f60 <__sflush_r+0x1c>
 8005f56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dc01      	bgt.n	8005f60 <__sflush_r+0x1c>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d0fa      	beq.n	8005f5c <__sflush_r+0x18>
 8005f66:	2300      	movs	r3, #0
 8005f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f6c:	682f      	ldr	r7, [r5, #0]
 8005f6e:	6a21      	ldr	r1, [r4, #32]
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	d032      	beq.n	8005fda <__sflush_r+0x96>
 8005f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	075a      	lsls	r2, r3, #29
 8005f7a:	d505      	bpl.n	8005f88 <__sflush_r+0x44>
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	1ac0      	subs	r0, r0, r3
 8005f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f82:	b10b      	cbz	r3, 8005f88 <__sflush_r+0x44>
 8005f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f86:	1ac0      	subs	r0, r0, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f8e:	4628      	mov	r0, r5
 8005f90:	6a21      	ldr	r1, [r4, #32]
 8005f92:	47b0      	blx	r6
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	d106      	bne.n	8005fa8 <__sflush_r+0x64>
 8005f9a:	6829      	ldr	r1, [r5, #0]
 8005f9c:	291d      	cmp	r1, #29
 8005f9e:	d82b      	bhi.n	8005ff8 <__sflush_r+0xb4>
 8005fa0:	4a28      	ldr	r2, [pc, #160]	; (8006044 <__sflush_r+0x100>)
 8005fa2:	410a      	asrs	r2, r1
 8005fa4:	07d6      	lsls	r6, r2, #31
 8005fa6:	d427      	bmi.n	8005ff8 <__sflush_r+0xb4>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6062      	str	r2, [r4, #4]
 8005fac:	6922      	ldr	r2, [r4, #16]
 8005fae:	04d9      	lsls	r1, r3, #19
 8005fb0:	6022      	str	r2, [r4, #0]
 8005fb2:	d504      	bpl.n	8005fbe <__sflush_r+0x7a>
 8005fb4:	1c42      	adds	r2, r0, #1
 8005fb6:	d101      	bne.n	8005fbc <__sflush_r+0x78>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b903      	cbnz	r3, 8005fbe <__sflush_r+0x7a>
 8005fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8005fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc0:	602f      	str	r7, [r5, #0]
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d0ca      	beq.n	8005f5c <__sflush_r+0x18>
 8005fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d002      	beq.n	8005fd4 <__sflush_r+0x90>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f7fe fa2a 	bl	8004428 <_free_r>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8005fd8:	e7c1      	b.n	8005f5e <__sflush_r+0x1a>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b0      	blx	r6
 8005fe0:	1c41      	adds	r1, r0, #1
 8005fe2:	d1c8      	bne.n	8005f76 <__sflush_r+0x32>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0c5      	beq.n	8005f76 <__sflush_r+0x32>
 8005fea:	2b1d      	cmp	r3, #29
 8005fec:	d001      	beq.n	8005ff2 <__sflush_r+0xae>
 8005fee:	2b16      	cmp	r3, #22
 8005ff0:	d101      	bne.n	8005ff6 <__sflush_r+0xb2>
 8005ff2:	602f      	str	r7, [r5, #0]
 8005ff4:	e7b2      	b.n	8005f5c <__sflush_r+0x18>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	e7ae      	b.n	8005f5e <__sflush_r+0x1a>
 8006000:	690f      	ldr	r7, [r1, #16]
 8006002:	2f00      	cmp	r7, #0
 8006004:	d0aa      	beq.n	8005f5c <__sflush_r+0x18>
 8006006:	0793      	lsls	r3, r2, #30
 8006008:	bf18      	it	ne
 800600a:	2300      	movne	r3, #0
 800600c:	680e      	ldr	r6, [r1, #0]
 800600e:	bf08      	it	eq
 8006010:	694b      	ldreq	r3, [r1, #20]
 8006012:	1bf6      	subs	r6, r6, r7
 8006014:	600f      	str	r7, [r1, #0]
 8006016:	608b      	str	r3, [r1, #8]
 8006018:	2e00      	cmp	r6, #0
 800601a:	dd9f      	ble.n	8005f5c <__sflush_r+0x18>
 800601c:	4633      	mov	r3, r6
 800601e:	463a      	mov	r2, r7
 8006020:	4628      	mov	r0, r5
 8006022:	6a21      	ldr	r1, [r4, #32]
 8006024:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006028:	47e0      	blx	ip
 800602a:	2800      	cmp	r0, #0
 800602c:	dc06      	bgt.n	800603c <__sflush_r+0xf8>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	e790      	b.n	8005f5e <__sflush_r+0x1a>
 800603c:	4407      	add	r7, r0
 800603e:	1a36      	subs	r6, r6, r0
 8006040:	e7ea      	b.n	8006018 <__sflush_r+0xd4>
 8006042:	bf00      	nop
 8006044:	dfbffffe 	.word	0xdfbffffe

08006048 <_fflush_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	690b      	ldr	r3, [r1, #16]
 800604c:	4605      	mov	r5, r0
 800604e:	460c      	mov	r4, r1
 8006050:	b913      	cbnz	r3, 8006058 <_fflush_r+0x10>
 8006052:	2500      	movs	r5, #0
 8006054:	4628      	mov	r0, r5
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	b118      	cbz	r0, 8006062 <_fflush_r+0x1a>
 800605a:	6a03      	ldr	r3, [r0, #32]
 800605c:	b90b      	cbnz	r3, 8006062 <_fflush_r+0x1a>
 800605e:	f7fd fa49 	bl	80034f4 <__sinit>
 8006062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f3      	beq.n	8006052 <_fflush_r+0xa>
 800606a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800606c:	07d0      	lsls	r0, r2, #31
 800606e:	d404      	bmi.n	800607a <_fflush_r+0x32>
 8006070:	0599      	lsls	r1, r3, #22
 8006072:	d402      	bmi.n	800607a <_fflush_r+0x32>
 8006074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006076:	f7fd fb54 	bl	8003722 <__retarget_lock_acquire_recursive>
 800607a:	4628      	mov	r0, r5
 800607c:	4621      	mov	r1, r4
 800607e:	f7ff ff61 	bl	8005f44 <__sflush_r>
 8006082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006084:	4605      	mov	r5, r0
 8006086:	07da      	lsls	r2, r3, #31
 8006088:	d4e4      	bmi.n	8006054 <_fflush_r+0xc>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	059b      	lsls	r3, r3, #22
 800608e:	d4e1      	bmi.n	8006054 <_fflush_r+0xc>
 8006090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006092:	f7fd fb47 	bl	8003724 <__retarget_lock_release_recursive>
 8006096:	e7dd      	b.n	8006054 <_fflush_r+0xc>

08006098 <memmove>:
 8006098:	4288      	cmp	r0, r1
 800609a:	b510      	push	{r4, lr}
 800609c:	eb01 0402 	add.w	r4, r1, r2
 80060a0:	d902      	bls.n	80060a8 <memmove+0x10>
 80060a2:	4284      	cmp	r4, r0
 80060a4:	4623      	mov	r3, r4
 80060a6:	d807      	bhi.n	80060b8 <memmove+0x20>
 80060a8:	1e43      	subs	r3, r0, #1
 80060aa:	42a1      	cmp	r1, r4
 80060ac:	d008      	beq.n	80060c0 <memmove+0x28>
 80060ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060b6:	e7f8      	b.n	80060aa <memmove+0x12>
 80060b8:	4601      	mov	r1, r0
 80060ba:	4402      	add	r2, r0
 80060bc:	428a      	cmp	r2, r1
 80060be:	d100      	bne.n	80060c2 <memmove+0x2a>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ca:	e7f7      	b.n	80060bc <memmove+0x24>

080060cc <strncmp>:
 80060cc:	b510      	push	{r4, lr}
 80060ce:	b16a      	cbz	r2, 80060ec <strncmp+0x20>
 80060d0:	3901      	subs	r1, #1
 80060d2:	1884      	adds	r4, r0, r2
 80060d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060dc:	429a      	cmp	r2, r3
 80060de:	d103      	bne.n	80060e8 <strncmp+0x1c>
 80060e0:	42a0      	cmp	r0, r4
 80060e2:	d001      	beq.n	80060e8 <strncmp+0x1c>
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d1f5      	bne.n	80060d4 <strncmp+0x8>
 80060e8:	1ad0      	subs	r0, r2, r3
 80060ea:	bd10      	pop	{r4, pc}
 80060ec:	4610      	mov	r0, r2
 80060ee:	e7fc      	b.n	80060ea <strncmp+0x1e>

080060f0 <_sbrk_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	2300      	movs	r3, #0
 80060f4:	4d05      	ldr	r5, [pc, #20]	; (800610c <_sbrk_r+0x1c>)
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fb f86a 	bl	80011d4 <_sbrk>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_sbrk_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_sbrk_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	2000036c 	.word	0x2000036c

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	4291      	cmp	r1, r2
 8006124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <nan>:
 800612c:	2000      	movs	r0, #0
 800612e:	4901      	ldr	r1, [pc, #4]	; (8006134 <nan+0x8>)
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	7ff80000 	.word	0x7ff80000

08006138 <__assert_func>:
 8006138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800613a:	4614      	mov	r4, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4b09      	ldr	r3, [pc, #36]	; (8006164 <__assert_func+0x2c>)
 8006140:	4605      	mov	r5, r0
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68d8      	ldr	r0, [r3, #12]
 8006146:	b14c      	cbz	r4, 800615c <__assert_func+0x24>
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <__assert_func+0x30>)
 800614a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800614e:	9100      	str	r1, [sp, #0]
 8006150:	462b      	mov	r3, r5
 8006152:	4906      	ldr	r1, [pc, #24]	; (800616c <__assert_func+0x34>)
 8006154:	f000 fbca 	bl	80068ec <fiprintf>
 8006158:	f000 fbda 	bl	8006910 <abort>
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <__assert_func+0x38>)
 800615e:	461c      	mov	r4, r3
 8006160:	e7f3      	b.n	800614a <__assert_func+0x12>
 8006162:	bf00      	nop
 8006164:	20000064 	.word	0x20000064
 8006168:	0800723a 	.word	0x0800723a
 800616c:	08007247 	.word	0x08007247
 8006170:	08007275 	.word	0x08007275

08006174 <_calloc_r>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	fba1 5402 	umull	r5, r4, r1, r2
 800617a:	b934      	cbnz	r4, 800618a <_calloc_r+0x16>
 800617c:	4629      	mov	r1, r5
 800617e:	f7fe f9c3 	bl	8004508 <_malloc_r>
 8006182:	4606      	mov	r6, r0
 8006184:	b928      	cbnz	r0, 8006192 <_calloc_r+0x1e>
 8006186:	4630      	mov	r0, r6
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	220c      	movs	r2, #12
 800618c:	2600      	movs	r6, #0
 800618e:	6002      	str	r2, [r0, #0]
 8006190:	e7f9      	b.n	8006186 <_calloc_r+0x12>
 8006192:	462a      	mov	r2, r5
 8006194:	4621      	mov	r1, r4
 8006196:	f7fd fa46 	bl	8003626 <memset>
 800619a:	e7f4      	b.n	8006186 <_calloc_r+0x12>

0800619c <rshift>:
 800619c:	6903      	ldr	r3, [r0, #16]
 800619e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80061a6:	f100 0414 	add.w	r4, r0, #20
 80061aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80061ae:	dd46      	ble.n	800623e <rshift+0xa2>
 80061b0:	f011 011f 	ands.w	r1, r1, #31
 80061b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80061b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80061bc:	d10c      	bne.n	80061d8 <rshift+0x3c>
 80061be:	4629      	mov	r1, r5
 80061c0:	f100 0710 	add.w	r7, r0, #16
 80061c4:	42b1      	cmp	r1, r6
 80061c6:	d335      	bcc.n	8006234 <rshift+0x98>
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	1eea      	subs	r2, r5, #3
 80061ce:	4296      	cmp	r6, r2
 80061d0:	bf38      	it	cc
 80061d2:	2300      	movcc	r3, #0
 80061d4:	4423      	add	r3, r4
 80061d6:	e015      	b.n	8006204 <rshift+0x68>
 80061d8:	46a1      	mov	r9, r4
 80061da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80061de:	f1c1 0820 	rsb	r8, r1, #32
 80061e2:	40cf      	lsrs	r7, r1
 80061e4:	f105 0e04 	add.w	lr, r5, #4
 80061e8:	4576      	cmp	r6, lr
 80061ea:	46f4      	mov	ip, lr
 80061ec:	d816      	bhi.n	800621c <rshift+0x80>
 80061ee:	1a9a      	subs	r2, r3, r2
 80061f0:	0092      	lsls	r2, r2, #2
 80061f2:	3a04      	subs	r2, #4
 80061f4:	3501      	adds	r5, #1
 80061f6:	42ae      	cmp	r6, r5
 80061f8:	bf38      	it	cc
 80061fa:	2200      	movcc	r2, #0
 80061fc:	18a3      	adds	r3, r4, r2
 80061fe:	50a7      	str	r7, [r4, r2]
 8006200:	b107      	cbz	r7, 8006204 <rshift+0x68>
 8006202:	3304      	adds	r3, #4
 8006204:	42a3      	cmp	r3, r4
 8006206:	eba3 0204 	sub.w	r2, r3, r4
 800620a:	bf08      	it	eq
 800620c:	2300      	moveq	r3, #0
 800620e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006212:	6102      	str	r2, [r0, #16]
 8006214:	bf08      	it	eq
 8006216:	6143      	streq	r3, [r0, #20]
 8006218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800621c:	f8dc c000 	ldr.w	ip, [ip]
 8006220:	fa0c fc08 	lsl.w	ip, ip, r8
 8006224:	ea4c 0707 	orr.w	r7, ip, r7
 8006228:	f849 7b04 	str.w	r7, [r9], #4
 800622c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006230:	40cf      	lsrs	r7, r1
 8006232:	e7d9      	b.n	80061e8 <rshift+0x4c>
 8006234:	f851 cb04 	ldr.w	ip, [r1], #4
 8006238:	f847 cf04 	str.w	ip, [r7, #4]!
 800623c:	e7c2      	b.n	80061c4 <rshift+0x28>
 800623e:	4623      	mov	r3, r4
 8006240:	e7e0      	b.n	8006204 <rshift+0x68>

08006242 <__hexdig_fun>:
 8006242:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006246:	2b09      	cmp	r3, #9
 8006248:	d802      	bhi.n	8006250 <__hexdig_fun+0xe>
 800624a:	3820      	subs	r0, #32
 800624c:	b2c0      	uxtb	r0, r0
 800624e:	4770      	bx	lr
 8006250:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006254:	2b05      	cmp	r3, #5
 8006256:	d801      	bhi.n	800625c <__hexdig_fun+0x1a>
 8006258:	3847      	subs	r0, #71	; 0x47
 800625a:	e7f7      	b.n	800624c <__hexdig_fun+0xa>
 800625c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006260:	2b05      	cmp	r3, #5
 8006262:	d801      	bhi.n	8006268 <__hexdig_fun+0x26>
 8006264:	3827      	subs	r0, #39	; 0x27
 8006266:	e7f1      	b.n	800624c <__hexdig_fun+0xa>
 8006268:	2000      	movs	r0, #0
 800626a:	4770      	bx	lr

0800626c <__gethex>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4681      	mov	r9, r0
 8006272:	468a      	mov	sl, r1
 8006274:	4617      	mov	r7, r2
 8006276:	680a      	ldr	r2, [r1, #0]
 8006278:	b085      	sub	sp, #20
 800627a:	f102 0b02 	add.w	fp, r2, #2
 800627e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006282:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	32fe      	adds	r2, #254	; 0xfe
 800628a:	eb02 030b 	add.w	r3, r2, fp
 800628e:	46d8      	mov	r8, fp
 8006290:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	2830      	cmp	r0, #48	; 0x30
 8006298:	d0f7      	beq.n	800628a <__gethex+0x1e>
 800629a:	f7ff ffd2 	bl	8006242 <__hexdig_fun>
 800629e:	4604      	mov	r4, r0
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d138      	bne.n	8006316 <__gethex+0xaa>
 80062a4:	2201      	movs	r2, #1
 80062a6:	4640      	mov	r0, r8
 80062a8:	49a7      	ldr	r1, [pc, #668]	; (8006548 <__gethex+0x2dc>)
 80062aa:	f7ff ff0f 	bl	80060cc <strncmp>
 80062ae:	4606      	mov	r6, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d169      	bne.n	8006388 <__gethex+0x11c>
 80062b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80062b8:	465d      	mov	r5, fp
 80062ba:	f7ff ffc2 	bl	8006242 <__hexdig_fun>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d064      	beq.n	800638c <__gethex+0x120>
 80062c2:	465a      	mov	r2, fp
 80062c4:	7810      	ldrb	r0, [r2, #0]
 80062c6:	4690      	mov	r8, r2
 80062c8:	2830      	cmp	r0, #48	; 0x30
 80062ca:	f102 0201 	add.w	r2, r2, #1
 80062ce:	d0f9      	beq.n	80062c4 <__gethex+0x58>
 80062d0:	f7ff ffb7 	bl	8006242 <__hexdig_fun>
 80062d4:	2301      	movs	r3, #1
 80062d6:	fab0 f480 	clz	r4, r0
 80062da:	465e      	mov	r6, fp
 80062dc:	0964      	lsrs	r4, r4, #5
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	4642      	mov	r2, r8
 80062e2:	4615      	mov	r5, r2
 80062e4:	7828      	ldrb	r0, [r5, #0]
 80062e6:	3201      	adds	r2, #1
 80062e8:	f7ff ffab 	bl	8006242 <__hexdig_fun>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d1f8      	bne.n	80062e2 <__gethex+0x76>
 80062f0:	2201      	movs	r2, #1
 80062f2:	4628      	mov	r0, r5
 80062f4:	4994      	ldr	r1, [pc, #592]	; (8006548 <__gethex+0x2dc>)
 80062f6:	f7ff fee9 	bl	80060cc <strncmp>
 80062fa:	b978      	cbnz	r0, 800631c <__gethex+0xb0>
 80062fc:	b946      	cbnz	r6, 8006310 <__gethex+0xa4>
 80062fe:	1c6e      	adds	r6, r5, #1
 8006300:	4632      	mov	r2, r6
 8006302:	4615      	mov	r5, r2
 8006304:	7828      	ldrb	r0, [r5, #0]
 8006306:	3201      	adds	r2, #1
 8006308:	f7ff ff9b 	bl	8006242 <__hexdig_fun>
 800630c:	2800      	cmp	r0, #0
 800630e:	d1f8      	bne.n	8006302 <__gethex+0x96>
 8006310:	1b73      	subs	r3, r6, r5
 8006312:	009e      	lsls	r6, r3, #2
 8006314:	e004      	b.n	8006320 <__gethex+0xb4>
 8006316:	2400      	movs	r4, #0
 8006318:	4626      	mov	r6, r4
 800631a:	e7e1      	b.n	80062e0 <__gethex+0x74>
 800631c:	2e00      	cmp	r6, #0
 800631e:	d1f7      	bne.n	8006310 <__gethex+0xa4>
 8006320:	782b      	ldrb	r3, [r5, #0]
 8006322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006326:	2b50      	cmp	r3, #80	; 0x50
 8006328:	d13d      	bne.n	80063a6 <__gethex+0x13a>
 800632a:	786b      	ldrb	r3, [r5, #1]
 800632c:	2b2b      	cmp	r3, #43	; 0x2b
 800632e:	d02f      	beq.n	8006390 <__gethex+0x124>
 8006330:	2b2d      	cmp	r3, #45	; 0x2d
 8006332:	d031      	beq.n	8006398 <__gethex+0x12c>
 8006334:	f04f 0b00 	mov.w	fp, #0
 8006338:	1c69      	adds	r1, r5, #1
 800633a:	7808      	ldrb	r0, [r1, #0]
 800633c:	f7ff ff81 	bl	8006242 <__hexdig_fun>
 8006340:	1e42      	subs	r2, r0, #1
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	2a18      	cmp	r2, #24
 8006346:	d82e      	bhi.n	80063a6 <__gethex+0x13a>
 8006348:	f1a0 0210 	sub.w	r2, r0, #16
 800634c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006350:	f7ff ff77 	bl	8006242 <__hexdig_fun>
 8006354:	f100 3cff 	add.w	ip, r0, #4294967295
 8006358:	fa5f fc8c 	uxtb.w	ip, ip
 800635c:	f1bc 0f18 	cmp.w	ip, #24
 8006360:	d91d      	bls.n	800639e <__gethex+0x132>
 8006362:	f1bb 0f00 	cmp.w	fp, #0
 8006366:	d000      	beq.n	800636a <__gethex+0xfe>
 8006368:	4252      	negs	r2, r2
 800636a:	4416      	add	r6, r2
 800636c:	f8ca 1000 	str.w	r1, [sl]
 8006370:	b1dc      	cbz	r4, 80063aa <__gethex+0x13e>
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf14      	ite	ne
 8006378:	f04f 0800 	movne.w	r8, #0
 800637c:	f04f 0806 	moveq.w	r8, #6
 8006380:	4640      	mov	r0, r8
 8006382:	b005      	add	sp, #20
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	4645      	mov	r5, r8
 800638a:	4626      	mov	r6, r4
 800638c:	2401      	movs	r4, #1
 800638e:	e7c7      	b.n	8006320 <__gethex+0xb4>
 8006390:	f04f 0b00 	mov.w	fp, #0
 8006394:	1ca9      	adds	r1, r5, #2
 8006396:	e7d0      	b.n	800633a <__gethex+0xce>
 8006398:	f04f 0b01 	mov.w	fp, #1
 800639c:	e7fa      	b.n	8006394 <__gethex+0x128>
 800639e:	230a      	movs	r3, #10
 80063a0:	fb03 0002 	mla	r0, r3, r2, r0
 80063a4:	e7d0      	b.n	8006348 <__gethex+0xdc>
 80063a6:	4629      	mov	r1, r5
 80063a8:	e7e0      	b.n	800636c <__gethex+0x100>
 80063aa:	4621      	mov	r1, r4
 80063ac:	eba5 0308 	sub.w	r3, r5, r8
 80063b0:	3b01      	subs	r3, #1
 80063b2:	2b07      	cmp	r3, #7
 80063b4:	dc0a      	bgt.n	80063cc <__gethex+0x160>
 80063b6:	4648      	mov	r0, r9
 80063b8:	f7fe f932 	bl	8004620 <_Balloc>
 80063bc:	4604      	mov	r4, r0
 80063be:	b940      	cbnz	r0, 80063d2 <__gethex+0x166>
 80063c0:	4602      	mov	r2, r0
 80063c2:	21e4      	movs	r1, #228	; 0xe4
 80063c4:	4b61      	ldr	r3, [pc, #388]	; (800654c <__gethex+0x2e0>)
 80063c6:	4862      	ldr	r0, [pc, #392]	; (8006550 <__gethex+0x2e4>)
 80063c8:	f7ff feb6 	bl	8006138 <__assert_func>
 80063cc:	3101      	adds	r1, #1
 80063ce:	105b      	asrs	r3, r3, #1
 80063d0:	e7ef      	b.n	80063b2 <__gethex+0x146>
 80063d2:	2300      	movs	r3, #0
 80063d4:	469b      	mov	fp, r3
 80063d6:	f100 0a14 	add.w	sl, r0, #20
 80063da:	f8cd a004 	str.w	sl, [sp, #4]
 80063de:	45a8      	cmp	r8, r5
 80063e0:	d344      	bcc.n	800646c <__gethex+0x200>
 80063e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063e6:	4658      	mov	r0, fp
 80063e8:	f848 bb04 	str.w	fp, [r8], #4
 80063ec:	eba8 080a 	sub.w	r8, r8, sl
 80063f0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80063f4:	6122      	str	r2, [r4, #16]
 80063f6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80063fa:	f7fe fa03 	bl	8004804 <__hi0bits>
 80063fe:	683d      	ldr	r5, [r7, #0]
 8006400:	eba8 0800 	sub.w	r8, r8, r0
 8006404:	45a8      	cmp	r8, r5
 8006406:	dd59      	ble.n	80064bc <__gethex+0x250>
 8006408:	eba8 0805 	sub.w	r8, r8, r5
 800640c:	4641      	mov	r1, r8
 800640e:	4620      	mov	r0, r4
 8006410:	f7fe fd81 	bl	8004f16 <__any_on>
 8006414:	4683      	mov	fp, r0
 8006416:	b1b8      	cbz	r0, 8006448 <__gethex+0x1dc>
 8006418:	f04f 0b01 	mov.w	fp, #1
 800641c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006420:	1159      	asrs	r1, r3, #5
 8006422:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006426:	f003 021f 	and.w	r2, r3, #31
 800642a:	fa0b f202 	lsl.w	r2, fp, r2
 800642e:	420a      	tst	r2, r1
 8006430:	d00a      	beq.n	8006448 <__gethex+0x1dc>
 8006432:	455b      	cmp	r3, fp
 8006434:	dd06      	ble.n	8006444 <__gethex+0x1d8>
 8006436:	4620      	mov	r0, r4
 8006438:	f1a8 0102 	sub.w	r1, r8, #2
 800643c:	f7fe fd6b 	bl	8004f16 <__any_on>
 8006440:	2800      	cmp	r0, #0
 8006442:	d138      	bne.n	80064b6 <__gethex+0x24a>
 8006444:	f04f 0b02 	mov.w	fp, #2
 8006448:	4641      	mov	r1, r8
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff fea6 	bl	800619c <rshift>
 8006450:	4446      	add	r6, r8
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	42b3      	cmp	r3, r6
 8006456:	da41      	bge.n	80064dc <__gethex+0x270>
 8006458:	4621      	mov	r1, r4
 800645a:	4648      	mov	r0, r9
 800645c:	f7fe f920 	bl	80046a0 <_Bfree>
 8006460:	2300      	movs	r3, #0
 8006462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006464:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	e789      	b.n	8006380 <__gethex+0x114>
 800646c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006470:	2a2e      	cmp	r2, #46	; 0x2e
 8006472:	d014      	beq.n	800649e <__gethex+0x232>
 8006474:	2b20      	cmp	r3, #32
 8006476:	d106      	bne.n	8006486 <__gethex+0x21a>
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	f843 bb04 	str.w	fp, [r3], #4
 800647e:	f04f 0b00 	mov.w	fp, #0
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	465b      	mov	r3, fp
 8006486:	7828      	ldrb	r0, [r5, #0]
 8006488:	9303      	str	r3, [sp, #12]
 800648a:	f7ff feda 	bl	8006242 <__hexdig_fun>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	f000 000f 	and.w	r0, r0, #15
 8006494:	4098      	lsls	r0, r3
 8006496:	ea4b 0b00 	orr.w	fp, fp, r0
 800649a:	3304      	adds	r3, #4
 800649c:	e79f      	b.n	80063de <__gethex+0x172>
 800649e:	45a8      	cmp	r8, r5
 80064a0:	d8e8      	bhi.n	8006474 <__gethex+0x208>
 80064a2:	2201      	movs	r2, #1
 80064a4:	4628      	mov	r0, r5
 80064a6:	4928      	ldr	r1, [pc, #160]	; (8006548 <__gethex+0x2dc>)
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	f7ff fe0f 	bl	80060cc <strncmp>
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1df      	bne.n	8006474 <__gethex+0x208>
 80064b4:	e793      	b.n	80063de <__gethex+0x172>
 80064b6:	f04f 0b03 	mov.w	fp, #3
 80064ba:	e7c5      	b.n	8006448 <__gethex+0x1dc>
 80064bc:	da0b      	bge.n	80064d6 <__gethex+0x26a>
 80064be:	eba5 0808 	sub.w	r8, r5, r8
 80064c2:	4621      	mov	r1, r4
 80064c4:	4642      	mov	r2, r8
 80064c6:	4648      	mov	r0, r9
 80064c8:	f7fe fb02 	bl	8004ad0 <__lshift>
 80064cc:	4604      	mov	r4, r0
 80064ce:	eba6 0608 	sub.w	r6, r6, r8
 80064d2:	f100 0a14 	add.w	sl, r0, #20
 80064d6:	f04f 0b00 	mov.w	fp, #0
 80064da:	e7ba      	b.n	8006452 <__gethex+0x1e6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	42b3      	cmp	r3, r6
 80064e0:	dd74      	ble.n	80065cc <__gethex+0x360>
 80064e2:	1b9e      	subs	r6, r3, r6
 80064e4:	42b5      	cmp	r5, r6
 80064e6:	dc35      	bgt.n	8006554 <__gethex+0x2e8>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d023      	beq.n	8006536 <__gethex+0x2ca>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d025      	beq.n	800653e <__gethex+0x2d2>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d115      	bne.n	8006522 <__gethex+0x2b6>
 80064f6:	42b5      	cmp	r5, r6
 80064f8:	d113      	bne.n	8006522 <__gethex+0x2b6>
 80064fa:	2d01      	cmp	r5, #1
 80064fc:	d10b      	bne.n	8006516 <__gethex+0x2aa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	9a02      	ldr	r2, [sp, #8]
 8006502:	f04f 0862 	mov.w	r8, #98	; 0x62
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	2301      	movs	r3, #1
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	f8ca 3000 	str.w	r3, [sl]
 8006510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006512:	601c      	str	r4, [r3, #0]
 8006514:	e734      	b.n	8006380 <__gethex+0x114>
 8006516:	4620      	mov	r0, r4
 8006518:	1e69      	subs	r1, r5, #1
 800651a:	f7fe fcfc 	bl	8004f16 <__any_on>
 800651e:	2800      	cmp	r0, #0
 8006520:	d1ed      	bne.n	80064fe <__gethex+0x292>
 8006522:	4621      	mov	r1, r4
 8006524:	4648      	mov	r0, r9
 8006526:	f7fe f8bb 	bl	80046a0 <_Bfree>
 800652a:	2300      	movs	r3, #0
 800652c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e724      	b.n	8006380 <__gethex+0x114>
 8006536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f2      	bne.n	8006522 <__gethex+0x2b6>
 800653c:	e7df      	b.n	80064fe <__gethex+0x292>
 800653e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1dc      	bne.n	80064fe <__gethex+0x292>
 8006544:	e7ed      	b.n	8006522 <__gethex+0x2b6>
 8006546:	bf00      	nop
 8006548:	080070cc 	.word	0x080070cc
 800654c:	08006f5f 	.word	0x08006f5f
 8006550:	08007276 	.word	0x08007276
 8006554:	f106 38ff 	add.w	r8, r6, #4294967295
 8006558:	f1bb 0f00 	cmp.w	fp, #0
 800655c:	d133      	bne.n	80065c6 <__gethex+0x35a>
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d004      	beq.n	800656e <__gethex+0x302>
 8006564:	4641      	mov	r1, r8
 8006566:	4620      	mov	r0, r4
 8006568:	f7fe fcd5 	bl	8004f16 <__any_on>
 800656c:	4683      	mov	fp, r0
 800656e:	2301      	movs	r3, #1
 8006570:	ea4f 1268 	mov.w	r2, r8, asr #5
 8006574:	f008 081f 	and.w	r8, r8, #31
 8006578:	fa03 f308 	lsl.w	r3, r3, r8
 800657c:	f04f 0802 	mov.w	r8, #2
 8006580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006584:	4631      	mov	r1, r6
 8006586:	4213      	tst	r3, r2
 8006588:	4620      	mov	r0, r4
 800658a:	bf18      	it	ne
 800658c:	f04b 0b02 	orrne.w	fp, fp, #2
 8006590:	1bad      	subs	r5, r5, r6
 8006592:	f7ff fe03 	bl	800619c <rshift>
 8006596:	687e      	ldr	r6, [r7, #4]
 8006598:	f1bb 0f00 	cmp.w	fp, #0
 800659c:	d04a      	beq.n	8006634 <__gethex+0x3c8>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d016      	beq.n	80065d2 <__gethex+0x366>
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d018      	beq.n	80065da <__gethex+0x36e>
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d109      	bne.n	80065c0 <__gethex+0x354>
 80065ac:	f01b 0f02 	tst.w	fp, #2
 80065b0:	d006      	beq.n	80065c0 <__gethex+0x354>
 80065b2:	f8da 3000 	ldr.w	r3, [sl]
 80065b6:	ea4b 0b03 	orr.w	fp, fp, r3
 80065ba:	f01b 0f01 	tst.w	fp, #1
 80065be:	d10f      	bne.n	80065e0 <__gethex+0x374>
 80065c0:	f048 0810 	orr.w	r8, r8, #16
 80065c4:	e036      	b.n	8006634 <__gethex+0x3c8>
 80065c6:	f04f 0b01 	mov.w	fp, #1
 80065ca:	e7d0      	b.n	800656e <__gethex+0x302>
 80065cc:	f04f 0801 	mov.w	r8, #1
 80065d0:	e7e2      	b.n	8006598 <__gethex+0x32c>
 80065d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d4:	f1c3 0301 	rsb	r3, r3, #1
 80065d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0ef      	beq.n	80065c0 <__gethex+0x354>
 80065e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80065e4:	f104 0214 	add.w	r2, r4, #20
 80065e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	2300      	movs	r3, #0
 80065f0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80065f4:	4694      	mov	ip, r2
 80065f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80065fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80065fe:	d01e      	beq.n	800663e <__gethex+0x3d2>
 8006600:	3101      	adds	r1, #1
 8006602:	f8cc 1000 	str.w	r1, [ip]
 8006606:	f1b8 0f02 	cmp.w	r8, #2
 800660a:	f104 0214 	add.w	r2, r4, #20
 800660e:	d13d      	bne.n	800668c <__gethex+0x420>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	3b01      	subs	r3, #1
 8006614:	42ab      	cmp	r3, r5
 8006616:	d10b      	bne.n	8006630 <__gethex+0x3c4>
 8006618:	2301      	movs	r3, #1
 800661a:	1169      	asrs	r1, r5, #5
 800661c:	f005 051f 	and.w	r5, r5, #31
 8006620:	fa03 f505 	lsl.w	r5, r3, r5
 8006624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006628:	421d      	tst	r5, r3
 800662a:	bf18      	it	ne
 800662c:	f04f 0801 	movne.w	r8, #1
 8006630:	f048 0820 	orr.w	r8, r8, #32
 8006634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006636:	601c      	str	r4, [r3, #0]
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	601e      	str	r6, [r3, #0]
 800663c:	e6a0      	b.n	8006380 <__gethex+0x114>
 800663e:	4290      	cmp	r0, r2
 8006640:	f842 3c04 	str.w	r3, [r2, #-4]
 8006644:	d8d6      	bhi.n	80065f4 <__gethex+0x388>
 8006646:	68a2      	ldr	r2, [r4, #8]
 8006648:	4593      	cmp	fp, r2
 800664a:	db17      	blt.n	800667c <__gethex+0x410>
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4648      	mov	r0, r9
 8006650:	3101      	adds	r1, #1
 8006652:	f7fd ffe5 	bl	8004620 <_Balloc>
 8006656:	4682      	mov	sl, r0
 8006658:	b918      	cbnz	r0, 8006662 <__gethex+0x3f6>
 800665a:	4602      	mov	r2, r0
 800665c:	2184      	movs	r1, #132	; 0x84
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <__gethex+0x45c>)
 8006660:	e6b1      	b.n	80063c6 <__gethex+0x15a>
 8006662:	6922      	ldr	r2, [r4, #16]
 8006664:	f104 010c 	add.w	r1, r4, #12
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	300c      	adds	r0, #12
 800666e:	f7ff fd4f 	bl	8006110 <memcpy>
 8006672:	4621      	mov	r1, r4
 8006674:	4648      	mov	r0, r9
 8006676:	f7fe f813 	bl	80046a0 <_Bfree>
 800667a:	4654      	mov	r4, sl
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	1c51      	adds	r1, r2, #1
 8006680:	6121      	str	r1, [r4, #16]
 8006682:	2101      	movs	r1, #1
 8006684:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006688:	6151      	str	r1, [r2, #20]
 800668a:	e7bc      	b.n	8006606 <__gethex+0x39a>
 800668c:	6921      	ldr	r1, [r4, #16]
 800668e:	4559      	cmp	r1, fp
 8006690:	dd0b      	ble.n	80066aa <__gethex+0x43e>
 8006692:	2101      	movs	r1, #1
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff fd81 	bl	800619c <rshift>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3601      	adds	r6, #1
 800669e:	42b3      	cmp	r3, r6
 80066a0:	f6ff aeda 	blt.w	8006458 <__gethex+0x1ec>
 80066a4:	f04f 0801 	mov.w	r8, #1
 80066a8:	e7c2      	b.n	8006630 <__gethex+0x3c4>
 80066aa:	f015 051f 	ands.w	r5, r5, #31
 80066ae:	d0f9      	beq.n	80066a4 <__gethex+0x438>
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	f1c5 0520 	rsb	r5, r5, #32
 80066b6:	441a      	add	r2, r3
 80066b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80066bc:	f7fe f8a2 	bl	8004804 <__hi0bits>
 80066c0:	42a8      	cmp	r0, r5
 80066c2:	dbe6      	blt.n	8006692 <__gethex+0x426>
 80066c4:	e7ee      	b.n	80066a4 <__gethex+0x438>
 80066c6:	bf00      	nop
 80066c8:	08006f5f 	.word	0x08006f5f

080066cc <L_shift>:
 80066cc:	f1c2 0208 	rsb	r2, r2, #8
 80066d0:	0092      	lsls	r2, r2, #2
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	f1c2 0620 	rsb	r6, r2, #32
 80066d8:	6843      	ldr	r3, [r0, #4]
 80066da:	6804      	ldr	r4, [r0, #0]
 80066dc:	fa03 f506 	lsl.w	r5, r3, r6
 80066e0:	432c      	orrs	r4, r5
 80066e2:	40d3      	lsrs	r3, r2
 80066e4:	6004      	str	r4, [r0, #0]
 80066e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80066ea:	4288      	cmp	r0, r1
 80066ec:	d3f4      	bcc.n	80066d8 <L_shift+0xc>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}

080066f0 <__match>:
 80066f0:	b530      	push	{r4, r5, lr}
 80066f2:	6803      	ldr	r3, [r0, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fa:	b914      	cbnz	r4, 8006702 <__match+0x12>
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	2001      	movs	r0, #1
 8006700:	bd30      	pop	{r4, r5, pc}
 8006702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006706:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800670a:	2d19      	cmp	r5, #25
 800670c:	bf98      	it	ls
 800670e:	3220      	addls	r2, #32
 8006710:	42a2      	cmp	r2, r4
 8006712:	d0f0      	beq.n	80066f6 <__match+0x6>
 8006714:	2000      	movs	r0, #0
 8006716:	e7f3      	b.n	8006700 <__match+0x10>

08006718 <__hexnan>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	2500      	movs	r5, #0
 800671e:	680b      	ldr	r3, [r1, #0]
 8006720:	4682      	mov	sl, r0
 8006722:	115e      	asrs	r6, r3, #5
 8006724:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006728:	f013 031f 	ands.w	r3, r3, #31
 800672c:	bf18      	it	ne
 800672e:	3604      	addne	r6, #4
 8006730:	1f37      	subs	r7, r6, #4
 8006732:	4690      	mov	r8, r2
 8006734:	46b9      	mov	r9, r7
 8006736:	463c      	mov	r4, r7
 8006738:	46ab      	mov	fp, r5
 800673a:	b087      	sub	sp, #28
 800673c:	6801      	ldr	r1, [r0, #0]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	f846 5c04 	str.w	r5, [r6, #-4]
 8006744:	9502      	str	r5, [sp, #8]
 8006746:	784a      	ldrb	r2, [r1, #1]
 8006748:	1c4b      	adds	r3, r1, #1
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	b342      	cbz	r2, 80067a0 <__hexnan+0x88>
 800674e:	4610      	mov	r0, r2
 8006750:	9105      	str	r1, [sp, #20]
 8006752:	9204      	str	r2, [sp, #16]
 8006754:	f7ff fd75 	bl	8006242 <__hexdig_fun>
 8006758:	2800      	cmp	r0, #0
 800675a:	d14f      	bne.n	80067fc <__hexnan+0xe4>
 800675c:	9a04      	ldr	r2, [sp, #16]
 800675e:	9905      	ldr	r1, [sp, #20]
 8006760:	2a20      	cmp	r2, #32
 8006762:	d818      	bhi.n	8006796 <__hexnan+0x7e>
 8006764:	9b02      	ldr	r3, [sp, #8]
 8006766:	459b      	cmp	fp, r3
 8006768:	dd13      	ble.n	8006792 <__hexnan+0x7a>
 800676a:	454c      	cmp	r4, r9
 800676c:	d206      	bcs.n	800677c <__hexnan+0x64>
 800676e:	2d07      	cmp	r5, #7
 8006770:	dc04      	bgt.n	800677c <__hexnan+0x64>
 8006772:	462a      	mov	r2, r5
 8006774:	4649      	mov	r1, r9
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff ffa8 	bl	80066cc <L_shift>
 800677c:	4544      	cmp	r4, r8
 800677e:	d950      	bls.n	8006822 <__hexnan+0x10a>
 8006780:	2300      	movs	r3, #0
 8006782:	f1a4 0904 	sub.w	r9, r4, #4
 8006786:	f844 3c04 	str.w	r3, [r4, #-4]
 800678a:	461d      	mov	r5, r3
 800678c:	464c      	mov	r4, r9
 800678e:	f8cd b008 	str.w	fp, [sp, #8]
 8006792:	9903      	ldr	r1, [sp, #12]
 8006794:	e7d7      	b.n	8006746 <__hexnan+0x2e>
 8006796:	2a29      	cmp	r2, #41	; 0x29
 8006798:	d155      	bne.n	8006846 <__hexnan+0x12e>
 800679a:	3102      	adds	r1, #2
 800679c:	f8ca 1000 	str.w	r1, [sl]
 80067a0:	f1bb 0f00 	cmp.w	fp, #0
 80067a4:	d04f      	beq.n	8006846 <__hexnan+0x12e>
 80067a6:	454c      	cmp	r4, r9
 80067a8:	d206      	bcs.n	80067b8 <__hexnan+0xa0>
 80067aa:	2d07      	cmp	r5, #7
 80067ac:	dc04      	bgt.n	80067b8 <__hexnan+0xa0>
 80067ae:	462a      	mov	r2, r5
 80067b0:	4649      	mov	r1, r9
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff ff8a 	bl	80066cc <L_shift>
 80067b8:	4544      	cmp	r4, r8
 80067ba:	d934      	bls.n	8006826 <__hexnan+0x10e>
 80067bc:	4623      	mov	r3, r4
 80067be:	f1a8 0204 	sub.w	r2, r8, #4
 80067c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80067c6:	429f      	cmp	r7, r3
 80067c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80067cc:	d2f9      	bcs.n	80067c2 <__hexnan+0xaa>
 80067ce:	1b3b      	subs	r3, r7, r4
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	3304      	adds	r3, #4
 80067d6:	3e03      	subs	r6, #3
 80067d8:	3401      	adds	r4, #1
 80067da:	42a6      	cmp	r6, r4
 80067dc:	bf38      	it	cc
 80067de:	2304      	movcc	r3, #4
 80067e0:	2200      	movs	r2, #0
 80067e2:	4443      	add	r3, r8
 80067e4:	f843 2b04 	str.w	r2, [r3], #4
 80067e8:	429f      	cmp	r7, r3
 80067ea:	d2fb      	bcs.n	80067e4 <__hexnan+0xcc>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	b91b      	cbnz	r3, 80067f8 <__hexnan+0xe0>
 80067f0:	4547      	cmp	r7, r8
 80067f2:	d126      	bne.n	8006842 <__hexnan+0x12a>
 80067f4:	2301      	movs	r3, #1
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	2005      	movs	r0, #5
 80067fa:	e025      	b.n	8006848 <__hexnan+0x130>
 80067fc:	3501      	adds	r5, #1
 80067fe:	2d08      	cmp	r5, #8
 8006800:	f10b 0b01 	add.w	fp, fp, #1
 8006804:	dd06      	ble.n	8006814 <__hexnan+0xfc>
 8006806:	4544      	cmp	r4, r8
 8006808:	d9c3      	bls.n	8006792 <__hexnan+0x7a>
 800680a:	2300      	movs	r3, #0
 800680c:	2501      	movs	r5, #1
 800680e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006812:	3c04      	subs	r4, #4
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	f000 000f 	and.w	r0, r0, #15
 800681a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800681e:	6020      	str	r0, [r4, #0]
 8006820:	e7b7      	b.n	8006792 <__hexnan+0x7a>
 8006822:	2508      	movs	r5, #8
 8006824:	e7b5      	b.n	8006792 <__hexnan+0x7a>
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0df      	beq.n	80067ec <__hexnan+0xd4>
 800682c:	f04f 32ff 	mov.w	r2, #4294967295
 8006830:	f1c3 0320 	rsb	r3, r3, #32
 8006834:	40da      	lsrs	r2, r3
 8006836:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800683a:	4013      	ands	r3, r2
 800683c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006840:	e7d4      	b.n	80067ec <__hexnan+0xd4>
 8006842:	3f04      	subs	r7, #4
 8006844:	e7d2      	b.n	80067ec <__hexnan+0xd4>
 8006846:	2004      	movs	r0, #4
 8006848:	b007      	add	sp, #28
 800684a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800684e <__ascii_mbtowc>:
 800684e:	b082      	sub	sp, #8
 8006850:	b901      	cbnz	r1, 8006854 <__ascii_mbtowc+0x6>
 8006852:	a901      	add	r1, sp, #4
 8006854:	b142      	cbz	r2, 8006868 <__ascii_mbtowc+0x1a>
 8006856:	b14b      	cbz	r3, 800686c <__ascii_mbtowc+0x1e>
 8006858:	7813      	ldrb	r3, [r2, #0]
 800685a:	600b      	str	r3, [r1, #0]
 800685c:	7812      	ldrb	r2, [r2, #0]
 800685e:	1e10      	subs	r0, r2, #0
 8006860:	bf18      	it	ne
 8006862:	2001      	movne	r0, #1
 8006864:	b002      	add	sp, #8
 8006866:	4770      	bx	lr
 8006868:	4610      	mov	r0, r2
 800686a:	e7fb      	b.n	8006864 <__ascii_mbtowc+0x16>
 800686c:	f06f 0001 	mvn.w	r0, #1
 8006870:	e7f8      	b.n	8006864 <__ascii_mbtowc+0x16>

08006872 <_realloc_r>:
 8006872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006876:	4680      	mov	r8, r0
 8006878:	4614      	mov	r4, r2
 800687a:	460e      	mov	r6, r1
 800687c:	b921      	cbnz	r1, 8006888 <_realloc_r+0x16>
 800687e:	4611      	mov	r1, r2
 8006880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	f7fd be40 	b.w	8004508 <_malloc_r>
 8006888:	b92a      	cbnz	r2, 8006896 <_realloc_r+0x24>
 800688a:	f7fd fdcd 	bl	8004428 <_free_r>
 800688e:	4625      	mov	r5, r4
 8006890:	4628      	mov	r0, r5
 8006892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006896:	f000 f842 	bl	800691e <_malloc_usable_size_r>
 800689a:	4284      	cmp	r4, r0
 800689c:	4607      	mov	r7, r0
 800689e:	d802      	bhi.n	80068a6 <_realloc_r+0x34>
 80068a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068a4:	d812      	bhi.n	80068cc <_realloc_r+0x5a>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4640      	mov	r0, r8
 80068aa:	f7fd fe2d 	bl	8004508 <_malloc_r>
 80068ae:	4605      	mov	r5, r0
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d0ed      	beq.n	8006890 <_realloc_r+0x1e>
 80068b4:	42bc      	cmp	r4, r7
 80068b6:	4622      	mov	r2, r4
 80068b8:	4631      	mov	r1, r6
 80068ba:	bf28      	it	cs
 80068bc:	463a      	movcs	r2, r7
 80068be:	f7ff fc27 	bl	8006110 <memcpy>
 80068c2:	4631      	mov	r1, r6
 80068c4:	4640      	mov	r0, r8
 80068c6:	f7fd fdaf 	bl	8004428 <_free_r>
 80068ca:	e7e1      	b.n	8006890 <_realloc_r+0x1e>
 80068cc:	4635      	mov	r5, r6
 80068ce:	e7df      	b.n	8006890 <_realloc_r+0x1e>

080068d0 <__ascii_wctomb>:
 80068d0:	4603      	mov	r3, r0
 80068d2:	4608      	mov	r0, r1
 80068d4:	b141      	cbz	r1, 80068e8 <__ascii_wctomb+0x18>
 80068d6:	2aff      	cmp	r2, #255	; 0xff
 80068d8:	d904      	bls.n	80068e4 <__ascii_wctomb+0x14>
 80068da:	228a      	movs	r2, #138	; 0x8a
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	4770      	bx	lr
 80068e4:	2001      	movs	r0, #1
 80068e6:	700a      	strb	r2, [r1, #0]
 80068e8:	4770      	bx	lr
	...

080068ec <fiprintf>:
 80068ec:	b40e      	push	{r1, r2, r3}
 80068ee:	b503      	push	{r0, r1, lr}
 80068f0:	4601      	mov	r1, r0
 80068f2:	ab03      	add	r3, sp, #12
 80068f4:	4805      	ldr	r0, [pc, #20]	; (800690c <fiprintf+0x20>)
 80068f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	f000 f83d 	bl	800697c <_vfiprintf_r>
 8006902:	b002      	add	sp, #8
 8006904:	f85d eb04 	ldr.w	lr, [sp], #4
 8006908:	b003      	add	sp, #12
 800690a:	4770      	bx	lr
 800690c:	20000064 	.word	0x20000064

08006910 <abort>:
 8006910:	2006      	movs	r0, #6
 8006912:	b508      	push	{r3, lr}
 8006914:	f000 fa0a 	bl	8006d2c <raise>
 8006918:	2001      	movs	r0, #1
 800691a:	f7fa fbe7 	bl	80010ec <_exit>

0800691e <_malloc_usable_size_r>:
 800691e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006922:	1f18      	subs	r0, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfbc      	itt	lt
 8006928:	580b      	ldrlt	r3, [r1, r0]
 800692a:	18c0      	addlt	r0, r0, r3
 800692c:	4770      	bx	lr

0800692e <__sfputc_r>:
 800692e:	6893      	ldr	r3, [r2, #8]
 8006930:	b410      	push	{r4}
 8006932:	3b01      	subs	r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	6093      	str	r3, [r2, #8]
 8006938:	da07      	bge.n	800694a <__sfputc_r+0x1c>
 800693a:	6994      	ldr	r4, [r2, #24]
 800693c:	42a3      	cmp	r3, r4
 800693e:	db01      	blt.n	8006944 <__sfputc_r+0x16>
 8006940:	290a      	cmp	r1, #10
 8006942:	d102      	bne.n	800694a <__sfputc_r+0x1c>
 8006944:	bc10      	pop	{r4}
 8006946:	f000 b933 	b.w	8006bb0 <__swbuf_r>
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	1c58      	adds	r0, r3, #1
 800694e:	6010      	str	r0, [r2, #0]
 8006950:	7019      	strb	r1, [r3, #0]
 8006952:	4608      	mov	r0, r1
 8006954:	bc10      	pop	{r4}
 8006956:	4770      	bx	lr

08006958 <__sfputs_r>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	4614      	mov	r4, r2
 8006960:	18d5      	adds	r5, r2, r3
 8006962:	42ac      	cmp	r4, r5
 8006964:	d101      	bne.n	800696a <__sfputs_r+0x12>
 8006966:	2000      	movs	r0, #0
 8006968:	e007      	b.n	800697a <__sfputs_r+0x22>
 800696a:	463a      	mov	r2, r7
 800696c:	4630      	mov	r0, r6
 800696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006972:	f7ff ffdc 	bl	800692e <__sfputc_r>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d1f3      	bne.n	8006962 <__sfputs_r+0xa>
 800697a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800697c <_vfiprintf_r>:
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	460d      	mov	r5, r1
 8006982:	4614      	mov	r4, r2
 8006984:	4698      	mov	r8, r3
 8006986:	4606      	mov	r6, r0
 8006988:	b09d      	sub	sp, #116	; 0x74
 800698a:	b118      	cbz	r0, 8006994 <_vfiprintf_r+0x18>
 800698c:	6a03      	ldr	r3, [r0, #32]
 800698e:	b90b      	cbnz	r3, 8006994 <_vfiprintf_r+0x18>
 8006990:	f7fc fdb0 	bl	80034f4 <__sinit>
 8006994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_vfiprintf_r+0x2a>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_vfiprintf_r+0x2a>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7fc febe 	bl	8003722 <__retarget_lock_acquire_recursive>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	071b      	lsls	r3, r3, #28
 80069aa:	d501      	bpl.n	80069b0 <_vfiprintf_r+0x34>
 80069ac:	692b      	ldr	r3, [r5, #16]
 80069ae:	b99b      	cbnz	r3, 80069d8 <_vfiprintf_r+0x5c>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f93a 	bl	8006c2c <__swsetup_r>
 80069b8:	b170      	cbz	r0, 80069d8 <_vfiprintf_r+0x5c>
 80069ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069bc:	07dc      	lsls	r4, r3, #31
 80069be:	d504      	bpl.n	80069ca <_vfiprintf_r+0x4e>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	b01d      	add	sp, #116	; 0x74
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	0598      	lsls	r0, r3, #22
 80069ce:	d4f7      	bmi.n	80069c0 <_vfiprintf_r+0x44>
 80069d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d2:	f7fc fea7 	bl	8003724 <__retarget_lock_release_recursive>
 80069d6:	e7f3      	b.n	80069c0 <_vfiprintf_r+0x44>
 80069d8:	2300      	movs	r3, #0
 80069da:	9309      	str	r3, [sp, #36]	; 0x24
 80069dc:	2320      	movs	r3, #32
 80069de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e2:	2330      	movs	r3, #48	; 0x30
 80069e4:	f04f 0901 	mov.w	r9, #1
 80069e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006b9c <_vfiprintf_r+0x220>
 80069f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f4:	4623      	mov	r3, r4
 80069f6:	469a      	mov	sl, r3
 80069f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069fc:	b10a      	cbz	r2, 8006a02 <_vfiprintf_r+0x86>
 80069fe:	2a25      	cmp	r2, #37	; 0x25
 8006a00:	d1f9      	bne.n	80069f6 <_vfiprintf_r+0x7a>
 8006a02:	ebba 0b04 	subs.w	fp, sl, r4
 8006a06:	d00b      	beq.n	8006a20 <_vfiprintf_r+0xa4>
 8006a08:	465b      	mov	r3, fp
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ffa2 	bl	8006958 <__sfputs_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	f000 80a9 	beq.w	8006b6c <_vfiprintf_r+0x1f0>
 8006a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1c:	445a      	add	r2, fp
 8006a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a20:	f89a 3000 	ldrb.w	r3, [sl]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80a1 	beq.w	8006b6c <_vfiprintf_r+0x1f0>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a34:	f10a 0a01 	add.w	sl, sl, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	9307      	str	r3, [sp, #28]
 8006a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a40:	931a      	str	r3, [sp, #104]	; 0x68
 8006a42:	4654      	mov	r4, sl
 8006a44:	2205      	movs	r2, #5
 8006a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4a:	4854      	ldr	r0, [pc, #336]	; (8006b9c <_vfiprintf_r+0x220>)
 8006a4c:	f7fc fe6b 	bl	8003726 <memchr>
 8006a50:	9a04      	ldr	r2, [sp, #16]
 8006a52:	b9d8      	cbnz	r0, 8006a8c <_vfiprintf_r+0x110>
 8006a54:	06d1      	lsls	r1, r2, #27
 8006a56:	bf44      	itt	mi
 8006a58:	2320      	movmi	r3, #32
 8006a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5e:	0713      	lsls	r3, r2, #28
 8006a60:	bf44      	itt	mi
 8006a62:	232b      	movmi	r3, #43	; 0x2b
 8006a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a68:	f89a 3000 	ldrb.w	r3, [sl]
 8006a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6e:	d015      	beq.n	8006a9c <_vfiprintf_r+0x120>
 8006a70:	4654      	mov	r4, sl
 8006a72:	2000      	movs	r0, #0
 8006a74:	f04f 0c0a 	mov.w	ip, #10
 8006a78:	9a07      	ldr	r2, [sp, #28]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a80:	3b30      	subs	r3, #48	; 0x30
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d94d      	bls.n	8006b22 <_vfiprintf_r+0x1a6>
 8006a86:	b1b0      	cbz	r0, 8006ab6 <_vfiprintf_r+0x13a>
 8006a88:	9207      	str	r2, [sp, #28]
 8006a8a:	e014      	b.n	8006ab6 <_vfiprintf_r+0x13a>
 8006a8c:	eba0 0308 	sub.w	r3, r0, r8
 8006a90:	fa09 f303 	lsl.w	r3, r9, r3
 8006a94:	4313      	orrs	r3, r2
 8006a96:	46a2      	mov	sl, r4
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	e7d2      	b.n	8006a42 <_vfiprintf_r+0xc6>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	1d19      	adds	r1, r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	9103      	str	r1, [sp, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfbb      	ittet	lt
 8006aa8:	425b      	neglt	r3, r3
 8006aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8006aae:	9307      	strge	r3, [sp, #28]
 8006ab0:	9307      	strlt	r3, [sp, #28]
 8006ab2:	bfb8      	it	lt
 8006ab4:	9204      	strlt	r2, [sp, #16]
 8006ab6:	7823      	ldrb	r3, [r4, #0]
 8006ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aba:	d10c      	bne.n	8006ad6 <_vfiprintf_r+0x15a>
 8006abc:	7863      	ldrb	r3, [r4, #1]
 8006abe:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac0:	d134      	bne.n	8006b2c <_vfiprintf_r+0x1b0>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	3402      	adds	r4, #2
 8006ac6:	1d1a      	adds	r2, r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	9203      	str	r2, [sp, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bfb8      	it	lt
 8006ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ba0 <_vfiprintf_r+0x224>
 8006ada:	2203      	movs	r2, #3
 8006adc:	4650      	mov	r0, sl
 8006ade:	7821      	ldrb	r1, [r4, #0]
 8006ae0:	f7fc fe21 	bl	8003726 <memchr>
 8006ae4:	b138      	cbz	r0, 8006af6 <_vfiprintf_r+0x17a>
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	eba0 000a 	sub.w	r0, r0, sl
 8006aee:	4082      	lsls	r2, r0
 8006af0:	4313      	orrs	r3, r2
 8006af2:	3401      	adds	r4, #1
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afa:	2206      	movs	r2, #6
 8006afc:	4829      	ldr	r0, [pc, #164]	; (8006ba4 <_vfiprintf_r+0x228>)
 8006afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b02:	f7fc fe10 	bl	8003726 <memchr>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d03f      	beq.n	8006b8a <_vfiprintf_r+0x20e>
 8006b0a:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <_vfiprintf_r+0x22c>)
 8006b0c:	bb1b      	cbnz	r3, 8006b56 <_vfiprintf_r+0x1da>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	3307      	adds	r3, #7
 8006b12:	f023 0307 	bic.w	r3, r3, #7
 8006b16:	3308      	adds	r3, #8
 8006b18:	9303      	str	r3, [sp, #12]
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	443b      	add	r3, r7
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	e768      	b.n	80069f4 <_vfiprintf_r+0x78>
 8006b22:	460c      	mov	r4, r1
 8006b24:	2001      	movs	r0, #1
 8006b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b2a:	e7a6      	b.n	8006a7a <_vfiprintf_r+0xfe>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f04f 0c0a 	mov.w	ip, #10
 8006b32:	4619      	mov	r1, r3
 8006b34:	3401      	adds	r4, #1
 8006b36:	9305      	str	r3, [sp, #20]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3e:	3a30      	subs	r2, #48	; 0x30
 8006b40:	2a09      	cmp	r2, #9
 8006b42:	d903      	bls.n	8006b4c <_vfiprintf_r+0x1d0>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0c6      	beq.n	8006ad6 <_vfiprintf_r+0x15a>
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	e7c4      	b.n	8006ad6 <_vfiprintf_r+0x15a>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	2301      	movs	r3, #1
 8006b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b54:	e7f0      	b.n	8006b38 <_vfiprintf_r+0x1bc>
 8006b56:	ab03      	add	r3, sp, #12
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <_vfiprintf_r+0x230>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	f7fb fe6b 	bl	800283c <_printf_float>
 8006b66:	4607      	mov	r7, r0
 8006b68:	1c78      	adds	r0, r7, #1
 8006b6a:	d1d6      	bne.n	8006b1a <_vfiprintf_r+0x19e>
 8006b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b6e:	07d9      	lsls	r1, r3, #31
 8006b70:	d405      	bmi.n	8006b7e <_vfiprintf_r+0x202>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	059a      	lsls	r2, r3, #22
 8006b76:	d402      	bmi.n	8006b7e <_vfiprintf_r+0x202>
 8006b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7a:	f7fc fdd3 	bl	8003724 <__retarget_lock_release_recursive>
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	065b      	lsls	r3, r3, #25
 8006b82:	f53f af1d 	bmi.w	80069c0 <_vfiprintf_r+0x44>
 8006b86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b88:	e71c      	b.n	80069c4 <_vfiprintf_r+0x48>
 8006b8a:	ab03      	add	r3, sp, #12
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	462a      	mov	r2, r5
 8006b90:	4630      	mov	r0, r6
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <_vfiprintf_r+0x230>)
 8006b94:	a904      	add	r1, sp, #16
 8006b96:	f7fc f8f1 	bl	8002d7c <_printf_i>
 8006b9a:	e7e4      	b.n	8006b66 <_vfiprintf_r+0x1ea>
 8006b9c:	08007221 	.word	0x08007221
 8006ba0:	08007227 	.word	0x08007227
 8006ba4:	0800722b 	.word	0x0800722b
 8006ba8:	0800283d 	.word	0x0800283d
 8006bac:	08006959 	.word	0x08006959

08006bb0 <__swbuf_r>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	460e      	mov	r6, r1
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b118      	cbz	r0, 8006bc2 <__swbuf_r+0x12>
 8006bba:	6a03      	ldr	r3, [r0, #32]
 8006bbc:	b90b      	cbnz	r3, 8006bc2 <__swbuf_r+0x12>
 8006bbe:	f7fc fc99 	bl	80034f4 <__sinit>
 8006bc2:	69a3      	ldr	r3, [r4, #24]
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	071a      	lsls	r2, r3, #28
 8006bca:	d525      	bpl.n	8006c18 <__swbuf_r+0x68>
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	b31b      	cbz	r3, 8006c18 <__swbuf_r+0x68>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	b2f6      	uxtb	r6, r6
 8006bd6:	1a98      	subs	r0, r3, r2
 8006bd8:	6963      	ldr	r3, [r4, #20]
 8006bda:	4637      	mov	r7, r6
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	dc04      	bgt.n	8006bea <__swbuf_r+0x3a>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7ff fa30 	bl	8006048 <_fflush_r>
 8006be8:	b9e0      	cbnz	r0, 8006c24 <__swbuf_r+0x74>
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	60a3      	str	r3, [r4, #8]
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	701e      	strb	r6, [r3, #0]
 8006bf8:	6962      	ldr	r2, [r4, #20]
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d004      	beq.n	8006c0a <__swbuf_r+0x5a>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	07db      	lsls	r3, r3, #31
 8006c04:	d506      	bpl.n	8006c14 <__swbuf_r+0x64>
 8006c06:	2e0a      	cmp	r6, #10
 8006c08:	d104      	bne.n	8006c14 <__swbuf_r+0x64>
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f7ff fa1b 	bl	8006048 <_fflush_r>
 8006c12:	b938      	cbnz	r0, 8006c24 <__swbuf_r+0x74>
 8006c14:	4638      	mov	r0, r7
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f806 	bl	8006c2c <__swsetup_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0d5      	beq.n	8006bd0 <__swbuf_r+0x20>
 8006c24:	f04f 37ff 	mov.w	r7, #4294967295
 8006c28:	e7f4      	b.n	8006c14 <__swbuf_r+0x64>
	...

08006c2c <__swsetup_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <__swsetup_r+0xac>)
 8006c30:	4605      	mov	r5, r0
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	460c      	mov	r4, r1
 8006c36:	b118      	cbz	r0, 8006c40 <__swsetup_r+0x14>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	b90b      	cbnz	r3, 8006c40 <__swsetup_r+0x14>
 8006c3c:	f7fc fc5a 	bl	80034f4 <__sinit>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c46:	0718      	lsls	r0, r3, #28
 8006c48:	d422      	bmi.n	8006c90 <__swsetup_r+0x64>
 8006c4a:	06d9      	lsls	r1, r3, #27
 8006c4c:	d407      	bmi.n	8006c5e <__swsetup_r+0x32>
 8006c4e:	2309      	movs	r3, #9
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	e034      	b.n	8006cc8 <__swsetup_r+0x9c>
 8006c5e:	0758      	lsls	r0, r3, #29
 8006c60:	d512      	bpl.n	8006c88 <__swsetup_r+0x5c>
 8006c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c64:	b141      	cbz	r1, 8006c78 <__swsetup_r+0x4c>
 8006c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	d002      	beq.n	8006c74 <__swsetup_r+0x48>
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f7fd fbda 	bl	8004428 <_free_r>
 8006c74:	2300      	movs	r3, #0
 8006c76:	6363      	str	r3, [r4, #52]	; 0x34
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	2300      	movs	r3, #0
 8006c82:	6063      	str	r3, [r4, #4]
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0308 	orr.w	r3, r3, #8
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	b94b      	cbnz	r3, 8006ca8 <__swsetup_r+0x7c>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9e:	d003      	beq.n	8006ca8 <__swsetup_r+0x7c>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 f883 	bl	8006dae <__smakebuf_r>
 8006ca8:	89a0      	ldrh	r0, [r4, #12]
 8006caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cae:	f010 0301 	ands.w	r3, r0, #1
 8006cb2:	d00a      	beq.n	8006cca <__swsetup_r+0x9e>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	6963      	ldr	r3, [r4, #20]
 8006cba:	425b      	negs	r3, r3
 8006cbc:	61a3      	str	r3, [r4, #24]
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	b943      	cbnz	r3, 8006cd4 <__swsetup_r+0xa8>
 8006cc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cc6:	d1c4      	bne.n	8006c52 <__swsetup_r+0x26>
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	0781      	lsls	r1, r0, #30
 8006ccc:	bf58      	it	pl
 8006cce:	6963      	ldrpl	r3, [r4, #20]
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	e7f4      	b.n	8006cbe <__swsetup_r+0x92>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7f7      	b.n	8006cc8 <__swsetup_r+0x9c>
 8006cd8:	20000064 	.word	0x20000064

08006cdc <_raise_r>:
 8006cdc:	291f      	cmp	r1, #31
 8006cde:	b538      	push	{r3, r4, r5, lr}
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	d904      	bls.n	8006cf0 <_raise_r+0x14>
 8006ce6:	2316      	movs	r3, #22
 8006ce8:	6003      	str	r3, [r0, #0]
 8006cea:	f04f 30ff 	mov.w	r0, #4294967295
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cf2:	b112      	cbz	r2, 8006cfa <_raise_r+0x1e>
 8006cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cf8:	b94b      	cbnz	r3, 8006d0e <_raise_r+0x32>
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 f830 	bl	8006d60 <_getpid_r>
 8006d00:	462a      	mov	r2, r5
 8006d02:	4601      	mov	r1, r0
 8006d04:	4620      	mov	r0, r4
 8006d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d0a:	f000 b817 	b.w	8006d3c <_kill_r>
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d00a      	beq.n	8006d28 <_raise_r+0x4c>
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	d103      	bne.n	8006d1e <_raise_r+0x42>
 8006d16:	2316      	movs	r3, #22
 8006d18:	6003      	str	r3, [r0, #0]
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	e7e7      	b.n	8006cee <_raise_r+0x12>
 8006d1e:	2400      	movs	r4, #0
 8006d20:	4628      	mov	r0, r5
 8006d22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d26:	4798      	blx	r3
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7e0      	b.n	8006cee <_raise_r+0x12>

08006d2c <raise>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <raise+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f7ff bfd3 	b.w	8006cdc <_raise_r>
 8006d36:	bf00      	nop
 8006d38:	20000064 	.word	0x20000064

08006d3c <_kill_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d06      	ldr	r5, [pc, #24]	; (8006d5c <_kill_r+0x20>)
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	f7fa f9bf 	bl	80010cc <_kill>
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d102      	bne.n	8006d58 <_kill_r+0x1c>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	b103      	cbz	r3, 8006d58 <_kill_r+0x1c>
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	bd38      	pop	{r3, r4, r5, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2000036c 	.word	0x2000036c

08006d60 <_getpid_r>:
 8006d60:	f7fa b9ad 	b.w	80010be <_getpid>

08006d64 <__swhatbuf_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	4615      	mov	r5, r2
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	461e      	mov	r6, r3
 8006d72:	b096      	sub	sp, #88	; 0x58
 8006d74:	da0c      	bge.n	8006d90 <__swhatbuf_r+0x2c>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d7e:	bf0c      	ite	eq
 8006d80:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d84:	2340      	movne	r3, #64	; 0x40
 8006d86:	2000      	movs	r0, #0
 8006d88:	6031      	str	r1, [r6, #0]
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	b016      	add	sp, #88	; 0x58
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	466a      	mov	r2, sp
 8006d92:	f000 f849 	bl	8006e28 <_fstat_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	dbed      	blt.n	8006d76 <__swhatbuf_r+0x12>
 8006d9a:	9901      	ldr	r1, [sp, #4]
 8006d9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006da0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006da4:	4259      	negs	r1, r3
 8006da6:	4159      	adcs	r1, r3
 8006da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dac:	e7eb      	b.n	8006d86 <__swhatbuf_r+0x22>

08006dae <__smakebuf_r>:
 8006dae:	898b      	ldrh	r3, [r1, #12]
 8006db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006db2:	079d      	lsls	r5, r3, #30
 8006db4:	4606      	mov	r6, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	d507      	bpl.n	8006dca <__smakebuf_r+0x1c>
 8006dba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	6123      	str	r3, [r4, #16]
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	6163      	str	r3, [r4, #20]
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	466a      	mov	r2, sp
 8006dcc:	ab01      	add	r3, sp, #4
 8006dce:	f7ff ffc9 	bl	8006d64 <__swhatbuf_r>
 8006dd2:	9900      	ldr	r1, [sp, #0]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7fd fb96 	bl	8004508 <_malloc_r>
 8006ddc:	b948      	cbnz	r0, 8006df2 <__smakebuf_r+0x44>
 8006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de2:	059a      	lsls	r2, r3, #22
 8006de4:	d4ef      	bmi.n	8006dc6 <__smakebuf_r+0x18>
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	f043 0302 	orr.w	r3, r3, #2
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	e7e3      	b.n	8006dba <__smakebuf_r+0xc>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	6020      	str	r0, [r4, #0]
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	9b00      	ldr	r3, [sp, #0]
 8006dfe:	6120      	str	r0, [r4, #16]
 8006e00:	6163      	str	r3, [r4, #20]
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	b15b      	cbz	r3, 8006e1e <__smakebuf_r+0x70>
 8006e06:	4630      	mov	r0, r6
 8006e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e0c:	f000 f81e 	bl	8006e4c <_isatty_r>
 8006e10:	b128      	cbz	r0, 8006e1e <__smakebuf_r+0x70>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f023 0303 	bic.w	r3, r3, #3
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	431d      	orrs	r5, r3
 8006e22:	81a5      	strh	r5, [r4, #12]
 8006e24:	e7cf      	b.n	8006dc6 <__smakebuf_r+0x18>
	...

08006e28 <_fstat_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4d06      	ldr	r5, [pc, #24]	; (8006e48 <_fstat_r+0x20>)
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	f7fa f9a7 	bl	8001188 <_fstat>
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	d102      	bne.n	8006e44 <_fstat_r+0x1c>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	b103      	cbz	r3, 8006e44 <_fstat_r+0x1c>
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop
 8006e48:	2000036c 	.word	0x2000036c

08006e4c <_isatty_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4d05      	ldr	r5, [pc, #20]	; (8006e68 <_isatty_r+0x1c>)
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fa f9a5 	bl	80011a6 <_isatty>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_isatty_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_isatty_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	2000036c 	.word	0x2000036c

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
