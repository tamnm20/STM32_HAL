
LM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a360  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800a470  0800a470  0001a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a958  0800a958  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a958  0800a958  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a958  0800a958  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  200001d8  0800ab38  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  0800ab38  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f5c  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a3  00000000  00000000  000361a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa2  00000000  00000000  0003a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043ca  00000000  00000000  0003b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001691d  00000000  00000000  0003fccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095c8c  00000000  00000000  000565e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068cc  00000000  00000000  000ec278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f2b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a458 	.word	0x0800a458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a458 	.word	0x0800a458

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f000 fb83 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f843 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 f8b1 	bl	8000d60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bfe:	f000 f885 	bl	8000d0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  float t = 27.055;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <main+0x6c>)
 8000c04:	607b      	str	r3, [r7, #4]
  sprintf((char*)tx_buffer,"STM32 hello from print: ");
 8000c06:	4915      	ldr	r1, [pc, #84]	; (8000c5c <main+0x70>)
 8000c08:	4815      	ldr	r0, [pc, #84]	; (8000c60 <main+0x74>)
 8000c0a:	f005 ff9d 	bl	8006b48 <siprintf>
  sprintf((char*)tx_buffer+strlen((char*)tx_buffer),"%0.3f\n",t);
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <main+0x74>)
 8000c10:	f7ff fa9e 	bl	8000150 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <main+0x74>)
 8000c18:	189c      	adds	r4, r3, r2
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fc04 	bl	8000428 <__aeabi_f2d>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	490f      	ldr	r1, [pc, #60]	; (8000c64 <main+0x78>)
 8000c26:	4620      	mov	r0, r4
 8000c28:	f005 ff8e 	bl	8006b48 <siprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f002 fb84 	bl	8003338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_1 */
  task_1Handle = osThreadNew(task_1_function, NULL, &task_1_attributes);
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <main+0x7c>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <main+0x80>)
 8000c36:	f002 fbe5 	bl	8003404 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <main+0x84>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of task_2 */
  task_2Handle = osThreadNew(task_2_function, NULL, &task_2_attributes);
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <main+0x88>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <main+0x8c>)
 8000c46:	f002 fbdd 	bl	8003404 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <main+0x90>)
 8000c4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c50:	f002 fba4 	bl	800339c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0x68>
 8000c56:	bf00      	nop
 8000c58:	41d870a4 	.word	0x41d870a4
 8000c5c:	0800a480 	.word	0x0800a480
 8000c60:	20000244 	.word	0x20000244
 8000c64:	0800a49c 	.word	0x0800a49c
 8000c68:	0800a4bc 	.word	0x0800a4bc
 8000c6c:	08000e3d 	.word	0x08000e3d
 8000c70:	2000023c 	.word	0x2000023c
 8000c74:	0800a4e0 	.word	0x0800a4e0
 8000c78:	08000e6d 	.word	0x08000e6d
 8000c7c:	20000240 	.word	0x20000240

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	2228      	movs	r2, #40	; 0x28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 ffbd 	bl	8006c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cbe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fe91 	bl	80019f0 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cd4:	f000 f8ec 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f8fe 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cfe:	f000 f8d7 	bl	8000eb0 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3740      	adds	r7, #64	; 0x40
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_USART1_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f001 fcde 	bl	8002704 <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f000 f8af 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001f4 	.word	0x200001f4
 8000d5c:	40013800 	.word	0x40013800

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_GPIO_Init+0xd0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4816      	ldr	r0, [pc, #88]	; (8000e34 <MX_GPIO_Init+0xd4>)
 8000ddc:	f000 fdd6 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_GPIO_Init+0xd8>)
 8000de8:	f000 fdd0 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0xd4>)
 8000e06:	f000 fc3d 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xd8>)
 8000e24:	f000 fc2e 	bl	8001684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40010c00 	.word	0x40010c00

08000e3c <task_1_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_1_function */
void task_1_function(void *argument)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1,tx_buffer,strlen((char*)tx_buffer) , 100);
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <task_1_function+0x28>)
 8000e46:	f7ff f983 	bl	8000150 <strlen>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	2364      	movs	r3, #100	; 0x64
 8000e50:	4904      	ldr	r1, [pc, #16]	; (8000e64 <task_1_function+0x28>)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <task_1_function+0x2c>)
 8000e54:	f001 fca6 	bl	80027a4 <HAL_UART_Transmit>
	  osDelay(1000);
 8000e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5c:	f002 fb7c 	bl	8003558 <osDelay>
	  HAL_UART_Transmit(&huart1,tx_buffer,strlen((char*)tx_buffer) , 100);
 8000e60:	e7f0      	b.n	8000e44 <task_1_function+0x8>
 8000e62:	bf00      	nop
 8000e64:	20000244 	.word	0x20000244
 8000e68:	200001f4 	.word	0x200001f4

08000e6c <task_2_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_2_function */
void task_2_function(void *argument)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_2_function */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <task_2_function+0x1c>)
 8000e7a:	f000 fd9f 	bl	80019bc <HAL_GPIO_TogglePin>
	 osDelay(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f002 fb6a 	bl	8003558 <osDelay>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e84:	e7f6      	b.n	8000e74 <task_2_function+0x8>
 8000e86:	bf00      	nop
 8000e88:	40011000 	.word	0x40011000

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f000 fa43 	bl	8001328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40000800 	.word	0x40000800

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_MspInit+0x68>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_MspInit+0x68>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x68>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_MspInit+0x68>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x68>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f000 fae6 	bl	80014ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x6c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x6c>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <HAL_UART_MspInit+0x9c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d139      	bne.n	8000fc0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_MspInit+0xa0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <HAL_UART_MspInit+0xa4>)
 8000f92:	f000 fb77 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_UART_MspInit+0xa4>)
 8000fac:	f000 fb6a 	bl	8001684 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	2025      	movs	r0, #37	; 0x25
 8000fb6:	f000 fa88 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fba:	2025      	movs	r0, #37	; 0x25
 8000fbc:	f000 faa1 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <HAL_InitTick+0xe8>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a33      	ldr	r2, [pc, #204]	; (80010bc <HAL_InitTick+0xe8>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_InitTick+0xe8>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001002:	f107 0210 	add.w	r2, r7, #16
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f8e1 	bl	80021d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800101c:	f001 f8b2 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8001020:	6378      	str	r0, [r7, #52]	; 0x34
 8001022:	e004      	b.n	800102e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001024:	f001 f8ae 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8001028:	4603      	mov	r3, r0
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_InitTick+0xec>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9b      	lsrs	r3, r3, #18
 8001038:	3b01      	subs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_InitTick+0xf0>)
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <HAL_InitTick+0xf4>)
 8001040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_InitTick+0xf0>)
 8001044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001048:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_InitTick+0xf0>)
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_InitTick+0xf0>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_InitTick+0xf0>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_InitTick+0xf0>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <HAL_InitTick+0xf0>)
 8001064:	f001 f904 	bl	8002270 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800106e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001072:	2b00      	cmp	r3, #0
 8001074:	d11b      	bne.n	80010ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <HAL_InitTick+0xf0>)
 8001078:	f001 f952 	bl	8002320 <HAL_TIM_Base_Start_IT>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001086:	2b00      	cmp	r3, #0
 8001088:	d111      	bne.n	80010ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800108a:	201e      	movs	r0, #30
 800108c:	f000 fa39 	bl	8001502 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d808      	bhi.n	80010a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001096:	2200      	movs	r2, #0
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	201e      	movs	r0, #30
 800109c:	f000 fa15 	bl	80014ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0xf8>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e002      	b.n	80010ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3738      	adds	r7, #56	; 0x38
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	20000264 	.word	0x20000264
 80010c8:	40000800 	.word	0x40000800
 80010cc:	20000004 	.word	0x20000004

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM4_IRQHandler+0x10>)
 8001102:	f001 f95f 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000264 	.word	0x20000264

08001110 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USART1_IRQHandler+0x10>)
 8001116:	f001 fbc9 	bl	80028ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f4 	.word	0x200001f4

08001124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <_kill>:

int _kill(int pid, int sig)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800113c:	f005 fdba 	bl	8006cb4 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	2216      	movs	r2, #22
 8001144:	601a      	str	r2, [r3, #0]
  return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_exit>:

void _exit (int status)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800115a:	f04f 31ff 	mov.w	r1, #4294967295
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffe7 	bl	8001132 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001164:	e7fe      	b.n	8001164 <_exit+0x12>

08001166 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00a      	b.n	800118e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001178:	f3af 8000 	nop.w
 800117c:	4601      	mov	r1, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	60ba      	str	r2, [r7, #8]
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	dbf0      	blt.n	8001178 <_read+0x12>
  }

  return len;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e009      	b.n	80011c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	60ba      	str	r2, [r7, #8]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf1      	blt.n	80011b2 <_write+0x12>
  }
  return len;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_close>:

int _close(int file)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <_isatty>:

int _isatty(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f005 fd24 	bl	8006cb4 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20005000 	.word	0x20005000
 8001298:	00000400 	.word	0x00000400
 800129c:	200002ac 	.word	0x200002ac
 80012a0:	20001d48 	.word	0x20001d48

080012a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff fff8 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012b6:	490c      	ldr	r1, [pc, #48]	; (80012e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012cc:	4c09      	ldr	r4, [pc, #36]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f005 fcf1 	bl	8006cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7ff fc85 	bl	8000bec <main>
  bx lr
 80012e2:	4770      	bx	lr
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80012ec:	0800a960 	.word	0x0800a960
  ldr r2, =_sbss
 80012f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80012f4:	20001d48 	.word	0x20001d48

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f8d1 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f7ff fe5e 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fdd0 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x1c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x20>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_IncTick+0x20>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000008 	.word	0x20000008
 8001348:	200002b0 	.word	0x200002b0

0800134c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_GetTick+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	200002b0 	.word	0x200002b0

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4906      	ldr	r1, [pc, #24]	; (80013f8 <__NVIC_EnableIRQ+0x34>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff4f 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff64 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ffb2 	bl	8001450 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff81 	bl	80013fc <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff57 	bl	80013c4 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d008      	beq.n	8001548 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2204      	movs	r2, #4
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e020      	b.n	800158a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020e 	bic.w	r2, r2, #14
 8001556:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d005      	beq.n	80015b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e051      	b.n	800165c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 020e 	bic.w	r2, r2, #14
 80015c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <HAL_DMA_Abort_IT+0xd4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d029      	beq.n	8001636 <HAL_DMA_Abort_IT+0xa2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_DMA_Abort_IT+0xd8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_Abort_IT+0x9e>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_DMA_Abort_IT+0xdc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01a      	beq.n	800162c <HAL_DMA_Abort_IT+0x98>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_DMA_Abort_IT+0xe0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_Abort_IT+0x92>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_DMA_Abort_IT+0xe4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00a      	beq.n	8001620 <HAL_DMA_Abort_IT+0x8c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_DMA_Abort_IT+0xe8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d102      	bne.n	800161a <HAL_DMA_Abort_IT+0x86>
 8001614:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 800161a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800161e:	e00b      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001624:	e008      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162a:	e005      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	e002      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001632:	2310      	movs	r3, #16
 8001634:	e000      	b.n	8001638 <HAL_DMA_Abort_IT+0xa4>
 8001636:	2301      	movs	r3, #1
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_DMA_Abort_IT+0xec>)
 800163a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    } 
  }
  return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e169      	b.n	800196c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001698:	2201      	movs	r2, #1
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8158 	bne.w	8001966 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a9a      	ldr	r2, [pc, #616]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d05e      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016c0:	4a98      	ldr	r2, [pc, #608]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d875      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016c6:	4a98      	ldr	r2, [pc, #608]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016cc:	4a96      	ldr	r2, [pc, #600]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d86f      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016d2:	4a96      	ldr	r2, [pc, #600]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d052      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016d8:	4a94      	ldr	r2, [pc, #592]	; (800192c <HAL_GPIO_Init+0x2a8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d869      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016de:	4a94      	ldr	r2, [pc, #592]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04c      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016e4:	4a92      	ldr	r2, [pc, #584]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d863      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d046      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016f0:	4a90      	ldr	r2, [pc, #576]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d85d      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xcc>
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d859      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_GPIO_Init+0x80>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800177f 	.word	0x0800177f
 8001708:	08001759 	.word	0x08001759
 800170c:	0800176b 	.word	0x0800176b
 8001710:	080017ad 	.word	0x080017ad
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017b3 	.word	0x080017b3
 800171c:	080017b3 	.word	0x080017b3
 8001720:	080017b3 	.word	0x080017b3
 8001724:	080017b3 	.word	0x080017b3
 8001728:	080017b3 	.word	0x080017b3
 800172c:	080017b3 	.word	0x080017b3
 8001730:	080017b3 	.word	0x080017b3
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017b3 	.word	0x080017b3
 8001744:	080017b3 	.word	0x080017b3
 8001748:	08001761 	.word	0x08001761
 800174c:	08001775 	.word	0x08001775
 8001750:	4a79      	ldr	r2, [pc, #484]	; (8001938 <HAL_GPIO_Init+0x2b4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001756:	e02c      	b.n	80017b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e029      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e024      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	3308      	adds	r3, #8
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e01f      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	330c      	adds	r3, #12
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e01a      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e013      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	611a      	str	r2, [r3, #16]
          break;
 800179e:	e009      	b.n	80017b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	615a      	str	r2, [r3, #20]
          break;
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          break;
 80017b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d801      	bhi.n	80017be <HAL_GPIO_Init+0x13a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_Init+0x13e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d802      	bhi.n	80017d0 <HAL_GPIO_Init+0x14c>
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x152>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3b08      	subs	r3, #8
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	210f      	movs	r1, #15
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80b1 	beq.w	8001966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x2b8>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181c:	4a48      	ldr	r2, [pc, #288]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a40      	ldr	r2, [pc, #256]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d013      	beq.n	8001870 <HAL_GPIO_Init+0x1ec>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <HAL_GPIO_Init+0x2c4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00d      	beq.n	800186c <HAL_GPIO_Init+0x1e8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <HAL_GPIO_Init+0x2c8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x1e4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a3d      	ldr	r2, [pc, #244]	; (8001950 <HAL_GPIO_Init+0x2cc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d101      	bne.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001860:	2303      	movs	r3, #3
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001864:	2304      	movs	r3, #4
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001868:	2302      	movs	r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1ee>
 8001870:	2300      	movs	r3, #0
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001882:	492f      	ldr	r1, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	492c      	ldr	r1, [pc, #176]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4928      	ldr	r1, [pc, #160]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4922      	ldr	r1, [pc, #136]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	491e      	ldr	r1, [pc, #120]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4918      	ldr	r1, [pc, #96]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4914      	ldr	r1, [pc, #80]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001904:	4013      	ands	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d021      	beq.n	8001958 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e021      	b.n	8001966 <HAL_GPIO_Init+0x2e2>
 8001922:	bf00      	nop
 8001924:	10320000 	.word	0x10320000
 8001928:	10310000 	.word	0x10310000
 800192c:	10220000 	.word	0x10220000
 8001930:	10210000 	.word	0x10210000
 8001934:	10120000 	.word	0x10120000
 8001938:	10110000 	.word	0x10110000
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011000 	.word	0x40011000
 8001950:	40011400 	.word	0x40011400
 8001954:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_GPIO_Init+0x304>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	43db      	mvns	r3, r3
 8001960:	4909      	ldr	r1, [pc, #36]	; (8001988 <HAL_GPIO_Init+0x304>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	3301      	adds	r3, #1
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae8e 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	372c      	adds	r7, #44	; 0x2c
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	611a      	str	r2, [r3, #16]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43d9      	mvns	r1, r3
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	400b      	ands	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e272      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8087 	beq.w	8001b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a10:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a1c:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d112      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
 8001a28:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x12c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d168      	bne.n	8001b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e24c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x76>
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7f      	ldr	r2, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e02e      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b78      	ldr	r3, [pc, #480]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a77      	ldr	r2, [pc, #476]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e01d      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0xbc>
 8001a92:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a71      	ldr	r2, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fc3e 	bl	800134c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fc3a 	bl	800134c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e200      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe4>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc2a 	bl	800134c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc26 	bl	800134c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1ec      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x10c>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d11c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e1c0      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4939      	ldr	r1, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	e03a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fbdf 	bl	800134c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff fbdb 	bl	800134c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1a1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4927      	ldr	r1, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fbbe 	bl	800134c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fbba 	bl	800134c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e180      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d03a      	beq.n	8001c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d019      	beq.n	8001c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fb9e 	bl	800134c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb9a 	bl	800134c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e160      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 fafe 	bl	8002234 <RCC_Delay>
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7ff fb84 	bl	800134c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb80 	bl	800134c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d908      	bls.n	8001c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e146      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	42420000 	.word	0x42420000
 8001c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e9      	bne.n	8001c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a6 	beq.w	8001dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b8b      	ldr	r3, [pc, #556]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a87      	ldr	r2, [pc, #540]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b85      	ldr	r3, [pc, #532]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b82      	ldr	r3, [pc, #520]	; (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d118      	bne.n	8001cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4b7f      	ldr	r3, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7e      	ldr	r2, [pc, #504]	; (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb41 	bl	800134c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cce:	f7ff fb3d 	bl	800134c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b64      	cmp	r3, #100	; 0x64
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e103      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x312>
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e02d      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x334>
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a69      	ldr	r2, [pc, #420]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a66      	ldr	r2, [pc, #408]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	e01c      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x356>
 8001d2c:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a60      	ldr	r2, [pc, #384]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff faf1 	bl	800134c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff faed 	bl	800134c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0b1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCC_OscConfig+0x37e>
 8001d90:	e014      	b.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fadb 	bl	800134c <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fad7 	bl	800134c <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e09b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ee      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d061      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d146      	bne.n	8001e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff faab 	bl	800134c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff faa7 	bl	800134c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e06d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a19      	ldr	r1, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	430b      	orrs	r3, r1
 8001e46:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff fa7b 	bl	800134c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff fa77 	bl	800134c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46a>
 8001e78:	e035      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa64 	bl	800134c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff fa60 	bl	800134c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e026      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x498>
 8001ea6:	e01e      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e019      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_OscConfig+0x500>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d0      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0207 	bic.w	r2, r3, #7
 8001f1e:	4965      	ldr	r1, [pc, #404]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d040      	beq.n	8002014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d115      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e073      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06b      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4936      	ldr	r1, [pc, #216]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7ff f9b2 	bl	800134c <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7ff f9ae 	bl	800134c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e053      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d210      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4922      	ldr	r1, [pc, #136]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1cc>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1d0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ff96 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	0800a504 	.word	0x0800a504
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_GetSysClockFreq+0x94>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x30>
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x36>
 80020f6:	e027      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fa:	613b      	str	r3, [r7, #16]
      break;
 80020fc:	e027      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0c9b      	lsrs	r3, r3, #18
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0c5b      	lsrs	r3, r3, #17
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 800212a:	fb03 f202 	mul.w	r2, r3, r2
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e004      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_RCC_GetSysClockFreq+0xa4>)
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	613b      	str	r3, [r7, #16]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	693b      	ldr	r3, [r7, #16]
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	0800a51c 	.word	0x0800a51c
 8002168:	0800a52c 	.word	0x0800a52c
 800216c:	003d0900 	.word	0x003d0900

08002170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_RCC_GetHCLKFreq+0x10>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff2 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	0800a514 	.word	0x0800a514

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffde 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0adb      	lsrs	r3, r3, #11
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	0800a514 	.word	0x0800a514

080021d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	220f      	movs	r2, #15
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_GetClockConfig+0x58>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_RCC_GetClockConfig+0x58>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_GetClockConfig+0x58>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_GetClockConfig+0x58>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetClockConfig+0x5c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0207 	and.w	r2, r3, #7
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000
 8002230:	40022000 	.word	0x40022000

08002234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCC_Delay+0x34>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <RCC_Delay+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002250:	bf00      	nop
  }
  while (Delay --);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	60fa      	str	r2, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <RCC_Delay+0x1c>
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f839 	bl	800230e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 f9b4 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e03a      	b.n	80023ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x58>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d009      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x58>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_TIM_Base_Start_IT+0x9c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x58>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d010      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	e007      	b.n	80023ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8ed 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8e0 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f8ef 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8c3 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8b6 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8c5 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f899 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f88c 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f89b 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0210 	mvn.w	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2208      	movs	r2, #8
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f86f 	bl	80025e6 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f862 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f871 	bl	80025f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fca2 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8bf 	bl	80026f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d10e      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d107      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f835 	bl	800260a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0220 	mvn.w	r2, #32
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f88a 	bl	80026e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800

080026e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e042      	b.n	800279c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fbfe 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fd67 	bl	800321c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800275c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800276c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800277c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d16d      	bne.n	80028a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Transmit+0x2c>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e066      	b.n	80028a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2221      	movs	r2, #33	; 0x21
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fdb3 	bl	800134c <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x6c>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002818:	e02a      	b.n	8002870 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 faf0 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e036      	b.n	80028a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	3302      	adds	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e007      	b.n	8002862 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1cf      	bne.n	800281a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fac0 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e006      	b.n	80028a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0ba      	sub	sp, #232	; 0xe8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_UART_IRQHandler+0x66>
 80028fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fbc8 	bl	80030a0 <UART_Receive_IT>
      return;
 8002910:	e25b      	b.n	8002dca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80de 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x22c>
 800291c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80d1 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_UART_IRQHandler+0xae>
 8002942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_UART_IRQHandler+0xd2>
 8002966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800297e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_UART_IRQHandler+0xf6>
 800298a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d011      	beq.n	80029d2 <HAL_UART_IRQHandler+0x126>
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 81f2 	beq.w	8002dc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_UART_IRQHandler+0x14e>
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb53 	bl	80030a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_UART_IRQHandler+0x17a>
 8002a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04f      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa5d 	bl	8002ee6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d041      	beq.n	8002abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3314      	adds	r3, #20
 8002a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a76:	e841 2300 	strex	r3, r2, [r1]
 8002a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1d9      	bne.n	8002a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d013      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	4a7e      	ldr	r2, [pc, #504]	; (8002c8c <HAL_UART_IRQHandler+0x3e0>)
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fd7a 	bl	8001594 <HAL_DMA_Abort_IT>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	e00e      	b.n	8002ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f993 	bl	8002de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	e00a      	b.n	8002ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f98f 	bl	8002de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	e006      	b.n	8002ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f98b 	bl	8002de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002ad2:	e175      	b.n	8002dc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	bf00      	nop
    return;
 8002ad6:	e173      	b.n	8002dc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 814f 	bne.w	8002d80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8148 	beq.w	8002d80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8141 	beq.w	8002d80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80b6 	beq.w	8002c90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8145 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b42:	429a      	cmp	r2, r3
 8002b44:	f080 813e 	bcs.w	8002dc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	f000 8088 	beq.w	8002c6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1d9      	bne.n	8002b5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3314      	adds	r3, #20
 8002bae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e1      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3314      	adds	r3, #20
 8002bea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e3      	bne.n	8002be4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3c:	f023 0310 	bic.w	r3, r3, #16
 8002c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e3      	bne.n	8002c2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fc59 	bl	800151e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f8b6 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c88:	e09c      	b.n	8002dc4 <HAL_UART_IRQHandler+0x518>
 8002c8a:	bf00      	nop
 8002c8c:	08002fab 	.word	0x08002fab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 808e 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8089 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002cda:	647a      	str	r2, [r7, #68]	; 0x44
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e3      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d12:	633a      	str	r2, [r7, #48]	; 0x30
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e3      	bne.n	8002cee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0310 	bic.w	r3, r3, #16
 8002d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d58:	61fa      	str	r2, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	617b      	str	r3, [r7, #20]
   return(result);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e3      	bne.n	8002d34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f83b 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d7e:	e023      	b.n	8002dc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_UART_IRQHandler+0x4f4>
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f91a 	bl	8002fd2 <UART_Transmit_IT>
    return;
 8002d9e:	e014      	b.n	8002dca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <HAL_UART_IRQHandler+0x51e>
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f959 	bl	8003070 <UART_EndTransmit_IT>
    return;
 8002dbe:	e004      	b.n	8002dca <HAL_UART_IRQHandler+0x51e>
    return;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <HAL_UART_IRQHandler+0x51e>
      return;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <HAL_UART_IRQHandler+0x51e>
      return;
 8002dc8:	bf00      	nop
  }
}
 8002dca:	37e8      	adds	r7, #232	; 0xe8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b090      	sub	sp, #64	; 0x40
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	e050      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d04c      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	f7fe fa8f 	bl	800134c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d241      	bcs.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e5      	bne.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3314      	adds	r3, #20
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8e:	623a      	str	r2, [r7, #32]
 8002e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	69f9      	ldr	r1, [r7, #28]
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e00f      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d09f      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3740      	adds	r7, #64	; 0x40
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b095      	sub	sp, #84	; 0x54
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f0e:	643a      	str	r2, [r7, #64]	; 0x40
 8002f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3314      	adds	r3, #20
 8002f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3314      	adds	r3, #20
 8002f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d119      	bne.n	8002f92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0310 	bic.w	r3, r3, #16
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f7e:	61ba      	str	r2, [r7, #24]
 8002f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e5      	bne.n	8002f5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fa0:	bf00      	nop
 8002fa2:	3754      	adds	r7, #84	; 0x54
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff ff0c 	bl	8002de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b21      	cmp	r3, #33	; 0x21
 8002fe4:	d13e      	bne.n	8003064 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	d114      	bne.n	800301a <UART_Transmit_IT+0x48>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d110      	bne.n	800301a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	621a      	str	r2, [r3, #32]
 8003018:	e008      	b.n	800302c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6211      	str	r1, [r2, #32]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003086:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fe9d 	bl	8002dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b22      	cmp	r3, #34	; 0x22
 80030b2:	f040 80ae 	bne.w	8003212 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030be:	d117      	bne.n	80030f0 <UART_Receive_IT+0x50>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d113      	bne.n	80030f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	b29a      	uxth	r2, r3
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
 80030ee:	e026      	b.n	800313e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d007      	beq.n	8003114 <UART_Receive_IT+0x74>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <UART_Receive_IT+0x82>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e008      	b.n	8003134 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312e:	b2da      	uxtb	r2, r3
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29b      	uxth	r3, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4619      	mov	r1, r3
 800314c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800314e:	2b00      	cmp	r3, #0
 8003150:	d15d      	bne.n	800320e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0220 	bic.w	r2, r2, #32
 8003160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	2b01      	cmp	r3, #1
 8003196:	d135      	bne.n	8003204 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	613b      	str	r3, [r7, #16]
   return(result);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f023 0310 	bic.w	r3, r3, #16
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031be:	623a      	str	r2, [r7, #32]
 80031c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	69f9      	ldr	r1, [r7, #28]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e5      	bne.n	800319e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d10a      	bne.n	80031f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fdf9 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
 8003202:	e002      	b.n	800320a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fd fce7 	bl	8000bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e002      	b.n	8003214 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3730      	adds	r7, #48	; 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003256:	f023 030c 	bic.w	r3, r3, #12
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	430b      	orrs	r3, r1
 8003262:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <UART_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7fe ff92 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	e002      	b.n	8003292 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7fe ff7a 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003290:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <UART_SetConfig+0x118>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	0119      	lsls	r1, r3, #4
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <UART_SetConfig+0x118>)
 80032ca:	fba3 0302 	umull	r0, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2064      	movs	r0, #100	; 0x64
 80032d2:	fb00 f303 	mul.w	r3, r0, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	3332      	adds	r3, #50	; 0x32
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <UART_SetConfig+0x118>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e8:	4419      	add	r1, r3
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009a      	lsls	r2, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <UART_SetConfig+0x118>)
 8003302:	fba3 0302 	umull	r0, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2064      	movs	r0, #100	; 0x64
 800330a:	fb00 f303 	mul.w	r3, r0, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	3332      	adds	r3, #50	; 0x32
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	440a      	add	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40013800 	.word	0x40013800
 8003334:	51eb851f 	.word	0x51eb851f

08003338 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333e:	f3ef 8305 	mrs	r3, IPSR
 8003342:	60bb      	str	r3, [r7, #8]
  return(result);
 8003344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	607b      	str	r3, [r7, #4]
  return(result);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <osKernelInitialize+0x32>
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <osKernelInitialize+0x60>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d109      	bne.n	8003372 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800335e:	f3ef 8311 	mrs	r3, BASEPRI
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00c      	b.n	800338c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <osKernelInitialize+0x60>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d105      	bne.n	8003386 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <osKernelInitialize+0x60>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e002      	b.n	800338c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800338c:	68fb      	ldr	r3, [r7, #12]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	200002b4 	.word	0x200002b4

0800339c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a2:	f3ef 8305 	mrs	r3, IPSR
 80033a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ae:	f3ef 8310 	mrs	r3, PRIMASK
 80033b2:	607b      	str	r3, [r7, #4]
  return(result);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <osKernelStart+0x32>
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <osKernelStart+0x64>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d109      	bne.n	80033d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033c2:	f3ef 8311 	mrs	r3, BASEPRI
 80033c6:	603b      	str	r3, [r7, #0]
  return(result);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80033ce:	f06f 0305 	mvn.w	r3, #5
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e00e      	b.n	80033f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <osKernelStart+0x64>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <osKernelStart+0x64>)
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80033e4:	f001 f878 	bl	80044d8 <vTaskStartScheduler>
      stat = osOK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e002      	b.n	80033f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200002b4 	.word	0x200002b4

08003404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b092      	sub	sp, #72	; 0x48
 8003408:	af04      	add	r7, sp, #16
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003414:	f3ef 8305 	mrs	r3, IPSR
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8094 	bne.w	800354a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	623b      	str	r3, [r7, #32]
  return(result);
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 808d 	bne.w	800354a <osThreadNew+0x146>
 8003430:	4b48      	ldr	r3, [pc, #288]	; (8003554 <osThreadNew+0x150>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d106      	bne.n	8003446 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003438:	f3ef 8311 	mrs	r3, BASEPRI
 800343c:	61fb      	str	r3, [r7, #28]
  return(result);
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 8082 	bne.w	800354a <osThreadNew+0x146>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07e      	beq.n	800354a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003450:	2318      	movs	r3, #24
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003454:	2300      	movs	r3, #0
 8003456:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003458:	f107 031b 	add.w	r3, r7, #27
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d045      	beq.n	80034f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <osThreadNew+0x74>
        name = attr->name;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <osThreadNew+0x9a>
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b38      	cmp	r3, #56	; 0x38
 8003490:	d805      	bhi.n	800349e <osThreadNew+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <osThreadNew+0x9e>
        return (NULL);
 800349e:	2300      	movs	r3, #0
 80034a0:	e054      	b.n	800354c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <osThreadNew+0xd4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b5b      	cmp	r3, #91	; 0x5b
 80034c0:	d90a      	bls.n	80034d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <osThreadNew+0xd4>
        mem = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	e010      	b.n	80034fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <osThreadNew+0xf6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <osThreadNew+0xf6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <osThreadNew+0xf6>
          mem = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f4:	e001      	b.n	80034fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d110      	bne.n	8003522 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003508:	9202      	str	r2, [sp, #8]
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fe12 	bl	8004140 <xTaskCreateStatic>
 800351c:	4603      	mov	r3, r0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e013      	b.n	800354a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d110      	bne.n	800354a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	b29a      	uxth	r2, r3
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fe5c 	bl	80041f8 <xTaskCreate>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <osThreadNew+0x146>
          hTask = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800354a:	697b      	ldr	r3, [r7, #20]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3738      	adds	r7, #56	; 0x38
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200002b4 	.word	0x200002b4

08003558 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003560:	f3ef 8305 	mrs	r3, IPSR
 8003564:	613b      	str	r3, [r7, #16]
  return(result);
 8003566:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	60fb      	str	r3, [r7, #12]
  return(result);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <osDelay+0x34>
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <osDelay+0x58>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d109      	bne.n	8003594 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003580:	f3ef 8311 	mrs	r3, BASEPRI
 8003584:	60bb      	str	r3, [r7, #8]
  return(result);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <osDelay+0x3c>
    stat = osErrorISR;
 800358c:	f06f 0305 	mvn.w	r3, #5
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e007      	b.n	80035a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 ff66 	bl	8004470 <vTaskDelay>
    }
  }

  return (stat);
 80035a4:	697b      	ldr	r3, [r7, #20]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200002b4 	.word	0x200002b4

080035b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a06      	ldr	r2, [pc, #24]	; (80035dc <vApplicationGetIdleTaskMemory+0x28>)
 80035c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a05      	ldr	r2, [pc, #20]	; (80035e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80035ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	200002b8 	.word	0x200002b8
 80035e0:	20000314 	.word	0x20000314

080035e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <vApplicationGetTimerTaskMemory+0x2c>)
 80035f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <vApplicationGetTimerTaskMemory+0x30>)
 80035fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000514 	.word	0x20000514
 8003614:	20000570 	.word	0x20000570

08003618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 0208 	add.w	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f103 0208 	add.w	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f103 0208 	add.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d103      	bne.n	80036d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e00c      	b.n	80036ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3308      	adds	r3, #8
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e002      	b.n	80036e2 <vListInsert+0x2e>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d2f6      	bcs.n	80036dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6852      	ldr	r2, [r2, #4]
 8003744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d103      	bne.n	8003758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1e5a      	subs	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037a2:	f001 ffcb 	bl	800573c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	3b01      	subs	r3, #1
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	22ff      	movs	r2, #255	; 0xff
 80037ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d114      	bne.n	8003822 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01a      	beq.n	8003836 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3310      	adds	r3, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f001 f8f1 	bl	80049ec <xTaskRemoveFromEventList>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <xQueueGenericReset+0xcc>)
 8003812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	e009      	b.n	8003836 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3310      	adds	r3, #16
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fef6 	bl	8003618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fef1 	bl	8003618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003836:	f001 ffb1 	bl	800579c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800383a:	2301      	movs	r3, #1
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08e      	sub	sp, #56	; 0x38
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <xQueueGenericCreateStatic+0x52>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <xQueueGenericCreateStatic+0x56>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xQueueGenericCreateStatic+0x58>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	623b      	str	r3, [r7, #32]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <xQueueGenericCreateStatic+0x7e>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueGenericCreateStatic+0x82>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueGenericCreateStatic+0x84>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	61fb      	str	r3, [r7, #28]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038e6:	2350      	movs	r3, #80	; 0x50
 80038e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d00a      	beq.n	8003906 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	61bb      	str	r3, [r7, #24]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003918:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f805 	bl	8003936 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800392e:	4618      	mov	r0, r3
 8003930:	3730      	adds	r7, #48	; 0x30
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e002      	b.n	8003958 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003964:	2101      	movs	r1, #1
 8003966:	69b8      	ldr	r0, [r7, #24]
 8003968:	f7ff ff06 	bl	8003778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	; 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800398a:	2300      	movs	r3, #0
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericSend+0x32>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <xQueueGenericSend+0x40>
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <xQueueGenericSend+0x44>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <xQueueGenericSend+0x46>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <xQueueGenericSend+0x60>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x6e>
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <xQueueGenericSend+0x72>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericSend+0x74>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0a:	f001 f9b1 	bl	8004d70 <xTaskGetSchedulerState>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xQueueGenericSend+0x9e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSend+0xa2>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSend+0xa4>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	61fb      	str	r3, [r7, #28]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a3a:	f001 fe7f 	bl	800573c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xQueueGenericSend+0xd4>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d129      	bne.n	8003aa4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a56:	f000 fa07 	bl	8003e68 <prvCopyDataToQueue>
 8003a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 ffbf 	bl	80049ec <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a74:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	e00a      	b.n	8003a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a9c:	f001 fe7e 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e063      	b.n	8003b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aaa:	f001 fe77 	bl	800579c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e05c      	b.n	8003b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fff9 	bl	8004ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac6:	f001 fe69 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aca:	f000 fd6b 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ace:	f001 fe35 	bl	800573c <vPortEnterCritical>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d103      	bne.n	8003ae8 <xQueueGenericSend+0x16c>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <xQueueGenericSend+0x182>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afe:	f001 fe4d 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b02:	1d3a      	adds	r2, r7, #4
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 ffe8 	bl	8004ae0 <xTaskCheckForTimeOut>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d124      	bne.n	8003b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b18:	f000 fa9e 	bl	8004058 <prvIsQueueFull>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	3310      	adds	r3, #16
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 ff0e 	bl	800494c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b32:	f000 fa29 	bl	8003f88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b36:	f000 fd43 	bl	80045c0 <xTaskResumeAll>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af7c 	bne.w	8003a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <xQueueGenericSend+0x1f8>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	e772      	b.n	8003a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b56:	f000 fa17 	bl	8003f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b5a:	f000 fd31 	bl	80045c0 <xTaskResumeAll>
 8003b5e:	e76c      	b.n	8003a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b62:	f000 fa11 	bl	8003f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b66:	f000 fd2b 	bl	80045c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b6a:	2300      	movs	r3, #0
		}
	}
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3738      	adds	r7, #56	; 0x38
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <xQueueGenericSendFromISR+0x3c>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x40>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <xQueueGenericSendFromISR+0x42>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	623b      	str	r3, [r7, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSendFromISR+0x6a>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <xQueueGenericSendFromISR+0x6e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <xQueueGenericSendFromISR+0x70>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	61fb      	str	r3, [r7, #28]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c02:	f001 fe5d 	bl	80058c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c06:	f3ef 8211 	mrs	r2, BASEPRI
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61ba      	str	r2, [r7, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <xQueueGenericSendFromISR+0xbc>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d12c      	bne.n	8003c8e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c44:	f000 f910 	bl	8003e68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c48:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d112      	bne.n	8003c78 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fec4 	bl	80049ec <xTaskRemoveFromEventList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c8c:	e001      	b.n	8003c92 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3738      	adds	r7, #56	; 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueReceive+0x30>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <xQueueReceive+0x3e>
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <xQueueReceive+0x42>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueReceive+0x44>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueReceive+0x5e>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61fb      	str	r3, [r7, #28]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d06:	f001 f833 	bl	8004d70 <xTaskGetSchedulerState>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <xQueueReceive+0x6e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <xQueueReceive+0x72>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueReceive+0x74>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueReceive+0x8e>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	61bb      	str	r3, [r7, #24]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d36:	f001 fd01 	bl	800573c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01f      	beq.n	8003d86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f000 f8f7 	bl	8003f3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00f      	beq.n	8003d7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	3310      	adds	r3, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fe42 	bl	80049ec <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <xQueueReceive+0x1bc>)
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d7e:	f001 fd0d 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e069      	b.n	8003e5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d8c:	f001 fd06 	bl	800579c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e062      	b.n	8003e5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fe88 	bl	8004ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da8:	f001 fcf8 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dac:	f000 fbfa 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db0:	f001 fcc4 	bl	800573c <vPortEnterCritical>
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <xQueueReceive+0x122>
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <xQueueReceive+0x138>
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	f001 fcdc 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de4:	1d3a      	adds	r2, r7, #4
 8003de6:	f107 0310 	add.w	r3, r7, #16
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fe77 	bl	8004ae0 <xTaskCheckForTimeOut>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d123      	bne.n	8003e40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfa:	f000 f917 	bl	800402c <prvIsQueueEmpty>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fd9d 	bl	800494c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e14:	f000 f8b8 	bl	8003f88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e18:	f000 fbd2 	bl	80045c0 <xTaskResumeAll>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d189      	bne.n	8003d36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <xQueueReceive+0x1bc>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	e780      	b.n	8003d36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e36:	f000 f8a7 	bl	8003f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e3a:	f000 fbc1 	bl	80045c0 <xTaskResumeAll>
 8003e3e:	e77a      	b.n	8003d36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e42:	f000 f8a1 	bl	8003f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e46:	f000 fbbb 	bl	80045c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4c:	f000 f8ee 	bl	800402c <prvIsQueueEmpty>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f43f af6f 	beq.w	8003d36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3730      	adds	r7, #48	; 0x30
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d14d      	bne.n	8003f2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ff8a 	bl	8004dac <xTaskPriorityDisinherit>
 8003e98:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	e043      	b.n	8003f2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d119      	bne.n	8003edc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6898      	ldr	r0, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	f002 ff39 	bl	8006d2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	441a      	add	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d32b      	bcc.n	8003f2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e026      	b.n	8003f2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68d8      	ldr	r0, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	f002 ff1f 	bl	8006d2a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d207      	bcs.n	8003f18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	425b      	negs	r3, r3
 8003f12:	441a      	add	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d105      	bne.n	8003f2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f32:	697b      	ldr	r3, [r7, #20]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d018      	beq.n	8003f80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d303      	bcc.n	8003f70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68d9      	ldr	r1, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6838      	ldr	r0, [r7, #0]
 8003f7c:	f002 fed5 	bl	8006d2a <memcpy>
	}
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f90:	f001 fbd4 	bl	800573c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f9c:	e011      	b.n	8003fc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3324      	adds	r3, #36	; 0x24
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd1e 	bl	80049ec <xTaskRemoveFromEventList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fb6:	f000 fdf5 	bl	8004ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	dce9      	bgt.n	8003f9e <prvUnlockQueue+0x16>
 8003fca:	e000      	b.n	8003fce <prvUnlockQueue+0x46>
					break;
 8003fcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fd6:	f001 fbe1 	bl	800579c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fda:	f001 fbaf 	bl	800573c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe6:	e011      	b.n	800400c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fcf9 	bl	80049ec <xTaskRemoveFromEventList>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004000:	f000 fdd0 	bl	8004ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004004:	7bbb      	ldrb	r3, [r7, #14]
 8004006:	3b01      	subs	r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800400c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004010:	2b00      	cmp	r3, #0
 8004012:	dce9      	bgt.n	8003fe8 <prvUnlockQueue+0x60>
 8004014:	e000      	b.n	8004018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004020:	f001 fbbc 	bl	800579c <vPortExitCritical>
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004034:	f001 fb82 	bl	800573c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e001      	b.n	800404a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800404a:	f001 fba7 	bl	800579c <vPortExitCritical>

	return xReturn;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004060:	f001 fb6c 	bl	800573c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	429a      	cmp	r2, r3
 800406e:	d102      	bne.n	8004076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004070:	2301      	movs	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e001      	b.n	800407a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800407a:	f001 fb8f 	bl	800579c <vPortExitCritical>

	return xReturn;
 800407e:	68fb      	ldr	r3, [r7, #12]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e014      	b.n	80040c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <vQueueAddToRegistry+0x4c>)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040a4:	490b      	ldr	r1, [pc, #44]	; (80040d4 <vQueueAddToRegistry+0x4c>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <vQueueAddToRegistry+0x4c>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ba:	e006      	b.n	80040ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b07      	cmp	r3, #7
 80040c6:	d9e7      	bls.n	8004098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000970 	.word	0x20000970

080040d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040e8:	f001 fb28 	bl	800573c <vPortEnterCritical>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d103      	bne.n	8004102 <vQueueWaitForMessageRestricted+0x2a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004108:	b25b      	sxtb	r3, r3
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d103      	bne.n	8004118 <vQueueWaitForMessageRestricted+0x40>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004118:	f001 fb40 	bl	800579c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fc31 	bl	8004994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004132:	6978      	ldr	r0, [r7, #20]
 8004134:	f7ff ff28 	bl	8003f88 <prvUnlockQueue>
	}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	; 0x38
 8004144:	af04      	add	r7, sp, #16
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	623b      	str	r3, [r7, #32]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xTaskCreateStatic+0x46>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004186:	235c      	movs	r3, #92	; 0x5c
 8004188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b5c      	cmp	r3, #92	; 0x5c
 800418e:	d00a      	beq.n	80041a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61bb      	str	r3, [r7, #24]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01e      	beq.n	80041ea <xTaskCreateStatic+0xaa>
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01b      	beq.n	80041ea <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041c4:	2300      	movs	r3, #0
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	9302      	str	r3, [sp, #8]
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f850 	bl	8004282 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e4:	f000 f8d4 	bl	8004390 <prvAddNewTaskToReadyList>
 80041e8:	e001      	b.n	80041ee <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041ee:	697b      	ldr	r3, [r7, #20]
	}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08c      	sub	sp, #48	; 0x30
 80041fc:	af04      	add	r7, sp, #16
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fb95 	bl	800593c <pvPortMalloc>
 8004212:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800421a:	205c      	movs	r0, #92	; 0x5c
 800421c:	f001 fb8e 	bl	800593c <pvPortMalloc>
 8004220:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
 800422e:	e005      	b.n	800423c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f001 fc47 	bl	8005ac4 <vPortFree>
 8004236:	e001      	b.n	800423c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	2300      	movs	r3, #0
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f80e 	bl	8004282 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004266:	69f8      	ldr	r0, [r7, #28]
 8004268:	f000 f892 	bl	8004390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e002      	b.n	8004278 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004278:	69bb      	ldr	r3, [r7, #24]
	}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b088      	sub	sp, #32
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	21a5      	movs	r1, #165	; 0xa5
 800429c:	f002 fcb7 	bl	8006c0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042aa:	3b01      	subs	r3, #1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <prvInitialiseNewTask+0x58>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	617b      	str	r3, [r7, #20]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e012      	b.n	8004306 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	7819      	ldrb	r1, [r3, #0]
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	3334      	adds	r3, #52	; 0x34
 80042f0:	460a      	mov	r2, r1
 80042f2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d006      	beq.n	800430e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3301      	adds	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d9e9      	bls.n	80042e0 <prvInitialiseNewTask+0x5e>
 800430c:	e000      	b.n	8004310 <prvInitialiseNewTask+0x8e>
		{
			break;
 800430e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	2b37      	cmp	r3, #55	; 0x37
 800431c:	d901      	bls.n	8004322 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800431e:	2337      	movs	r3, #55	; 0x37
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2200      	movs	r2, #0
 8004332:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	3304      	adds	r3, #4
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f98c 	bl	8003656 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	3318      	adds	r3, #24
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff f987 	bl	8003656 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	f001 f8ef 	bl	8005554 <pxPortInitialiseStack>
 8004376:	4602      	mov	r2, r0
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004388:	bf00      	nop
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004398:	f001 f9d0 	bl	800573c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043a6:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043ae:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <prvAddNewTaskToReadyList+0xc4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d110      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043bc:	f000 fc16 	bl	8004bec <prvInitialiseTaskLists>
 80043c0:	e00d      	b.n	80043de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <prvAddNewTaskToReadyList+0xcc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d802      	bhi.n	80043de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043d8:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <prvAddNewTaskToReadyList+0xd0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <prvAddNewTaskToReadyList+0xd0>)
 80043e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <prvAddNewTaskToReadyList+0xd0>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <prvAddNewTaskToReadyList+0xd4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d903      	bls.n	8004404 <prvAddNewTaskToReadyList+0x74>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <prvAddNewTaskToReadyList+0xd4>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <prvAddNewTaskToReadyList+0xd8>)
 8004412:	441a      	add	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7ff f927 	bl	800366e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004420:	f001 f9bc 	bl	800579c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <prvAddNewTaskToReadyList+0xcc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <prvAddNewTaskToReadyList+0xc8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d207      	bcs.n	800444a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <prvAddNewTaskToReadyList+0xdc>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000e84 	.word	0x20000e84
 8004458:	200009b0 	.word	0x200009b0
 800445c:	20000e90 	.word	0x20000e90
 8004460:	20000ea0 	.word	0x20000ea0
 8004464:	20000e8c 	.word	0x20000e8c
 8004468:	200009b4 	.word	0x200009b4
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d017      	beq.n	80044b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <vTaskDelay+0x60>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <vTaskDelay+0x30>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044a0:	f000 f880 	bl	80045a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044a4:	2100      	movs	r1, #0
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fcee 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ac:	f000 f888 	bl	80045c0 <xTaskResumeAll>
 80044b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d107      	bne.n	80044c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <vTaskDelay+0x64>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000eac 	.word	0x20000eac
 80044d4:	e000ed04 	.word	0xe000ed04

080044d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044e6:	463a      	mov	r2, r7
 80044e8:	1d39      	adds	r1, r7, #4
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f860 	bl	80035b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	9202      	str	r2, [sp, #8]
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	460a      	mov	r2, r1
 8004506:	4921      	ldr	r1, [pc, #132]	; (800458c <vTaskStartScheduler+0xb4>)
 8004508:	4821      	ldr	r0, [pc, #132]	; (8004590 <vTaskStartScheduler+0xb8>)
 800450a:	f7ff fe19 	bl	8004140 <xTaskCreateStatic>
 800450e:	4603      	mov	r3, r0
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <vTaskStartScheduler+0xbc>)
 8004512:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <vTaskStartScheduler+0xbc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e001      	b.n	8004526 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800452c:	f000 fd00 	bl	8004f30 <xTimerCreateTimerTask>
 8004530:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d116      	bne.n	8004566 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	613b      	str	r3, [r7, #16]
}
 800454a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <vTaskStartScheduler+0xc0>)
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <vTaskStartScheduler+0xc4>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800455a:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <vTaskStartScheduler+0xc8>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004560:	f001 f87a 	bl	8005658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004564:	e00e      	b.n	8004584 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d10a      	bne.n	8004584 <vTaskStartScheduler+0xac>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	60fb      	str	r3, [r7, #12]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <vTaskStartScheduler+0xaa>
}
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	0800a4a4 	.word	0x0800a4a4
 8004590:	08004bbd 	.word	0x08004bbd
 8004594:	20000ea8 	.word	0x20000ea8
 8004598:	20000ea4 	.word	0x20000ea4
 800459c:	20000e90 	.word	0x20000e90
 80045a0:	20000e88 	.word	0x20000e88

080045a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <vTaskSuspendAll+0x18>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a03      	ldr	r2, [pc, #12]	; (80045bc <vTaskSuspendAll+0x18>)
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000eac 	.word	0x20000eac

080045c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ce:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <xTaskResumeAll+0x118>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <xTaskResumeAll+0x2c>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	603b      	str	r3, [r7, #0]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ec:	f001 f8a6 	bl	800573c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <xTaskResumeAll+0x118>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <xTaskResumeAll+0x118>)
 80045f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <xTaskResumeAll+0x118>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d162      	bne.n	80046c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <xTaskResumeAll+0x11c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d05e      	beq.n	80046c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460a:	e02f      	b.n	800466c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800460c:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <xTaskResumeAll+0x120>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3318      	adds	r3, #24
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f883 	bl	8003724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f87e 	bl	8003724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <xTaskResumeAll+0x124>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <xTaskResumeAll+0x7c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <xTaskResumeAll+0x124>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <xTaskResumeAll+0x128>)
 800464a:	441a      	add	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7ff f80b 	bl	800366e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <xTaskResumeAll+0x12c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <xTaskResumeAll+0x130>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <xTaskResumeAll+0x120>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1cb      	bne.n	800460c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800467a:	f000 fb55 	bl	8004d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <xTaskResumeAll+0x134>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d010      	beq.n	80046ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800468a:	f000 f845 	bl	8004718 <xTaskIncrementTick>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <xTaskResumeAll+0x130>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3b01      	subs	r3, #1
 800469e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f1      	bne.n	800468a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <xTaskResumeAll+0x134>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xTaskResumeAll+0x130>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskResumeAll+0x138>)
 80046ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046c8:	f001 f868 	bl	800579c <vPortExitCritical>

	return xAlreadyYielded;
 80046cc:	68bb      	ldr	r3, [r7, #8]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000eac 	.word	0x20000eac
 80046dc:	20000e84 	.word	0x20000e84
 80046e0:	20000e44 	.word	0x20000e44
 80046e4:	20000e8c 	.word	0x20000e8c
 80046e8:	200009b4 	.word	0x200009b4
 80046ec:	200009b0 	.word	0x200009b0
 80046f0:	20000e98 	.word	0x20000e98
 80046f4:	20000e94 	.word	0x20000e94
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <xTaskGetTickCount+0x18>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004708:	687b      	ldr	r3, [r7, #4]
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	20000e88 	.word	0x20000e88

08004718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004722:	4b51      	ldr	r3, [pc, #324]	; (8004868 <xTaskIncrementTick+0x150>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 808e 	bne.w	8004848 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800472c:	4b4f      	ldr	r3, [pc, #316]	; (800486c <xTaskIncrementTick+0x154>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004734:	4a4d      	ldr	r2, [pc, #308]	; (800486c <xTaskIncrementTick+0x154>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d120      	bne.n	8004782 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <xTaskIncrementTick+0x158>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <xTaskIncrementTick+0x48>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xTaskIncrementTick+0x46>
 8004760:	4b43      	ldr	r3, [pc, #268]	; (8004870 <xTaskIncrementTick+0x158>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b43      	ldr	r3, [pc, #268]	; (8004874 <xTaskIncrementTick+0x15c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a41      	ldr	r2, [pc, #260]	; (8004870 <xTaskIncrementTick+0x158>)
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4a41      	ldr	r2, [pc, #260]	; (8004874 <xTaskIncrementTick+0x15c>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b40      	ldr	r3, [pc, #256]	; (8004878 <xTaskIncrementTick+0x160>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <xTaskIncrementTick+0x160>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	f000 fad3 	bl	8004d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <xTaskIncrementTick+0x164>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d34e      	bcc.n	800482a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478c:	4b38      	ldr	r3, [pc, #224]	; (8004870 <xTaskIncrementTick+0x158>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <xTaskIncrementTick+0x82>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xTaskIncrementTick+0x84>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <xTaskIncrementTick+0x164>)
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295
 80047a6:	601a      	str	r2, [r3, #0]
					break;
 80047a8:	e03f      	b.n	800482a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <xTaskIncrementTick+0x158>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d203      	bcs.n	80047ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047c2:	4a2e      	ldr	r2, [pc, #184]	; (800487c <xTaskIncrementTick+0x164>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6013      	str	r3, [r2, #0]
						break;
 80047c8:	e02f      	b.n	800482a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe ffa8 	bl	8003724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	3318      	adds	r3, #24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe ff9f 	bl	8003724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4b25      	ldr	r3, [pc, #148]	; (8004880 <xTaskIncrementTick+0x168>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d903      	bls.n	80047fa <xTaskIncrementTick+0xe2>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <xTaskIncrementTick+0x168>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <xTaskIncrementTick+0x16c>)
 8004808:	441a      	add	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f7fe ff2c 	bl	800366e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <xTaskIncrementTick+0x170>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	d3b3      	bcc.n	800478c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004828:	e7b0      	b.n	800478c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <xTaskIncrementTick+0x170>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4914      	ldr	r1, [pc, #80]	; (8004884 <xTaskIncrementTick+0x16c>)
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d907      	bls.n	8004852 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e004      	b.n	8004852 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <xTaskIncrementTick+0x174>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a0f      	ldr	r2, [pc, #60]	; (800488c <xTaskIncrementTick+0x174>)
 8004850:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <xTaskIncrementTick+0x178>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800485e:	697b      	ldr	r3, [r7, #20]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000eac 	.word	0x20000eac
 800486c:	20000e88 	.word	0x20000e88
 8004870:	20000e3c 	.word	0x20000e3c
 8004874:	20000e40 	.word	0x20000e40
 8004878:	20000e9c 	.word	0x20000e9c
 800487c:	20000ea4 	.word	0x20000ea4
 8004880:	20000e8c 	.word	0x20000e8c
 8004884:	200009b4 	.word	0x200009b4
 8004888:	200009b0 	.word	0x200009b0
 800488c:	20000e94 	.word	0x20000e94
 8004890:	20000e98 	.word	0x20000e98

08004894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <vTaskSwitchContext+0xa4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <vTaskSwitchContext+0xa8>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048a8:	e041      	b.n	800492e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <vTaskSwitchContext+0xa8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <vTaskSwitchContext+0xac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e010      	b.n	80048da <vTaskSwitchContext+0x46>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <vTaskSwitchContext+0x3e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	491a      	ldr	r1, [pc, #104]	; (8004944 <vTaskSwitchContext+0xb0>)
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0e4      	beq.n	80048b8 <vTaskSwitchContext+0x24>
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4a12      	ldr	r2, [pc, #72]	; (8004944 <vTaskSwitchContext+0xb0>)
 80048fa:	4413      	add	r3, r2
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3308      	adds	r3, #8
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <vTaskSwitchContext+0x8a>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <vTaskSwitchContext+0xb4>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	4a05      	ldr	r2, [pc, #20]	; (8004940 <vTaskSwitchContext+0xac>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6013      	str	r3, [r2, #0]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000eac 	.word	0x20000eac
 800493c:	20000e98 	.word	0x20000e98
 8004940:	20000e8c 	.word	0x20000e8c
 8004944:	200009b4 	.word	0x200009b4
 8004948:	200009b0 	.word	0x200009b0

0800494c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60fb      	str	r3, [r7, #12]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <vTaskPlaceOnEventList+0x44>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3318      	adds	r3, #24
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fe fe9a 	bl	80036b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004980:	2101      	movs	r1, #1
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	f000 fa80 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200009b0 	.word	0x200009b0

08004994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	617b      	str	r3, [r7, #20]
}
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3318      	adds	r3, #24
 80049c2:	4619      	mov	r1, r3
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7fe fe52 	bl	800366e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f000 fa55 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
	}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200009b0 	.word	0x200009b0

080049ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60fb      	str	r3, [r7, #12]
}
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3318      	adds	r3, #24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fe81 	bl	8003724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <xTaskRemoveFromEventList+0xb0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11d      	bne.n	8004a66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fe78 	bl	8003724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <xTaskRemoveFromEventList+0xb4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d903      	bls.n	8004a48 <xTaskRemoveFromEventList+0x5c>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <xTaskRemoveFromEventList+0xb4>)
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <xTaskRemoveFromEventList+0xb8>)
 8004a56:	441a      	add	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7fe fe05 	bl	800366e <vListInsertEnd>
 8004a64:	e005      	b.n	8004a72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	480e      	ldr	r0, [pc, #56]	; (8004aa8 <xTaskRemoveFromEventList+0xbc>)
 8004a6e:	f7fe fdfe 	bl	800366e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <xTaskRemoveFromEventList+0xc0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d905      	bls.n	8004a8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <xTaskRemoveFromEventList+0xc4>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e001      	b.n	8004a90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004a90:	697b      	ldr	r3, [r7, #20]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000eac 	.word	0x20000eac
 8004aa0:	20000e8c 	.word	0x20000e8c
 8004aa4:	200009b4 	.word	0x200009b4
 8004aa8:	20000e44 	.word	0x20000e44
 8004aac:	200009b0 	.word	0x200009b0
 8004ab0:	20000e98 	.word	0x20000e98

08004ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <vTaskInternalSetTimeOutState+0x24>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <vTaskInternalSetTimeOutState+0x28>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000e9c 	.word	0x20000e9c
 8004adc:	20000e88 	.word	0x20000e88

08004ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60fb      	str	r3, [r7, #12]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b22:	f000 fe0b 	bl	800573c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <xTaskCheckForTimeOut+0xbc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d102      	bne.n	8004b46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e023      	b.n	8004b8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <xTaskCheckForTimeOut+0xc0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d007      	beq.n	8004b62 <xTaskCheckForTimeOut+0x82>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e015      	b.n	8004b8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d20b      	bcs.n	8004b84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ff9b 	bl	8004ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e004      	b.n	8004b8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b8e:	f000 fe05 	bl	800579c <vPortExitCritical>

	return xReturn;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000e88 	.word	0x20000e88
 8004ba0:	20000e9c 	.word	0x20000e9c

08004ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <vTaskMissedYield+0x14>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000e98 	.word	0x20000e98

08004bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bc4:	f000 f852 	bl	8004c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <prvIdleTask+0x28>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d9f9      	bls.n	8004bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <prvIdleTask+0x2c>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004be0:	e7f0      	b.n	8004bc4 <prvIdleTask+0x8>
 8004be2:	bf00      	nop
 8004be4:	200009b4 	.word	0x200009b4
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	e00c      	b.n	8004c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <prvInitialiseTaskLists+0x60>)
 8004c04:	4413      	add	r3, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fd06 	bl	8003618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b37      	cmp	r3, #55	; 0x37
 8004c16:	d9ef      	bls.n	8004bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c18:	480d      	ldr	r0, [pc, #52]	; (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c1a:	f7fe fcfd 	bl	8003618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c1e:	480d      	ldr	r0, [pc, #52]	; (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c20:	f7fe fcfa 	bl	8003618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <prvInitialiseTaskLists+0x6c>)
 8004c26:	f7fe fcf7 	bl	8003618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c2a:	480c      	ldr	r0, [pc, #48]	; (8004c5c <prvInitialiseTaskLists+0x70>)
 8004c2c:	f7fe fcf4 	bl	8003618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c30:	480b      	ldr	r0, [pc, #44]	; (8004c60 <prvInitialiseTaskLists+0x74>)
 8004c32:	f7fe fcf1 	bl	8003618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <prvInitialiseTaskLists+0x78>)
 8004c38:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <prvInitialiseTaskLists+0x7c>)
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200009b4 	.word	0x200009b4
 8004c50:	20000e14 	.word	0x20000e14
 8004c54:	20000e28 	.word	0x20000e28
 8004c58:	20000e44 	.word	0x20000e44
 8004c5c:	20000e58 	.word	0x20000e58
 8004c60:	20000e70 	.word	0x20000e70
 8004c64:	20000e3c 	.word	0x20000e3c
 8004c68:	20000e40 	.word	0x20000e40

08004c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c72:	e019      	b.n	8004ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c74:	f000 fd62 	bl	800573c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <prvCheckTasksWaitingTermination+0x50>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fd4d 	bl	8003724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c9e:	f000 fd7d 	bl	800579c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f810 	bl	8004cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e1      	bne.n	8004c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000e58 	.word	0x20000e58
 8004cc0:	20000e84 	.word	0x20000e84
 8004cc4:	20000e6c 	.word	0x20000e6c

08004cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fef0 	bl	8005ac4 <vPortFree>
				vPortFree( pxTCB );
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 feed 	bl	8005ac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cea:	e018      	b.n	8004d1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d103      	bne.n	8004cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fee4 	bl	8005ac4 <vPortFree>
	}
 8004cfc:	e00f      	b.n	8004d1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d00a      	beq.n	8004d1e <prvDeleteTCB+0x56>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60fb      	str	r3, [r7, #12]
}
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <prvDeleteTCB+0x54>
	}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <prvResetNextTaskUnblockTime+0x40>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <prvResetNextTaskUnblockTime+0x14>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <prvResetNextTaskUnblockTime+0x16>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <prvResetNextTaskUnblockTime+0x44>)
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d4a:	e008      	b.n	8004d5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <prvResetNextTaskUnblockTime+0x40>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <prvResetNextTaskUnblockTime+0x44>)
 8004d5c:	6013      	str	r3, [r2, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	20000e3c 	.word	0x20000e3c
 8004d6c:	20000ea4 	.word	0x20000ea4

08004d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <xTaskGetSchedulerState+0x34>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d102      	bne.n	8004d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e008      	b.n	8004d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <xTaskGetSchedulerState+0x38>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	e001      	b.n	8004d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d96:	687b      	ldr	r3, [r7, #4]
	}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000e90 	.word	0x20000e90
 8004da8:	20000eac 	.word	0x20000eac

08004dac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d056      	beq.n	8004e70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <xTaskPriorityDisinherit+0xd0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00a      	beq.n	8004de2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60fb      	str	r3, [r7, #12]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60bb      	str	r3, [r7, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d02c      	beq.n	8004e70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d128      	bne.n	8004e70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fc7e 	bl	8003724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <xTaskPriorityDisinherit+0xd4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d903      	bls.n	8004e50 <xTaskPriorityDisinherit+0xa4>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <xTaskPriorityDisinherit+0xd4>)
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <xTaskPriorityDisinherit+0xd8>)
 8004e5e:	441a      	add	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fe fc01 	bl	800366e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e70:	697b      	ldr	r3, [r7, #20]
	}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200009b0 	.word	0x200009b0
 8004e80:	20000e8c 	.word	0x20000e8c
 8004e84:	200009b4 	.word	0x200009b4

08004e88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e92:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fc40 	bl	8003724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d10a      	bne.n	8004ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4819      	ldr	r0, [pc, #100]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ebc:	f7fe fbd7 	bl	800366e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ec0:	e026      	b.n	8004f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d209      	bcs.n	8004eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fbe4 	bl	80036b4 <vListInsert>
}
 8004eec:	e010      	b.n	8004f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7fe fbda 	bl	80036b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d202      	bcs.n	8004f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6013      	str	r3, [r2, #0]
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000e88 	.word	0x20000e88
 8004f1c:	200009b0 	.word	0x200009b0
 8004f20:	20000e70 	.word	0x20000e70
 8004f24:	20000e40 	.word	0x20000e40
 8004f28:	20000e3c 	.word	0x20000e3c
 8004f2c:	20000ea4 	.word	0x20000ea4

08004f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f3a:	f000 facb 	bl	80054d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <xTimerCreateTimerTask+0x80>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d021      	beq.n	8004f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f4e:	1d3a      	adds	r2, r7, #4
 8004f50:	f107 0108 	add.w	r1, r7, #8
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fb43 	bl	80035e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	9202      	str	r2, [sp, #8]
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2302      	movs	r3, #2
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	460a      	mov	r2, r1
 8004f70:	4910      	ldr	r1, [pc, #64]	; (8004fb4 <xTimerCreateTimerTask+0x84>)
 8004f72:	4811      	ldr	r0, [pc, #68]	; (8004fb8 <xTimerCreateTimerTask+0x88>)
 8004f74:	f7ff f8e4 	bl	8004140 <xTaskCreateStatic>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <xTimerCreateTimerTask+0x8c>)
 8004f7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <xTimerCreateTimerTask+0x8c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	613b      	str	r3, [r7, #16]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000ee0 	.word	0x20000ee0
 8004fb4:	0800a4ac 	.word	0x0800a4ac
 8004fb8:	080050dd 	.word	0x080050dd
 8004fbc:	20000ee4 	.word	0x20000ee4

08004fc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xTimerGenericCommand+0x2e>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	623b      	str	r3, [r7, #32]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <xTimerGenericCommand+0x98>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02a      	beq.n	800504c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b05      	cmp	r3, #5
 8005006:	dc18      	bgt.n	800503a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005008:	f7ff feb2 	bl	8004d70 <xTaskGetSchedulerState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b02      	cmp	r3, #2
 8005010:	d109      	bne.n	8005026 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <xTimerGenericCommand+0x98>)
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	f107 0110 	add.w	r1, r7, #16
 800501a:	2300      	movs	r3, #0
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	f7fe fcad 	bl	800397c <xQueueGenericSend>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24
 8005024:	e012      	b.n	800504c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <xTimerGenericCommand+0x98>)
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	f107 0110 	add.w	r1, r7, #16
 800502e:	2300      	movs	r3, #0
 8005030:	2200      	movs	r2, #0
 8005032:	f7fe fca3 	bl	800397c <xQueueGenericSend>
 8005036:	6278      	str	r0, [r7, #36]	; 0x24
 8005038:	e008      	b.n	800504c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <xTimerGenericCommand+0x98>)
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	f107 0110 	add.w	r1, r7, #16
 8005042:	2300      	movs	r3, #0
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	f7fe fd97 	bl	8003b78 <xQueueGenericSendFromISR>
 800504a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800504e:	4618      	mov	r0, r3
 8005050:	3728      	adds	r7, #40	; 0x28
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000ee0 	.word	0x20000ee0

0800505c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005066:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <prvProcessExpiredTimer+0x7c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3304      	adds	r3, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fb55 	bl	8003724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d122      	bne.n	80050c8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	18d1      	adds	r1, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f000 f8c8 	bl	8005224 <prvInsertTimerInActiveList>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	2100      	movs	r1, #0
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f7ff ff8b 	bl	8004fc0 <xTimerGenericCommand>
 80050aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	60fb      	str	r3, [r7, #12]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	6978      	ldr	r0, [r7, #20]
 80050ce:	4798      	blx	r3
}
 80050d0:	bf00      	nop
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000ed8 	.word	0x20000ed8

080050dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f857 	bl	800519c <prvGetNextExpireTime>
 80050ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f803 	bl	8005100 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050fa:	f000 f8d5 	bl	80052a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050fe:	e7f1      	b.n	80050e4 <prvTimerTask+0x8>

08005100 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800510a:	f7ff fa4b 	bl	80045a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800510e:	f107 0308 	add.w	r3, r7, #8
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f866 	bl	80051e4 <prvSampleTimeNow>
 8005118:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d130      	bne.n	8005182 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <prvProcessTimerOrBlockTask+0x3c>
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	429a      	cmp	r2, r3
 800512c:	d806      	bhi.n	800513c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800512e:	f7ff fa47 	bl	80045c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff91 	bl	800505c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800513a:	e024      	b.n	8005186 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005142:	4b13      	ldr	r3, [pc, #76]	; (8005190 <prvProcessTimerOrBlockTask+0x90>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <prvProcessTimerOrBlockTask+0x94>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	f7fe ffb9 	bl	80040d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005166:	f7ff fa2b 	bl	80045c0 <xTaskResumeAll>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <prvProcessTimerOrBlockTask+0x98>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
}
 8005180:	e001      	b.n	8005186 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005182:	f7ff fa1d 	bl	80045c0 <xTaskResumeAll>
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000edc 	.word	0x20000edc
 8005194:	20000ee0 	.word	0x20000ee0
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <prvGetNextExpireTime+0x44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <prvGetNextExpireTime+0x44>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e001      	b.n	80051d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000ed8 	.word	0x20000ed8

080051e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051ec:	f7ff fa86 	bl	80046fc <xTaskGetTickCount>
 80051f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <prvSampleTimeNow+0x3c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d205      	bcs.n	8005208 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051fc:	f000 f908 	bl	8005410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e002      	b.n	800520e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800520e:	4a04      	ldr	r2, [pc, #16]	; (8005220 <prvSampleTimeNow+0x3c>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000ee8 	.word	0x20000ee8

08005224 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d812      	bhi.n	8005270 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d302      	bcc.n	800525e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e01b      	b.n	8005296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <prvInsertTimerInActiveList+0x7c>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7fe fa23 	bl	80036b4 <vListInsert>
 800526e:	e012      	b.n	8005296 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d206      	bcs.n	8005286 <prvInsertTimerInActiveList+0x62>
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e007      	b.n	8005296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005286:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <prvInsertTimerInActiveList+0x80>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe fa0f 	bl	80036b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005296:	697b      	ldr	r3, [r7, #20]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000edc 	.word	0x20000edc
 80052a4:	20000ed8 	.word	0x20000ed8

080052a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08e      	sub	sp, #56	; 0x38
 80052ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052ae:	e09d      	b.n	80053ec <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da18      	bge.n	80052e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	3304      	adds	r3, #4
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61fb      	str	r3, [r7, #28]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052de:	6850      	ldr	r0, [r2, #4]
 80052e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e2:	6892      	ldr	r2, [r2, #8]
 80052e4:	4611      	mov	r1, r2
 80052e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db7e      	blt.n	80053ec <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	3304      	adds	r3, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fa10 	bl	8003724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005304:	463b      	mov	r3, r7
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff ff6c 	bl	80051e4 <prvSampleTimeNow>
 800530c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b09      	cmp	r3, #9
 8005312:	d86a      	bhi.n	80053ea <prvProcessReceivedCommands+0x142>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <prvProcessReceivedCommands+0x74>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005345 	.word	0x08005345
 8005320:	08005345 	.word	0x08005345
 8005324:	08005345 	.word	0x08005345
 8005328:	080053ed 	.word	0x080053ed
 800532c:	080053a1 	.word	0x080053a1
 8005330:	080053d9 	.word	0x080053d9
 8005334:	08005345 	.word	0x08005345
 8005338:	08005345 	.word	0x08005345
 800533c:	080053ed 	.word	0x080053ed
 8005340:	080053a1 	.word	0x080053a1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	18d1      	adds	r1, r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005352:	f7ff ff67 	bl	8005224 <prvInsertTimerInActiveList>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d047      	beq.n	80053ec <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005362:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d13f      	bne.n	80053ec <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	441a      	add	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	2100      	movs	r1, #0
 800537c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537e:	f7ff fe1f 	bl	8004fc0 <xTimerGenericCommand>
 8005382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d130      	bne.n	80053ec <prvProcessReceivedCommands+0x144>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	61bb      	str	r3, [r7, #24]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	617b      	str	r3, [r7, #20]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	18d1      	adds	r1, r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d2:	f7ff ff27 	bl	8005224 <prvInsertTimerInActiveList>
					break;
 80053d6:	e009      	b.n	80053ec <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80053e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e4:	f000 fb6e 	bl	8005ac4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053e8:	e000      	b.n	80053ec <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80053ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <prvProcessReceivedCommands+0x164>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1d39      	adds	r1, r7, #4
 80053f2:	2200      	movs	r2, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe fc57 	bl	8003ca8 <xQueueReceive>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f af57 	bne.w	80052b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3730      	adds	r7, #48	; 0x30
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000ee0 	.word	0x20000ee0

08005410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005416:	e045      	b.n	80054a4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005418:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <prvSwitchTimerLists+0xbc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005422:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <prvSwitchTimerLists+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3304      	adds	r3, #4
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe f977 	bl	8003724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d12e      	bne.n	80054a4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d90e      	bls.n	8005476 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <prvSwitchTimerLists+0xbc>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe f920 	bl	80036b4 <vListInsert>
 8005474:	e016      	b.n	80054a4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005476:	2300      	movs	r3, #0
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	2100      	movs	r1, #0
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fd9d 	bl	8004fc0 <xTimerGenericCommand>
 8005486:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a4:	4b09      	ldr	r3, [pc, #36]	; (80054cc <prvSwitchTimerLists+0xbc>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1b4      	bne.n	8005418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <prvSwitchTimerLists+0xbc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <prvSwitchTimerLists+0xc0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <prvSwitchTimerLists+0xc0>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6013      	str	r3, [r2, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000ed8 	.word	0x20000ed8
 80054d0:	20000edc 	.word	0x20000edc

080054d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054da:	f000 f92f 	bl	800573c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d120      	bne.n	8005528 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e6:	4814      	ldr	r0, [pc, #80]	; (8005538 <prvCheckForValidListAndQueue+0x64>)
 80054e8:	f7fe f896 	bl	8003618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054ec:	4813      	ldr	r0, [pc, #76]	; (800553c <prvCheckForValidListAndQueue+0x68>)
 80054ee:	f7fe f893 	bl	8003618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <prvCheckForValidListAndQueue+0x6c>)
 80054f4:	4a10      	ldr	r2, [pc, #64]	; (8005538 <prvCheckForValidListAndQueue+0x64>)
 80054f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <prvCheckForValidListAndQueue+0x70>)
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <prvCheckForValidListAndQueue+0x68>)
 80054fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fe:	2300      	movs	r3, #0
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <prvCheckForValidListAndQueue+0x74>)
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <prvCheckForValidListAndQueue+0x78>)
 8005506:	2110      	movs	r1, #16
 8005508:	200a      	movs	r0, #10
 800550a:	f7fe f99d 	bl	8003848 <xQueueGenericCreateStatic>
 800550e:	4603      	mov	r3, r0
 8005510:	4a08      	ldr	r2, [pc, #32]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 8005512:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	490b      	ldr	r1, [pc, #44]	; (8005550 <prvCheckForValidListAndQueue+0x7c>)
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fdb0 	bl	8004088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005528:	f000 f938 	bl	800579c <vPortExitCritical>
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000ee0 	.word	0x20000ee0
 8005538:	20000eb0 	.word	0x20000eb0
 800553c:	20000ec4 	.word	0x20000ec4
 8005540:	20000ed8 	.word	0x20000ed8
 8005544:	20000edc 	.word	0x20000edc
 8005548:	20000f8c 	.word	0x20000f8c
 800554c:	20000eec 	.word	0x20000eec
 8005550:	0800a4b4 	.word	0x0800a4b4

08005554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b04      	subs	r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b04      	subs	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b04      	subs	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005584:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <pxPortInitialiseStack+0x54>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b14      	subs	r3, #20
 800558e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b20      	subs	r3, #32
 800559a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	080055ad 	.word	0x080055ad

080055ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <prvTaskExitError+0x54>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d00a      	beq.n	80055d6 <prvTaskExitError+0x2a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <prvTaskExitError+0x28>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60bb      	str	r3, [r7, #8]
}
 80055e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055ea:	bf00      	nop
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0fc      	beq.n	80055ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	2000000c 	.word	0x2000000c
	...

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	f04e 0e0d 	orr.w	lr, lr, #13
 800562e:	4770      	bx	lr

08005630 <pxCurrentTCBConst2>:
 8005630:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005638:	4806      	ldr	r0, [pc, #24]	; (8005654 <prvPortStartFirstTask+0x1c>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	b662      	cpsie	i
 8005644:	b661      	cpsie	f
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	df00      	svc	0
 8005650:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005652:	bf00      	nop
 8005654:	e000ed08 	.word	0xe000ed08

08005658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <xPortStartScheduler+0xd0>)
 8005660:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b2a      	ldr	r3, [pc, #168]	; (800572c <xPortStartScheduler+0xd4>)
 8005684:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <xPortStartScheduler+0xd8>)
 8005688:	2207      	movs	r2, #7
 800568a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800568c:	e009      	b.n	80056a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800568e:	4b28      	ldr	r3, [pc, #160]	; (8005730 <xPortStartScheduler+0xd8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3b01      	subs	r3, #1
 8005694:	4a26      	ldr	r2, [pc, #152]	; (8005730 <xPortStartScheduler+0xd8>)
 8005696:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d0ef      	beq.n	800568e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ae:	4b20      	ldr	r3, [pc, #128]	; (8005730 <xPortStartScheduler+0xd8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1c3 0307 	rsb	r3, r3, #7
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d00a      	beq.n	80056d0 <xPortStartScheduler+0x78>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60bb      	str	r3, [r7, #8]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056d0:	4b17      	ldr	r3, [pc, #92]	; (8005730 <xPortStartScheduler+0xd8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <xPortStartScheduler+0xd8>)
 80056d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <xPortStartScheduler+0xd8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <xPortStartScheduler+0xd8>)
 80056e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <xPortStartScheduler+0xdc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <xPortStartScheduler+0xdc>)
 80056f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <xPortStartScheduler+0xdc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <xPortStartScheduler+0xdc>)
 8005700:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005704:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005706:	f000 f8b9 	bl	800587c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <xPortStartScheduler+0xe0>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005710:	f7ff ff92 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005714:	f7ff f8be 	bl	8004894 <vTaskSwitchContext>
	prvTaskExitError();
 8005718:	f7ff ff48 	bl	80055ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	e000e400 	.word	0xe000e400
 800572c:	20000fdc 	.word	0x20000fdc
 8005730:	20000fe0 	.word	0x20000fe0
 8005734:	e000ed20 	.word	0xe000ed20
 8005738:	2000000c 	.word	0x2000000c

0800573c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	607b      	str	r3, [r7, #4]
}
 8005754:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <vPortEnterCritical+0x58>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3301      	adds	r3, #1
 800575c:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <vPortEnterCritical+0x58>)
 800575e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <vPortEnterCritical+0x58>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10f      	bne.n	8005788 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <vPortEnterCritical+0x5c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <vPortEnterCritical+0x4c>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	603b      	str	r3, [r7, #0]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <vPortEnterCritical+0x4a>
	}
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <vPortExitCritical+0x4c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <vPortExitCritical+0x24>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <vPortExitCritical+0x4c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <vPortExitCritical+0x4c>)
 80057c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <vPortExitCritical+0x4c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <vPortExitCritical+0x42>
 80057d2:	2300      	movs	r3, #0
 80057d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f383 8811 	msr	BASEPRI, r3
}
 80057dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	00000000 	.word	0x00000000

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005800:	6010      	str	r0, [r2, #0]
 8005802:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005806:	f04f 0050 	mov.w	r0, #80	; 0x50
 800580a:	f380 8811 	msr	BASEPRI, r0
 800580e:	f7ff f841 	bl	8004894 <vTaskSwitchContext>
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8811 	msr	BASEPRI, r0
 800581a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005826:	f380 8809 	msr	PSP, r0
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	4770      	bx	lr

08005830 <pxCurrentTCBConst>:
 8005830:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
}
 8005850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005852:	f7fe ff61 	bl	8004718 <xTaskIncrementTick>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <SysTick_Handler+0x40>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <vPortSetupTimerInterrupt+0x30>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <vPortSetupTimerInterrupt+0x34>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <vPortSetupTimerInterrupt+0x38>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <vPortSetupTimerInterrupt+0x3c>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <vPortSetupTimerInterrupt+0x40>)
 800589a:	3b01      	subs	r3, #1
 800589c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800589e:	4b03      	ldr	r3, [pc, #12]	; (80058ac <vPortSetupTimerInterrupt+0x30>)
 80058a0:	2207      	movs	r2, #7
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	e000e010 	.word	0xe000e010
 80058b0:	e000e018 	.word	0xe000e018
 80058b4:	20000000 	.word	0x20000000
 80058b8:	10624dd3 	.word	0x10624dd3
 80058bc:	e000e014 	.word	0xe000e014

080058c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058c6:	f3ef 8305 	mrs	r3, IPSR
 80058ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d914      	bls.n	80058fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058d2:	4a16      	ldr	r2, [pc, #88]	; (800592c <vPortValidateInterruptPriority+0x6c>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <vPortValidateInterruptPriority+0x70>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	7afa      	ldrb	r2, [r7, #11]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d20a      	bcs.n	80058fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	607b      	str	r3, [r7, #4]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <vPortValidateInterruptPriority+0x74>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <vPortValidateInterruptPriority+0x78>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d90a      	bls.n	8005922 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	603b      	str	r3, [r7, #0]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <vPortValidateInterruptPriority+0x60>
	}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	e000e3f0 	.word	0xe000e3f0
 8005930:	20000fdc 	.word	0x20000fdc
 8005934:	e000ed0c 	.word	0xe000ed0c
 8005938:	20000fe0 	.word	0x20000fe0

0800593c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005948:	f7fe fe2c 	bl	80045a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800594c:	4b58      	ldr	r3, [pc, #352]	; (8005ab0 <pvPortMalloc+0x174>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005954:	f000 f910 	bl	8005b78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005958:	4b56      	ldr	r3, [pc, #344]	; (8005ab4 <pvPortMalloc+0x178>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 808e 	bne.w	8005a82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01d      	beq.n	80059a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800596c:	2208      	movs	r2, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f023 0307 	bic.w	r3, r3, #7
 8005984:	3308      	adds	r3, #8
 8005986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <pvPortMalloc+0x6c>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	617b      	str	r3, [r7, #20]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d069      	beq.n	8005a82 <pvPortMalloc+0x146>
 80059ae:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <pvPortMalloc+0x17c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d864      	bhi.n	8005a82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059b8:	4b40      	ldr	r3, [pc, #256]	; (8005abc <pvPortMalloc+0x180>)
 80059ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059bc:	4b3f      	ldr	r3, [pc, #252]	; (8005abc <pvPortMalloc+0x180>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059c2:	e004      	b.n	80059ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d903      	bls.n	80059e0 <pvPortMalloc+0xa4>
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f1      	bne.n	80059c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <pvPortMalloc+0x174>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d04b      	beq.n	8005a82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2208      	movs	r2, #8
 80059f0:	4413      	add	r3, r2
 80059f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	2308      	movs	r3, #8
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d91f      	bls.n	8005a4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4413      	add	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <pvPortMalloc+0xf8>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	613b      	str	r3, [r7, #16]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a46:	69b8      	ldr	r0, [r7, #24]
 8005a48:	f000 f8f8 	bl	8005c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <pvPortMalloc+0x17c>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <pvPortMalloc+0x17c>)
 8005a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <pvPortMalloc+0x17c>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d203      	bcs.n	8005a6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <pvPortMalloc+0x17c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <pvPortMalloc+0x184>)
 8005a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <pvPortMalloc+0x178>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a82:	f7fe fd9d 	bl	80045c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <pvPortMalloc+0x16a>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <pvPortMalloc+0x168>
	return pvReturn;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3728      	adds	r7, #40	; 0x28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20001bec 	.word	0x20001bec
 8005ab4:	20001bf8 	.word	0x20001bf8
 8005ab8:	20001bf0 	.word	0x20001bf0
 8005abc:	20001be4 	.word	0x20001be4
 8005ac0:	20001bf4 	.word	0x20001bf4

08005ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d048      	beq.n	8005b68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	425b      	negs	r3, r3
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <vPortFree+0xac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <vPortFree+0x44>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60fb      	str	r3, [r7, #12]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <vPortFree+0x62>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60bb      	str	r3, [r7, #8]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <vPortFree+0xac>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d019      	beq.n	8005b68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d115      	bne.n	8005b68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <vPortFree+0xac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	401a      	ands	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b4c:	f7fe fd2a 	bl	80045a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <vPortFree+0xb0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <vPortFree+0xb0>)
 8005b5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b5e:	6938      	ldr	r0, [r7, #16]
 8005b60:	f000 f86c 	bl	8005c3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b64:	f7fe fd2c 	bl	80045c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20001bf8 	.word	0x20001bf8
 8005b74:	20001bf0 	.word	0x20001bf0

08005b78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <prvHeapInit+0xac>)
 8005b86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3307      	adds	r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <prvHeapInit+0xac>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <prvHeapInit+0xb0>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <prvHeapInit+0xb0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <prvHeapInit+0xb4>)
 8005bd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <prvHeapInit+0xb4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <prvHeapInit+0xb4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <prvHeapInit+0xb4>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <prvHeapInit+0xb8>)
 8005c06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <prvHeapInit+0xbc>)
 8005c0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <prvHeapInit+0xc0>)
 8005c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c16:	601a      	str	r2, [r3, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000fe4 	.word	0x20000fe4
 8005c28:	20001be4 	.word	0x20001be4
 8005c2c:	20001bec 	.word	0x20001bec
 8005c30:	20001bf4 	.word	0x20001bf4
 8005c34:	20001bf0 	.word	0x20001bf0
 8005c38:	20001bf8 	.word	0x20001bf8

08005c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c44:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <prvInsertBlockIntoFreeList+0xa8>)
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <prvInsertBlockIntoFreeList+0x14>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d8f7      	bhi.n	8005c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	4413      	add	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d108      	bne.n	8005c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	441a      	add	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d118      	bne.n	8005cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <prvInsertBlockIntoFreeList+0xac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d00d      	beq.n	8005cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	441a      	add	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	e008      	b.n	8005ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <prvInsertBlockIntoFreeList+0xac>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e003      	b.n	8005ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d002      	beq.n	8005cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	20001be4 	.word	0x20001be4
 8005ce8:	20001bec 	.word	0x20001bec

08005cec <__cvt>:
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	bfbb      	ittet	lt
 8005cf6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005cfa:	461f      	movlt	r7, r3
 8005cfc:	2300      	movge	r3, #0
 8005cfe:	232d      	movlt	r3, #45	; 0x2d
 8005d00:	b088      	sub	sp, #32
 8005d02:	4614      	mov	r4, r2
 8005d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d08:	7013      	strb	r3, [r2, #0]
 8005d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005d10:	f023 0820 	bic.w	r8, r3, #32
 8005d14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d18:	d005      	beq.n	8005d26 <__cvt+0x3a>
 8005d1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d1e:	d100      	bne.n	8005d22 <__cvt+0x36>
 8005d20:	3501      	adds	r5, #1
 8005d22:	2302      	movs	r3, #2
 8005d24:	e000      	b.n	8005d28 <__cvt+0x3c>
 8005d26:	2303      	movs	r3, #3
 8005d28:	aa07      	add	r2, sp, #28
 8005d2a:	9204      	str	r2, [sp, #16]
 8005d2c:	aa06      	add	r2, sp, #24
 8005d2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d32:	e9cd 3500 	strd	r3, r5, [sp]
 8005d36:	4622      	mov	r2, r4
 8005d38:	463b      	mov	r3, r7
 8005d3a:	f001 f895 	bl	8006e68 <_dtoa_r>
 8005d3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d42:	4606      	mov	r6, r0
 8005d44:	d102      	bne.n	8005d4c <__cvt+0x60>
 8005d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d48:	07db      	lsls	r3, r3, #31
 8005d4a:	d522      	bpl.n	8005d92 <__cvt+0xa6>
 8005d4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d50:	eb06 0905 	add.w	r9, r6, r5
 8005d54:	d110      	bne.n	8005d78 <__cvt+0x8c>
 8005d56:	7833      	ldrb	r3, [r6, #0]
 8005d58:	2b30      	cmp	r3, #48	; 0x30
 8005d5a:	d10a      	bne.n	8005d72 <__cvt+0x86>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4620      	mov	r0, r4
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8005d68:	b918      	cbnz	r0, 8005d72 <__cvt+0x86>
 8005d6a:	f1c5 0501 	rsb	r5, r5, #1
 8005d6e:	f8ca 5000 	str.w	r5, [sl]
 8005d72:	f8da 3000 	ldr.w	r3, [sl]
 8005d76:	4499      	add	r9, r3
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8005d84:	b108      	cbz	r0, 8005d8a <__cvt+0x9e>
 8005d86:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d8a:	2230      	movs	r2, #48	; 0x30
 8005d8c:	9b07      	ldr	r3, [sp, #28]
 8005d8e:	454b      	cmp	r3, r9
 8005d90:	d307      	bcc.n	8005da2 <__cvt+0xb6>
 8005d92:	4630      	mov	r0, r6
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d98:	1b9b      	subs	r3, r3, r6
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	b008      	add	sp, #32
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	9107      	str	r1, [sp, #28]
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e7f0      	b.n	8005d8c <__cvt+0xa0>

08005daa <__exponent>:
 8005daa:	4603      	mov	r3, r0
 8005dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dae:	2900      	cmp	r1, #0
 8005db0:	f803 2b02 	strb.w	r2, [r3], #2
 8005db4:	bfb6      	itet	lt
 8005db6:	222d      	movlt	r2, #45	; 0x2d
 8005db8:	222b      	movge	r2, #43	; 0x2b
 8005dba:	4249      	neglt	r1, r1
 8005dbc:	2909      	cmp	r1, #9
 8005dbe:	7042      	strb	r2, [r0, #1]
 8005dc0:	dd2a      	ble.n	8005e18 <__exponent+0x6e>
 8005dc2:	f10d 0207 	add.w	r2, sp, #7
 8005dc6:	4617      	mov	r7, r2
 8005dc8:	260a      	movs	r6, #10
 8005dca:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dce:	4694      	mov	ip, r2
 8005dd0:	fb06 1415 	mls	r4, r6, r5, r1
 8005dd4:	3430      	adds	r4, #48	; 0x30
 8005dd6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dda:	460c      	mov	r4, r1
 8005ddc:	2c63      	cmp	r4, #99	; 0x63
 8005dde:	4629      	mov	r1, r5
 8005de0:	f102 32ff 	add.w	r2, r2, #4294967295
 8005de4:	dcf1      	bgt.n	8005dca <__exponent+0x20>
 8005de6:	3130      	adds	r1, #48	; 0x30
 8005de8:	f1ac 0402 	sub.w	r4, ip, #2
 8005dec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005df0:	4622      	mov	r2, r4
 8005df2:	1c41      	adds	r1, r0, #1
 8005df4:	42ba      	cmp	r2, r7
 8005df6:	d30a      	bcc.n	8005e0e <__exponent+0x64>
 8005df8:	f10d 0209 	add.w	r2, sp, #9
 8005dfc:	eba2 020c 	sub.w	r2, r2, ip
 8005e00:	42bc      	cmp	r4, r7
 8005e02:	bf88      	it	hi
 8005e04:	2200      	movhi	r2, #0
 8005e06:	4413      	add	r3, r2
 8005e08:	1a18      	subs	r0, r3, r0
 8005e0a:	b003      	add	sp, #12
 8005e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e12:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e16:	e7ed      	b.n	8005df4 <__exponent+0x4a>
 8005e18:	2330      	movs	r3, #48	; 0x30
 8005e1a:	3130      	adds	r1, #48	; 0x30
 8005e1c:	7083      	strb	r3, [r0, #2]
 8005e1e:	70c1      	strb	r1, [r0, #3]
 8005e20:	1d03      	adds	r3, r0, #4
 8005e22:	e7f1      	b.n	8005e08 <__exponent+0x5e>

08005e24 <_printf_float>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	b091      	sub	sp, #68	; 0x44
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e30:	4616      	mov	r6, r2
 8005e32:	461f      	mov	r7, r3
 8005e34:	4605      	mov	r5, r0
 8005e36:	f000 fef3 	bl	8006c20 <_localeconv_r>
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e40:	f7fa f986 	bl	8000150 <strlen>
 8005e44:	2300      	movs	r3, #0
 8005e46:	930e      	str	r3, [sp, #56]	; 0x38
 8005e48:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8005e4e:	3307      	adds	r3, #7
 8005e50:	f023 0307 	bic.w	r3, r3, #7
 8005e54:	f103 0208 	add.w	r2, r3, #8
 8005e58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8005e60:	f8c8 2000 	str.w	r2, [r8]
 8005e64:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005e68:	4652      	mov	r2, sl
 8005e6a:	4643      	mov	r3, r8
 8005e6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e70:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	4b9c      	ldr	r3, [pc, #624]	; (80060f0 <_printf_float+0x2cc>)
 8005e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e80:	f7fa fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8005e84:	bb70      	cbnz	r0, 8005ee4 <_printf_float+0xc0>
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4b98      	ldr	r3, [pc, #608]	; (80060f0 <_printf_float+0x2cc>)
 8005e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e90:	f7fa fd9e 	bl	80009d0 <__aeabi_dcmple>
 8005e94:	bb30      	cbnz	r0, 8005ee4 <_printf_float+0xc0>
 8005e96:	2200      	movs	r2, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	f7fa fd8d 	bl	80009bc <__aeabi_dcmplt>
 8005ea2:	b110      	cbz	r0, 8005eaa <_printf_float+0x86>
 8005ea4:	232d      	movs	r3, #45	; 0x2d
 8005ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eaa:	4a92      	ldr	r2, [pc, #584]	; (80060f4 <_printf_float+0x2d0>)
 8005eac:	4b92      	ldr	r3, [pc, #584]	; (80060f8 <_printf_float+0x2d4>)
 8005eae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005eb2:	bf94      	ite	ls
 8005eb4:	4690      	movls	r8, r2
 8005eb6:	4698      	movhi	r8, r3
 8005eb8:	2303      	movs	r3, #3
 8005eba:	f04f 0a00 	mov.w	sl, #0
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f02b 0304 	bic.w	r3, fp, #4
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	4633      	mov	r3, r6
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	9700      	str	r7, [sp, #0]
 8005ece:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ed0:	f000 f9d6 	bl	8006280 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f040 8090 	bne.w	8005ffa <_printf_float+0x1d6>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b011      	add	sp, #68	; 0x44
 8005ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee4:	4652      	mov	r2, sl
 8005ee6:	4643      	mov	r3, r8
 8005ee8:	4650      	mov	r0, sl
 8005eea:	4641      	mov	r1, r8
 8005eec:	f7fa fd8e 	bl	8000a0c <__aeabi_dcmpun>
 8005ef0:	b148      	cbz	r0, 8005f06 <_printf_float+0xe2>
 8005ef2:	f1b8 0f00 	cmp.w	r8, #0
 8005ef6:	bfb8      	it	lt
 8005ef8:	232d      	movlt	r3, #45	; 0x2d
 8005efa:	4a80      	ldr	r2, [pc, #512]	; (80060fc <_printf_float+0x2d8>)
 8005efc:	bfb8      	it	lt
 8005efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f02:	4b7f      	ldr	r3, [pc, #508]	; (8006100 <_printf_float+0x2dc>)
 8005f04:	e7d3      	b.n	8005eae <_printf_float+0x8a>
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	d142      	bne.n	8005f96 <_printf_float+0x172>
 8005f10:	2306      	movs	r3, #6
 8005f12:	6063      	str	r3, [r4, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	9206      	str	r2, [sp, #24]
 8005f18:	aa0e      	add	r2, sp, #56	; 0x38
 8005f1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f1e:	aa0d      	add	r2, sp, #52	; 0x34
 8005f20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f24:	9203      	str	r2, [sp, #12]
 8005f26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	4652      	mov	r2, sl
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	4628      	mov	r0, r5
 8005f38:	4643      	mov	r3, r8
 8005f3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f3c:	f7ff fed6 	bl	8005cec <__cvt>
 8005f40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f42:	4680      	mov	r8, r0
 8005f44:	2947      	cmp	r1, #71	; 0x47
 8005f46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f48:	d108      	bne.n	8005f5c <_printf_float+0x138>
 8005f4a:	1cc8      	adds	r0, r1, #3
 8005f4c:	db02      	blt.n	8005f54 <_printf_float+0x130>
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	4299      	cmp	r1, r3
 8005f52:	dd40      	ble.n	8005fd6 <_printf_float+0x1b2>
 8005f54:	f1a9 0902 	sub.w	r9, r9, #2
 8005f58:	fa5f f989 	uxtb.w	r9, r9
 8005f5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f60:	d81f      	bhi.n	8005fa2 <_printf_float+0x17e>
 8005f62:	464a      	mov	r2, r9
 8005f64:	3901      	subs	r1, #1
 8005f66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f6c:	f7ff ff1d 	bl	8005daa <__exponent>
 8005f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f72:	4682      	mov	sl, r0
 8005f74:	1813      	adds	r3, r2, r0
 8005f76:	2a01      	cmp	r2, #1
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	dc02      	bgt.n	8005f82 <_printf_float+0x15e>
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	07d2      	lsls	r2, r2, #31
 8005f80:	d501      	bpl.n	8005f86 <_printf_float+0x162>
 8005f82:	3301      	adds	r3, #1
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d09b      	beq.n	8005ec6 <_printf_float+0xa2>
 8005f8e:	232d      	movs	r3, #45	; 0x2d
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	e797      	b.n	8005ec6 <_printf_float+0xa2>
 8005f96:	2947      	cmp	r1, #71	; 0x47
 8005f98:	d1bc      	bne.n	8005f14 <_printf_float+0xf0>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1ba      	bne.n	8005f14 <_printf_float+0xf0>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7b7      	b.n	8005f12 <_printf_float+0xee>
 8005fa2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005fa6:	d118      	bne.n	8005fda <_printf_float+0x1b6>
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	dd0b      	ble.n	8005fc6 <_printf_float+0x1a2>
 8005fae:	6121      	str	r1, [r4, #16]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_printf_float+0x194>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d502      	bpl.n	8005fbe <_printf_float+0x19a>
 8005fb8:	3301      	adds	r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc4:	e7df      	b.n	8005f86 <_printf_float+0x162>
 8005fc6:	b913      	cbnz	r3, 8005fce <_printf_float+0x1aa>
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	07d2      	lsls	r2, r2, #31
 8005fcc:	d501      	bpl.n	8005fd2 <_printf_float+0x1ae>
 8005fce:	3302      	adds	r3, #2
 8005fd0:	e7f4      	b.n	8005fbc <_printf_float+0x198>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f2      	b.n	8005fbc <_printf_float+0x198>
 8005fd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	db05      	blt.n	8005fec <_printf_float+0x1c8>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6121      	str	r1, [r4, #16]
 8005fe4:	07d8      	lsls	r0, r3, #31
 8005fe6:	d5ea      	bpl.n	8005fbe <_printf_float+0x19a>
 8005fe8:	1c4b      	adds	r3, r1, #1
 8005fea:	e7e7      	b.n	8005fbc <_printf_float+0x198>
 8005fec:	2900      	cmp	r1, #0
 8005fee:	bfcc      	ite	gt
 8005ff0:	2201      	movgt	r2, #1
 8005ff2:	f1c1 0202 	rsble	r2, r1, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	e7e0      	b.n	8005fbc <_printf_float+0x198>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	055a      	lsls	r2, r3, #21
 8005ffe:	d407      	bmi.n	8006010 <_printf_float+0x1ec>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	4642      	mov	r2, r8
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d12b      	bne.n	8006066 <_printf_float+0x242>
 800600e:	e764      	b.n	8005eda <_printf_float+0xb6>
 8006010:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006014:	f240 80dd 	bls.w	80061d2 <_printf_float+0x3ae>
 8006018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	f7fa fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8006024:	2800      	cmp	r0, #0
 8006026:	d033      	beq.n	8006090 <_printf_float+0x26c>
 8006028:	2301      	movs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	4a35      	ldr	r2, [pc, #212]	; (8006104 <_printf_float+0x2e0>)
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af51 	beq.w	8005eda <_printf_float+0xb6>
 8006038:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800603c:	429a      	cmp	r2, r3
 800603e:	db02      	blt.n	8006046 <_printf_float+0x222>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	07d8      	lsls	r0, r3, #31
 8006044:	d50f      	bpl.n	8006066 <_printf_float+0x242>
 8006046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af42 	beq.w	8005eda <_printf_float+0xb6>
 8006056:	f04f 0800 	mov.w	r8, #0
 800605a:	f104 091a 	add.w	r9, r4, #26
 800605e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006060:	3b01      	subs	r3, #1
 8006062:	4543      	cmp	r3, r8
 8006064:	dc09      	bgt.n	800607a <_printf_float+0x256>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	079b      	lsls	r3, r3, #30
 800606a:	f100 8104 	bmi.w	8006276 <_printf_float+0x452>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006072:	4298      	cmp	r0, r3
 8006074:	bfb8      	it	lt
 8006076:	4618      	movlt	r0, r3
 8006078:	e731      	b.n	8005ede <_printf_float+0xba>
 800607a:	2301      	movs	r3, #1
 800607c:	464a      	mov	r2, r9
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af28 	beq.w	8005eda <_printf_float+0xb6>
 800608a:	f108 0801 	add.w	r8, r8, #1
 800608e:	e7e6      	b.n	800605e <_printf_float+0x23a>
 8006090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	dc38      	bgt.n	8006108 <_printf_float+0x2e4>
 8006096:	2301      	movs	r3, #1
 8006098:	4631      	mov	r1, r6
 800609a:	4628      	mov	r0, r5
 800609c:	4a19      	ldr	r2, [pc, #100]	; (8006104 <_printf_float+0x2e0>)
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f af1a 	beq.w	8005eda <_printf_float+0xb6>
 80060a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80060aa:	4313      	orrs	r3, r2
 80060ac:	d102      	bne.n	80060b4 <_printf_float+0x290>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	07d9      	lsls	r1, r3, #31
 80060b2:	d5d8      	bpl.n	8006066 <_printf_float+0x242>
 80060b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060b8:	4631      	mov	r1, r6
 80060ba:	4628      	mov	r0, r5
 80060bc:	47b8      	blx	r7
 80060be:	3001      	adds	r0, #1
 80060c0:	f43f af0b 	beq.w	8005eda <_printf_float+0xb6>
 80060c4:	f04f 0900 	mov.w	r9, #0
 80060c8:	f104 0a1a 	add.w	sl, r4, #26
 80060cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ce:	425b      	negs	r3, r3
 80060d0:	454b      	cmp	r3, r9
 80060d2:	dc01      	bgt.n	80060d8 <_printf_float+0x2b4>
 80060d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d6:	e794      	b.n	8006002 <_printf_float+0x1de>
 80060d8:	2301      	movs	r3, #1
 80060da:	4652      	mov	r2, sl
 80060dc:	4631      	mov	r1, r6
 80060de:	4628      	mov	r0, r5
 80060e0:	47b8      	blx	r7
 80060e2:	3001      	adds	r0, #1
 80060e4:	f43f aef9 	beq.w	8005eda <_printf_float+0xb6>
 80060e8:	f109 0901 	add.w	r9, r9, #1
 80060ec:	e7ee      	b.n	80060cc <_printf_float+0x2a8>
 80060ee:	bf00      	nop
 80060f0:	7fefffff 	.word	0x7fefffff
 80060f4:	0800a52e 	.word	0x0800a52e
 80060f8:	0800a532 	.word	0x0800a532
 80060fc:	0800a536 	.word	0x0800a536
 8006100:	0800a53a 	.word	0x0800a53a
 8006104:	0800a53e 	.word	0x0800a53e
 8006108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800610a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800610c:	429a      	cmp	r2, r3
 800610e:	bfa8      	it	ge
 8006110:	461a      	movge	r2, r3
 8006112:	2a00      	cmp	r2, #0
 8006114:	4691      	mov	r9, r2
 8006116:	dc37      	bgt.n	8006188 <_printf_float+0x364>
 8006118:	f04f 0b00 	mov.w	fp, #0
 800611c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006120:	f104 021a 	add.w	r2, r4, #26
 8006124:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006128:	ebaa 0309 	sub.w	r3, sl, r9
 800612c:	455b      	cmp	r3, fp
 800612e:	dc33      	bgt.n	8006198 <_printf_float+0x374>
 8006130:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006134:	429a      	cmp	r2, r3
 8006136:	db3b      	blt.n	80061b0 <_printf_float+0x38c>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07da      	lsls	r2, r3, #31
 800613c:	d438      	bmi.n	80061b0 <_printf_float+0x38c>
 800613e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006142:	eba2 0903 	sub.w	r9, r2, r3
 8006146:	eba2 020a 	sub.w	r2, r2, sl
 800614a:	4591      	cmp	r9, r2
 800614c:	bfa8      	it	ge
 800614e:	4691      	movge	r9, r2
 8006150:	f1b9 0f00 	cmp.w	r9, #0
 8006154:	dc34      	bgt.n	80061c0 <_printf_float+0x39c>
 8006156:	f04f 0800 	mov.w	r8, #0
 800615a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800615e:	f104 0a1a 	add.w	sl, r4, #26
 8006162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	eba3 0309 	sub.w	r3, r3, r9
 800616c:	4543      	cmp	r3, r8
 800616e:	f77f af7a 	ble.w	8006066 <_printf_float+0x242>
 8006172:	2301      	movs	r3, #1
 8006174:	4652      	mov	r2, sl
 8006176:	4631      	mov	r1, r6
 8006178:	4628      	mov	r0, r5
 800617a:	47b8      	blx	r7
 800617c:	3001      	adds	r0, #1
 800617e:	f43f aeac 	beq.w	8005eda <_printf_float+0xb6>
 8006182:	f108 0801 	add.w	r8, r8, #1
 8006186:	e7ec      	b.n	8006162 <_printf_float+0x33e>
 8006188:	4613      	mov	r3, r2
 800618a:	4631      	mov	r1, r6
 800618c:	4642      	mov	r2, r8
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	d1c0      	bne.n	8006118 <_printf_float+0x2f4>
 8006196:	e6a0      	b.n	8005eda <_printf_float+0xb6>
 8006198:	2301      	movs	r3, #1
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	920b      	str	r2, [sp, #44]	; 0x2c
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f ae99 	beq.w	8005eda <_printf_float+0xb6>
 80061a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061aa:	f10b 0b01 	add.w	fp, fp, #1
 80061ae:	e7b9      	b.n	8006124 <_printf_float+0x300>
 80061b0:	4631      	mov	r1, r6
 80061b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	d1bf      	bne.n	800613e <_printf_float+0x31a>
 80061be:	e68c      	b.n	8005eda <_printf_float+0xb6>
 80061c0:	464b      	mov	r3, r9
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	eb08 020a 	add.w	r2, r8, sl
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	d1c2      	bne.n	8006156 <_printf_float+0x332>
 80061d0:	e683      	b.n	8005eda <_printf_float+0xb6>
 80061d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061d4:	2a01      	cmp	r2, #1
 80061d6:	dc01      	bgt.n	80061dc <_printf_float+0x3b8>
 80061d8:	07db      	lsls	r3, r3, #31
 80061da:	d539      	bpl.n	8006250 <_printf_float+0x42c>
 80061dc:	2301      	movs	r3, #1
 80061de:	4642      	mov	r2, r8
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f ae77 	beq.w	8005eda <_printf_float+0xb6>
 80061ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f ae6f 	beq.w	8005eda <_printf_float+0xb6>
 80061fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006200:	2200      	movs	r2, #0
 8006202:	2300      	movs	r3, #0
 8006204:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006208:	f7fa fbce 	bl	80009a8 <__aeabi_dcmpeq>
 800620c:	b9d8      	cbnz	r0, 8006246 <_printf_float+0x422>
 800620e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006212:	f108 0201 	add.w	r2, r8, #1
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	d10e      	bne.n	800623e <_printf_float+0x41a>
 8006220:	e65b      	b.n	8005eda <_printf_float+0xb6>
 8006222:	2301      	movs	r3, #1
 8006224:	464a      	mov	r2, r9
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	f43f ae54 	beq.w	8005eda <_printf_float+0xb6>
 8006232:	f108 0801 	add.w	r8, r8, #1
 8006236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006238:	3b01      	subs	r3, #1
 800623a:	4543      	cmp	r3, r8
 800623c:	dcf1      	bgt.n	8006222 <_printf_float+0x3fe>
 800623e:	4653      	mov	r3, sl
 8006240:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006244:	e6de      	b.n	8006004 <_printf_float+0x1e0>
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	f104 091a 	add.w	r9, r4, #26
 800624e:	e7f2      	b.n	8006236 <_printf_float+0x412>
 8006250:	2301      	movs	r3, #1
 8006252:	4642      	mov	r2, r8
 8006254:	e7df      	b.n	8006216 <_printf_float+0x3f2>
 8006256:	2301      	movs	r3, #1
 8006258:	464a      	mov	r2, r9
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	f43f ae3a 	beq.w	8005eda <_printf_float+0xb6>
 8006266:	f108 0801 	add.w	r8, r8, #1
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800626e:	1a5b      	subs	r3, r3, r1
 8006270:	4543      	cmp	r3, r8
 8006272:	dcf0      	bgt.n	8006256 <_printf_float+0x432>
 8006274:	e6fb      	b.n	800606e <_printf_float+0x24a>
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	f104 0919 	add.w	r9, r4, #25
 800627e:	e7f4      	b.n	800626a <_printf_float+0x446>

08006280 <_printf_common>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	4616      	mov	r6, r2
 8006286:	4699      	mov	r9, r3
 8006288:	688a      	ldr	r2, [r1, #8]
 800628a:	690b      	ldr	r3, [r1, #16]
 800628c:	4607      	mov	r7, r0
 800628e:	4293      	cmp	r3, r2
 8006290:	bfb8      	it	lt
 8006292:	4613      	movlt	r3, r2
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800629a:	460c      	mov	r4, r1
 800629c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a0:	b10a      	cbz	r2, 80062a6 <_printf_common+0x26>
 80062a2:	3301      	adds	r3, #1
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	0699      	lsls	r1, r3, #26
 80062aa:	bf42      	ittt	mi
 80062ac:	6833      	ldrmi	r3, [r6, #0]
 80062ae:	3302      	addmi	r3, #2
 80062b0:	6033      	strmi	r3, [r6, #0]
 80062b2:	6825      	ldr	r5, [r4, #0]
 80062b4:	f015 0506 	ands.w	r5, r5, #6
 80062b8:	d106      	bne.n	80062c8 <_printf_common+0x48>
 80062ba:	f104 0a19 	add.w	sl, r4, #25
 80062be:	68e3      	ldr	r3, [r4, #12]
 80062c0:	6832      	ldr	r2, [r6, #0]
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	42ab      	cmp	r3, r5
 80062c6:	dc2b      	bgt.n	8006320 <_printf_common+0xa0>
 80062c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062cc:	1e13      	subs	r3, r2, #0
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	bf18      	it	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	0692      	lsls	r2, r2, #26
 80062d6:	d430      	bmi.n	800633a <_printf_common+0xba>
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e0:	47c0      	blx	r8
 80062e2:	3001      	adds	r0, #1
 80062e4:	d023      	beq.n	800632e <_printf_common+0xae>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	6922      	ldr	r2, [r4, #16]
 80062ea:	f003 0306 	and.w	r3, r3, #6
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	bf14      	ite	ne
 80062f2:	2500      	movne	r5, #0
 80062f4:	6833      	ldreq	r3, [r6, #0]
 80062f6:	f04f 0600 	mov.w	r6, #0
 80062fa:	bf08      	it	eq
 80062fc:	68e5      	ldreq	r5, [r4, #12]
 80062fe:	f104 041a 	add.w	r4, r4, #26
 8006302:	bf08      	it	eq
 8006304:	1aed      	subeq	r5, r5, r3
 8006306:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800630a:	bf08      	it	eq
 800630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006310:	4293      	cmp	r3, r2
 8006312:	bfc4      	itt	gt
 8006314:	1a9b      	subgt	r3, r3, r2
 8006316:	18ed      	addgt	r5, r5, r3
 8006318:	42b5      	cmp	r5, r6
 800631a:	d11a      	bne.n	8006352 <_printf_common+0xd2>
 800631c:	2000      	movs	r0, #0
 800631e:	e008      	b.n	8006332 <_printf_common+0xb2>
 8006320:	2301      	movs	r3, #1
 8006322:	4652      	mov	r2, sl
 8006324:	4649      	mov	r1, r9
 8006326:	4638      	mov	r0, r7
 8006328:	47c0      	blx	r8
 800632a:	3001      	adds	r0, #1
 800632c:	d103      	bne.n	8006336 <_printf_common+0xb6>
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006336:	3501      	adds	r5, #1
 8006338:	e7c1      	b.n	80062be <_printf_common+0x3e>
 800633a:	2030      	movs	r0, #48	; 0x30
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006348:	4422      	add	r2, r4
 800634a:	3302      	adds	r3, #2
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006350:	e7c2      	b.n	80062d8 <_printf_common+0x58>
 8006352:	2301      	movs	r3, #1
 8006354:	4622      	mov	r2, r4
 8006356:	4649      	mov	r1, r9
 8006358:	4638      	mov	r0, r7
 800635a:	47c0      	blx	r8
 800635c:	3001      	adds	r0, #1
 800635e:	d0e6      	beq.n	800632e <_printf_common+0xae>
 8006360:	3601      	adds	r6, #1
 8006362:	e7d9      	b.n	8006318 <_printf_common+0x98>

08006364 <_printf_i>:
 8006364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	7e0f      	ldrb	r7, [r1, #24]
 800636a:	4691      	mov	r9, r2
 800636c:	2f78      	cmp	r7, #120	; 0x78
 800636e:	4680      	mov	r8, r0
 8006370:	460c      	mov	r4, r1
 8006372:	469a      	mov	sl, r3
 8006374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637a:	d807      	bhi.n	800638c <_printf_i+0x28>
 800637c:	2f62      	cmp	r7, #98	; 0x62
 800637e:	d80a      	bhi.n	8006396 <_printf_i+0x32>
 8006380:	2f00      	cmp	r7, #0
 8006382:	f000 80d5 	beq.w	8006530 <_printf_i+0x1cc>
 8006386:	2f58      	cmp	r7, #88	; 0x58
 8006388:	f000 80c1 	beq.w	800650e <_printf_i+0x1aa>
 800638c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006394:	e03a      	b.n	800640c <_printf_i+0xa8>
 8006396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639a:	2b15      	cmp	r3, #21
 800639c:	d8f6      	bhi.n	800638c <_printf_i+0x28>
 800639e:	a101      	add	r1, pc, #4	; (adr r1, 80063a4 <_printf_i+0x40>)
 80063a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	08006411 	.word	0x08006411
 80063ac:	0800638d 	.word	0x0800638d
 80063b0:	0800638d 	.word	0x0800638d
 80063b4:	0800638d 	.word	0x0800638d
 80063b8:	0800638d 	.word	0x0800638d
 80063bc:	08006411 	.word	0x08006411
 80063c0:	0800638d 	.word	0x0800638d
 80063c4:	0800638d 	.word	0x0800638d
 80063c8:	0800638d 	.word	0x0800638d
 80063cc:	0800638d 	.word	0x0800638d
 80063d0:	08006517 	.word	0x08006517
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	080064d1 	.word	0x080064d1
 80063dc:	0800638d 	.word	0x0800638d
 80063e0:	0800638d 	.word	0x0800638d
 80063e4:	08006539 	.word	0x08006539
 80063e8:	0800638d 	.word	0x0800638d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800638d 	.word	0x0800638d
 80063f4:	0800638d 	.word	0x0800638d
 80063f8:	080064d9 	.word	0x080064d9
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	602a      	str	r2, [r5, #0]
 8006404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800640c:	2301      	movs	r3, #1
 800640e:	e0a0      	b.n	8006552 <_printf_i+0x1ee>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	682b      	ldr	r3, [r5, #0]
 8006414:	0607      	lsls	r7, r0, #24
 8006416:	f103 0104 	add.w	r1, r3, #4
 800641a:	6029      	str	r1, [r5, #0]
 800641c:	d501      	bpl.n	8006422 <_printf_i+0xbe>
 800641e:	681e      	ldr	r6, [r3, #0]
 8006420:	e003      	b.n	800642a <_printf_i+0xc6>
 8006422:	0646      	lsls	r6, r0, #25
 8006424:	d5fb      	bpl.n	800641e <_printf_i+0xba>
 8006426:	f9b3 6000 	ldrsh.w	r6, [r3]
 800642a:	2e00      	cmp	r6, #0
 800642c:	da03      	bge.n	8006436 <_printf_i+0xd2>
 800642e:	232d      	movs	r3, #45	; 0x2d
 8006430:	4276      	negs	r6, r6
 8006432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006436:	230a      	movs	r3, #10
 8006438:	4859      	ldr	r0, [pc, #356]	; (80065a0 <_printf_i+0x23c>)
 800643a:	e012      	b.n	8006462 <_printf_i+0xfe>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1d19      	adds	r1, r3, #4
 8006442:	6029      	str	r1, [r5, #0]
 8006444:	0605      	lsls	r5, r0, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0xe8>
 8006448:	681e      	ldr	r6, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0xee>
 800644c:	0641      	lsls	r1, r0, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0xe4>
 8006450:	881e      	ldrh	r6, [r3, #0]
 8006452:	2f6f      	cmp	r7, #111	; 0x6f
 8006454:	bf0c      	ite	eq
 8006456:	2308      	moveq	r3, #8
 8006458:	230a      	movne	r3, #10
 800645a:	4851      	ldr	r0, [pc, #324]	; (80065a0 <_printf_i+0x23c>)
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006462:	6865      	ldr	r5, [r4, #4]
 8006464:	2d00      	cmp	r5, #0
 8006466:	bfa8      	it	ge
 8006468:	6821      	ldrge	r1, [r4, #0]
 800646a:	60a5      	str	r5, [r4, #8]
 800646c:	bfa4      	itt	ge
 800646e:	f021 0104 	bicge.w	r1, r1, #4
 8006472:	6021      	strge	r1, [r4, #0]
 8006474:	b90e      	cbnz	r6, 800647a <_printf_i+0x116>
 8006476:	2d00      	cmp	r5, #0
 8006478:	d04b      	beq.n	8006512 <_printf_i+0x1ae>
 800647a:	4615      	mov	r5, r2
 800647c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006480:	fb03 6711 	mls	r7, r3, r1, r6
 8006484:	5dc7      	ldrb	r7, [r0, r7]
 8006486:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800648a:	4637      	mov	r7, r6
 800648c:	42bb      	cmp	r3, r7
 800648e:	460e      	mov	r6, r1
 8006490:	d9f4      	bls.n	800647c <_printf_i+0x118>
 8006492:	2b08      	cmp	r3, #8
 8006494:	d10b      	bne.n	80064ae <_printf_i+0x14a>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	07de      	lsls	r6, r3, #31
 800649a:	d508      	bpl.n	80064ae <_printf_i+0x14a>
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	6861      	ldr	r1, [r4, #4]
 80064a0:	4299      	cmp	r1, r3
 80064a2:	bfde      	ittt	le
 80064a4:	2330      	movle	r3, #48	; 0x30
 80064a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ae:	1b52      	subs	r2, r2, r5
 80064b0:	6122      	str	r2, [r4, #16]
 80064b2:	464b      	mov	r3, r9
 80064b4:	4621      	mov	r1, r4
 80064b6:	4640      	mov	r0, r8
 80064b8:	f8cd a000 	str.w	sl, [sp]
 80064bc:	aa03      	add	r2, sp, #12
 80064be:	f7ff fedf 	bl	8006280 <_printf_common>
 80064c2:	3001      	adds	r0, #1
 80064c4:	d14a      	bne.n	800655c <_printf_i+0x1f8>
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	b004      	add	sp, #16
 80064cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	f043 0320 	orr.w	r3, r3, #32
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	2778      	movs	r7, #120	; 0x78
 80064da:	4832      	ldr	r0, [pc, #200]	; (80065a4 <_printf_i+0x240>)
 80064dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	6829      	ldr	r1, [r5, #0]
 80064e4:	061f      	lsls	r7, r3, #24
 80064e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ea:	d402      	bmi.n	80064f2 <_printf_i+0x18e>
 80064ec:	065f      	lsls	r7, r3, #25
 80064ee:	bf48      	it	mi
 80064f0:	b2b6      	uxthmi	r6, r6
 80064f2:	07df      	lsls	r7, r3, #31
 80064f4:	bf48      	it	mi
 80064f6:	f043 0320 	orrmi.w	r3, r3, #32
 80064fa:	6029      	str	r1, [r5, #0]
 80064fc:	bf48      	it	mi
 80064fe:	6023      	strmi	r3, [r4, #0]
 8006500:	b91e      	cbnz	r6, 800650a <_printf_i+0x1a6>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	f023 0320 	bic.w	r3, r3, #32
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	2310      	movs	r3, #16
 800650c:	e7a6      	b.n	800645c <_printf_i+0xf8>
 800650e:	4824      	ldr	r0, [pc, #144]	; (80065a0 <_printf_i+0x23c>)
 8006510:	e7e4      	b.n	80064dc <_printf_i+0x178>
 8006512:	4615      	mov	r5, r2
 8006514:	e7bd      	b.n	8006492 <_printf_i+0x12e>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	6826      	ldr	r6, [r4, #0]
 800651a:	1d18      	adds	r0, r3, #4
 800651c:	6961      	ldr	r1, [r4, #20]
 800651e:	6028      	str	r0, [r5, #0]
 8006520:	0635      	lsls	r5, r6, #24
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	d501      	bpl.n	800652a <_printf_i+0x1c6>
 8006526:	6019      	str	r1, [r3, #0]
 8006528:	e002      	b.n	8006530 <_printf_i+0x1cc>
 800652a:	0670      	lsls	r0, r6, #25
 800652c:	d5fb      	bpl.n	8006526 <_printf_i+0x1c2>
 800652e:	8019      	strh	r1, [r3, #0]
 8006530:	2300      	movs	r3, #0
 8006532:	4615      	mov	r5, r2
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	e7bc      	b.n	80064b2 <_printf_i+0x14e>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	2100      	movs	r1, #0
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	4628      	mov	r0, r5
 8006546:	f000 fbe2 	bl	8006d0e <memchr>
 800654a:	b108      	cbz	r0, 8006550 <_printf_i+0x1ec>
 800654c:	1b40      	subs	r0, r0, r5
 800654e:	6060      	str	r0, [r4, #4]
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	2300      	movs	r3, #0
 8006556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655a:	e7aa      	b.n	80064b2 <_printf_i+0x14e>
 800655c:	462a      	mov	r2, r5
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	47d0      	blx	sl
 8006566:	3001      	adds	r0, #1
 8006568:	d0ad      	beq.n	80064c6 <_printf_i+0x162>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	079b      	lsls	r3, r3, #30
 800656e:	d413      	bmi.n	8006598 <_printf_i+0x234>
 8006570:	68e0      	ldr	r0, [r4, #12]
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	4298      	cmp	r0, r3
 8006576:	bfb8      	it	lt
 8006578:	4618      	movlt	r0, r3
 800657a:	e7a6      	b.n	80064ca <_printf_i+0x166>
 800657c:	2301      	movs	r3, #1
 800657e:	4632      	mov	r2, r6
 8006580:	4649      	mov	r1, r9
 8006582:	4640      	mov	r0, r8
 8006584:	47d0      	blx	sl
 8006586:	3001      	adds	r0, #1
 8006588:	d09d      	beq.n	80064c6 <_printf_i+0x162>
 800658a:	3501      	adds	r5, #1
 800658c:	68e3      	ldr	r3, [r4, #12]
 800658e:	9903      	ldr	r1, [sp, #12]
 8006590:	1a5b      	subs	r3, r3, r1
 8006592:	42ab      	cmp	r3, r5
 8006594:	dcf2      	bgt.n	800657c <_printf_i+0x218>
 8006596:	e7eb      	b.n	8006570 <_printf_i+0x20c>
 8006598:	2500      	movs	r5, #0
 800659a:	f104 0619 	add.w	r6, r4, #25
 800659e:	e7f5      	b.n	800658c <_printf_i+0x228>
 80065a0:	0800a540 	.word	0x0800a540
 80065a4:	0800a551 	.word	0x0800a551

080065a8 <_scanf_float>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	b087      	sub	sp, #28
 80065ae:	9303      	str	r3, [sp, #12]
 80065b0:	688b      	ldr	r3, [r1, #8]
 80065b2:	4617      	mov	r7, r2
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80065ba:	bf85      	ittet	hi
 80065bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065c0:	195b      	addhi	r3, r3, r5
 80065c2:	2300      	movls	r3, #0
 80065c4:	9302      	strhi	r3, [sp, #8]
 80065c6:	bf88      	it	hi
 80065c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065cc:	468b      	mov	fp, r1
 80065ce:	f04f 0500 	mov.w	r5, #0
 80065d2:	bf8c      	ite	hi
 80065d4:	608b      	strhi	r3, [r1, #8]
 80065d6:	9302      	strls	r3, [sp, #8]
 80065d8:	680b      	ldr	r3, [r1, #0]
 80065da:	4680      	mov	r8, r0
 80065dc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065e0:	f84b 3b1c 	str.w	r3, [fp], #28
 80065e4:	460c      	mov	r4, r1
 80065e6:	465e      	mov	r6, fp
 80065e8:	46aa      	mov	sl, r5
 80065ea:	46a9      	mov	r9, r5
 80065ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065f0:	9501      	str	r5, [sp, #4]
 80065f2:	68a2      	ldr	r2, [r4, #8]
 80065f4:	b152      	cbz	r2, 800660c <_scanf_float+0x64>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b4e      	cmp	r3, #78	; 0x4e
 80065fc:	d864      	bhi.n	80066c8 <_scanf_float+0x120>
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d83c      	bhi.n	800667c <_scanf_float+0xd4>
 8006602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006606:	b2c8      	uxtb	r0, r1
 8006608:	280e      	cmp	r0, #14
 800660a:	d93a      	bls.n	8006682 <_scanf_float+0xda>
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	d003      	beq.n	800661a <_scanf_float+0x72>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800661e:	f1ba 0f01 	cmp.w	sl, #1
 8006622:	f200 8113 	bhi.w	800684c <_scanf_float+0x2a4>
 8006626:	455e      	cmp	r6, fp
 8006628:	f200 8105 	bhi.w	8006836 <_scanf_float+0x28e>
 800662c:	2501      	movs	r5, #1
 800662e:	4628      	mov	r0, r5
 8006630:	b007      	add	sp, #28
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800663a:	2a0d      	cmp	r2, #13
 800663c:	d8e6      	bhi.n	800660c <_scanf_float+0x64>
 800663e:	a101      	add	r1, pc, #4	; (adr r1, 8006644 <_scanf_float+0x9c>)
 8006640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006644:	08006783 	.word	0x08006783
 8006648:	0800660d 	.word	0x0800660d
 800664c:	0800660d 	.word	0x0800660d
 8006650:	0800660d 	.word	0x0800660d
 8006654:	080067e3 	.word	0x080067e3
 8006658:	080067bb 	.word	0x080067bb
 800665c:	0800660d 	.word	0x0800660d
 8006660:	0800660d 	.word	0x0800660d
 8006664:	08006791 	.word	0x08006791
 8006668:	0800660d 	.word	0x0800660d
 800666c:	0800660d 	.word	0x0800660d
 8006670:	0800660d 	.word	0x0800660d
 8006674:	0800660d 	.word	0x0800660d
 8006678:	08006749 	.word	0x08006749
 800667c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006680:	e7db      	b.n	800663a <_scanf_float+0x92>
 8006682:	290e      	cmp	r1, #14
 8006684:	d8c2      	bhi.n	800660c <_scanf_float+0x64>
 8006686:	a001      	add	r0, pc, #4	; (adr r0, 800668c <_scanf_float+0xe4>)
 8006688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800668c:	0800673b 	.word	0x0800673b
 8006690:	0800660d 	.word	0x0800660d
 8006694:	0800673b 	.word	0x0800673b
 8006698:	080067cf 	.word	0x080067cf
 800669c:	0800660d 	.word	0x0800660d
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	08006725 	.word	0x08006725
 80066a8:	08006725 	.word	0x08006725
 80066ac:	08006725 	.word	0x08006725
 80066b0:	08006725 	.word	0x08006725
 80066b4:	08006725 	.word	0x08006725
 80066b8:	08006725 	.word	0x08006725
 80066bc:	08006725 	.word	0x08006725
 80066c0:	08006725 	.word	0x08006725
 80066c4:	08006725 	.word	0x08006725
 80066c8:	2b6e      	cmp	r3, #110	; 0x6e
 80066ca:	d809      	bhi.n	80066e0 <_scanf_float+0x138>
 80066cc:	2b60      	cmp	r3, #96	; 0x60
 80066ce:	d8b2      	bhi.n	8006636 <_scanf_float+0x8e>
 80066d0:	2b54      	cmp	r3, #84	; 0x54
 80066d2:	d077      	beq.n	80067c4 <_scanf_float+0x21c>
 80066d4:	2b59      	cmp	r3, #89	; 0x59
 80066d6:	d199      	bne.n	800660c <_scanf_float+0x64>
 80066d8:	2d07      	cmp	r5, #7
 80066da:	d197      	bne.n	800660c <_scanf_float+0x64>
 80066dc:	2508      	movs	r5, #8
 80066de:	e029      	b.n	8006734 <_scanf_float+0x18c>
 80066e0:	2b74      	cmp	r3, #116	; 0x74
 80066e2:	d06f      	beq.n	80067c4 <_scanf_float+0x21c>
 80066e4:	2b79      	cmp	r3, #121	; 0x79
 80066e6:	e7f6      	b.n	80066d6 <_scanf_float+0x12e>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	05c8      	lsls	r0, r1, #23
 80066ec:	d51a      	bpl.n	8006724 <_scanf_float+0x17c>
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066f4:	6021      	str	r1, [r4, #0]
 80066f6:	f109 0901 	add.w	r9, r9, #1
 80066fa:	b11b      	cbz	r3, 8006704 <_scanf_float+0x15c>
 80066fc:	3b01      	subs	r3, #1
 80066fe:	3201      	adds	r2, #1
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	60a2      	str	r2, [r4, #8]
 8006704:	68a3      	ldr	r3, [r4, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	60a3      	str	r3, [r4, #8]
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	3301      	adds	r3, #1
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	f340 8084 	ble.w	8006824 <_scanf_float+0x27c>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	e766      	b.n	80065f2 <_scanf_float+0x4a>
 8006724:	eb1a 0f05 	cmn.w	sl, r5
 8006728:	f47f af70 	bne.w	800660c <_scanf_float+0x64>
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	f806 3b01 	strb.w	r3, [r6], #1
 8006738:	e7e4      	b.n	8006704 <_scanf_float+0x15c>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	0610      	lsls	r0, r2, #24
 800673e:	f57f af65 	bpl.w	800660c <_scanf_float+0x64>
 8006742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006746:	e7f4      	b.n	8006732 <_scanf_float+0x18a>
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	d10e      	bne.n	800676c <_scanf_float+0x1c4>
 800674e:	f1b9 0f00 	cmp.w	r9, #0
 8006752:	d10e      	bne.n	8006772 <_scanf_float+0x1ca>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800675a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800675e:	d108      	bne.n	8006772 <_scanf_float+0x1ca>
 8006760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006764:	f04f 0a01 	mov.w	sl, #1
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	e7e3      	b.n	8006734 <_scanf_float+0x18c>
 800676c:	f1ba 0f02 	cmp.w	sl, #2
 8006770:	d055      	beq.n	800681e <_scanf_float+0x276>
 8006772:	2d01      	cmp	r5, #1
 8006774:	d002      	beq.n	800677c <_scanf_float+0x1d4>
 8006776:	2d04      	cmp	r5, #4
 8006778:	f47f af48 	bne.w	800660c <_scanf_float+0x64>
 800677c:	3501      	adds	r5, #1
 800677e:	b2ed      	uxtb	r5, r5
 8006780:	e7d8      	b.n	8006734 <_scanf_float+0x18c>
 8006782:	f1ba 0f01 	cmp.w	sl, #1
 8006786:	f47f af41 	bne.w	800660c <_scanf_float+0x64>
 800678a:	f04f 0a02 	mov.w	sl, #2
 800678e:	e7d1      	b.n	8006734 <_scanf_float+0x18c>
 8006790:	b97d      	cbnz	r5, 80067b2 <_scanf_float+0x20a>
 8006792:	f1b9 0f00 	cmp.w	r9, #0
 8006796:	f47f af3c 	bne.w	8006612 <_scanf_float+0x6a>
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067a4:	f47f af39 	bne.w	800661a <_scanf_float+0x72>
 80067a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067ac:	2501      	movs	r5, #1
 80067ae:	6022      	str	r2, [r4, #0]
 80067b0:	e7c0      	b.n	8006734 <_scanf_float+0x18c>
 80067b2:	2d03      	cmp	r5, #3
 80067b4:	d0e2      	beq.n	800677c <_scanf_float+0x1d4>
 80067b6:	2d05      	cmp	r5, #5
 80067b8:	e7de      	b.n	8006778 <_scanf_float+0x1d0>
 80067ba:	2d02      	cmp	r5, #2
 80067bc:	f47f af26 	bne.w	800660c <_scanf_float+0x64>
 80067c0:	2503      	movs	r5, #3
 80067c2:	e7b7      	b.n	8006734 <_scanf_float+0x18c>
 80067c4:	2d06      	cmp	r5, #6
 80067c6:	f47f af21 	bne.w	800660c <_scanf_float+0x64>
 80067ca:	2507      	movs	r5, #7
 80067cc:	e7b2      	b.n	8006734 <_scanf_float+0x18c>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	0591      	lsls	r1, r2, #22
 80067d2:	f57f af1b 	bpl.w	800660c <_scanf_float+0x64>
 80067d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80067e0:	e7a8      	b.n	8006734 <_scanf_float+0x18c>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067ec:	d006      	beq.n	80067fc <_scanf_float+0x254>
 80067ee:	0550      	lsls	r0, r2, #21
 80067f0:	f57f af0c 	bpl.w	800660c <_scanf_float+0x64>
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	f43f af0f 	beq.w	800661a <_scanf_float+0x72>
 80067fc:	0591      	lsls	r1, r2, #22
 80067fe:	bf58      	it	pl
 8006800:	9901      	ldrpl	r1, [sp, #4]
 8006802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006806:	bf58      	it	pl
 8006808:	eba9 0101 	subpl.w	r1, r9, r1
 800680c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006810:	f04f 0900 	mov.w	r9, #0
 8006814:	bf58      	it	pl
 8006816:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	e78a      	b.n	8006734 <_scanf_float+0x18c>
 800681e:	f04f 0a03 	mov.w	sl, #3
 8006822:	e787      	b.n	8006734 <_scanf_float+0x18c>
 8006824:	4639      	mov	r1, r7
 8006826:	4640      	mov	r0, r8
 8006828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800682c:	4798      	blx	r3
 800682e:	2800      	cmp	r0, #0
 8006830:	f43f aedf 	beq.w	80065f2 <_scanf_float+0x4a>
 8006834:	e6ea      	b.n	800660c <_scanf_float+0x64>
 8006836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800683a:	463a      	mov	r2, r7
 800683c:	4640      	mov	r0, r8
 800683e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006842:	4798      	blx	r3
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	e6ec      	b.n	8006626 <_scanf_float+0x7e>
 800684c:	1e6b      	subs	r3, r5, #1
 800684e:	2b06      	cmp	r3, #6
 8006850:	d825      	bhi.n	800689e <_scanf_float+0x2f6>
 8006852:	2d02      	cmp	r5, #2
 8006854:	d836      	bhi.n	80068c4 <_scanf_float+0x31c>
 8006856:	455e      	cmp	r6, fp
 8006858:	f67f aee8 	bls.w	800662c <_scanf_float+0x84>
 800685c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006860:	463a      	mov	r2, r7
 8006862:	4640      	mov	r0, r8
 8006864:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006868:	4798      	blx	r3
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	3b01      	subs	r3, #1
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	e7f1      	b.n	8006856 <_scanf_float+0x2ae>
 8006872:	9802      	ldr	r0, [sp, #8]
 8006874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800687c:	463a      	mov	r2, r7
 800687e:	9002      	str	r0, [sp, #8]
 8006880:	4640      	mov	r0, r8
 8006882:	4798      	blx	r3
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	3b01      	subs	r3, #1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800688e:	fa5f fa8a 	uxtb.w	sl, sl
 8006892:	f1ba 0f02 	cmp.w	sl, #2
 8006896:	d1ec      	bne.n	8006872 <_scanf_float+0x2ca>
 8006898:	3d03      	subs	r5, #3
 800689a:	b2ed      	uxtb	r5, r5
 800689c:	1b76      	subs	r6, r6, r5
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	05da      	lsls	r2, r3, #23
 80068a2:	d52f      	bpl.n	8006904 <_scanf_float+0x35c>
 80068a4:	055b      	lsls	r3, r3, #21
 80068a6:	d510      	bpl.n	80068ca <_scanf_float+0x322>
 80068a8:	455e      	cmp	r6, fp
 80068aa:	f67f aebf 	bls.w	800662c <_scanf_float+0x84>
 80068ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b2:	463a      	mov	r2, r7
 80068b4:	4640      	mov	r0, r8
 80068b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068ba:	4798      	blx	r3
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	3b01      	subs	r3, #1
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	e7f1      	b.n	80068a8 <_scanf_float+0x300>
 80068c4:	46aa      	mov	sl, r5
 80068c6:	9602      	str	r6, [sp, #8]
 80068c8:	e7df      	b.n	800688a <_scanf_float+0x2e2>
 80068ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	2965      	cmp	r1, #101	; 0x65
 80068d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	d00c      	beq.n	80068f8 <_scanf_float+0x350>
 80068de:	2945      	cmp	r1, #69	; 0x45
 80068e0:	d00a      	beq.n	80068f8 <_scanf_float+0x350>
 80068e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e6:	463a      	mov	r2, r7
 80068e8:	4640      	mov	r0, r8
 80068ea:	4798      	blx	r3
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	1eb5      	subs	r5, r6, #2
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	463a      	mov	r2, r7
 80068fa:	4640      	mov	r0, r8
 80068fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006900:	4798      	blx	r3
 8006902:	462e      	mov	r6, r5
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	f015 0510 	ands.w	r5, r5, #16
 800690a:	d155      	bne.n	80069b8 <_scanf_float+0x410>
 800690c:	7035      	strb	r5, [r6, #0]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006918:	d11d      	bne.n	8006956 <_scanf_float+0x3ae>
 800691a:	9b01      	ldr	r3, [sp, #4]
 800691c:	454b      	cmp	r3, r9
 800691e:	eba3 0209 	sub.w	r2, r3, r9
 8006922:	d125      	bne.n	8006970 <_scanf_float+0x3c8>
 8006924:	2200      	movs	r2, #0
 8006926:	4659      	mov	r1, fp
 8006928:	4640      	mov	r0, r8
 800692a:	f002 fc31 	bl	8009190 <_strtod_r>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	f8d4 c000 	ldr.w	ip, [r4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f01c 0f02 	tst.w	ip, #2
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	f103 0204 	add.w	r2, r3, #4
 8006942:	d020      	beq.n	8006986 <_scanf_float+0x3de>
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	600a      	str	r2, [r1, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	e9c3 6700 	strd	r6, r7, [r3]
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60e3      	str	r3, [r4, #12]
 8006954:	e66b      	b.n	800662e <_scanf_float+0x86>
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0e3      	beq.n	8006924 <_scanf_float+0x37c>
 800695c:	9905      	ldr	r1, [sp, #20]
 800695e:	230a      	movs	r3, #10
 8006960:	462a      	mov	r2, r5
 8006962:	4640      	mov	r0, r8
 8006964:	3101      	adds	r1, #1
 8006966:	f002 fc97 	bl	8009298 <_strtol_r>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	9e05      	ldr	r6, [sp, #20]
 800696e:	1ac2      	subs	r2, r0, r3
 8006970:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006974:	429e      	cmp	r6, r3
 8006976:	bf28      	it	cs
 8006978:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800697c:	4630      	mov	r0, r6
 800697e:	490f      	ldr	r1, [pc, #60]	; (80069bc <_scanf_float+0x414>)
 8006980:	f000 f8e2 	bl	8006b48 <siprintf>
 8006984:	e7ce      	b.n	8006924 <_scanf_float+0x37c>
 8006986:	f01c 0f04 	tst.w	ip, #4
 800698a:	d1db      	bne.n	8006944 <_scanf_float+0x39c>
 800698c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006990:	f8cc 2000 	str.w	r2, [ip]
 8006994:	f8d3 8000 	ldr.w	r8, [r3]
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	f7fa f836 	bl	8000a0c <__aeabi_dcmpun>
 80069a0:	b128      	cbz	r0, 80069ae <_scanf_float+0x406>
 80069a2:	4807      	ldr	r0, [pc, #28]	; (80069c0 <_scanf_float+0x418>)
 80069a4:	f000 f9d0 	bl	8006d48 <nanf>
 80069a8:	f8c8 0000 	str.w	r0, [r8]
 80069ac:	e7cf      	b.n	800694e <_scanf_float+0x3a6>
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7fa f889 	bl	8000ac8 <__aeabi_d2f>
 80069b6:	e7f7      	b.n	80069a8 <_scanf_float+0x400>
 80069b8:	2500      	movs	r5, #0
 80069ba:	e638      	b.n	800662e <_scanf_float+0x86>
 80069bc:	0800a562 	.word	0x0800a562
 80069c0:	0800a8f5 	.word	0x0800a8f5

080069c4 <std>:
 80069c4:	2300      	movs	r3, #0
 80069c6:	b510      	push	{r4, lr}
 80069c8:	4604      	mov	r4, r0
 80069ca:	e9c0 3300 	strd	r3, r3, [r0]
 80069ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069d2:	6083      	str	r3, [r0, #8]
 80069d4:	8181      	strh	r1, [r0, #12]
 80069d6:	6643      	str	r3, [r0, #100]	; 0x64
 80069d8:	81c2      	strh	r2, [r0, #14]
 80069da:	6183      	str	r3, [r0, #24]
 80069dc:	4619      	mov	r1, r3
 80069de:	2208      	movs	r2, #8
 80069e0:	305c      	adds	r0, #92	; 0x5c
 80069e2:	f000 f914 	bl	8006c0e <memset>
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <std+0x58>)
 80069e8:	6224      	str	r4, [r4, #32]
 80069ea:	6263      	str	r3, [r4, #36]	; 0x24
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <std+0x5c>)
 80069ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80069f0:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <std+0x60>)
 80069f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <std+0x64>)
 80069f6:	6323      	str	r3, [r4, #48]	; 0x30
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <std+0x68>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d006      	beq.n	8006a0c <std+0x48>
 80069fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a02:	4294      	cmp	r4, r2
 8006a04:	d002      	beq.n	8006a0c <std+0x48>
 8006a06:	33d0      	adds	r3, #208	; 0xd0
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d105      	bne.n	8006a18 <std+0x54>
 8006a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a14:	f000 b978 	b.w	8006d08 <__retarget_lock_init_recursive>
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08006b89 	.word	0x08006b89
 8006a20:	08006bab 	.word	0x08006bab
 8006a24:	08006be3 	.word	0x08006be3
 8006a28:	08006c07 	.word	0x08006c07
 8006a2c:	20001bfc 	.word	0x20001bfc

08006a30 <stdio_exit_handler>:
 8006a30:	4a02      	ldr	r2, [pc, #8]	; (8006a3c <stdio_exit_handler+0xc>)
 8006a32:	4903      	ldr	r1, [pc, #12]	; (8006a40 <stdio_exit_handler+0x10>)
 8006a34:	4803      	ldr	r0, [pc, #12]	; (8006a44 <stdio_exit_handler+0x14>)
 8006a36:	f000 b869 	b.w	8006b0c <_fwalk_sglue>
 8006a3a:	bf00      	nop
 8006a3c:	20000010 	.word	0x20000010
 8006a40:	08009651 	.word	0x08009651
 8006a44:	2000001c 	.word	0x2000001c

08006a48 <cleanup_stdio>:
 8006a48:	6841      	ldr	r1, [r0, #4]
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <cleanup_stdio+0x34>)
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	4604      	mov	r4, r0
 8006a52:	d001      	beq.n	8006a58 <cleanup_stdio+0x10>
 8006a54:	f002 fdfc 	bl	8009650 <_fflush_r>
 8006a58:	68a1      	ldr	r1, [r4, #8]
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <cleanup_stdio+0x38>)
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d002      	beq.n	8006a66 <cleanup_stdio+0x1e>
 8006a60:	4620      	mov	r0, r4
 8006a62:	f002 fdf5 	bl	8009650 <_fflush_r>
 8006a66:	68e1      	ldr	r1, [r4, #12]
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <cleanup_stdio+0x3c>)
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	d004      	beq.n	8006a78 <cleanup_stdio+0x30>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a74:	f002 bdec 	b.w	8009650 <_fflush_r>
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20001bfc 	.word	0x20001bfc
 8006a80:	20001c64 	.word	0x20001c64
 8006a84:	20001ccc 	.word	0x20001ccc

08006a88 <global_stdio_init.part.0>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <global_stdio_init.part.0+0x30>)
 8006a8c:	4c0b      	ldr	r4, [pc, #44]	; (8006abc <global_stdio_init.part.0+0x34>)
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <global_stdio_init.part.0+0x38>)
 8006a90:	4620      	mov	r0, r4
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	2104      	movs	r1, #4
 8006a96:	2200      	movs	r2, #0
 8006a98:	f7ff ff94 	bl	80069c4 <std>
 8006a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2109      	movs	r1, #9
 8006aa4:	f7ff ff8e 	bl	80069c4 <std>
 8006aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006aac:	2202      	movs	r2, #2
 8006aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab2:	2112      	movs	r1, #18
 8006ab4:	f7ff bf86 	b.w	80069c4 <std>
 8006ab8:	20001d34 	.word	0x20001d34
 8006abc:	20001bfc 	.word	0x20001bfc
 8006ac0:	08006a31 	.word	0x08006a31

08006ac4 <__sfp_lock_acquire>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sfp_lock_acquire+0x8>)
 8006ac6:	f000 b920 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	20001d3d 	.word	0x20001d3d

08006ad0 <__sfp_lock_release>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__sfp_lock_release+0x8>)
 8006ad2:	f000 b91b 	b.w	8006d0c <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20001d3d 	.word	0x20001d3d

08006adc <__sinit>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	f7ff fff0 	bl	8006ac4 <__sfp_lock_acquire>
 8006ae4:	6a23      	ldr	r3, [r4, #32]
 8006ae6:	b11b      	cbz	r3, 8006af0 <__sinit+0x14>
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aec:	f7ff bff0 	b.w	8006ad0 <__sfp_lock_release>
 8006af0:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <__sinit+0x28>)
 8006af2:	6223      	str	r3, [r4, #32]
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <__sinit+0x2c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f5      	bne.n	8006ae8 <__sinit+0xc>
 8006afc:	f7ff ffc4 	bl	8006a88 <global_stdio_init.part.0>
 8006b00:	e7f2      	b.n	8006ae8 <__sinit+0xc>
 8006b02:	bf00      	nop
 8006b04:	08006a49 	.word	0x08006a49
 8006b08:	20001d34 	.word	0x20001d34

08006b0c <_fwalk_sglue>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4607      	mov	r7, r0
 8006b12:	4688      	mov	r8, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	2600      	movs	r6, #0
 8006b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b20:	d505      	bpl.n	8006b2e <_fwalk_sglue+0x22>
 8006b22:	6824      	ldr	r4, [r4, #0]
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d1f7      	bne.n	8006b18 <_fwalk_sglue+0xc>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d907      	bls.n	8006b44 <_fwalk_sglue+0x38>
 8006b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	d003      	beq.n	8006b44 <_fwalk_sglue+0x38>
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	4306      	orrs	r6, r0
 8006b44:	3568      	adds	r5, #104	; 0x68
 8006b46:	e7e9      	b.n	8006b1c <_fwalk_sglue+0x10>

08006b48 <siprintf>:
 8006b48:	b40e      	push	{r1, r2, r3}
 8006b4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b4e:	b500      	push	{lr}
 8006b50:	b09c      	sub	sp, #112	; 0x70
 8006b52:	ab1d      	add	r3, sp, #116	; 0x74
 8006b54:	9002      	str	r0, [sp, #8]
 8006b56:	9006      	str	r0, [sp, #24]
 8006b58:	9107      	str	r1, [sp, #28]
 8006b5a:	9104      	str	r1, [sp, #16]
 8006b5c:	4808      	ldr	r0, [pc, #32]	; (8006b80 <siprintf+0x38>)
 8006b5e:	4909      	ldr	r1, [pc, #36]	; (8006b84 <siprintf+0x3c>)
 8006b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b64:	9105      	str	r1, [sp, #20]
 8006b66:	6800      	ldr	r0, [r0, #0]
 8006b68:	a902      	add	r1, sp, #8
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	f002 fbf0 	bl	8009350 <_svfiprintf_r>
 8006b70:	2200      	movs	r2, #0
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	b01c      	add	sp, #112	; 0x70
 8006b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b7c:	b003      	add	sp, #12
 8006b7e:	4770      	bx	lr
 8006b80:	20000068 	.word	0x20000068
 8006b84:	ffff0208 	.word	0xffff0208

08006b88 <__sread>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	f000 f86c 	bl	8006c6c <_read_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	bfab      	itete	ge
 8006b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b9c:	181b      	addge	r3, r3, r0
 8006b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ba2:	bfac      	ite	ge
 8006ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ba6:	81a3      	strhlt	r3, [r4, #12]
 8006ba8:	bd10      	pop	{r4, pc}

08006baa <__swrite>:
 8006baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	461f      	mov	r7, r3
 8006bb0:	898b      	ldrh	r3, [r1, #12]
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	05db      	lsls	r3, r3, #23
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	4616      	mov	r6, r2
 8006bba:	d505      	bpl.n	8006bc8 <__swrite+0x1e>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	f000 f840 	bl	8006c48 <_lseek_r>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	4632      	mov	r2, r6
 8006bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bde:	f000 b857 	b.w	8006c90 <_write_r>

08006be2 <__sseek>:
 8006be2:	b510      	push	{r4, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bea:	f000 f82d 	bl	8006c48 <_lseek_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	bf15      	itete	ne
 8006bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bfe:	81a3      	strheq	r3, [r4, #12]
 8006c00:	bf18      	it	ne
 8006c02:	81a3      	strhne	r3, [r4, #12]
 8006c04:	bd10      	pop	{r4, pc}

08006c06 <__sclose>:
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 b80d 	b.w	8006c28 <_close_r>

08006c0e <memset>:
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4402      	add	r2, r0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d100      	bne.n	8006c18 <memset+0xa>
 8006c16:	4770      	bx	lr
 8006c18:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1c:	e7f9      	b.n	8006c12 <memset+0x4>
	...

08006c20 <_localeconv_r>:
 8006c20:	4800      	ldr	r0, [pc, #0]	; (8006c24 <_localeconv_r+0x4>)
 8006c22:	4770      	bx	lr
 8006c24:	2000015c 	.word	0x2000015c

08006c28 <_close_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4d05      	ldr	r5, [pc, #20]	; (8006c44 <_close_r+0x1c>)
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fa fad0 	bl	80011d8 <_close>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_close_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_close_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20001d38 	.word	0x20001d38

08006c48 <_lseek_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	4611      	mov	r1, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	4d05      	ldr	r5, [pc, #20]	; (8006c68 <_lseek_r+0x20>)
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fa fae2 	bl	8001220 <_lseek>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_lseek_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_lseek_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20001d38 	.word	0x20001d38

08006c6c <_read_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	2200      	movs	r2, #0
 8006c76:	4d05      	ldr	r5, [pc, #20]	; (8006c8c <_read_r+0x20>)
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7fa fa73 	bl	8001166 <_read>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_read_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_read_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20001d38 	.word	0x20001d38

08006c90 <_write_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4d05      	ldr	r5, [pc, #20]	; (8006cb0 <_write_r+0x20>)
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa fa7e 	bl	80011a0 <_write>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_write_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_write_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	20001d38 	.word	0x20001d38

08006cb4 <__errno>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	; (8006cbc <__errno+0x8>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000068 	.word	0x20000068

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	4d0c      	ldr	r5, [pc, #48]	; (8006cf8 <__libc_init_array+0x38>)
 8006cc6:	4c0d      	ldr	r4, [pc, #52]	; (8006cfc <__libc_init_array+0x3c>)
 8006cc8:	1b64      	subs	r4, r4, r5
 8006cca:	10a4      	asrs	r4, r4, #2
 8006ccc:	42a6      	cmp	r6, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	f003 fbc2 	bl	800a458 <_init>
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4d0a      	ldr	r5, [pc, #40]	; (8006d00 <__libc_init_array+0x40>)
 8006cd8:	4c0a      	ldr	r4, [pc, #40]	; (8006d04 <__libc_init_array+0x44>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	42a6      	cmp	r6, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce8:	4798      	blx	r3
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf2:	4798      	blx	r3
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	0800a958 	.word	0x0800a958
 8006cfc:	0800a958 	.word	0x0800a958
 8006d00:	0800a958 	.word	0x0800a958
 8006d04:	0800a95c 	.word	0x0800a95c

08006d08 <__retarget_lock_init_recursive>:
 8006d08:	4770      	bx	lr

08006d0a <__retarget_lock_acquire_recursive>:
 8006d0a:	4770      	bx	lr

08006d0c <__retarget_lock_release_recursive>:
 8006d0c:	4770      	bx	lr

08006d0e <memchr>:
 8006d0e:	4603      	mov	r3, r0
 8006d10:	b510      	push	{r4, lr}
 8006d12:	b2c9      	uxtb	r1, r1
 8006d14:	4402      	add	r2, r0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	d101      	bne.n	8006d20 <memchr+0x12>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e003      	b.n	8006d28 <memchr+0x1a>
 8006d20:	7804      	ldrb	r4, [r0, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	428c      	cmp	r4, r1
 8006d26:	d1f6      	bne.n	8006d16 <memchr+0x8>
 8006d28:	bd10      	pop	{r4, pc}

08006d2a <memcpy>:
 8006d2a:	440a      	add	r2, r1
 8006d2c:	4291      	cmp	r1, r2
 8006d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d32:	d100      	bne.n	8006d36 <memcpy+0xc>
 8006d34:	4770      	bx	lr
 8006d36:	b510      	push	{r4, lr}
 8006d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d3c:	4291      	cmp	r1, r2
 8006d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d42:	d1f9      	bne.n	8006d38 <memcpy+0xe>
 8006d44:	bd10      	pop	{r4, pc}
	...

08006d48 <nanf>:
 8006d48:	4800      	ldr	r0, [pc, #0]	; (8006d4c <nanf+0x4>)
 8006d4a:	4770      	bx	lr
 8006d4c:	7fc00000 	.word	0x7fc00000

08006d50 <quorem>:
 8006d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	6903      	ldr	r3, [r0, #16]
 8006d56:	690c      	ldr	r4, [r1, #16]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	db7f      	blt.n	8006e5e <quorem+0x10e>
 8006d5e:	3c01      	subs	r4, #1
 8006d60:	f100 0514 	add.w	r5, r0, #20
 8006d64:	f101 0814 	add.w	r8, r1, #20
 8006d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d76:	3301      	adds	r3, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d86:	d331      	bcc.n	8006dec <quorem+0x9c>
 8006d88:	f04f 0e00 	mov.w	lr, #0
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	46ac      	mov	ip, r5
 8006d90:	46f2      	mov	sl, lr
 8006d92:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d96:	b293      	uxth	r3, r2
 8006d98:	fb06 e303 	mla	r3, r6, r3, lr
 8006d9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006da0:	0c1a      	lsrs	r2, r3, #16
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	fb06 220e 	mla	r2, r6, lr, r2
 8006da8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dac:	f8dc a000 	ldr.w	sl, [ip]
 8006db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006db4:	fa1f fa8a 	uxth.w	sl, sl
 8006db8:	4453      	add	r3, sl
 8006dba:	f8dc a000 	ldr.w	sl, [ip]
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dce:	4581      	cmp	r9, r0
 8006dd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dd4:	f84c 3b04 	str.w	r3, [ip], #4
 8006dd8:	d2db      	bcs.n	8006d92 <quorem+0x42>
 8006dda:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dde:	b92b      	cbnz	r3, 8006dec <quorem+0x9c>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	3b04      	subs	r3, #4
 8006de4:	429d      	cmp	r5, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	d32d      	bcc.n	8006e46 <quorem+0xf6>
 8006dea:	613c      	str	r4, [r7, #16]
 8006dec:	4638      	mov	r0, r7
 8006dee:	f001 f9df 	bl	80081b0 <__mcmp>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	db23      	blt.n	8006e3e <quorem+0xee>
 8006df6:	4629      	mov	r1, r5
 8006df8:	2000      	movs	r0, #0
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e00:	f8d1 c000 	ldr.w	ip, [r1]
 8006e04:	b293      	uxth	r3, r2
 8006e06:	1ac3      	subs	r3, r0, r3
 8006e08:	0c12      	lsrs	r2, r2, #16
 8006e0a:	fa1f f08c 	uxth.w	r0, ip
 8006e0e:	4403      	add	r3, r0
 8006e10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e1e:	45c1      	cmp	r9, r8
 8006e20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e24:	f841 3b04 	str.w	r3, [r1], #4
 8006e28:	d2e8      	bcs.n	8006dfc <quorem+0xac>
 8006e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e32:	b922      	cbnz	r2, 8006e3e <quorem+0xee>
 8006e34:	3b04      	subs	r3, #4
 8006e36:	429d      	cmp	r5, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	d30a      	bcc.n	8006e52 <quorem+0x102>
 8006e3c:	613c      	str	r4, [r7, #16]
 8006e3e:	4630      	mov	r0, r6
 8006e40:	b003      	add	sp, #12
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	3b04      	subs	r3, #4
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d1cd      	bne.n	8006dea <quorem+0x9a>
 8006e4e:	3c01      	subs	r4, #1
 8006e50:	e7c8      	b.n	8006de4 <quorem+0x94>
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d1f0      	bne.n	8006e3c <quorem+0xec>
 8006e5a:	3c01      	subs	r4, #1
 8006e5c:	e7eb      	b.n	8006e36 <quorem+0xe6>
 8006e5e:	2000      	movs	r0, #0
 8006e60:	e7ee      	b.n	8006e40 <quorem+0xf0>
 8006e62:	0000      	movs	r0, r0
 8006e64:	0000      	movs	r0, r0
	...

08006e68 <_dtoa_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	461f      	mov	r7, r3
 8006e70:	69c4      	ldr	r4, [r0, #28]
 8006e72:	b099      	sub	sp, #100	; 0x64
 8006e74:	4605      	mov	r5, r0
 8006e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e7e:	b974      	cbnz	r4, 8006e9e <_dtoa_r+0x36>
 8006e80:	2010      	movs	r0, #16
 8006e82:	f000 fe1d 	bl	8007ac0 <malloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	61e8      	str	r0, [r5, #28]
 8006e8a:	b920      	cbnz	r0, 8006e96 <_dtoa_r+0x2e>
 8006e8c:	21ef      	movs	r1, #239	; 0xef
 8006e8e:	4bac      	ldr	r3, [pc, #688]	; (8007140 <_dtoa_r+0x2d8>)
 8006e90:	48ac      	ldr	r0, [pc, #688]	; (8007144 <_dtoa_r+0x2dc>)
 8006e92:	f002 fc47 	bl	8009724 <__assert_func>
 8006e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e9a:	6004      	str	r4, [r0, #0]
 8006e9c:	60c4      	str	r4, [r0, #12]
 8006e9e:	69eb      	ldr	r3, [r5, #28]
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	b151      	cbz	r1, 8006eba <_dtoa_r+0x52>
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4093      	lsls	r3, r2
 8006eaa:	604a      	str	r2, [r1, #4]
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fefa 	bl	8007ca8 <_Bfree>
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	69eb      	ldr	r3, [r5, #28]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	1e3b      	subs	r3, r7, #0
 8006ebc:	bfaf      	iteee	ge
 8006ebe:	2300      	movge	r3, #0
 8006ec0:	2201      	movlt	r2, #1
 8006ec2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	9305      	strlt	r3, [sp, #20]
 8006ec8:	bfa8      	it	ge
 8006eca:	f8c8 3000 	strge.w	r3, [r8]
 8006ece:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006ed2:	4b9d      	ldr	r3, [pc, #628]	; (8007148 <_dtoa_r+0x2e0>)
 8006ed4:	bfb8      	it	lt
 8006ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eda:	ea33 0309 	bics.w	r3, r3, r9
 8006ede:	d119      	bne.n	8006f14 <_dtoa_r+0xac>
 8006ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eec:	4333      	orrs	r3, r6
 8006eee:	f000 8589 	beq.w	8007a04 <_dtoa_r+0xb9c>
 8006ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ef4:	b953      	cbnz	r3, 8006f0c <_dtoa_r+0xa4>
 8006ef6:	4b95      	ldr	r3, [pc, #596]	; (800714c <_dtoa_r+0x2e4>)
 8006ef8:	e023      	b.n	8006f42 <_dtoa_r+0xda>
 8006efa:	4b95      	ldr	r3, [pc, #596]	; (8007150 <_dtoa_r+0x2e8>)
 8006efc:	9303      	str	r3, [sp, #12]
 8006efe:	3308      	adds	r3, #8
 8006f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	b019      	add	sp, #100	; 0x64
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	4b8f      	ldr	r3, [pc, #572]	; (800714c <_dtoa_r+0x2e4>)
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	3303      	adds	r3, #3
 8006f12:	e7f5      	b.n	8006f00 <_dtoa_r+0x98>
 8006f14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	f7f9 fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8006f28:	4680      	mov	r8, r0
 8006f2a:	b160      	cbz	r0, 8006f46 <_dtoa_r+0xde>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8562 	beq.w	80079fe <_dtoa_r+0xb96>
 8006f3a:	4b86      	ldr	r3, [pc, #536]	; (8007154 <_dtoa_r+0x2ec>)
 8006f3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	e7de      	b.n	8006f04 <_dtoa_r+0x9c>
 8006f46:	ab16      	add	r3, sp, #88	; 0x58
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	ab17      	add	r3, sp, #92	; 0x5c
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	4628      	mov	r0, r5
 8006f50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f54:	f001 fa3c 	bl	80083d0 <__d2b>
 8006f58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	d07e      	beq.n	8007060 <_dtoa_r+0x1f8>
 8006f62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f70:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4b75      	ldr	r3, [pc, #468]	; (8007158 <_dtoa_r+0x2f0>)
 8006f82:	f7f9 f8f1 	bl	8000168 <__aeabi_dsub>
 8006f86:	a368      	add	r3, pc, #416	; (adr r3, 8007128 <_dtoa_r+0x2c0>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 faa4 	bl	80004d8 <__aeabi_dmul>
 8006f90:	a367      	add	r3, pc, #412	; (adr r3, 8007130 <_dtoa_r+0x2c8>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f8e9 	bl	800016c <__adddf3>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	f7f9 fa30 	bl	8000404 <__aeabi_i2d>
 8006fa4:	a364      	add	r3, pc, #400	; (adr r3, 8007138 <_dtoa_r+0x2d0>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 fa95 	bl	80004d8 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	f7f9 f8d9 	bl	800016c <__adddf3>
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7f9 fd3b 	bl	8000a38 <__aeabi_d2iz>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4683      	mov	fp, r0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fcf6 	bl	80009bc <__aeabi_dcmplt>
 8006fd0:	b148      	cbz	r0, 8006fe6 <_dtoa_r+0x17e>
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f7f9 fa16 	bl	8000404 <__aeabi_i2d>
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	f7f9 fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8006fe0:	b908      	cbnz	r0, 8006fe6 <_dtoa_r+0x17e>
 8006fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fe6:	f1bb 0f16 	cmp.w	fp, #22
 8006fea:	d857      	bhi.n	800709c <_dtoa_r+0x234>
 8006fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ff0:	4b5a      	ldr	r3, [pc, #360]	; (800715c <_dtoa_r+0x2f4>)
 8006ff2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 fcdf 	bl	80009bc <__aeabi_dcmplt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d04e      	beq.n	80070a0 <_dtoa_r+0x238>
 8007002:	2300      	movs	r3, #0
 8007004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007008:	930f      	str	r3, [sp, #60]	; 0x3c
 800700a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800700c:	1b1b      	subs	r3, r3, r4
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	bf46      	itte	mi
 8007012:	f1c3 0901 	rsbmi	r9, r3, #1
 8007016:	2300      	movmi	r3, #0
 8007018:	f04f 0900 	movpl.w	r9, #0
 800701c:	9209      	str	r2, [sp, #36]	; 0x24
 800701e:	bf48      	it	mi
 8007020:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007022:	f1bb 0f00 	cmp.w	fp, #0
 8007026:	db3d      	blt.n	80070a4 <_dtoa_r+0x23c>
 8007028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800702e:	445b      	add	r3, fp
 8007030:	9309      	str	r3, [sp, #36]	; 0x24
 8007032:	2300      	movs	r3, #0
 8007034:	930a      	str	r3, [sp, #40]	; 0x28
 8007036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007038:	2b09      	cmp	r3, #9
 800703a:	d867      	bhi.n	800710c <_dtoa_r+0x2a4>
 800703c:	2b05      	cmp	r3, #5
 800703e:	bfc4      	itt	gt
 8007040:	3b04      	subgt	r3, #4
 8007042:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007046:	bfc8      	it	gt
 8007048:	2400      	movgt	r4, #0
 800704a:	f1a3 0302 	sub.w	r3, r3, #2
 800704e:	bfd8      	it	le
 8007050:	2401      	movle	r4, #1
 8007052:	2b03      	cmp	r3, #3
 8007054:	f200 8086 	bhi.w	8007164 <_dtoa_r+0x2fc>
 8007058:	e8df f003 	tbb	[pc, r3]
 800705c:	5637392c 	.word	0x5637392c
 8007060:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007064:	441c      	add	r4, r3
 8007066:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800706a:	2b20      	cmp	r3, #32
 800706c:	bfc1      	itttt	gt
 800706e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007072:	fa09 f903 	lslgt.w	r9, r9, r3
 8007076:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800707a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800707e:	bfd6      	itet	le
 8007080:	f1c3 0320 	rsble	r3, r3, #32
 8007084:	ea49 0003 	orrgt.w	r0, r9, r3
 8007088:	fa06 f003 	lslle.w	r0, r6, r3
 800708c:	f7f9 f9aa 	bl	80003e4 <__aeabi_ui2d>
 8007090:	2201      	movs	r2, #1
 8007092:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007096:	3c01      	subs	r4, #1
 8007098:	9213      	str	r2, [sp, #76]	; 0x4c
 800709a:	e76f      	b.n	8006f7c <_dtoa_r+0x114>
 800709c:	2301      	movs	r3, #1
 800709e:	e7b3      	b.n	8007008 <_dtoa_r+0x1a0>
 80070a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80070a2:	e7b2      	b.n	800700a <_dtoa_r+0x1a2>
 80070a4:	f1cb 0300 	rsb	r3, fp, #0
 80070a8:	930a      	str	r3, [sp, #40]	; 0x28
 80070aa:	2300      	movs	r3, #0
 80070ac:	eba9 090b 	sub.w	r9, r9, fp
 80070b0:	930e      	str	r3, [sp, #56]	; 0x38
 80070b2:	e7c0      	b.n	8007036 <_dtoa_r+0x1ce>
 80070b4:	2300      	movs	r3, #0
 80070b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dc55      	bgt.n	800716a <_dtoa_r+0x302>
 80070be:	2301      	movs	r3, #1
 80070c0:	461a      	mov	r2, r3
 80070c2:	9306      	str	r3, [sp, #24]
 80070c4:	9308      	str	r3, [sp, #32]
 80070c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80070c8:	e00b      	b.n	80070e2 <_dtoa_r+0x27a>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7f3      	b.n	80070b6 <_dtoa_r+0x24e>
 80070ce:	2300      	movs	r3, #0
 80070d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070d4:	445b      	add	r3, fp
 80070d6:	9306      	str	r3, [sp, #24]
 80070d8:	3301      	adds	r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	bfb8      	it	lt
 80070e0:	2301      	movlt	r3, #1
 80070e2:	2100      	movs	r1, #0
 80070e4:	2204      	movs	r2, #4
 80070e6:	69e8      	ldr	r0, [r5, #28]
 80070e8:	f102 0614 	add.w	r6, r2, #20
 80070ec:	429e      	cmp	r6, r3
 80070ee:	d940      	bls.n	8007172 <_dtoa_r+0x30a>
 80070f0:	6041      	str	r1, [r0, #4]
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 fd98 	bl	8007c28 <_Balloc>
 80070f8:	9003      	str	r0, [sp, #12]
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d13c      	bne.n	8007178 <_dtoa_r+0x310>
 80070fe:	4602      	mov	r2, r0
 8007100:	f240 11af 	movw	r1, #431	; 0x1af
 8007104:	4b16      	ldr	r3, [pc, #88]	; (8007160 <_dtoa_r+0x2f8>)
 8007106:	e6c3      	b.n	8006e90 <_dtoa_r+0x28>
 8007108:	2301      	movs	r3, #1
 800710a:	e7e1      	b.n	80070d0 <_dtoa_r+0x268>
 800710c:	2401      	movs	r4, #1
 800710e:	2300      	movs	r3, #0
 8007110:	940b      	str	r4, [sp, #44]	; 0x2c
 8007112:	9322      	str	r3, [sp, #136]	; 0x88
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
 8007118:	2200      	movs	r2, #0
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	2312      	movs	r3, #18
 8007120:	e7d1      	b.n	80070c6 <_dtoa_r+0x25e>
 8007122:	bf00      	nop
 8007124:	f3af 8000 	nop.w
 8007128:	636f4361 	.word	0x636f4361
 800712c:	3fd287a7 	.word	0x3fd287a7
 8007130:	8b60c8b3 	.word	0x8b60c8b3
 8007134:	3fc68a28 	.word	0x3fc68a28
 8007138:	509f79fb 	.word	0x509f79fb
 800713c:	3fd34413 	.word	0x3fd34413
 8007140:	0800a574 	.word	0x0800a574
 8007144:	0800a58b 	.word	0x0800a58b
 8007148:	7ff00000 	.word	0x7ff00000
 800714c:	0800a570 	.word	0x0800a570
 8007150:	0800a567 	.word	0x0800a567
 8007154:	0800a53f 	.word	0x0800a53f
 8007158:	3ff80000 	.word	0x3ff80000
 800715c:	0800a678 	.word	0x0800a678
 8007160:	0800a5e3 	.word	0x0800a5e3
 8007164:	2301      	movs	r3, #1
 8007166:	930b      	str	r3, [sp, #44]	; 0x2c
 8007168:	e7d4      	b.n	8007114 <_dtoa_r+0x2ac>
 800716a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800716c:	9306      	str	r3, [sp, #24]
 800716e:	9308      	str	r3, [sp, #32]
 8007170:	e7b7      	b.n	80070e2 <_dtoa_r+0x27a>
 8007172:	3101      	adds	r1, #1
 8007174:	0052      	lsls	r2, r2, #1
 8007176:	e7b7      	b.n	80070e8 <_dtoa_r+0x280>
 8007178:	69eb      	ldr	r3, [r5, #28]
 800717a:	9a03      	ldr	r2, [sp, #12]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	2b0e      	cmp	r3, #14
 8007182:	f200 80a8 	bhi.w	80072d6 <_dtoa_r+0x46e>
 8007186:	2c00      	cmp	r4, #0
 8007188:	f000 80a5 	beq.w	80072d6 <_dtoa_r+0x46e>
 800718c:	f1bb 0f00 	cmp.w	fp, #0
 8007190:	dd34      	ble.n	80071fc <_dtoa_r+0x394>
 8007192:	4b9a      	ldr	r3, [pc, #616]	; (80073fc <_dtoa_r+0x594>)
 8007194:	f00b 020f 	and.w	r2, fp, #15
 8007198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800719c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80071ac:	d016      	beq.n	80071dc <_dtoa_r+0x374>
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b2:	4b93      	ldr	r3, [pc, #588]	; (8007400 <_dtoa_r+0x598>)
 80071b4:	2703      	movs	r7, #3
 80071b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071ba:	f7f9 fab7 	bl	800072c <__aeabi_ddiv>
 80071be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071c2:	f004 040f 	and.w	r4, r4, #15
 80071c6:	4e8e      	ldr	r6, [pc, #568]	; (8007400 <_dtoa_r+0x598>)
 80071c8:	b954      	cbnz	r4, 80071e0 <_dtoa_r+0x378>
 80071ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071d2:	f7f9 faab 	bl	800072c <__aeabi_ddiv>
 80071d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071da:	e029      	b.n	8007230 <_dtoa_r+0x3c8>
 80071dc:	2702      	movs	r7, #2
 80071de:	e7f2      	b.n	80071c6 <_dtoa_r+0x35e>
 80071e0:	07e1      	lsls	r1, r4, #31
 80071e2:	d508      	bpl.n	80071f6 <_dtoa_r+0x38e>
 80071e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071ec:	f7f9 f974 	bl	80004d8 <__aeabi_dmul>
 80071f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071f4:	3701      	adds	r7, #1
 80071f6:	1064      	asrs	r4, r4, #1
 80071f8:	3608      	adds	r6, #8
 80071fa:	e7e5      	b.n	80071c8 <_dtoa_r+0x360>
 80071fc:	f000 80a5 	beq.w	800734a <_dtoa_r+0x4e2>
 8007200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007204:	f1cb 0400 	rsb	r4, fp, #0
 8007208:	4b7c      	ldr	r3, [pc, #496]	; (80073fc <_dtoa_r+0x594>)
 800720a:	f004 020f 	and.w	r2, r4, #15
 800720e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f95f 	bl	80004d8 <__aeabi_dmul>
 800721a:	2702      	movs	r7, #2
 800721c:	2300      	movs	r3, #0
 800721e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007222:	4e77      	ldr	r6, [pc, #476]	; (8007400 <_dtoa_r+0x598>)
 8007224:	1124      	asrs	r4, r4, #4
 8007226:	2c00      	cmp	r4, #0
 8007228:	f040 8084 	bne.w	8007334 <_dtoa_r+0x4cc>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1d2      	bne.n	80071d6 <_dtoa_r+0x36e>
 8007230:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007234:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8087 	beq.w	800734e <_dtoa_r+0x4e6>
 8007240:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007244:	2200      	movs	r2, #0
 8007246:	4b6f      	ldr	r3, [pc, #444]	; (8007404 <_dtoa_r+0x59c>)
 8007248:	f7f9 fbb8 	bl	80009bc <__aeabi_dcmplt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d07e      	beq.n	800734e <_dtoa_r+0x4e6>
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d07b      	beq.n	800734e <_dtoa_r+0x4e6>
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	dd38      	ble.n	80072ce <_dtoa_r+0x466>
 800725c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007260:	2200      	movs	r2, #0
 8007262:	4b69      	ldr	r3, [pc, #420]	; (8007408 <_dtoa_r+0x5a0>)
 8007264:	f7f9 f938 	bl	80004d8 <__aeabi_dmul>
 8007268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800726c:	9c06      	ldr	r4, [sp, #24]
 800726e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007272:	3701      	adds	r7, #1
 8007274:	4638      	mov	r0, r7
 8007276:	f7f9 f8c5 	bl	8000404 <__aeabi_i2d>
 800727a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727e:	f7f9 f92b 	bl	80004d8 <__aeabi_dmul>
 8007282:	2200      	movs	r2, #0
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <_dtoa_r+0x5a4>)
 8007286:	f7f8 ff71 	bl	800016c <__adddf3>
 800728a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800728e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007292:	9611      	str	r6, [sp, #68]	; 0x44
 8007294:	2c00      	cmp	r4, #0
 8007296:	d15d      	bne.n	8007354 <_dtoa_r+0x4ec>
 8007298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800729c:	2200      	movs	r2, #0
 800729e:	4b5c      	ldr	r3, [pc, #368]	; (8007410 <_dtoa_r+0x5a8>)
 80072a0:	f7f8 ff62 	bl	8000168 <__aeabi_dsub>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ac:	4633      	mov	r3, r6
 80072ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072b0:	f7f9 fba2 	bl	80009f8 <__aeabi_dcmpgt>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f040 8295 	bne.w	80077e4 <_dtoa_r+0x97c>
 80072ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072c4:	f7f9 fb7a 	bl	80009bc <__aeabi_dcmplt>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f040 8289 	bne.w	80077e0 <_dtoa_r+0x978>
 80072ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80072d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f2c0 8151 	blt.w	8007580 <_dtoa_r+0x718>
 80072de:	f1bb 0f0e 	cmp.w	fp, #14
 80072e2:	f300 814d 	bgt.w	8007580 <_dtoa_r+0x718>
 80072e6:	4b45      	ldr	r3, [pc, #276]	; (80073fc <_dtoa_r+0x594>)
 80072e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80072f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f280 80da 	bge.w	80074b0 <_dtoa_r+0x648>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f300 80d6 	bgt.w	80074b0 <_dtoa_r+0x648>
 8007304:	f040 826b 	bne.w	80077de <_dtoa_r+0x976>
 8007308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800730c:	2200      	movs	r2, #0
 800730e:	4b40      	ldr	r3, [pc, #256]	; (8007410 <_dtoa_r+0x5a8>)
 8007310:	f7f9 f8e2 	bl	80004d8 <__aeabi_dmul>
 8007314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007318:	f7f9 fb64 	bl	80009e4 <__aeabi_dcmpge>
 800731c:	9c08      	ldr	r4, [sp, #32]
 800731e:	4626      	mov	r6, r4
 8007320:	2800      	cmp	r0, #0
 8007322:	f040 8241 	bne.w	80077a8 <_dtoa_r+0x940>
 8007326:	2331      	movs	r3, #49	; 0x31
 8007328:	9f03      	ldr	r7, [sp, #12]
 800732a:	f10b 0b01 	add.w	fp, fp, #1
 800732e:	f807 3b01 	strb.w	r3, [r7], #1
 8007332:	e23d      	b.n	80077b0 <_dtoa_r+0x948>
 8007334:	07e2      	lsls	r2, r4, #31
 8007336:	d505      	bpl.n	8007344 <_dtoa_r+0x4dc>
 8007338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800733c:	f7f9 f8cc 	bl	80004d8 <__aeabi_dmul>
 8007340:	2301      	movs	r3, #1
 8007342:	3701      	adds	r7, #1
 8007344:	1064      	asrs	r4, r4, #1
 8007346:	3608      	adds	r6, #8
 8007348:	e76d      	b.n	8007226 <_dtoa_r+0x3be>
 800734a:	2702      	movs	r7, #2
 800734c:	e770      	b.n	8007230 <_dtoa_r+0x3c8>
 800734e:	46d8      	mov	r8, fp
 8007350:	9c08      	ldr	r4, [sp, #32]
 8007352:	e78f      	b.n	8007274 <_dtoa_r+0x40c>
 8007354:	9903      	ldr	r1, [sp, #12]
 8007356:	4b29      	ldr	r3, [pc, #164]	; (80073fc <_dtoa_r+0x594>)
 8007358:	4421      	add	r1, r4
 800735a:	9112      	str	r1, [sp, #72]	; 0x48
 800735c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800735e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007362:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800736a:	2900      	cmp	r1, #0
 800736c:	d054      	beq.n	8007418 <_dtoa_r+0x5b0>
 800736e:	2000      	movs	r0, #0
 8007370:	4928      	ldr	r1, [pc, #160]	; (8007414 <_dtoa_r+0x5ac>)
 8007372:	f7f9 f9db 	bl	800072c <__aeabi_ddiv>
 8007376:	463b      	mov	r3, r7
 8007378:	4632      	mov	r2, r6
 800737a:	f7f8 fef5 	bl	8000168 <__aeabi_dsub>
 800737e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007382:	9f03      	ldr	r7, [sp, #12]
 8007384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007388:	f7f9 fb56 	bl	8000a38 <__aeabi_d2iz>
 800738c:	4604      	mov	r4, r0
 800738e:	f7f9 f839 	bl	8000404 <__aeabi_i2d>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800739a:	f7f8 fee5 	bl	8000168 <__aeabi_dsub>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	3430      	adds	r4, #48	; 0x30
 80073a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ac:	f807 4b01 	strb.w	r4, [r7], #1
 80073b0:	f7f9 fb04 	bl	80009bc <__aeabi_dcmplt>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d173      	bne.n	80074a0 <_dtoa_r+0x638>
 80073b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073bc:	2000      	movs	r0, #0
 80073be:	4911      	ldr	r1, [pc, #68]	; (8007404 <_dtoa_r+0x59c>)
 80073c0:	f7f8 fed2 	bl	8000168 <__aeabi_dsub>
 80073c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073c8:	f7f9 faf8 	bl	80009bc <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 80b6 	bne.w	800753e <_dtoa_r+0x6d6>
 80073d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073d4:	429f      	cmp	r7, r3
 80073d6:	f43f af7a 	beq.w	80072ce <_dtoa_r+0x466>
 80073da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073de:	2200      	movs	r2, #0
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <_dtoa_r+0x5a0>)
 80073e2:	f7f9 f879 	bl	80004d8 <__aeabi_dmul>
 80073e6:	2200      	movs	r2, #0
 80073e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <_dtoa_r+0x5a0>)
 80073f2:	f7f9 f871 	bl	80004d8 <__aeabi_dmul>
 80073f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fa:	e7c3      	b.n	8007384 <_dtoa_r+0x51c>
 80073fc:	0800a678 	.word	0x0800a678
 8007400:	0800a650 	.word	0x0800a650
 8007404:	3ff00000 	.word	0x3ff00000
 8007408:	40240000 	.word	0x40240000
 800740c:	401c0000 	.word	0x401c0000
 8007410:	40140000 	.word	0x40140000
 8007414:	3fe00000 	.word	0x3fe00000
 8007418:	4630      	mov	r0, r6
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 f85c 	bl	80004d8 <__aeabi_dmul>
 8007420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007422:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007426:	9c03      	ldr	r4, [sp, #12]
 8007428:	9314      	str	r3, [sp, #80]	; 0x50
 800742a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742e:	f7f9 fb03 	bl	8000a38 <__aeabi_d2iz>
 8007432:	9015      	str	r0, [sp, #84]	; 0x54
 8007434:	f7f8 ffe6 	bl	8000404 <__aeabi_i2d>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007440:	f7f8 fe92 	bl	8000168 <__aeabi_dsub>
 8007444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007446:	4606      	mov	r6, r0
 8007448:	3330      	adds	r3, #48	; 0x30
 800744a:	f804 3b01 	strb.w	r3, [r4], #1
 800744e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007450:	460f      	mov	r7, r1
 8007452:	429c      	cmp	r4, r3
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	d124      	bne.n	80074a4 <_dtoa_r+0x63c>
 800745a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800745e:	4baf      	ldr	r3, [pc, #700]	; (800771c <_dtoa_r+0x8b4>)
 8007460:	f7f8 fe84 	bl	800016c <__adddf3>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4630      	mov	r0, r6
 800746a:	4639      	mov	r1, r7
 800746c:	f7f9 fac4 	bl	80009f8 <__aeabi_dcmpgt>
 8007470:	2800      	cmp	r0, #0
 8007472:	d163      	bne.n	800753c <_dtoa_r+0x6d4>
 8007474:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007478:	2000      	movs	r0, #0
 800747a:	49a8      	ldr	r1, [pc, #672]	; (800771c <_dtoa_r+0x8b4>)
 800747c:	f7f8 fe74 	bl	8000168 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f9 fa98 	bl	80009bc <__aeabi_dcmplt>
 800748c:	2800      	cmp	r0, #0
 800748e:	f43f af1e 	beq.w	80072ce <_dtoa_r+0x466>
 8007492:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007494:	1e7b      	subs	r3, r7, #1
 8007496:	9314      	str	r3, [sp, #80]	; 0x50
 8007498:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800749c:	2b30      	cmp	r3, #48	; 0x30
 800749e:	d0f8      	beq.n	8007492 <_dtoa_r+0x62a>
 80074a0:	46c3      	mov	fp, r8
 80074a2:	e03b      	b.n	800751c <_dtoa_r+0x6b4>
 80074a4:	4b9e      	ldr	r3, [pc, #632]	; (8007720 <_dtoa_r+0x8b8>)
 80074a6:	f7f9 f817 	bl	80004d8 <__aeabi_dmul>
 80074aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ae:	e7bc      	b.n	800742a <_dtoa_r+0x5c2>
 80074b0:	9f03      	ldr	r7, [sp, #12]
 80074b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 f935 	bl	800072c <__aeabi_ddiv>
 80074c2:	f7f9 fab9 	bl	8000a38 <__aeabi_d2iz>
 80074c6:	4604      	mov	r4, r0
 80074c8:	f7f8 ff9c 	bl	8000404 <__aeabi_i2d>
 80074cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d0:	f7f9 f802 	bl	80004d8 <__aeabi_dmul>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f8 fe44 	bl	8000168 <__aeabi_dsub>
 80074e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074e4:	f807 6b01 	strb.w	r6, [r7], #1
 80074e8:	9e03      	ldr	r6, [sp, #12]
 80074ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80074ee:	1bbe      	subs	r6, r7, r6
 80074f0:	45b4      	cmp	ip, r6
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	d136      	bne.n	8007566 <_dtoa_r+0x6fe>
 80074f8:	f7f8 fe38 	bl	800016c <__adddf3>
 80074fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	f7f9 fa78 	bl	80009f8 <__aeabi_dcmpgt>
 8007508:	bb58      	cbnz	r0, 8007562 <_dtoa_r+0x6fa>
 800750a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800750e:	4640      	mov	r0, r8
 8007510:	4649      	mov	r1, r9
 8007512:	f7f9 fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8007516:	b108      	cbz	r0, 800751c <_dtoa_r+0x6b4>
 8007518:	07e3      	lsls	r3, r4, #31
 800751a:	d422      	bmi.n	8007562 <_dtoa_r+0x6fa>
 800751c:	4651      	mov	r1, sl
 800751e:	4628      	mov	r0, r5
 8007520:	f000 fbc2 	bl	8007ca8 <_Bfree>
 8007524:	2300      	movs	r3, #0
 8007526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007528:	703b      	strb	r3, [r7, #0]
 800752a:	f10b 0301 	add.w	r3, fp, #1
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007532:	2b00      	cmp	r3, #0
 8007534:	f43f ace6 	beq.w	8006f04 <_dtoa_r+0x9c>
 8007538:	601f      	str	r7, [r3, #0]
 800753a:	e4e3      	b.n	8006f04 <_dtoa_r+0x9c>
 800753c:	4627      	mov	r7, r4
 800753e:	463b      	mov	r3, r7
 8007540:	461f      	mov	r7, r3
 8007542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007546:	2a39      	cmp	r2, #57	; 0x39
 8007548:	d107      	bne.n	800755a <_dtoa_r+0x6f2>
 800754a:	9a03      	ldr	r2, [sp, #12]
 800754c:	429a      	cmp	r2, r3
 800754e:	d1f7      	bne.n	8007540 <_dtoa_r+0x6d8>
 8007550:	2230      	movs	r2, #48	; 0x30
 8007552:	9903      	ldr	r1, [sp, #12]
 8007554:	f108 0801 	add.w	r8, r8, #1
 8007558:	700a      	strb	r2, [r1, #0]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	3201      	adds	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e79e      	b.n	80074a0 <_dtoa_r+0x638>
 8007562:	46d8      	mov	r8, fp
 8007564:	e7eb      	b.n	800753e <_dtoa_r+0x6d6>
 8007566:	2200      	movs	r2, #0
 8007568:	4b6d      	ldr	r3, [pc, #436]	; (8007720 <_dtoa_r+0x8b8>)
 800756a:	f7f8 ffb5 	bl	80004d8 <__aeabi_dmul>
 800756e:	2200      	movs	r2, #0
 8007570:	2300      	movs	r3, #0
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	f7f9 fa17 	bl	80009a8 <__aeabi_dcmpeq>
 800757a:	2800      	cmp	r0, #0
 800757c:	d09b      	beq.n	80074b6 <_dtoa_r+0x64e>
 800757e:	e7cd      	b.n	800751c <_dtoa_r+0x6b4>
 8007580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007582:	2a00      	cmp	r2, #0
 8007584:	f000 80c4 	beq.w	8007710 <_dtoa_r+0x8a8>
 8007588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800758a:	2a01      	cmp	r2, #1
 800758c:	f300 80a8 	bgt.w	80076e0 <_dtoa_r+0x878>
 8007590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007592:	2a00      	cmp	r2, #0
 8007594:	f000 80a0 	beq.w	80076d8 <_dtoa_r+0x870>
 8007598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800759c:	464f      	mov	r7, r9
 800759e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a2:	2101      	movs	r1, #1
 80075a4:	441a      	add	r2, r3
 80075a6:	4628      	mov	r0, r5
 80075a8:	4499      	add	r9, r3
 80075aa:	9209      	str	r2, [sp, #36]	; 0x24
 80075ac:	f000 fc7c 	bl	8007ea8 <__i2b>
 80075b0:	4606      	mov	r6, r0
 80075b2:	b15f      	cbz	r7, 80075cc <_dtoa_r+0x764>
 80075b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd08      	ble.n	80075cc <_dtoa_r+0x764>
 80075ba:	42bb      	cmp	r3, r7
 80075bc:	bfa8      	it	ge
 80075be:	463b      	movge	r3, r7
 80075c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c2:	eba9 0903 	sub.w	r9, r9, r3
 80075c6:	1aff      	subs	r7, r7, r3
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ce:	b1f3      	cbz	r3, 800760e <_dtoa_r+0x7a6>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80a0 	beq.w	8007718 <_dtoa_r+0x8b0>
 80075d8:	2c00      	cmp	r4, #0
 80075da:	dd10      	ble.n	80075fe <_dtoa_r+0x796>
 80075dc:	4631      	mov	r1, r6
 80075de:	4622      	mov	r2, r4
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 fd1f 	bl	8008024 <__pow5mult>
 80075e6:	4652      	mov	r2, sl
 80075e8:	4601      	mov	r1, r0
 80075ea:	4606      	mov	r6, r0
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 fc71 	bl	8007ed4 <__multiply>
 80075f2:	4680      	mov	r8, r0
 80075f4:	4651      	mov	r1, sl
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 fb56 	bl	8007ca8 <_Bfree>
 80075fc:	46c2      	mov	sl, r8
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	1b1a      	subs	r2, r3, r4
 8007602:	d004      	beq.n	800760e <_dtoa_r+0x7a6>
 8007604:	4651      	mov	r1, sl
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fd0c 	bl	8008024 <__pow5mult>
 800760c:	4682      	mov	sl, r0
 800760e:	2101      	movs	r1, #1
 8007610:	4628      	mov	r0, r5
 8007612:	f000 fc49 	bl	8007ea8 <__i2b>
 8007616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007618:	4604      	mov	r4, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	f340 8082 	ble.w	8007724 <_dtoa_r+0x8bc>
 8007620:	461a      	mov	r2, r3
 8007622:	4601      	mov	r1, r0
 8007624:	4628      	mov	r0, r5
 8007626:	f000 fcfd 	bl	8008024 <__pow5mult>
 800762a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800762c:	4604      	mov	r4, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	dd7b      	ble.n	800772a <_dtoa_r+0x8c2>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	f000 fbe5 	bl	8007e0c <__hi0bits>
 8007642:	f1c0 0020 	rsb	r0, r0, #32
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	4418      	add	r0, r3
 800764a:	f010 001f 	ands.w	r0, r0, #31
 800764e:	f000 8092 	beq.w	8007776 <_dtoa_r+0x90e>
 8007652:	f1c0 0320 	rsb	r3, r0, #32
 8007656:	2b04      	cmp	r3, #4
 8007658:	f340 8085 	ble.w	8007766 <_dtoa_r+0x8fe>
 800765c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765e:	f1c0 001c 	rsb	r0, r0, #28
 8007662:	4403      	add	r3, r0
 8007664:	4481      	add	r9, r0
 8007666:	4407      	add	r7, r0
 8007668:	9309      	str	r3, [sp, #36]	; 0x24
 800766a:	f1b9 0f00 	cmp.w	r9, #0
 800766e:	dd05      	ble.n	800767c <_dtoa_r+0x814>
 8007670:	4651      	mov	r1, sl
 8007672:	464a      	mov	r2, r9
 8007674:	4628      	mov	r0, r5
 8007676:	f000 fd2f 	bl	80080d8 <__lshift>
 800767a:	4682      	mov	sl, r0
 800767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767e:	2b00      	cmp	r3, #0
 8007680:	dd05      	ble.n	800768e <_dtoa_r+0x826>
 8007682:	4621      	mov	r1, r4
 8007684:	461a      	mov	r2, r3
 8007686:	4628      	mov	r0, r5
 8007688:	f000 fd26 	bl	80080d8 <__lshift>
 800768c:	4604      	mov	r4, r0
 800768e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d072      	beq.n	800777a <_dtoa_r+0x912>
 8007694:	4621      	mov	r1, r4
 8007696:	4650      	mov	r0, sl
 8007698:	f000 fd8a 	bl	80081b0 <__mcmp>
 800769c:	2800      	cmp	r0, #0
 800769e:	da6c      	bge.n	800777a <_dtoa_r+0x912>
 80076a0:	2300      	movs	r3, #0
 80076a2:	4651      	mov	r1, sl
 80076a4:	220a      	movs	r2, #10
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fb20 	bl	8007cec <__multadd>
 80076ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ae:	4682      	mov	sl, r0
 80076b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 81ac 	beq.w	8007a12 <_dtoa_r+0xbaa>
 80076ba:	2300      	movs	r3, #0
 80076bc:	4631      	mov	r1, r6
 80076be:	220a      	movs	r2, #10
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 fb13 	bl	8007cec <__multadd>
 80076c6:	9b06      	ldr	r3, [sp, #24]
 80076c8:	4606      	mov	r6, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f300 8093 	bgt.w	80077f6 <_dtoa_r+0x98e>
 80076d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	dc59      	bgt.n	800778a <_dtoa_r+0x922>
 80076d6:	e08e      	b.n	80077f6 <_dtoa_r+0x98e>
 80076d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076de:	e75d      	b.n	800759c <_dtoa_r+0x734>
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	1e5c      	subs	r4, r3, #1
 80076e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	bfbf      	itttt	lt
 80076ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80076ee:	1ae3      	sublt	r3, r4, r3
 80076f0:	18d2      	addlt	r2, r2, r3
 80076f2:	bfa8      	it	ge
 80076f4:	1b1c      	subge	r4, r3, r4
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	bfbe      	ittt	lt
 80076fa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80076fc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80076fe:	2400      	movlt	r4, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfb5      	itete	lt
 8007704:	eba9 0703 	sublt.w	r7, r9, r3
 8007708:	464f      	movge	r7, r9
 800770a:	2300      	movlt	r3, #0
 800770c:	9b08      	ldrge	r3, [sp, #32]
 800770e:	e747      	b.n	80075a0 <_dtoa_r+0x738>
 8007710:	464f      	mov	r7, r9
 8007712:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007716:	e74c      	b.n	80075b2 <_dtoa_r+0x74a>
 8007718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771a:	e773      	b.n	8007604 <_dtoa_r+0x79c>
 800771c:	3fe00000 	.word	0x3fe00000
 8007720:	40240000 	.word	0x40240000
 8007724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007726:	2b01      	cmp	r3, #1
 8007728:	dc18      	bgt.n	800775c <_dtoa_r+0x8f4>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	b9b3      	cbnz	r3, 800775c <_dtoa_r+0x8f4>
 800772e:	9b05      	ldr	r3, [sp, #20]
 8007730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007734:	b993      	cbnz	r3, 800775c <_dtoa_r+0x8f4>
 8007736:	9b05      	ldr	r3, [sp, #20]
 8007738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800773c:	0d1b      	lsrs	r3, r3, #20
 800773e:	051b      	lsls	r3, r3, #20
 8007740:	b17b      	cbz	r3, 8007762 <_dtoa_r+0x8fa>
 8007742:	f04f 0801 	mov.w	r8, #1
 8007746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007748:	f109 0901 	add.w	r9, r9, #1
 800774c:	3301      	adds	r3, #1
 800774e:	9309      	str	r3, [sp, #36]	; 0x24
 8007750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f af6f 	bne.w	8007636 <_dtoa_r+0x7ce>
 8007758:	2001      	movs	r0, #1
 800775a:	e774      	b.n	8007646 <_dtoa_r+0x7de>
 800775c:	f04f 0800 	mov.w	r8, #0
 8007760:	e7f6      	b.n	8007750 <_dtoa_r+0x8e8>
 8007762:	4698      	mov	r8, r3
 8007764:	e7f4      	b.n	8007750 <_dtoa_r+0x8e8>
 8007766:	d080      	beq.n	800766a <_dtoa_r+0x802>
 8007768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800776a:	331c      	adds	r3, #28
 800776c:	441a      	add	r2, r3
 800776e:	4499      	add	r9, r3
 8007770:	441f      	add	r7, r3
 8007772:	9209      	str	r2, [sp, #36]	; 0x24
 8007774:	e779      	b.n	800766a <_dtoa_r+0x802>
 8007776:	4603      	mov	r3, r0
 8007778:	e7f6      	b.n	8007768 <_dtoa_r+0x900>
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dc34      	bgt.n	80077ea <_dtoa_r+0x982>
 8007780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007782:	2b02      	cmp	r3, #2
 8007784:	dd31      	ble.n	80077ea <_dtoa_r+0x982>
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	9306      	str	r3, [sp, #24]
 800778a:	9b06      	ldr	r3, [sp, #24]
 800778c:	b963      	cbnz	r3, 80077a8 <_dtoa_r+0x940>
 800778e:	4621      	mov	r1, r4
 8007790:	2205      	movs	r2, #5
 8007792:	4628      	mov	r0, r5
 8007794:	f000 faaa 	bl	8007cec <__multadd>
 8007798:	4601      	mov	r1, r0
 800779a:	4604      	mov	r4, r0
 800779c:	4650      	mov	r0, sl
 800779e:	f000 fd07 	bl	80081b0 <__mcmp>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f73f adbf 	bgt.w	8007326 <_dtoa_r+0x4be>
 80077a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077aa:	9f03      	ldr	r7, [sp, #12]
 80077ac:	ea6f 0b03 	mvn.w	fp, r3
 80077b0:	f04f 0800 	mov.w	r8, #0
 80077b4:	4621      	mov	r1, r4
 80077b6:	4628      	mov	r0, r5
 80077b8:	f000 fa76 	bl	8007ca8 <_Bfree>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	f43f aead 	beq.w	800751c <_dtoa_r+0x6b4>
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d005      	beq.n	80077d4 <_dtoa_r+0x96c>
 80077c8:	45b0      	cmp	r8, r6
 80077ca:	d003      	beq.n	80077d4 <_dtoa_r+0x96c>
 80077cc:	4641      	mov	r1, r8
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 fa6a 	bl	8007ca8 <_Bfree>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fa66 	bl	8007ca8 <_Bfree>
 80077dc:	e69e      	b.n	800751c <_dtoa_r+0x6b4>
 80077de:	2400      	movs	r4, #0
 80077e0:	4626      	mov	r6, r4
 80077e2:	e7e1      	b.n	80077a8 <_dtoa_r+0x940>
 80077e4:	46c3      	mov	fp, r8
 80077e6:	4626      	mov	r6, r4
 80077e8:	e59d      	b.n	8007326 <_dtoa_r+0x4be>
 80077ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80c8 	beq.w	8007982 <_dtoa_r+0xb1a>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	2f00      	cmp	r7, #0
 80077f8:	dd05      	ble.n	8007806 <_dtoa_r+0x99e>
 80077fa:	4631      	mov	r1, r6
 80077fc:	463a      	mov	r2, r7
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 fc6a 	bl	80080d8 <__lshift>
 8007804:	4606      	mov	r6, r0
 8007806:	f1b8 0f00 	cmp.w	r8, #0
 800780a:	d05b      	beq.n	80078c4 <_dtoa_r+0xa5c>
 800780c:	4628      	mov	r0, r5
 800780e:	6871      	ldr	r1, [r6, #4]
 8007810:	f000 fa0a 	bl	8007c28 <_Balloc>
 8007814:	4607      	mov	r7, r0
 8007816:	b928      	cbnz	r0, 8007824 <_dtoa_r+0x9bc>
 8007818:	4602      	mov	r2, r0
 800781a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800781e:	4b81      	ldr	r3, [pc, #516]	; (8007a24 <_dtoa_r+0xbbc>)
 8007820:	f7ff bb36 	b.w	8006e90 <_dtoa_r+0x28>
 8007824:	6932      	ldr	r2, [r6, #16]
 8007826:	f106 010c 	add.w	r1, r6, #12
 800782a:	3202      	adds	r2, #2
 800782c:	0092      	lsls	r2, r2, #2
 800782e:	300c      	adds	r0, #12
 8007830:	f7ff fa7b 	bl	8006d2a <memcpy>
 8007834:	2201      	movs	r2, #1
 8007836:	4639      	mov	r1, r7
 8007838:	4628      	mov	r0, r5
 800783a:	f000 fc4d 	bl	80080d8 <__lshift>
 800783e:	46b0      	mov	r8, r6
 8007840:	4606      	mov	r6, r0
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	9a03      	ldr	r2, [sp, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	9308      	str	r3, [sp, #32]
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	4413      	add	r3, r2
 800784e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	930a      	str	r3, [sp, #40]	; 0x28
 8007858:	9b08      	ldr	r3, [sp, #32]
 800785a:	4621      	mov	r1, r4
 800785c:	3b01      	subs	r3, #1
 800785e:	4650      	mov	r0, sl
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	f7ff fa75 	bl	8006d50 <quorem>
 8007866:	4641      	mov	r1, r8
 8007868:	9006      	str	r0, [sp, #24]
 800786a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800786e:	4650      	mov	r0, sl
 8007870:	f000 fc9e 	bl	80081b0 <__mcmp>
 8007874:	4632      	mov	r2, r6
 8007876:	9009      	str	r0, [sp, #36]	; 0x24
 8007878:	4621      	mov	r1, r4
 800787a:	4628      	mov	r0, r5
 800787c:	f000 fcb4 	bl	80081e8 <__mdiff>
 8007880:	68c2      	ldr	r2, [r0, #12]
 8007882:	4607      	mov	r7, r0
 8007884:	bb02      	cbnz	r2, 80078c8 <_dtoa_r+0xa60>
 8007886:	4601      	mov	r1, r0
 8007888:	4650      	mov	r0, sl
 800788a:	f000 fc91 	bl	80081b0 <__mcmp>
 800788e:	4602      	mov	r2, r0
 8007890:	4639      	mov	r1, r7
 8007892:	4628      	mov	r0, r5
 8007894:	920c      	str	r2, [sp, #48]	; 0x30
 8007896:	f000 fa07 	bl	8007ca8 <_Bfree>
 800789a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800789c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800789e:	9f08      	ldr	r7, [sp, #32]
 80078a0:	ea43 0102 	orr.w	r1, r3, r2
 80078a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a6:	4319      	orrs	r1, r3
 80078a8:	d110      	bne.n	80078cc <_dtoa_r+0xa64>
 80078aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078ae:	d029      	beq.n	8007904 <_dtoa_r+0xa9c>
 80078b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dd02      	ble.n	80078bc <_dtoa_r+0xa54>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	f883 9000 	strb.w	r9, [r3]
 80078c2:	e777      	b.n	80077b4 <_dtoa_r+0x94c>
 80078c4:	4630      	mov	r0, r6
 80078c6:	e7ba      	b.n	800783e <_dtoa_r+0x9d6>
 80078c8:	2201      	movs	r2, #1
 80078ca:	e7e1      	b.n	8007890 <_dtoa_r+0xa28>
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	db04      	blt.n	80078dc <_dtoa_r+0xa74>
 80078d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078d4:	430b      	orrs	r3, r1
 80078d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078d8:	430b      	orrs	r3, r1
 80078da:	d120      	bne.n	800791e <_dtoa_r+0xab6>
 80078dc:	2a00      	cmp	r2, #0
 80078de:	dded      	ble.n	80078bc <_dtoa_r+0xa54>
 80078e0:	4651      	mov	r1, sl
 80078e2:	2201      	movs	r2, #1
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 fbf7 	bl	80080d8 <__lshift>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4682      	mov	sl, r0
 80078ee:	f000 fc5f 	bl	80081b0 <__mcmp>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	dc03      	bgt.n	80078fe <_dtoa_r+0xa96>
 80078f6:	d1e1      	bne.n	80078bc <_dtoa_r+0xa54>
 80078f8:	f019 0f01 	tst.w	r9, #1
 80078fc:	d0de      	beq.n	80078bc <_dtoa_r+0xa54>
 80078fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007902:	d1d8      	bne.n	80078b6 <_dtoa_r+0xa4e>
 8007904:	2339      	movs	r3, #57	; 0x39
 8007906:	9a04      	ldr	r2, [sp, #16]
 8007908:	7013      	strb	r3, [r2, #0]
 800790a:	463b      	mov	r3, r7
 800790c:	461f      	mov	r7, r3
 800790e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007912:	3b01      	subs	r3, #1
 8007914:	2a39      	cmp	r2, #57	; 0x39
 8007916:	d06b      	beq.n	80079f0 <_dtoa_r+0xb88>
 8007918:	3201      	adds	r2, #1
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	e74a      	b.n	80077b4 <_dtoa_r+0x94c>
 800791e:	2a00      	cmp	r2, #0
 8007920:	dd07      	ble.n	8007932 <_dtoa_r+0xaca>
 8007922:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007926:	d0ed      	beq.n	8007904 <_dtoa_r+0xa9c>
 8007928:	9a04      	ldr	r2, [sp, #16]
 800792a:	f109 0301 	add.w	r3, r9, #1
 800792e:	7013      	strb	r3, [r2, #0]
 8007930:	e740      	b.n	80077b4 <_dtoa_r+0x94c>
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007936:	f803 9c01 	strb.w	r9, [r3, #-1]
 800793a:	4293      	cmp	r3, r2
 800793c:	d042      	beq.n	80079c4 <_dtoa_r+0xb5c>
 800793e:	4651      	mov	r1, sl
 8007940:	2300      	movs	r3, #0
 8007942:	220a      	movs	r2, #10
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f9d1 	bl	8007cec <__multadd>
 800794a:	45b0      	cmp	r8, r6
 800794c:	4682      	mov	sl, r0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	f04f 020a 	mov.w	r2, #10
 8007956:	4641      	mov	r1, r8
 8007958:	4628      	mov	r0, r5
 800795a:	d107      	bne.n	800796c <_dtoa_r+0xb04>
 800795c:	f000 f9c6 	bl	8007cec <__multadd>
 8007960:	4680      	mov	r8, r0
 8007962:	4606      	mov	r6, r0
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	3301      	adds	r3, #1
 8007968:	9308      	str	r3, [sp, #32]
 800796a:	e775      	b.n	8007858 <_dtoa_r+0x9f0>
 800796c:	f000 f9be 	bl	8007cec <__multadd>
 8007970:	4631      	mov	r1, r6
 8007972:	4680      	mov	r8, r0
 8007974:	2300      	movs	r3, #0
 8007976:	220a      	movs	r2, #10
 8007978:	4628      	mov	r0, r5
 800797a:	f000 f9b7 	bl	8007cec <__multadd>
 800797e:	4606      	mov	r6, r0
 8007980:	e7f0      	b.n	8007964 <_dtoa_r+0xafc>
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	9306      	str	r3, [sp, #24]
 8007986:	9f03      	ldr	r7, [sp, #12]
 8007988:	4621      	mov	r1, r4
 800798a:	4650      	mov	r0, sl
 800798c:	f7ff f9e0 	bl	8006d50 <quorem>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007996:	f807 9b01 	strb.w	r9, [r7], #1
 800799a:	1afa      	subs	r2, r7, r3
 800799c:	9b06      	ldr	r3, [sp, #24]
 800799e:	4293      	cmp	r3, r2
 80079a0:	dd07      	ble.n	80079b2 <_dtoa_r+0xb4a>
 80079a2:	4651      	mov	r1, sl
 80079a4:	2300      	movs	r3, #0
 80079a6:	220a      	movs	r2, #10
 80079a8:	4628      	mov	r0, r5
 80079aa:	f000 f99f 	bl	8007cec <__multadd>
 80079ae:	4682      	mov	sl, r0
 80079b0:	e7ea      	b.n	8007988 <_dtoa_r+0xb20>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	f04f 0800 	mov.w	r8, #0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfcc      	ite	gt
 80079bc:	461f      	movgt	r7, r3
 80079be:	2701      	movle	r7, #1
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	441f      	add	r7, r3
 80079c4:	4651      	mov	r1, sl
 80079c6:	2201      	movs	r2, #1
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 fb85 	bl	80080d8 <__lshift>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4682      	mov	sl, r0
 80079d2:	f000 fbed 	bl	80081b0 <__mcmp>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	dc97      	bgt.n	800790a <_dtoa_r+0xaa2>
 80079da:	d102      	bne.n	80079e2 <_dtoa_r+0xb7a>
 80079dc:	f019 0f01 	tst.w	r9, #1
 80079e0:	d193      	bne.n	800790a <_dtoa_r+0xaa2>
 80079e2:	463b      	mov	r3, r7
 80079e4:	461f      	mov	r7, r3
 80079e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ea:	2a30      	cmp	r2, #48	; 0x30
 80079ec:	d0fa      	beq.n	80079e4 <_dtoa_r+0xb7c>
 80079ee:	e6e1      	b.n	80077b4 <_dtoa_r+0x94c>
 80079f0:	9a03      	ldr	r2, [sp, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d18a      	bne.n	800790c <_dtoa_r+0xaa4>
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	f10b 0b01 	add.w	fp, fp, #1
 80079fc:	e797      	b.n	800792e <_dtoa_r+0xac6>
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <_dtoa_r+0xbc0>)
 8007a00:	f7ff ba9f 	b.w	8006f42 <_dtoa_r+0xda>
 8007a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f47f aa77 	bne.w	8006efa <_dtoa_r+0x92>
 8007a0c:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <_dtoa_r+0xbc4>)
 8007a0e:	f7ff ba98 	b.w	8006f42 <_dtoa_r+0xda>
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dcb6      	bgt.n	8007986 <_dtoa_r+0xb1e>
 8007a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	f73f aeb5 	bgt.w	800778a <_dtoa_r+0x922>
 8007a20:	e7b1      	b.n	8007986 <_dtoa_r+0xb1e>
 8007a22:	bf00      	nop
 8007a24:	0800a5e3 	.word	0x0800a5e3
 8007a28:	0800a53e 	.word	0x0800a53e
 8007a2c:	0800a567 	.word	0x0800a567

08007a30 <_free_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4605      	mov	r5, r0
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d040      	beq.n	8007aba <_free_r+0x8a>
 8007a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3c:	1f0c      	subs	r4, r1, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	18e4      	addlt	r4, r4, r3
 8007a44:	f000 f8e4 	bl	8007c10 <__malloc_lock>
 8007a48:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <_free_r+0x8c>)
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b933      	cbnz	r3, 8007a5c <_free_r+0x2c>
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	4628      	mov	r0, r5
 8007a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a58:	f000 b8e0 	b.w	8007c1c <__malloc_unlock>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d908      	bls.n	8007a72 <_free_r+0x42>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	1821      	adds	r1, r4, r0
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf01      	itttt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	1809      	addeq	r1, r1, r0
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	e7ed      	b.n	8007a4e <_free_r+0x1e>
 8007a72:	461a      	mov	r2, r3
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b10b      	cbz	r3, 8007a7c <_free_r+0x4c>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d9fa      	bls.n	8007a72 <_free_r+0x42>
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	1850      	adds	r0, r2, r1
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d10b      	bne.n	8007a9c <_free_r+0x6c>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	4401      	add	r1, r0
 8007a88:	1850      	adds	r0, r2, r1
 8007a8a:	4283      	cmp	r3, r0
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	d1e0      	bne.n	8007a52 <_free_r+0x22>
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4408      	add	r0, r1
 8007a96:	6010      	str	r0, [r2, #0]
 8007a98:	6053      	str	r3, [r2, #4]
 8007a9a:	e7da      	b.n	8007a52 <_free_r+0x22>
 8007a9c:	d902      	bls.n	8007aa4 <_free_r+0x74>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	e7d6      	b.n	8007a52 <_free_r+0x22>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	1821      	adds	r1, r4, r0
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf01      	itttt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	1809      	addeq	r1, r1, r0
 8007ab2:	6021      	streq	r1, [r4, #0]
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	6054      	str	r4, [r2, #4]
 8007ab8:	e7cb      	b.n	8007a52 <_free_r+0x22>
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20001d40 	.word	0x20001d40

08007ac0 <malloc>:
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <malloc+0xc>)
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	f000 b823 	b.w	8007b10 <_malloc_r>
 8007aca:	bf00      	nop
 8007acc:	20000068 	.word	0x20000068

08007ad0 <sbrk_aligned>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4e0e      	ldr	r6, [pc, #56]	; (8007b0c <sbrk_aligned+0x3c>)
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	6831      	ldr	r1, [r6, #0]
 8007ad8:	4605      	mov	r5, r0
 8007ada:	b911      	cbnz	r1, 8007ae2 <sbrk_aligned+0x12>
 8007adc:	f001 fe0c 	bl	80096f8 <_sbrk_r>
 8007ae0:	6030      	str	r0, [r6, #0]
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f001 fe07 	bl	80096f8 <_sbrk_r>
 8007aea:	1c43      	adds	r3, r0, #1
 8007aec:	d00a      	beq.n	8007b04 <sbrk_aligned+0x34>
 8007aee:	1cc4      	adds	r4, r0, #3
 8007af0:	f024 0403 	bic.w	r4, r4, #3
 8007af4:	42a0      	cmp	r0, r4
 8007af6:	d007      	beq.n	8007b08 <sbrk_aligned+0x38>
 8007af8:	1a21      	subs	r1, r4, r0
 8007afa:	4628      	mov	r0, r5
 8007afc:	f001 fdfc 	bl	80096f8 <_sbrk_r>
 8007b00:	3001      	adds	r0, #1
 8007b02:	d101      	bne.n	8007b08 <sbrk_aligned+0x38>
 8007b04:	f04f 34ff 	mov.w	r4, #4294967295
 8007b08:	4620      	mov	r0, r4
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	20001d44 	.word	0x20001d44

08007b10 <_malloc_r>:
 8007b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b14:	1ccd      	adds	r5, r1, #3
 8007b16:	f025 0503 	bic.w	r5, r5, #3
 8007b1a:	3508      	adds	r5, #8
 8007b1c:	2d0c      	cmp	r5, #12
 8007b1e:	bf38      	it	cc
 8007b20:	250c      	movcc	r5, #12
 8007b22:	2d00      	cmp	r5, #0
 8007b24:	4607      	mov	r7, r0
 8007b26:	db01      	blt.n	8007b2c <_malloc_r+0x1c>
 8007b28:	42a9      	cmp	r1, r5
 8007b2a:	d905      	bls.n	8007b38 <_malloc_r+0x28>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	2600      	movs	r6, #0
 8007b30:	603b      	str	r3, [r7, #0]
 8007b32:	4630      	mov	r0, r6
 8007b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c0c <_malloc_r+0xfc>
 8007b3c:	f000 f868 	bl	8007c10 <__malloc_lock>
 8007b40:	f8d8 3000 	ldr.w	r3, [r8]
 8007b44:	461c      	mov	r4, r3
 8007b46:	bb5c      	cbnz	r4, 8007ba0 <_malloc_r+0x90>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	f7ff ffc0 	bl	8007ad0 <sbrk_aligned>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	4604      	mov	r4, r0
 8007b54:	d155      	bne.n	8007c02 <_malloc_r+0xf2>
 8007b56:	f8d8 4000 	ldr.w	r4, [r8]
 8007b5a:	4626      	mov	r6, r4
 8007b5c:	2e00      	cmp	r6, #0
 8007b5e:	d145      	bne.n	8007bec <_malloc_r+0xdc>
 8007b60:	2c00      	cmp	r4, #0
 8007b62:	d048      	beq.n	8007bf6 <_malloc_r+0xe6>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	4631      	mov	r1, r6
 8007b68:	4638      	mov	r0, r7
 8007b6a:	eb04 0903 	add.w	r9, r4, r3
 8007b6e:	f001 fdc3 	bl	80096f8 <_sbrk_r>
 8007b72:	4581      	cmp	r9, r0
 8007b74:	d13f      	bne.n	8007bf6 <_malloc_r+0xe6>
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	4638      	mov	r0, r7
 8007b7a:	1a6d      	subs	r5, r5, r1
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7ff ffa7 	bl	8007ad0 <sbrk_aligned>
 8007b82:	3001      	adds	r0, #1
 8007b84:	d037      	beq.n	8007bf6 <_malloc_r+0xe6>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	442b      	add	r3, r5
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d038      	beq.n	8007c06 <_malloc_r+0xf6>
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	42a2      	cmp	r2, r4
 8007b98:	d12b      	bne.n	8007bf2 <_malloc_r+0xe2>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	605a      	str	r2, [r3, #4]
 8007b9e:	e00f      	b.n	8007bc0 <_malloc_r+0xb0>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	1b52      	subs	r2, r2, r5
 8007ba4:	d41f      	bmi.n	8007be6 <_malloc_r+0xd6>
 8007ba6:	2a0b      	cmp	r2, #11
 8007ba8:	d917      	bls.n	8007bda <_malloc_r+0xca>
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	6025      	str	r5, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	6059      	strne	r1, [r3, #4]
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	bf08      	it	eq
 8007bb8:	f8c8 1000 	streq.w	r1, [r8]
 8007bbc:	5162      	str	r2, [r4, r5]
 8007bbe:	604b      	str	r3, [r1, #4]
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f104 060b 	add.w	r6, r4, #11
 8007bc6:	f000 f829 	bl	8007c1c <__malloc_unlock>
 8007bca:	f026 0607 	bic.w	r6, r6, #7
 8007bce:	1d23      	adds	r3, r4, #4
 8007bd0:	1af2      	subs	r2, r6, r3
 8007bd2:	d0ae      	beq.n	8007b32 <_malloc_r+0x22>
 8007bd4:	1b9b      	subs	r3, r3, r6
 8007bd6:	50a3      	str	r3, [r4, r2]
 8007bd8:	e7ab      	b.n	8007b32 <_malloc_r+0x22>
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	d1dd      	bne.n	8007b9c <_malloc_r+0x8c>
 8007be0:	f8c8 2000 	str.w	r2, [r8]
 8007be4:	e7ec      	b.n	8007bc0 <_malloc_r+0xb0>
 8007be6:	4623      	mov	r3, r4
 8007be8:	6864      	ldr	r4, [r4, #4]
 8007bea:	e7ac      	b.n	8007b46 <_malloc_r+0x36>
 8007bec:	4634      	mov	r4, r6
 8007bee:	6876      	ldr	r6, [r6, #4]
 8007bf0:	e7b4      	b.n	8007b5c <_malloc_r+0x4c>
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	e7cc      	b.n	8007b90 <_malloc_r+0x80>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	f000 f80e 	bl	8007c1c <__malloc_unlock>
 8007c00:	e797      	b.n	8007b32 <_malloc_r+0x22>
 8007c02:	6025      	str	r5, [r4, #0]
 8007c04:	e7dc      	b.n	8007bc0 <_malloc_r+0xb0>
 8007c06:	605b      	str	r3, [r3, #4]
 8007c08:	deff      	udf	#255	; 0xff
 8007c0a:	bf00      	nop
 8007c0c:	20001d40 	.word	0x20001d40

08007c10 <__malloc_lock>:
 8007c10:	4801      	ldr	r0, [pc, #4]	; (8007c18 <__malloc_lock+0x8>)
 8007c12:	f7ff b87a 	b.w	8006d0a <__retarget_lock_acquire_recursive>
 8007c16:	bf00      	nop
 8007c18:	20001d3c 	.word	0x20001d3c

08007c1c <__malloc_unlock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	; (8007c24 <__malloc_unlock+0x8>)
 8007c1e:	f7ff b875 	b.w	8006d0c <__retarget_lock_release_recursive>
 8007c22:	bf00      	nop
 8007c24:	20001d3c 	.word	0x20001d3c

08007c28 <_Balloc>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	69c6      	ldr	r6, [r0, #28]
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	b976      	cbnz	r6, 8007c50 <_Balloc+0x28>
 8007c32:	2010      	movs	r0, #16
 8007c34:	f7ff ff44 	bl	8007ac0 <malloc>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	61e0      	str	r0, [r4, #28]
 8007c3c:	b920      	cbnz	r0, 8007c48 <_Balloc+0x20>
 8007c3e:	216b      	movs	r1, #107	; 0x6b
 8007c40:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <_Balloc+0x78>)
 8007c42:	4818      	ldr	r0, [pc, #96]	; (8007ca4 <_Balloc+0x7c>)
 8007c44:	f001 fd6e 	bl	8009724 <__assert_func>
 8007c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c4c:	6006      	str	r6, [r0, #0]
 8007c4e:	60c6      	str	r6, [r0, #12]
 8007c50:	69e6      	ldr	r6, [r4, #28]
 8007c52:	68f3      	ldr	r3, [r6, #12]
 8007c54:	b183      	cbz	r3, 8007c78 <_Balloc+0x50>
 8007c56:	69e3      	ldr	r3, [r4, #28]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c5e:	b9b8      	cbnz	r0, 8007c90 <_Balloc+0x68>
 8007c60:	2101      	movs	r1, #1
 8007c62:	fa01 f605 	lsl.w	r6, r1, r5
 8007c66:	1d72      	adds	r2, r6, #5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	0092      	lsls	r2, r2, #2
 8007c6c:	f001 fd78 	bl	8009760 <_calloc_r>
 8007c70:	b160      	cbz	r0, 8007c8c <_Balloc+0x64>
 8007c72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c76:	e00e      	b.n	8007c96 <_Balloc+0x6e>
 8007c78:	2221      	movs	r2, #33	; 0x21
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f001 fd6f 	bl	8009760 <_calloc_r>
 8007c82:	69e3      	ldr	r3, [r4, #28]
 8007c84:	60f0      	str	r0, [r6, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e4      	bne.n	8007c56 <_Balloc+0x2e>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	6802      	ldr	r2, [r0, #0]
 8007c92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c96:	2300      	movs	r3, #0
 8007c98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c9c:	e7f7      	b.n	8007c8e <_Balloc+0x66>
 8007c9e:	bf00      	nop
 8007ca0:	0800a574 	.word	0x0800a574
 8007ca4:	0800a5f4 	.word	0x0800a5f4

08007ca8 <_Bfree>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	69c6      	ldr	r6, [r0, #28]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b976      	cbnz	r6, 8007cd0 <_Bfree+0x28>
 8007cb2:	2010      	movs	r0, #16
 8007cb4:	f7ff ff04 	bl	8007ac0 <malloc>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	61e8      	str	r0, [r5, #28]
 8007cbc:	b920      	cbnz	r0, 8007cc8 <_Bfree+0x20>
 8007cbe:	218f      	movs	r1, #143	; 0x8f
 8007cc0:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <_Bfree+0x3c>)
 8007cc2:	4809      	ldr	r0, [pc, #36]	; (8007ce8 <_Bfree+0x40>)
 8007cc4:	f001 fd2e 	bl	8009724 <__assert_func>
 8007cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ccc:	6006      	str	r6, [r0, #0]
 8007cce:	60c6      	str	r6, [r0, #12]
 8007cd0:	b13c      	cbz	r4, 8007ce2 <_Bfree+0x3a>
 8007cd2:	69eb      	ldr	r3, [r5, #28]
 8007cd4:	6862      	ldr	r2, [r4, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cdc:	6021      	str	r1, [r4, #0]
 8007cde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	0800a574 	.word	0x0800a574
 8007ce8:	0800a5f4 	.word	0x0800a5f4

08007cec <__multadd>:
 8007cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	461e      	mov	r6, r3
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	690d      	ldr	r5, [r1, #16]
 8007cfa:	f101 0c14 	add.w	ip, r1, #20
 8007cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8007d02:	3001      	adds	r0, #1
 8007d04:	b299      	uxth	r1, r3
 8007d06:	fb02 6101 	mla	r1, r2, r1, r6
 8007d0a:	0c1e      	lsrs	r6, r3, #16
 8007d0c:	0c0b      	lsrs	r3, r1, #16
 8007d0e:	fb02 3306 	mla	r3, r2, r6, r3
 8007d12:	b289      	uxth	r1, r1
 8007d14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d18:	4285      	cmp	r5, r0
 8007d1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d1e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d22:	dcec      	bgt.n	8007cfe <__multadd+0x12>
 8007d24:	b30e      	cbz	r6, 8007d6a <__multadd+0x7e>
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	42ab      	cmp	r3, r5
 8007d2a:	dc19      	bgt.n	8007d60 <__multadd+0x74>
 8007d2c:	6861      	ldr	r1, [r4, #4]
 8007d2e:	4638      	mov	r0, r7
 8007d30:	3101      	adds	r1, #1
 8007d32:	f7ff ff79 	bl	8007c28 <_Balloc>
 8007d36:	4680      	mov	r8, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__multadd+0x5a>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	21ba      	movs	r1, #186	; 0xba
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <__multadd+0x84>)
 8007d40:	480c      	ldr	r0, [pc, #48]	; (8007d74 <__multadd+0x88>)
 8007d42:	f001 fcef 	bl	8009724 <__assert_func>
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	f104 010c 	add.w	r1, r4, #12
 8007d4c:	3202      	adds	r2, #2
 8007d4e:	0092      	lsls	r2, r2, #2
 8007d50:	300c      	adds	r0, #12
 8007d52:	f7fe ffea 	bl	8006d2a <memcpy>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ffa5 	bl	8007ca8 <_Bfree>
 8007d5e:	4644      	mov	r4, r8
 8007d60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d64:	3501      	adds	r5, #1
 8007d66:	615e      	str	r6, [r3, #20]
 8007d68:	6125      	str	r5, [r4, #16]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	0800a5e3 	.word	0x0800a5e3
 8007d74:	0800a5f4 	.word	0x0800a5f4

08007d78 <__s2b>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4615      	mov	r5, r2
 8007d7e:	2209      	movs	r2, #9
 8007d80:	461f      	mov	r7, r3
 8007d82:	3308      	adds	r3, #8
 8007d84:	460c      	mov	r4, r1
 8007d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2100      	movs	r1, #0
 8007d90:	429a      	cmp	r2, r3
 8007d92:	db09      	blt.n	8007da8 <__s2b+0x30>
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff ff47 	bl	8007c28 <_Balloc>
 8007d9a:	b940      	cbnz	r0, 8007dae <__s2b+0x36>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	21d3      	movs	r1, #211	; 0xd3
 8007da0:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <__s2b+0x8c>)
 8007da2:	4819      	ldr	r0, [pc, #100]	; (8007e08 <__s2b+0x90>)
 8007da4:	f001 fcbe 	bl	8009724 <__assert_func>
 8007da8:	0052      	lsls	r2, r2, #1
 8007daa:	3101      	adds	r1, #1
 8007dac:	e7f0      	b.n	8007d90 <__s2b+0x18>
 8007dae:	9b08      	ldr	r3, [sp, #32]
 8007db0:	2d09      	cmp	r5, #9
 8007db2:	6143      	str	r3, [r0, #20]
 8007db4:	f04f 0301 	mov.w	r3, #1
 8007db8:	6103      	str	r3, [r0, #16]
 8007dba:	dd16      	ble.n	8007dea <__s2b+0x72>
 8007dbc:	f104 0909 	add.w	r9, r4, #9
 8007dc0:	46c8      	mov	r8, r9
 8007dc2:	442c      	add	r4, r5
 8007dc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007dc8:	4601      	mov	r1, r0
 8007dca:	220a      	movs	r2, #10
 8007dcc:	4630      	mov	r0, r6
 8007dce:	3b30      	subs	r3, #48	; 0x30
 8007dd0:	f7ff ff8c 	bl	8007cec <__multadd>
 8007dd4:	45a0      	cmp	r8, r4
 8007dd6:	d1f5      	bne.n	8007dc4 <__s2b+0x4c>
 8007dd8:	f1a5 0408 	sub.w	r4, r5, #8
 8007ddc:	444c      	add	r4, r9
 8007dde:	1b2d      	subs	r5, r5, r4
 8007de0:	1963      	adds	r3, r4, r5
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	db04      	blt.n	8007df0 <__s2b+0x78>
 8007de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dea:	2509      	movs	r5, #9
 8007dec:	340a      	adds	r4, #10
 8007dee:	e7f6      	b.n	8007dde <__s2b+0x66>
 8007df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007df4:	4601      	mov	r1, r0
 8007df6:	220a      	movs	r2, #10
 8007df8:	4630      	mov	r0, r6
 8007dfa:	3b30      	subs	r3, #48	; 0x30
 8007dfc:	f7ff ff76 	bl	8007cec <__multadd>
 8007e00:	e7ee      	b.n	8007de0 <__s2b+0x68>
 8007e02:	bf00      	nop
 8007e04:	0800a5e3 	.word	0x0800a5e3
 8007e08:	0800a5f4 	.word	0x0800a5f4

08007e0c <__hi0bits>:
 8007e0c:	0c02      	lsrs	r2, r0, #16
 8007e0e:	0412      	lsls	r2, r2, #16
 8007e10:	4603      	mov	r3, r0
 8007e12:	b9ca      	cbnz	r2, 8007e48 <__hi0bits+0x3c>
 8007e14:	0403      	lsls	r3, r0, #16
 8007e16:	2010      	movs	r0, #16
 8007e18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e1c:	bf04      	itt	eq
 8007e1e:	021b      	lsleq	r3, r3, #8
 8007e20:	3008      	addeq	r0, #8
 8007e22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e26:	bf04      	itt	eq
 8007e28:	011b      	lsleq	r3, r3, #4
 8007e2a:	3004      	addeq	r0, #4
 8007e2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e30:	bf04      	itt	eq
 8007e32:	009b      	lsleq	r3, r3, #2
 8007e34:	3002      	addeq	r0, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db05      	blt.n	8007e46 <__hi0bits+0x3a>
 8007e3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e3e:	f100 0001 	add.w	r0, r0, #1
 8007e42:	bf08      	it	eq
 8007e44:	2020      	moveq	r0, #32
 8007e46:	4770      	bx	lr
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7e5      	b.n	8007e18 <__hi0bits+0xc>

08007e4c <__lo0bits>:
 8007e4c:	6803      	ldr	r3, [r0, #0]
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f013 0007 	ands.w	r0, r3, #7
 8007e54:	d00b      	beq.n	8007e6e <__lo0bits+0x22>
 8007e56:	07d9      	lsls	r1, r3, #31
 8007e58:	d421      	bmi.n	8007e9e <__lo0bits+0x52>
 8007e5a:	0798      	lsls	r0, r3, #30
 8007e5c:	bf49      	itett	mi
 8007e5e:	085b      	lsrmi	r3, r3, #1
 8007e60:	089b      	lsrpl	r3, r3, #2
 8007e62:	2001      	movmi	r0, #1
 8007e64:	6013      	strmi	r3, [r2, #0]
 8007e66:	bf5c      	itt	pl
 8007e68:	2002      	movpl	r0, #2
 8007e6a:	6013      	strpl	r3, [r2, #0]
 8007e6c:	4770      	bx	lr
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	b909      	cbnz	r1, 8007e76 <__lo0bits+0x2a>
 8007e72:	2010      	movs	r0, #16
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	b2d9      	uxtb	r1, r3
 8007e78:	b909      	cbnz	r1, 8007e7e <__lo0bits+0x32>
 8007e7a:	3008      	adds	r0, #8
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	0719      	lsls	r1, r3, #28
 8007e80:	bf04      	itt	eq
 8007e82:	091b      	lsreq	r3, r3, #4
 8007e84:	3004      	addeq	r0, #4
 8007e86:	0799      	lsls	r1, r3, #30
 8007e88:	bf04      	itt	eq
 8007e8a:	089b      	lsreq	r3, r3, #2
 8007e8c:	3002      	addeq	r0, #2
 8007e8e:	07d9      	lsls	r1, r3, #31
 8007e90:	d403      	bmi.n	8007e9a <__lo0bits+0x4e>
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	f100 0001 	add.w	r0, r0, #1
 8007e98:	d003      	beq.n	8007ea2 <__lo0bits+0x56>
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4770      	bx	lr
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	4770      	bx	lr
 8007ea2:	2020      	movs	r0, #32
 8007ea4:	4770      	bx	lr
	...

08007ea8 <__i2b>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	2101      	movs	r1, #1
 8007eae:	f7ff febb 	bl	8007c28 <_Balloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	b928      	cbnz	r0, 8007ec2 <__i2b+0x1a>
 8007eb6:	f240 1145 	movw	r1, #325	; 0x145
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <__i2b+0x24>)
 8007ebc:	4804      	ldr	r0, [pc, #16]	; (8007ed0 <__i2b+0x28>)
 8007ebe:	f001 fc31 	bl	8009724 <__assert_func>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	6144      	str	r4, [r0, #20]
 8007ec6:	6103      	str	r3, [r0, #16]
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	bf00      	nop
 8007ecc:	0800a5e3 	.word	0x0800a5e3
 8007ed0:	0800a5f4 	.word	0x0800a5f4

08007ed4 <__multiply>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	4691      	mov	r9, r2
 8007eda:	690a      	ldr	r2, [r1, #16]
 8007edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	bfbe      	ittt	lt
 8007ee6:	460b      	movlt	r3, r1
 8007ee8:	464c      	movlt	r4, r9
 8007eea:	4699      	movlt	r9, r3
 8007eec:	6927      	ldr	r7, [r4, #16]
 8007eee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	eb07 060a 	add.w	r6, r7, sl
 8007efa:	42b3      	cmp	r3, r6
 8007efc:	b085      	sub	sp, #20
 8007efe:	bfb8      	it	lt
 8007f00:	3101      	addlt	r1, #1
 8007f02:	f7ff fe91 	bl	8007c28 <_Balloc>
 8007f06:	b930      	cbnz	r0, 8007f16 <__multiply+0x42>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f0e:	4b43      	ldr	r3, [pc, #268]	; (800801c <__multiply+0x148>)
 8007f10:	4843      	ldr	r0, [pc, #268]	; (8008020 <__multiply+0x14c>)
 8007f12:	f001 fc07 	bl	8009724 <__assert_func>
 8007f16:	f100 0514 	add.w	r5, r0, #20
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f22:	4543      	cmp	r3, r8
 8007f24:	d321      	bcc.n	8007f6a <__multiply+0x96>
 8007f26:	f104 0314 	add.w	r3, r4, #20
 8007f2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f2e:	f109 0314 	add.w	r3, r9, #20
 8007f32:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f36:	9202      	str	r2, [sp, #8]
 8007f38:	1b3a      	subs	r2, r7, r4
 8007f3a:	3a15      	subs	r2, #21
 8007f3c:	f022 0203 	bic.w	r2, r2, #3
 8007f40:	3204      	adds	r2, #4
 8007f42:	f104 0115 	add.w	r1, r4, #21
 8007f46:	428f      	cmp	r7, r1
 8007f48:	bf38      	it	cc
 8007f4a:	2204      	movcc	r2, #4
 8007f4c:	9201      	str	r2, [sp, #4]
 8007f4e:	9a02      	ldr	r2, [sp, #8]
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d80c      	bhi.n	8007f70 <__multiply+0x9c>
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	dd03      	ble.n	8007f62 <__multiply+0x8e>
 8007f5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d05a      	beq.n	8008018 <__multiply+0x144>
 8007f62:	6106      	str	r6, [r0, #16]
 8007f64:	b005      	add	sp, #20
 8007f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6a:	f843 2b04 	str.w	r2, [r3], #4
 8007f6e:	e7d8      	b.n	8007f22 <__multiply+0x4e>
 8007f70:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f74:	f1ba 0f00 	cmp.w	sl, #0
 8007f78:	d023      	beq.n	8007fc2 <__multiply+0xee>
 8007f7a:	46a9      	mov	r9, r5
 8007f7c:	f04f 0c00 	mov.w	ip, #0
 8007f80:	f104 0e14 	add.w	lr, r4, #20
 8007f84:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f88:	f8d9 1000 	ldr.w	r1, [r9]
 8007f8c:	fa1f fb82 	uxth.w	fp, r2
 8007f90:	b289      	uxth	r1, r1
 8007f92:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f96:	4461      	add	r1, ip
 8007f98:	f8d9 c000 	ldr.w	ip, [r9]
 8007f9c:	0c12      	lsrs	r2, r2, #16
 8007f9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007fa2:	fb0a c202 	mla	r2, sl, r2, ip
 8007fa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007faa:	b289      	uxth	r1, r1
 8007fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fb0:	4577      	cmp	r7, lr
 8007fb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fb6:	f849 1b04 	str.w	r1, [r9], #4
 8007fba:	d8e3      	bhi.n	8007f84 <__multiply+0xb0>
 8007fbc:	9a01      	ldr	r2, [sp, #4]
 8007fbe:	f845 c002 	str.w	ip, [r5, r2]
 8007fc2:	9a03      	ldr	r2, [sp, #12]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	d021      	beq.n	8008014 <__multiply+0x140>
 8007fd0:	46ae      	mov	lr, r5
 8007fd2:	f04f 0a00 	mov.w	sl, #0
 8007fd6:	6829      	ldr	r1, [r5, #0]
 8007fd8:	f104 0c14 	add.w	ip, r4, #20
 8007fdc:	f8bc b000 	ldrh.w	fp, [ip]
 8007fe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fe4:	b289      	uxth	r1, r1
 8007fe6:	fb09 220b 	mla	r2, r9, fp, r2
 8007fea:	4452      	add	r2, sl
 8007fec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ff0:	f84e 1b04 	str.w	r1, [lr], #4
 8007ff4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ffc:	f8be 1000 	ldrh.w	r1, [lr]
 8008000:	4567      	cmp	r7, ip
 8008002:	fb09 110a 	mla	r1, r9, sl, r1
 8008006:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800800a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800800e:	d8e5      	bhi.n	8007fdc <__multiply+0x108>
 8008010:	9a01      	ldr	r2, [sp, #4]
 8008012:	50a9      	str	r1, [r5, r2]
 8008014:	3504      	adds	r5, #4
 8008016:	e79a      	b.n	8007f4e <__multiply+0x7a>
 8008018:	3e01      	subs	r6, #1
 800801a:	e79c      	b.n	8007f56 <__multiply+0x82>
 800801c:	0800a5e3 	.word	0x0800a5e3
 8008020:	0800a5f4 	.word	0x0800a5f4

08008024 <__pow5mult>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	4615      	mov	r5, r2
 800802a:	f012 0203 	ands.w	r2, r2, #3
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	d007      	beq.n	8008044 <__pow5mult+0x20>
 8008034:	4c25      	ldr	r4, [pc, #148]	; (80080cc <__pow5mult+0xa8>)
 8008036:	3a01      	subs	r2, #1
 8008038:	2300      	movs	r3, #0
 800803a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800803e:	f7ff fe55 	bl	8007cec <__multadd>
 8008042:	4607      	mov	r7, r0
 8008044:	10ad      	asrs	r5, r5, #2
 8008046:	d03d      	beq.n	80080c4 <__pow5mult+0xa0>
 8008048:	69f4      	ldr	r4, [r6, #28]
 800804a:	b97c      	cbnz	r4, 800806c <__pow5mult+0x48>
 800804c:	2010      	movs	r0, #16
 800804e:	f7ff fd37 	bl	8007ac0 <malloc>
 8008052:	4602      	mov	r2, r0
 8008054:	61f0      	str	r0, [r6, #28]
 8008056:	b928      	cbnz	r0, 8008064 <__pow5mult+0x40>
 8008058:	f240 11b3 	movw	r1, #435	; 0x1b3
 800805c:	4b1c      	ldr	r3, [pc, #112]	; (80080d0 <__pow5mult+0xac>)
 800805e:	481d      	ldr	r0, [pc, #116]	; (80080d4 <__pow5mult+0xb0>)
 8008060:	f001 fb60 	bl	8009724 <__assert_func>
 8008064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008068:	6004      	str	r4, [r0, #0]
 800806a:	60c4      	str	r4, [r0, #12]
 800806c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008074:	b94c      	cbnz	r4, 800808a <__pow5mult+0x66>
 8008076:	f240 2171 	movw	r1, #625	; 0x271
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff14 	bl	8007ea8 <__i2b>
 8008080:	2300      	movs	r3, #0
 8008082:	4604      	mov	r4, r0
 8008084:	f8c8 0008 	str.w	r0, [r8, #8]
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	07eb      	lsls	r3, r5, #31
 8008090:	d50a      	bpl.n	80080a8 <__pow5mult+0x84>
 8008092:	4639      	mov	r1, r7
 8008094:	4622      	mov	r2, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff1c 	bl	8007ed4 <__multiply>
 800809c:	4680      	mov	r8, r0
 800809e:	4639      	mov	r1, r7
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff fe01 	bl	8007ca8 <_Bfree>
 80080a6:	4647      	mov	r7, r8
 80080a8:	106d      	asrs	r5, r5, #1
 80080aa:	d00b      	beq.n	80080c4 <__pow5mult+0xa0>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	b938      	cbnz	r0, 80080c0 <__pow5mult+0x9c>
 80080b0:	4622      	mov	r2, r4
 80080b2:	4621      	mov	r1, r4
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff ff0d 	bl	8007ed4 <__multiply>
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	f8c0 9000 	str.w	r9, [r0]
 80080c0:	4604      	mov	r4, r0
 80080c2:	e7e4      	b.n	800808e <__pow5mult+0x6a>
 80080c4:	4638      	mov	r0, r7
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	bf00      	nop
 80080cc:	0800a740 	.word	0x0800a740
 80080d0:	0800a574 	.word	0x0800a574
 80080d4:	0800a5f4 	.word	0x0800a5f4

080080d8 <__lshift>:
 80080d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080dc:	460c      	mov	r4, r1
 80080de:	4607      	mov	r7, r0
 80080e0:	4691      	mov	r9, r2
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6849      	ldr	r1, [r1, #4]
 80080e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080f0:	f108 0601 	add.w	r6, r8, #1
 80080f4:	42b3      	cmp	r3, r6
 80080f6:	db0b      	blt.n	8008110 <__lshift+0x38>
 80080f8:	4638      	mov	r0, r7
 80080fa:	f7ff fd95 	bl	8007c28 <_Balloc>
 80080fe:	4605      	mov	r5, r0
 8008100:	b948      	cbnz	r0, 8008116 <__lshift+0x3e>
 8008102:	4602      	mov	r2, r0
 8008104:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008108:	4b27      	ldr	r3, [pc, #156]	; (80081a8 <__lshift+0xd0>)
 800810a:	4828      	ldr	r0, [pc, #160]	; (80081ac <__lshift+0xd4>)
 800810c:	f001 fb0a 	bl	8009724 <__assert_func>
 8008110:	3101      	adds	r1, #1
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	e7ee      	b.n	80080f4 <__lshift+0x1c>
 8008116:	2300      	movs	r3, #0
 8008118:	f100 0114 	add.w	r1, r0, #20
 800811c:	f100 0210 	add.w	r2, r0, #16
 8008120:	4618      	mov	r0, r3
 8008122:	4553      	cmp	r3, sl
 8008124:	db33      	blt.n	800818e <__lshift+0xb6>
 8008126:	6920      	ldr	r0, [r4, #16]
 8008128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800812c:	f104 0314 	add.w	r3, r4, #20
 8008130:	f019 091f 	ands.w	r9, r9, #31
 8008134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800813c:	d02b      	beq.n	8008196 <__lshift+0xbe>
 800813e:	468a      	mov	sl, r1
 8008140:	2200      	movs	r2, #0
 8008142:	f1c9 0e20 	rsb	lr, r9, #32
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	fa00 f009 	lsl.w	r0, r0, r9
 800814c:	4310      	orrs	r0, r2
 800814e:	f84a 0b04 	str.w	r0, [sl], #4
 8008152:	f853 2b04 	ldr.w	r2, [r3], #4
 8008156:	459c      	cmp	ip, r3
 8008158:	fa22 f20e 	lsr.w	r2, r2, lr
 800815c:	d8f3      	bhi.n	8008146 <__lshift+0x6e>
 800815e:	ebac 0304 	sub.w	r3, ip, r4
 8008162:	3b15      	subs	r3, #21
 8008164:	f023 0303 	bic.w	r3, r3, #3
 8008168:	3304      	adds	r3, #4
 800816a:	f104 0015 	add.w	r0, r4, #21
 800816e:	4584      	cmp	ip, r0
 8008170:	bf38      	it	cc
 8008172:	2304      	movcc	r3, #4
 8008174:	50ca      	str	r2, [r1, r3]
 8008176:	b10a      	cbz	r2, 800817c <__lshift+0xa4>
 8008178:	f108 0602 	add.w	r6, r8, #2
 800817c:	3e01      	subs	r6, #1
 800817e:	4638      	mov	r0, r7
 8008180:	4621      	mov	r1, r4
 8008182:	612e      	str	r6, [r5, #16]
 8008184:	f7ff fd90 	bl	8007ca8 <_Bfree>
 8008188:	4628      	mov	r0, r5
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008192:	3301      	adds	r3, #1
 8008194:	e7c5      	b.n	8008122 <__lshift+0x4a>
 8008196:	3904      	subs	r1, #4
 8008198:	f853 2b04 	ldr.w	r2, [r3], #4
 800819c:	459c      	cmp	ip, r3
 800819e:	f841 2f04 	str.w	r2, [r1, #4]!
 80081a2:	d8f9      	bhi.n	8008198 <__lshift+0xc0>
 80081a4:	e7ea      	b.n	800817c <__lshift+0xa4>
 80081a6:	bf00      	nop
 80081a8:	0800a5e3 	.word	0x0800a5e3
 80081ac:	0800a5f4 	.word	0x0800a5f4

080081b0 <__mcmp>:
 80081b0:	4603      	mov	r3, r0
 80081b2:	690a      	ldr	r2, [r1, #16]
 80081b4:	6900      	ldr	r0, [r0, #16]
 80081b6:	b530      	push	{r4, r5, lr}
 80081b8:	1a80      	subs	r0, r0, r2
 80081ba:	d10d      	bne.n	80081d8 <__mcmp+0x28>
 80081bc:	3314      	adds	r3, #20
 80081be:	3114      	adds	r1, #20
 80081c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081d0:	4295      	cmp	r5, r2
 80081d2:	d002      	beq.n	80081da <__mcmp+0x2a>
 80081d4:	d304      	bcc.n	80081e0 <__mcmp+0x30>
 80081d6:	2001      	movs	r0, #1
 80081d8:	bd30      	pop	{r4, r5, pc}
 80081da:	42a3      	cmp	r3, r4
 80081dc:	d3f4      	bcc.n	80081c8 <__mcmp+0x18>
 80081de:	e7fb      	b.n	80081d8 <__mcmp+0x28>
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	e7f8      	b.n	80081d8 <__mcmp+0x28>
	...

080081e8 <__mdiff>:
 80081e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	460d      	mov	r5, r1
 80081ee:	4607      	mov	r7, r0
 80081f0:	4611      	mov	r1, r2
 80081f2:	4628      	mov	r0, r5
 80081f4:	4614      	mov	r4, r2
 80081f6:	f7ff ffdb 	bl	80081b0 <__mcmp>
 80081fa:	1e06      	subs	r6, r0, #0
 80081fc:	d111      	bne.n	8008222 <__mdiff+0x3a>
 80081fe:	4631      	mov	r1, r6
 8008200:	4638      	mov	r0, r7
 8008202:	f7ff fd11 	bl	8007c28 <_Balloc>
 8008206:	4602      	mov	r2, r0
 8008208:	b928      	cbnz	r0, 8008216 <__mdiff+0x2e>
 800820a:	f240 2137 	movw	r1, #567	; 0x237
 800820e:	4b3a      	ldr	r3, [pc, #232]	; (80082f8 <__mdiff+0x110>)
 8008210:	483a      	ldr	r0, [pc, #232]	; (80082fc <__mdiff+0x114>)
 8008212:	f001 fa87 	bl	8009724 <__assert_func>
 8008216:	2301      	movs	r3, #1
 8008218:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800821c:	4610      	mov	r0, r2
 800821e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	bfa4      	itt	ge
 8008224:	4623      	movge	r3, r4
 8008226:	462c      	movge	r4, r5
 8008228:	4638      	mov	r0, r7
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	bfa6      	itte	ge
 800822e:	461d      	movge	r5, r3
 8008230:	2600      	movge	r6, #0
 8008232:	2601      	movlt	r6, #1
 8008234:	f7ff fcf8 	bl	8007c28 <_Balloc>
 8008238:	4602      	mov	r2, r0
 800823a:	b918      	cbnz	r0, 8008244 <__mdiff+0x5c>
 800823c:	f240 2145 	movw	r1, #581	; 0x245
 8008240:	4b2d      	ldr	r3, [pc, #180]	; (80082f8 <__mdiff+0x110>)
 8008242:	e7e5      	b.n	8008210 <__mdiff+0x28>
 8008244:	f102 0814 	add.w	r8, r2, #20
 8008248:	46c2      	mov	sl, r8
 800824a:	f04f 0c00 	mov.w	ip, #0
 800824e:	6927      	ldr	r7, [r4, #16]
 8008250:	60c6      	str	r6, [r0, #12]
 8008252:	692e      	ldr	r6, [r5, #16]
 8008254:	f104 0014 	add.w	r0, r4, #20
 8008258:	f105 0914 	add.w	r9, r5, #20
 800825c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008260:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008264:	3410      	adds	r4, #16
 8008266:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800826a:	f859 3b04 	ldr.w	r3, [r9], #4
 800826e:	fa1f f18b 	uxth.w	r1, fp
 8008272:	4461      	add	r1, ip
 8008274:	fa1f fc83 	uxth.w	ip, r3
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	eba1 010c 	sub.w	r1, r1, ip
 800827e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008282:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008286:	b289      	uxth	r1, r1
 8008288:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800828c:	454e      	cmp	r6, r9
 800828e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008292:	f84a 1b04 	str.w	r1, [sl], #4
 8008296:	d8e6      	bhi.n	8008266 <__mdiff+0x7e>
 8008298:	1b73      	subs	r3, r6, r5
 800829a:	3b15      	subs	r3, #21
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3515      	adds	r5, #21
 80082a2:	3304      	adds	r3, #4
 80082a4:	42ae      	cmp	r6, r5
 80082a6:	bf38      	it	cc
 80082a8:	2304      	movcc	r3, #4
 80082aa:	4418      	add	r0, r3
 80082ac:	4443      	add	r3, r8
 80082ae:	461e      	mov	r6, r3
 80082b0:	4605      	mov	r5, r0
 80082b2:	4575      	cmp	r5, lr
 80082b4:	d30e      	bcc.n	80082d4 <__mdiff+0xec>
 80082b6:	f10e 0103 	add.w	r1, lr, #3
 80082ba:	1a09      	subs	r1, r1, r0
 80082bc:	f021 0103 	bic.w	r1, r1, #3
 80082c0:	3803      	subs	r0, #3
 80082c2:	4586      	cmp	lr, r0
 80082c4:	bf38      	it	cc
 80082c6:	2100      	movcc	r1, #0
 80082c8:	440b      	add	r3, r1
 80082ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ce:	b189      	cbz	r1, 80082f4 <__mdiff+0x10c>
 80082d0:	6117      	str	r7, [r2, #16]
 80082d2:	e7a3      	b.n	800821c <__mdiff+0x34>
 80082d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80082d8:	fa1f f188 	uxth.w	r1, r8
 80082dc:	4461      	add	r1, ip
 80082de:	140c      	asrs	r4, r1, #16
 80082e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082e4:	b289      	uxth	r1, r1
 80082e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082ea:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80082ee:	f846 1b04 	str.w	r1, [r6], #4
 80082f2:	e7de      	b.n	80082b2 <__mdiff+0xca>
 80082f4:	3f01      	subs	r7, #1
 80082f6:	e7e8      	b.n	80082ca <__mdiff+0xe2>
 80082f8:	0800a5e3 	.word	0x0800a5e3
 80082fc:	0800a5f4 	.word	0x0800a5f4

08008300 <__ulp>:
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <__ulp+0x3c>)
 8008302:	400b      	ands	r3, r1
 8008304:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc08      	bgt.n	800831e <__ulp+0x1e>
 800830c:	425b      	negs	r3, r3
 800830e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008312:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008316:	da04      	bge.n	8008322 <__ulp+0x22>
 8008318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800831c:	4113      	asrs	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	e008      	b.n	8008334 <__ulp+0x34>
 8008322:	f1a2 0314 	sub.w	r3, r2, #20
 8008326:	2b1e      	cmp	r3, #30
 8008328:	bfd6      	itet	le
 800832a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800832e:	2201      	movgt	r2, #1
 8008330:	40da      	lsrle	r2, r3
 8008332:	2300      	movs	r3, #0
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	7ff00000 	.word	0x7ff00000

08008340 <__b2d>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	6905      	ldr	r5, [r0, #16]
 8008344:	f100 0714 	add.w	r7, r0, #20
 8008348:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800834c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008350:	1f2e      	subs	r6, r5, #4
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff fd5a 	bl	8007e0c <__hi0bits>
 8008358:	f1c0 0220 	rsb	r2, r0, #32
 800835c:	280a      	cmp	r0, #10
 800835e:	4603      	mov	r3, r0
 8008360:	f8df c068 	ldr.w	ip, [pc, #104]	; 80083cc <__b2d+0x8c>
 8008364:	600a      	str	r2, [r1, #0]
 8008366:	dc12      	bgt.n	800838e <__b2d+0x4e>
 8008368:	f1c0 0e0b 	rsb	lr, r0, #11
 800836c:	fa24 f20e 	lsr.w	r2, r4, lr
 8008370:	42b7      	cmp	r7, r6
 8008372:	ea42 010c 	orr.w	r1, r2, ip
 8008376:	bf2c      	ite	cs
 8008378:	2200      	movcs	r2, #0
 800837a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800837e:	3315      	adds	r3, #21
 8008380:	fa04 f303 	lsl.w	r3, r4, r3
 8008384:	fa22 f20e 	lsr.w	r2, r2, lr
 8008388:	431a      	orrs	r2, r3
 800838a:	4610      	mov	r0, r2
 800838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838e:	42b7      	cmp	r7, r6
 8008390:	bf2e      	itee	cs
 8008392:	2200      	movcs	r2, #0
 8008394:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8008398:	f1a5 0608 	subcc.w	r6, r5, #8
 800839c:	3b0b      	subs	r3, #11
 800839e:	d012      	beq.n	80083c6 <__b2d+0x86>
 80083a0:	f1c3 0520 	rsb	r5, r3, #32
 80083a4:	fa22 f105 	lsr.w	r1, r2, r5
 80083a8:	409c      	lsls	r4, r3
 80083aa:	430c      	orrs	r4, r1
 80083ac:	42be      	cmp	r6, r7
 80083ae:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80083b2:	bf94      	ite	ls
 80083b4:	2400      	movls	r4, #0
 80083b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083ba:	409a      	lsls	r2, r3
 80083bc:	40ec      	lsrs	r4, r5
 80083be:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80083c2:	4322      	orrs	r2, r4
 80083c4:	e7e1      	b.n	800838a <__b2d+0x4a>
 80083c6:	ea44 010c 	orr.w	r1, r4, ip
 80083ca:	e7de      	b.n	800838a <__b2d+0x4a>
 80083cc:	3ff00000 	.word	0x3ff00000

080083d0 <__d2b>:
 80083d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d2:	2101      	movs	r1, #1
 80083d4:	4617      	mov	r7, r2
 80083d6:	461c      	mov	r4, r3
 80083d8:	9e08      	ldr	r6, [sp, #32]
 80083da:	f7ff fc25 	bl	8007c28 <_Balloc>
 80083de:	4605      	mov	r5, r0
 80083e0:	b930      	cbnz	r0, 80083f0 <__d2b+0x20>
 80083e2:	4602      	mov	r2, r0
 80083e4:	f240 310f 	movw	r1, #783	; 0x30f
 80083e8:	4b22      	ldr	r3, [pc, #136]	; (8008474 <__d2b+0xa4>)
 80083ea:	4823      	ldr	r0, [pc, #140]	; (8008478 <__d2b+0xa8>)
 80083ec:	f001 f99a 	bl	8009724 <__assert_func>
 80083f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80083f4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80083f8:	bb24      	cbnz	r4, 8008444 <__d2b+0x74>
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	d026      	beq.n	800844e <__d2b+0x7e>
 8008400:	4668      	mov	r0, sp
 8008402:	9700      	str	r7, [sp, #0]
 8008404:	f7ff fd22 	bl	8007e4c <__lo0bits>
 8008408:	e9dd 1200 	ldrd	r1, r2, [sp]
 800840c:	b1e8      	cbz	r0, 800844a <__d2b+0x7a>
 800840e:	f1c0 0320 	rsb	r3, r0, #32
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	430b      	orrs	r3, r1
 8008418:	40c2      	lsrs	r2, r0
 800841a:	616b      	str	r3, [r5, #20]
 800841c:	9201      	str	r2, [sp, #4]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bf14      	ite	ne
 8008424:	2102      	movne	r1, #2
 8008426:	2101      	moveq	r1, #1
 8008428:	61ab      	str	r3, [r5, #24]
 800842a:	6129      	str	r1, [r5, #16]
 800842c:	b1bc      	cbz	r4, 800845e <__d2b+0x8e>
 800842e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008432:	4404      	add	r4, r0
 8008434:	6034      	str	r4, [r6, #0]
 8008436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	6018      	str	r0, [r3, #0]
 800843e:	4628      	mov	r0, r5
 8008440:	b003      	add	sp, #12
 8008442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008448:	e7d7      	b.n	80083fa <__d2b+0x2a>
 800844a:	6169      	str	r1, [r5, #20]
 800844c:	e7e7      	b.n	800841e <__d2b+0x4e>
 800844e:	a801      	add	r0, sp, #4
 8008450:	f7ff fcfc 	bl	8007e4c <__lo0bits>
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	2101      	movs	r1, #1
 8008458:	616b      	str	r3, [r5, #20]
 800845a:	3020      	adds	r0, #32
 800845c:	e7e5      	b.n	800842a <__d2b+0x5a>
 800845e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008462:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008466:	6030      	str	r0, [r6, #0]
 8008468:	6918      	ldr	r0, [r3, #16]
 800846a:	f7ff fccf 	bl	8007e0c <__hi0bits>
 800846e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008472:	e7e2      	b.n	800843a <__d2b+0x6a>
 8008474:	0800a5e3 	.word	0x0800a5e3
 8008478:	0800a5f4 	.word	0x0800a5f4

0800847c <__ratio>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	4688      	mov	r8, r1
 8008482:	4669      	mov	r1, sp
 8008484:	4681      	mov	r9, r0
 8008486:	f7ff ff5b 	bl	8008340 <__b2d>
 800848a:	460f      	mov	r7, r1
 800848c:	4604      	mov	r4, r0
 800848e:	460d      	mov	r5, r1
 8008490:	4640      	mov	r0, r8
 8008492:	a901      	add	r1, sp, #4
 8008494:	f7ff ff54 	bl	8008340 <__b2d>
 8008498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800849c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084a0:	468b      	mov	fp, r1
 80084a2:	eba3 0c02 	sub.w	ip, r3, r2
 80084a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bfd5      	itete	le
 80084b4:	460a      	movle	r2, r1
 80084b6:	462a      	movgt	r2, r5
 80084b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084bc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084c0:	bfd8      	it	le
 80084c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084c6:	465b      	mov	r3, fp
 80084c8:	4602      	mov	r2, r0
 80084ca:	4639      	mov	r1, r7
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7f8 f92d 	bl	800072c <__aeabi_ddiv>
 80084d2:	b003      	add	sp, #12
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084d8 <__copybits>:
 80084d8:	3901      	subs	r1, #1
 80084da:	b570      	push	{r4, r5, r6, lr}
 80084dc:	1149      	asrs	r1, r1, #5
 80084de:	6914      	ldr	r4, [r2, #16]
 80084e0:	3101      	adds	r1, #1
 80084e2:	f102 0314 	add.w	r3, r2, #20
 80084e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084ee:	1f05      	subs	r5, r0, #4
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	d30c      	bcc.n	800850e <__copybits+0x36>
 80084f4:	1aa3      	subs	r3, r4, r2
 80084f6:	3b11      	subs	r3, #17
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3211      	adds	r2, #17
 80084fe:	42a2      	cmp	r2, r4
 8008500:	bf88      	it	hi
 8008502:	2300      	movhi	r3, #0
 8008504:	4418      	add	r0, r3
 8008506:	2300      	movs	r3, #0
 8008508:	4288      	cmp	r0, r1
 800850a:	d305      	bcc.n	8008518 <__copybits+0x40>
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008512:	f845 6f04 	str.w	r6, [r5, #4]!
 8008516:	e7eb      	b.n	80084f0 <__copybits+0x18>
 8008518:	f840 3b04 	str.w	r3, [r0], #4
 800851c:	e7f4      	b.n	8008508 <__copybits+0x30>

0800851e <__any_on>:
 800851e:	f100 0214 	add.w	r2, r0, #20
 8008522:	6900      	ldr	r0, [r0, #16]
 8008524:	114b      	asrs	r3, r1, #5
 8008526:	4298      	cmp	r0, r3
 8008528:	b510      	push	{r4, lr}
 800852a:	db11      	blt.n	8008550 <__any_on+0x32>
 800852c:	dd0a      	ble.n	8008544 <__any_on+0x26>
 800852e:	f011 011f 	ands.w	r1, r1, #31
 8008532:	d007      	beq.n	8008544 <__any_on+0x26>
 8008534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008538:	fa24 f001 	lsr.w	r0, r4, r1
 800853c:	fa00 f101 	lsl.w	r1, r0, r1
 8008540:	428c      	cmp	r4, r1
 8008542:	d10b      	bne.n	800855c <__any_on+0x3e>
 8008544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008548:	4293      	cmp	r3, r2
 800854a:	d803      	bhi.n	8008554 <__any_on+0x36>
 800854c:	2000      	movs	r0, #0
 800854e:	bd10      	pop	{r4, pc}
 8008550:	4603      	mov	r3, r0
 8008552:	e7f7      	b.n	8008544 <__any_on+0x26>
 8008554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008558:	2900      	cmp	r1, #0
 800855a:	d0f5      	beq.n	8008548 <__any_on+0x2a>
 800855c:	2001      	movs	r0, #1
 800855e:	e7f6      	b.n	800854e <__any_on+0x30>

08008560 <sulp>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	460f      	mov	r7, r1
 8008566:	4690      	mov	r8, r2
 8008568:	f7ff feca 	bl	8008300 <__ulp>
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	f1b8 0f00 	cmp.w	r8, #0
 8008574:	d011      	beq.n	800859a <sulp+0x3a>
 8008576:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800857a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd0b      	ble.n	800859a <sulp+0x3a>
 8008582:	2400      	movs	r4, #0
 8008584:	051b      	lsls	r3, r3, #20
 8008586:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800858a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800858e:	4622      	mov	r2, r4
 8008590:	462b      	mov	r3, r5
 8008592:	f7f7 ffa1 	bl	80004d8 <__aeabi_dmul>
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085a2:	0000      	movs	r0, r0
 80085a4:	0000      	movs	r0, r0
	...

080085a8 <_strtod_l>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	b09f      	sub	sp, #124	; 0x7c
 80085ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80085b0:	2200      	movs	r2, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	921a      	str	r2, [sp, #104]	; 0x68
 80085b6:	460d      	mov	r5, r1
 80085b8:	f04f 0800 	mov.w	r8, #0
 80085bc:	f04f 0900 	mov.w	r9, #0
 80085c0:	460a      	mov	r2, r1
 80085c2:	9219      	str	r2, [sp, #100]	; 0x64
 80085c4:	7811      	ldrb	r1, [r2, #0]
 80085c6:	292b      	cmp	r1, #43	; 0x2b
 80085c8:	d04a      	beq.n	8008660 <_strtod_l+0xb8>
 80085ca:	d838      	bhi.n	800863e <_strtod_l+0x96>
 80085cc:	290d      	cmp	r1, #13
 80085ce:	d832      	bhi.n	8008636 <_strtod_l+0x8e>
 80085d0:	2908      	cmp	r1, #8
 80085d2:	d832      	bhi.n	800863a <_strtod_l+0x92>
 80085d4:	2900      	cmp	r1, #0
 80085d6:	d03b      	beq.n	8008650 <_strtod_l+0xa8>
 80085d8:	2200      	movs	r2, #0
 80085da:	920e      	str	r2, [sp, #56]	; 0x38
 80085dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80085de:	7832      	ldrb	r2, [r6, #0]
 80085e0:	2a30      	cmp	r2, #48	; 0x30
 80085e2:	f040 80b2 	bne.w	800874a <_strtod_l+0x1a2>
 80085e6:	7872      	ldrb	r2, [r6, #1]
 80085e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80085ec:	2a58      	cmp	r2, #88	; 0x58
 80085ee:	d16e      	bne.n	80086ce <_strtod_l+0x126>
 80085f0:	9302      	str	r3, [sp, #8]
 80085f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f4:	4620      	mov	r0, r4
 80085f6:	9301      	str	r3, [sp, #4]
 80085f8:	ab1a      	add	r3, sp, #104	; 0x68
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	4a8c      	ldr	r2, [pc, #560]	; (8008830 <_strtod_l+0x288>)
 80085fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8008600:	a919      	add	r1, sp, #100	; 0x64
 8008602:	f001 f929 	bl	8009858 <__gethex>
 8008606:	f010 070f 	ands.w	r7, r0, #15
 800860a:	4605      	mov	r5, r0
 800860c:	d005      	beq.n	800861a <_strtod_l+0x72>
 800860e:	2f06      	cmp	r7, #6
 8008610:	d128      	bne.n	8008664 <_strtod_l+0xbc>
 8008612:	2300      	movs	r3, #0
 8008614:	3601      	adds	r6, #1
 8008616:	9619      	str	r6, [sp, #100]	; 0x64
 8008618:	930e      	str	r3, [sp, #56]	; 0x38
 800861a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 85a0 	bne.w	8009162 <_strtod_l+0xbba>
 8008622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008624:	b1cb      	cbz	r3, 800865a <_strtod_l+0xb2>
 8008626:	4642      	mov	r2, r8
 8008628:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800862c:	4610      	mov	r0, r2
 800862e:	4619      	mov	r1, r3
 8008630:	b01f      	add	sp, #124	; 0x7c
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	2920      	cmp	r1, #32
 8008638:	d1ce      	bne.n	80085d8 <_strtod_l+0x30>
 800863a:	3201      	adds	r2, #1
 800863c:	e7c1      	b.n	80085c2 <_strtod_l+0x1a>
 800863e:	292d      	cmp	r1, #45	; 0x2d
 8008640:	d1ca      	bne.n	80085d8 <_strtod_l+0x30>
 8008642:	2101      	movs	r1, #1
 8008644:	910e      	str	r1, [sp, #56]	; 0x38
 8008646:	1c51      	adds	r1, r2, #1
 8008648:	9119      	str	r1, [sp, #100]	; 0x64
 800864a:	7852      	ldrb	r2, [r2, #1]
 800864c:	2a00      	cmp	r2, #0
 800864e:	d1c5      	bne.n	80085dc <_strtod_l+0x34>
 8008650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008652:	9519      	str	r5, [sp, #100]	; 0x64
 8008654:	2b00      	cmp	r3, #0
 8008656:	f040 8582 	bne.w	800915e <_strtod_l+0xbb6>
 800865a:	4642      	mov	r2, r8
 800865c:	464b      	mov	r3, r9
 800865e:	e7e5      	b.n	800862c <_strtod_l+0x84>
 8008660:	2100      	movs	r1, #0
 8008662:	e7ef      	b.n	8008644 <_strtod_l+0x9c>
 8008664:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008666:	b13a      	cbz	r2, 8008678 <_strtod_l+0xd0>
 8008668:	2135      	movs	r1, #53	; 0x35
 800866a:	a81c      	add	r0, sp, #112	; 0x70
 800866c:	f7ff ff34 	bl	80084d8 <__copybits>
 8008670:	4620      	mov	r0, r4
 8008672:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008674:	f7ff fb18 	bl	8007ca8 <_Bfree>
 8008678:	3f01      	subs	r7, #1
 800867a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800867c:	2f04      	cmp	r7, #4
 800867e:	d806      	bhi.n	800868e <_strtod_l+0xe6>
 8008680:	e8df f007 	tbb	[pc, r7]
 8008684:	201d0314 	.word	0x201d0314
 8008688:	14          	.byte	0x14
 8008689:	00          	.byte	0x00
 800868a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800868e:	05e9      	lsls	r1, r5, #23
 8008690:	bf48      	it	mi
 8008692:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800869a:	0d1b      	lsrs	r3, r3, #20
 800869c:	051b      	lsls	r3, r3, #20
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1bb      	bne.n	800861a <_strtod_l+0x72>
 80086a2:	f7fe fb07 	bl	8006cb4 <__errno>
 80086a6:	2322      	movs	r3, #34	; 0x22
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	e7b6      	b.n	800861a <_strtod_l+0x72>
 80086ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086b0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80086b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80086bc:	e7e7      	b.n	800868e <_strtod_l+0xe6>
 80086be:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008834 <_strtod_l+0x28c>
 80086c2:	e7e4      	b.n	800868e <_strtod_l+0xe6>
 80086c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80086c8:	f04f 38ff 	mov.w	r8, #4294967295
 80086cc:	e7df      	b.n	800868e <_strtod_l+0xe6>
 80086ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	9219      	str	r2, [sp, #100]	; 0x64
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b30      	cmp	r3, #48	; 0x30
 80086d8:	d0f9      	beq.n	80086ce <_strtod_l+0x126>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d09d      	beq.n	800861a <_strtod_l+0x72>
 80086de:	2301      	movs	r3, #1
 80086e0:	f04f 0a00 	mov.w	sl, #0
 80086e4:	220a      	movs	r2, #10
 80086e6:	46d3      	mov	fp, sl
 80086e8:	9305      	str	r3, [sp, #20]
 80086ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80086f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80086f4:	7806      	ldrb	r6, [r0, #0]
 80086f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086fa:	b2d9      	uxtb	r1, r3
 80086fc:	2909      	cmp	r1, #9
 80086fe:	d926      	bls.n	800874e <_strtod_l+0x1a6>
 8008700:	2201      	movs	r2, #1
 8008702:	494d      	ldr	r1, [pc, #308]	; (8008838 <_strtod_l+0x290>)
 8008704:	f000 ffe6 	bl	80096d4 <strncmp>
 8008708:	2800      	cmp	r0, #0
 800870a:	d030      	beq.n	800876e <_strtod_l+0x1c6>
 800870c:	2000      	movs	r0, #0
 800870e:	4632      	mov	r2, r6
 8008710:	4603      	mov	r3, r0
 8008712:	465e      	mov	r6, fp
 8008714:	9008      	str	r0, [sp, #32]
 8008716:	2a65      	cmp	r2, #101	; 0x65
 8008718:	d001      	beq.n	800871e <_strtod_l+0x176>
 800871a:	2a45      	cmp	r2, #69	; 0x45
 800871c:	d113      	bne.n	8008746 <_strtod_l+0x19e>
 800871e:	b91e      	cbnz	r6, 8008728 <_strtod_l+0x180>
 8008720:	9a05      	ldr	r2, [sp, #20]
 8008722:	4302      	orrs	r2, r0
 8008724:	d094      	beq.n	8008650 <_strtod_l+0xa8>
 8008726:	2600      	movs	r6, #0
 8008728:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800872a:	1c6a      	adds	r2, r5, #1
 800872c:	9219      	str	r2, [sp, #100]	; 0x64
 800872e:	786a      	ldrb	r2, [r5, #1]
 8008730:	2a2b      	cmp	r2, #43	; 0x2b
 8008732:	d074      	beq.n	800881e <_strtod_l+0x276>
 8008734:	2a2d      	cmp	r2, #45	; 0x2d
 8008736:	d078      	beq.n	800882a <_strtod_l+0x282>
 8008738:	f04f 0c00 	mov.w	ip, #0
 800873c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008740:	2909      	cmp	r1, #9
 8008742:	d97f      	bls.n	8008844 <_strtod_l+0x29c>
 8008744:	9519      	str	r5, [sp, #100]	; 0x64
 8008746:	2700      	movs	r7, #0
 8008748:	e09e      	b.n	8008888 <_strtod_l+0x2e0>
 800874a:	2300      	movs	r3, #0
 800874c:	e7c8      	b.n	80086e0 <_strtod_l+0x138>
 800874e:	f1bb 0f08 	cmp.w	fp, #8
 8008752:	bfd8      	it	le
 8008754:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008756:	f100 0001 	add.w	r0, r0, #1
 800875a:	bfd6      	itet	le
 800875c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008760:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008764:	930a      	strle	r3, [sp, #40]	; 0x28
 8008766:	f10b 0b01 	add.w	fp, fp, #1
 800876a:	9019      	str	r0, [sp, #100]	; 0x64
 800876c:	e7c1      	b.n	80086f2 <_strtod_l+0x14a>
 800876e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	9219      	str	r2, [sp, #100]	; 0x64
 8008774:	785a      	ldrb	r2, [r3, #1]
 8008776:	f1bb 0f00 	cmp.w	fp, #0
 800877a:	d037      	beq.n	80087ec <_strtod_l+0x244>
 800877c:	465e      	mov	r6, fp
 800877e:	9008      	str	r0, [sp, #32]
 8008780:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d912      	bls.n	80087ae <_strtod_l+0x206>
 8008788:	2301      	movs	r3, #1
 800878a:	e7c4      	b.n	8008716 <_strtod_l+0x16e>
 800878c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800878e:	3001      	adds	r0, #1
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	9219      	str	r2, [sp, #100]	; 0x64
 8008794:	785a      	ldrb	r2, [r3, #1]
 8008796:	2a30      	cmp	r2, #48	; 0x30
 8008798:	d0f8      	beq.n	800878c <_strtod_l+0x1e4>
 800879a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800879e:	2b08      	cmp	r3, #8
 80087a0:	f200 84e4 	bhi.w	800916c <_strtod_l+0xbc4>
 80087a4:	9008      	str	r0, [sp, #32]
 80087a6:	2000      	movs	r0, #0
 80087a8:	4606      	mov	r6, r0
 80087aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ae:	3a30      	subs	r2, #48	; 0x30
 80087b0:	f100 0301 	add.w	r3, r0, #1
 80087b4:	d014      	beq.n	80087e0 <_strtod_l+0x238>
 80087b6:	9908      	ldr	r1, [sp, #32]
 80087b8:	eb00 0c06 	add.w	ip, r0, r6
 80087bc:	4419      	add	r1, r3
 80087be:	9108      	str	r1, [sp, #32]
 80087c0:	4633      	mov	r3, r6
 80087c2:	210a      	movs	r1, #10
 80087c4:	4563      	cmp	r3, ip
 80087c6:	d113      	bne.n	80087f0 <_strtod_l+0x248>
 80087c8:	1833      	adds	r3, r6, r0
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	f106 0601 	add.w	r6, r6, #1
 80087d0:	4406      	add	r6, r0
 80087d2:	dc1a      	bgt.n	800880a <_strtod_l+0x262>
 80087d4:	230a      	movs	r3, #10
 80087d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087d8:	fb03 2301 	mla	r3, r3, r1, r2
 80087dc:	930a      	str	r3, [sp, #40]	; 0x28
 80087de:	2300      	movs	r3, #0
 80087e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80087e2:	4618      	mov	r0, r3
 80087e4:	1c51      	adds	r1, r2, #1
 80087e6:	9119      	str	r1, [sp, #100]	; 0x64
 80087e8:	7852      	ldrb	r2, [r2, #1]
 80087ea:	e7c9      	b.n	8008780 <_strtod_l+0x1d8>
 80087ec:	4658      	mov	r0, fp
 80087ee:	e7d2      	b.n	8008796 <_strtod_l+0x1ee>
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	f103 0301 	add.w	r3, r3, #1
 80087f6:	dc03      	bgt.n	8008800 <_strtod_l+0x258>
 80087f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80087fa:	434f      	muls	r7, r1
 80087fc:	970a      	str	r7, [sp, #40]	; 0x28
 80087fe:	e7e1      	b.n	80087c4 <_strtod_l+0x21c>
 8008800:	2b10      	cmp	r3, #16
 8008802:	bfd8      	it	le
 8008804:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008808:	e7dc      	b.n	80087c4 <_strtod_l+0x21c>
 800880a:	2e10      	cmp	r6, #16
 800880c:	bfdc      	itt	le
 800880e:	230a      	movle	r3, #10
 8008810:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008814:	e7e3      	b.n	80087de <_strtod_l+0x236>
 8008816:	2300      	movs	r3, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	2301      	movs	r3, #1
 800881c:	e780      	b.n	8008720 <_strtod_l+0x178>
 800881e:	f04f 0c00 	mov.w	ip, #0
 8008822:	1caa      	adds	r2, r5, #2
 8008824:	9219      	str	r2, [sp, #100]	; 0x64
 8008826:	78aa      	ldrb	r2, [r5, #2]
 8008828:	e788      	b.n	800873c <_strtod_l+0x194>
 800882a:	f04f 0c01 	mov.w	ip, #1
 800882e:	e7f8      	b.n	8008822 <_strtod_l+0x27a>
 8008830:	0800a750 	.word	0x0800a750
 8008834:	7ff00000 	.word	0x7ff00000
 8008838:	0800a74c 	.word	0x0800a74c
 800883c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800883e:	1c51      	adds	r1, r2, #1
 8008840:	9119      	str	r1, [sp, #100]	; 0x64
 8008842:	7852      	ldrb	r2, [r2, #1]
 8008844:	2a30      	cmp	r2, #48	; 0x30
 8008846:	d0f9      	beq.n	800883c <_strtod_l+0x294>
 8008848:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800884c:	2908      	cmp	r1, #8
 800884e:	f63f af7a 	bhi.w	8008746 <_strtod_l+0x19e>
 8008852:	3a30      	subs	r2, #48	; 0x30
 8008854:	9209      	str	r2, [sp, #36]	; 0x24
 8008856:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008858:	920c      	str	r2, [sp, #48]	; 0x30
 800885a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800885c:	1c57      	adds	r7, r2, #1
 800885e:	9719      	str	r7, [sp, #100]	; 0x64
 8008860:	7852      	ldrb	r2, [r2, #1]
 8008862:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008866:	f1be 0f09 	cmp.w	lr, #9
 800886a:	d938      	bls.n	80088de <_strtod_l+0x336>
 800886c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800886e:	1a7f      	subs	r7, r7, r1
 8008870:	2f08      	cmp	r7, #8
 8008872:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008876:	dc03      	bgt.n	8008880 <_strtod_l+0x2d8>
 8008878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887a:	428f      	cmp	r7, r1
 800887c:	bfa8      	it	ge
 800887e:	460f      	movge	r7, r1
 8008880:	f1bc 0f00 	cmp.w	ip, #0
 8008884:	d000      	beq.n	8008888 <_strtod_l+0x2e0>
 8008886:	427f      	negs	r7, r7
 8008888:	2e00      	cmp	r6, #0
 800888a:	d14f      	bne.n	800892c <_strtod_l+0x384>
 800888c:	9905      	ldr	r1, [sp, #20]
 800888e:	4301      	orrs	r1, r0
 8008890:	f47f aec3 	bne.w	800861a <_strtod_l+0x72>
 8008894:	2b00      	cmp	r3, #0
 8008896:	f47f aedb 	bne.w	8008650 <_strtod_l+0xa8>
 800889a:	2a69      	cmp	r2, #105	; 0x69
 800889c:	d029      	beq.n	80088f2 <_strtod_l+0x34a>
 800889e:	dc26      	bgt.n	80088ee <_strtod_l+0x346>
 80088a0:	2a49      	cmp	r2, #73	; 0x49
 80088a2:	d026      	beq.n	80088f2 <_strtod_l+0x34a>
 80088a4:	2a4e      	cmp	r2, #78	; 0x4e
 80088a6:	f47f aed3 	bne.w	8008650 <_strtod_l+0xa8>
 80088aa:	499a      	ldr	r1, [pc, #616]	; (8008b14 <_strtod_l+0x56c>)
 80088ac:	a819      	add	r0, sp, #100	; 0x64
 80088ae:	f001 fa15 	bl	8009cdc <__match>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f43f aecc 	beq.w	8008650 <_strtod_l+0xa8>
 80088b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b28      	cmp	r3, #40	; 0x28
 80088be:	d12f      	bne.n	8008920 <_strtod_l+0x378>
 80088c0:	4995      	ldr	r1, [pc, #596]	; (8008b18 <_strtod_l+0x570>)
 80088c2:	aa1c      	add	r2, sp, #112	; 0x70
 80088c4:	a819      	add	r0, sp, #100	; 0x64
 80088c6:	f001 fa1d 	bl	8009d04 <__hexnan>
 80088ca:	2805      	cmp	r0, #5
 80088cc:	d128      	bne.n	8008920 <_strtod_l+0x378>
 80088ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088d0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80088d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80088d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80088dc:	e69d      	b.n	800861a <_strtod_l+0x72>
 80088de:	210a      	movs	r1, #10
 80088e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088e2:	fb01 2107 	mla	r1, r1, r7, r2
 80088e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80088ea:	9209      	str	r2, [sp, #36]	; 0x24
 80088ec:	e7b5      	b.n	800885a <_strtod_l+0x2b2>
 80088ee:	2a6e      	cmp	r2, #110	; 0x6e
 80088f0:	e7d9      	b.n	80088a6 <_strtod_l+0x2fe>
 80088f2:	498a      	ldr	r1, [pc, #552]	; (8008b1c <_strtod_l+0x574>)
 80088f4:	a819      	add	r0, sp, #100	; 0x64
 80088f6:	f001 f9f1 	bl	8009cdc <__match>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f aea8 	beq.w	8008650 <_strtod_l+0xa8>
 8008900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008902:	4987      	ldr	r1, [pc, #540]	; (8008b20 <_strtod_l+0x578>)
 8008904:	3b01      	subs	r3, #1
 8008906:	a819      	add	r0, sp, #100	; 0x64
 8008908:	9319      	str	r3, [sp, #100]	; 0x64
 800890a:	f001 f9e7 	bl	8009cdc <__match>
 800890e:	b910      	cbnz	r0, 8008916 <_strtod_l+0x36e>
 8008910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008912:	3301      	adds	r3, #1
 8008914:	9319      	str	r3, [sp, #100]	; 0x64
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008b24 <_strtod_l+0x57c>
 800891e:	e67c      	b.n	800861a <_strtod_l+0x72>
 8008920:	4881      	ldr	r0, [pc, #516]	; (8008b28 <_strtod_l+0x580>)
 8008922:	f000 fef9 	bl	8009718 <nan>
 8008926:	4680      	mov	r8, r0
 8008928:	4689      	mov	r9, r1
 800892a:	e676      	b.n	800861a <_strtod_l+0x72>
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	f1bb 0f00 	cmp.w	fp, #0
 8008932:	bf08      	it	eq
 8008934:	46b3      	moveq	fp, r6
 8008936:	1afb      	subs	r3, r7, r3
 8008938:	2e10      	cmp	r6, #16
 800893a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800893c:	4635      	mov	r5, r6
 800893e:	9309      	str	r3, [sp, #36]	; 0x24
 8008940:	bfa8      	it	ge
 8008942:	2510      	movge	r5, #16
 8008944:	f7f7 fd4e 	bl	80003e4 <__aeabi_ui2d>
 8008948:	2e09      	cmp	r6, #9
 800894a:	4680      	mov	r8, r0
 800894c:	4689      	mov	r9, r1
 800894e:	dd13      	ble.n	8008978 <_strtod_l+0x3d0>
 8008950:	4b76      	ldr	r3, [pc, #472]	; (8008b2c <_strtod_l+0x584>)
 8008952:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008956:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800895a:	f7f7 fdbd 	bl	80004d8 <__aeabi_dmul>
 800895e:	4680      	mov	r8, r0
 8008960:	4650      	mov	r0, sl
 8008962:	4689      	mov	r9, r1
 8008964:	f7f7 fd3e 	bl	80003e4 <__aeabi_ui2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f7 fbfc 	bl	800016c <__adddf3>
 8008974:	4680      	mov	r8, r0
 8008976:	4689      	mov	r9, r1
 8008978:	2e0f      	cmp	r6, #15
 800897a:	dc36      	bgt.n	80089ea <_strtod_l+0x442>
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	f43f ae4b 	beq.w	800861a <_strtod_l+0x72>
 8008984:	dd22      	ble.n	80089cc <_strtod_l+0x424>
 8008986:	2b16      	cmp	r3, #22
 8008988:	dc09      	bgt.n	800899e <_strtod_l+0x3f6>
 800898a:	4968      	ldr	r1, [pc, #416]	; (8008b2c <_strtod_l+0x584>)
 800898c:	4642      	mov	r2, r8
 800898e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008992:	464b      	mov	r3, r9
 8008994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008998:	f7f7 fd9e 	bl	80004d8 <__aeabi_dmul>
 800899c:	e7c3      	b.n	8008926 <_strtod_l+0x37e>
 800899e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80089a4:	4293      	cmp	r3, r2
 80089a6:	db20      	blt.n	80089ea <_strtod_l+0x442>
 80089a8:	4c60      	ldr	r4, [pc, #384]	; (8008b2c <_strtod_l+0x584>)
 80089aa:	f1c6 060f 	rsb	r6, r6, #15
 80089ae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80089b2:	4642      	mov	r2, r8
 80089b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b8:	464b      	mov	r3, r9
 80089ba:	f7f7 fd8d 	bl	80004d8 <__aeabi_dmul>
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	1b9e      	subs	r6, r3, r6
 80089c2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80089c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089ca:	e7e5      	b.n	8008998 <_strtod_l+0x3f0>
 80089cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ce:	3316      	adds	r3, #22
 80089d0:	db0b      	blt.n	80089ea <_strtod_l+0x442>
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	4640      	mov	r0, r8
 80089d6:	1bdf      	subs	r7, r3, r7
 80089d8:	4b54      	ldr	r3, [pc, #336]	; (8008b2c <_strtod_l+0x584>)
 80089da:	4649      	mov	r1, r9
 80089dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80089e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e4:	f7f7 fea2 	bl	800072c <__aeabi_ddiv>
 80089e8:	e79d      	b.n	8008926 <_strtod_l+0x37e>
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	1b75      	subs	r5, r6, r5
 80089ee:	441d      	add	r5, r3
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	dd70      	ble.n	8008ad6 <_strtod_l+0x52e>
 80089f4:	f015 030f 	ands.w	r3, r5, #15
 80089f8:	d00a      	beq.n	8008a10 <_strtod_l+0x468>
 80089fa:	494c      	ldr	r1, [pc, #304]	; (8008b2c <_strtod_l+0x584>)
 80089fc:	4642      	mov	r2, r8
 80089fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a06:	464b      	mov	r3, r9
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4689      	mov	r9, r1
 8008a10:	f035 050f 	bics.w	r5, r5, #15
 8008a14:	d04d      	beq.n	8008ab2 <_strtod_l+0x50a>
 8008a16:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008a1a:	dd22      	ble.n	8008a62 <_strtod_l+0x4ba>
 8008a1c:	2600      	movs	r6, #0
 8008a1e:	46b3      	mov	fp, r6
 8008a20:	960b      	str	r6, [sp, #44]	; 0x2c
 8008a22:	9608      	str	r6, [sp, #32]
 8008a24:	2322      	movs	r3, #34	; 0x22
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008b24 <_strtod_l+0x57c>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f43f adf1 	beq.w	800861a <_strtod_l+0x72>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a3c:	f7ff f934 	bl	8007ca8 <_Bfree>
 8008a40:	4620      	mov	r0, r4
 8008a42:	9908      	ldr	r1, [sp, #32]
 8008a44:	f7ff f930 	bl	8007ca8 <_Bfree>
 8008a48:	4659      	mov	r1, fp
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff f92c 	bl	8007ca8 <_Bfree>
 8008a50:	4620      	mov	r0, r4
 8008a52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a54:	f7ff f928 	bl	8007ca8 <_Bfree>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7ff f924 	bl	8007ca8 <_Bfree>
 8008a60:	e5db      	b.n	800861a <_strtod_l+0x72>
 8008a62:	4b33      	ldr	r3, [pc, #204]	; (8008b30 <_strtod_l+0x588>)
 8008a64:	4640      	mov	r0, r8
 8008a66:	9305      	str	r3, [sp, #20]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	469a      	mov	sl, r3
 8008a6e:	112d      	asrs	r5, r5, #4
 8008a70:	2d01      	cmp	r5, #1
 8008a72:	dc21      	bgt.n	8008ab8 <_strtod_l+0x510>
 8008a74:	b10b      	cbz	r3, 8008a7a <_strtod_l+0x4d2>
 8008a76:	4680      	mov	r8, r0
 8008a78:	4689      	mov	r9, r1
 8008a7a:	492d      	ldr	r1, [pc, #180]	; (8008b30 <_strtod_l+0x588>)
 8008a7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008a80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a84:	4642      	mov	r2, r8
 8008a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	f7f7 fd24 	bl	80004d8 <__aeabi_dmul>
 8008a90:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <_strtod_l+0x57c>)
 8008a92:	460a      	mov	r2, r1
 8008a94:	400b      	ands	r3, r1
 8008a96:	4927      	ldr	r1, [pc, #156]	; (8008b34 <_strtod_l+0x58c>)
 8008a98:	4680      	mov	r8, r0
 8008a9a:	428b      	cmp	r3, r1
 8008a9c:	d8be      	bhi.n	8008a1c <_strtod_l+0x474>
 8008a9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008aa2:	428b      	cmp	r3, r1
 8008aa4:	bf86      	itte	hi
 8008aa6:	f04f 38ff 	movhi.w	r8, #4294967295
 8008aaa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008b38 <_strtod_l+0x590>
 8008aae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9305      	str	r3, [sp, #20]
 8008ab6:	e07b      	b.n	8008bb0 <_strtod_l+0x608>
 8008ab8:	07ea      	lsls	r2, r5, #31
 8008aba:	d505      	bpl.n	8008ac8 <_strtod_l+0x520>
 8008abc:	9b05      	ldr	r3, [sp, #20]
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fd09 	bl	80004d8 <__aeabi_dmul>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	9a05      	ldr	r2, [sp, #20]
 8008aca:	f10a 0a01 	add.w	sl, sl, #1
 8008ace:	3208      	adds	r2, #8
 8008ad0:	106d      	asrs	r5, r5, #1
 8008ad2:	9205      	str	r2, [sp, #20]
 8008ad4:	e7cc      	b.n	8008a70 <_strtod_l+0x4c8>
 8008ad6:	d0ec      	beq.n	8008ab2 <_strtod_l+0x50a>
 8008ad8:	426d      	negs	r5, r5
 8008ada:	f015 020f 	ands.w	r2, r5, #15
 8008ade:	d00a      	beq.n	8008af6 <_strtod_l+0x54e>
 8008ae0:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <_strtod_l+0x584>)
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae8:	4649      	mov	r1, r9
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fe1d 	bl	800072c <__aeabi_ddiv>
 8008af2:	4680      	mov	r8, r0
 8008af4:	4689      	mov	r9, r1
 8008af6:	112d      	asrs	r5, r5, #4
 8008af8:	d0db      	beq.n	8008ab2 <_strtod_l+0x50a>
 8008afa:	2d1f      	cmp	r5, #31
 8008afc:	dd1e      	ble.n	8008b3c <_strtod_l+0x594>
 8008afe:	2600      	movs	r6, #0
 8008b00:	46b3      	mov	fp, r6
 8008b02:	960b      	str	r6, [sp, #44]	; 0x2c
 8008b04:	9608      	str	r6, [sp, #32]
 8008b06:	2322      	movs	r3, #34	; 0x22
 8008b08:	f04f 0800 	mov.w	r8, #0
 8008b0c:	f04f 0900 	mov.w	r9, #0
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	e78d      	b.n	8008a30 <_strtod_l+0x488>
 8008b14:	0800a53b 	.word	0x0800a53b
 8008b18:	0800a764 	.word	0x0800a764
 8008b1c:	0800a533 	.word	0x0800a533
 8008b20:	0800a56a 	.word	0x0800a56a
 8008b24:	7ff00000 	.word	0x7ff00000
 8008b28:	0800a8f5 	.word	0x0800a8f5
 8008b2c:	0800a678 	.word	0x0800a678
 8008b30:	0800a650 	.word	0x0800a650
 8008b34:	7ca00000 	.word	0x7ca00000
 8008b38:	7fefffff 	.word	0x7fefffff
 8008b3c:	f015 0310 	ands.w	r3, r5, #16
 8008b40:	bf18      	it	ne
 8008b42:	236a      	movne	r3, #106	; 0x6a
 8008b44:	4640      	mov	r0, r8
 8008b46:	9305      	str	r3, [sp, #20]
 8008b48:	4649      	mov	r1, r9
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008e18 <_strtod_l+0x870>
 8008b50:	07ea      	lsls	r2, r5, #31
 8008b52:	d504      	bpl.n	8008b5e <_strtod_l+0x5b6>
 8008b54:	e9da 2300 	ldrd	r2, r3, [sl]
 8008b58:	f7f7 fcbe 	bl	80004d8 <__aeabi_dmul>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	106d      	asrs	r5, r5, #1
 8008b60:	f10a 0a08 	add.w	sl, sl, #8
 8008b64:	d1f4      	bne.n	8008b50 <_strtod_l+0x5a8>
 8008b66:	b10b      	cbz	r3, 8008b6c <_strtod_l+0x5c4>
 8008b68:	4680      	mov	r8, r0
 8008b6a:	4689      	mov	r9, r1
 8008b6c:	9b05      	ldr	r3, [sp, #20]
 8008b6e:	b1bb      	cbz	r3, 8008ba0 <_strtod_l+0x5f8>
 8008b70:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008b74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	dd10      	ble.n	8008ba0 <_strtod_l+0x5f8>
 8008b7e:	2b1f      	cmp	r3, #31
 8008b80:	f340 8128 	ble.w	8008dd4 <_strtod_l+0x82c>
 8008b84:	2b34      	cmp	r3, #52	; 0x34
 8008b86:	bfd8      	it	le
 8008b88:	f04f 33ff 	movle.w	r3, #4294967295
 8008b8c:	f04f 0800 	mov.w	r8, #0
 8008b90:	bfcf      	iteee	gt
 8008b92:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008b96:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008b9a:	4093      	lslle	r3, r2
 8008b9c:	ea03 0901 	andle.w	r9, r3, r1
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d1a6      	bne.n	8008afe <_strtod_l+0x556>
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb2:	465a      	mov	r2, fp
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4633      	mov	r3, r6
 8008bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bbc:	f7ff f8dc 	bl	8007d78 <__s2b>
 8008bc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f43f af2a 	beq.w	8008a1c <_strtod_l+0x474>
 8008bc8:	2600      	movs	r6, #0
 8008bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bcc:	9b08      	ldr	r3, [sp, #32]
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	eba3 0307 	sub.w	r3, r3, r7
 8008bd4:	bfa8      	it	ge
 8008bd6:	2300      	movge	r3, #0
 8008bd8:	46b3      	mov	fp, r6
 8008bda:	9312      	str	r3, [sp, #72]	; 0x48
 8008bdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008be0:	9316      	str	r3, [sp, #88]	; 0x58
 8008be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be4:	4620      	mov	r0, r4
 8008be6:	6859      	ldr	r1, [r3, #4]
 8008be8:	f7ff f81e 	bl	8007c28 <_Balloc>
 8008bec:	9008      	str	r0, [sp, #32]
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f af18 	beq.w	8008a24 <_strtod_l+0x47c>
 8008bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf6:	300c      	adds	r0, #12
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	f103 010c 	add.w	r1, r3, #12
 8008bfe:	3202      	adds	r2, #2
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	f7fe f892 	bl	8006d2a <memcpy>
 8008c06:	ab1c      	add	r3, sp, #112	; 0x70
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	4642      	mov	r2, r8
 8008c10:	464b      	mov	r3, r9
 8008c12:	4620      	mov	r0, r4
 8008c14:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008c18:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008c1c:	f7ff fbd8 	bl	80083d0 <__d2b>
 8008c20:	901a      	str	r0, [sp, #104]	; 0x68
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f43f aefe 	beq.w	8008a24 <_strtod_l+0x47c>
 8008c28:	2101      	movs	r1, #1
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff f93c 	bl	8007ea8 <__i2b>
 8008c30:	4683      	mov	fp, r0
 8008c32:	2800      	cmp	r0, #0
 8008c34:	f43f aef6 	beq.w	8008a24 <_strtod_l+0x47c>
 8008c38:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008c3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c3c:	2f00      	cmp	r7, #0
 8008c3e:	bfab      	itete	ge
 8008c40:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008c42:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008c44:	eb07 0a03 	addge.w	sl, r7, r3
 8008c48:	1bdd      	sublt	r5, r3, r7
 8008c4a:	9b05      	ldr	r3, [sp, #20]
 8008c4c:	bfa8      	it	ge
 8008c4e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008c50:	eba7 0703 	sub.w	r7, r7, r3
 8008c54:	4417      	add	r7, r2
 8008c56:	4b71      	ldr	r3, [pc, #452]	; (8008e1c <_strtod_l+0x874>)
 8008c58:	f107 37ff 	add.w	r7, r7, #4294967295
 8008c5c:	bfb8      	it	lt
 8008c5e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008c62:	429f      	cmp	r7, r3
 8008c64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c68:	f280 80c7 	bge.w	8008dfa <_strtod_l+0x852>
 8008c6c:	1bdb      	subs	r3, r3, r7
 8008c6e:	2b1f      	cmp	r3, #31
 8008c70:	f04f 0101 	mov.w	r1, #1
 8008c74:	eba2 0203 	sub.w	r2, r2, r3
 8008c78:	f300 80b3 	bgt.w	8008de2 <_strtod_l+0x83a>
 8008c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c82:	2300      	movs	r3, #0
 8008c84:	9310      	str	r3, [sp, #64]	; 0x40
 8008c86:	eb0a 0702 	add.w	r7, sl, r2
 8008c8a:	9b05      	ldr	r3, [sp, #20]
 8008c8c:	45ba      	cmp	sl, r7
 8008c8e:	4415      	add	r5, r2
 8008c90:	441d      	add	r5, r3
 8008c92:	4653      	mov	r3, sl
 8008c94:	bfa8      	it	ge
 8008c96:	463b      	movge	r3, r7
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	bfa8      	it	ge
 8008c9c:	462b      	movge	r3, r5
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfc2      	ittt	gt
 8008ca2:	1aff      	subgt	r7, r7, r3
 8008ca4:	1aed      	subgt	r5, r5, r3
 8008ca6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd17      	ble.n	8008ce0 <_strtod_l+0x738>
 8008cb0:	4659      	mov	r1, fp
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7ff f9b5 	bl	8008024 <__pow5mult>
 8008cba:	4683      	mov	fp, r0
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f43f aeb1 	beq.w	8008a24 <_strtod_l+0x47c>
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff f904 	bl	8007ed4 <__multiply>
 8008ccc:	900a      	str	r0, [sp, #40]	; 0x28
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f aea8 	beq.w	8008a24 <_strtod_l+0x47c>
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008cd8:	f7fe ffe6 	bl	8007ca8 <_Bfree>
 8008cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cde:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	f300 808f 	bgt.w	8008e04 <_strtod_l+0x85c>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dd08      	ble.n	8008cfe <_strtod_l+0x756>
 8008cec:	4620      	mov	r0, r4
 8008cee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cf0:	9908      	ldr	r1, [sp, #32]
 8008cf2:	f7ff f997 	bl	8008024 <__pow5mult>
 8008cf6:	9008      	str	r0, [sp, #32]
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	f43f ae93 	beq.w	8008a24 <_strtod_l+0x47c>
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	dd08      	ble.n	8008d14 <_strtod_l+0x76c>
 8008d02:	462a      	mov	r2, r5
 8008d04:	4620      	mov	r0, r4
 8008d06:	9908      	ldr	r1, [sp, #32]
 8008d08:	f7ff f9e6 	bl	80080d8 <__lshift>
 8008d0c:	9008      	str	r0, [sp, #32]
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f ae88 	beq.w	8008a24 <_strtod_l+0x47c>
 8008d14:	f1ba 0f00 	cmp.w	sl, #0
 8008d18:	dd08      	ble.n	8008d2c <_strtod_l+0x784>
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff f9da 	bl	80080d8 <__lshift>
 8008d24:	4683      	mov	fp, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f ae7c 	beq.w	8008a24 <_strtod_l+0x47c>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	9a08      	ldr	r2, [sp, #32]
 8008d30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d32:	f7ff fa59 	bl	80081e8 <__mdiff>
 8008d36:	4606      	mov	r6, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f43f ae73 	beq.w	8008a24 <_strtod_l+0x47c>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	68c3      	ldr	r3, [r0, #12]
 8008d42:	4659      	mov	r1, fp
 8008d44:	60c5      	str	r5, [r0, #12]
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
 8008d48:	f7ff fa32 	bl	80081b0 <__mcmp>
 8008d4c:	42a8      	cmp	r0, r5
 8008d4e:	da6b      	bge.n	8008e28 <_strtod_l+0x880>
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	ea53 0308 	orrs.w	r3, r3, r8
 8008d56:	f040 808f 	bne.w	8008e78 <_strtod_l+0x8d0>
 8008d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f040 808a 	bne.w	8008e78 <_strtod_l+0x8d0>
 8008d64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d68:	0d1b      	lsrs	r3, r3, #20
 8008d6a:	051b      	lsls	r3, r3, #20
 8008d6c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d70:	f240 8082 	bls.w	8008e78 <_strtod_l+0x8d0>
 8008d74:	6973      	ldr	r3, [r6, #20]
 8008d76:	b913      	cbnz	r3, 8008d7e <_strtod_l+0x7d6>
 8008d78:	6933      	ldr	r3, [r6, #16]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	dd7c      	ble.n	8008e78 <_strtod_l+0x8d0>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	2201      	movs	r2, #1
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7ff f9a8 	bl	80080d8 <__lshift>
 8008d88:	4659      	mov	r1, fp
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	f7ff fa10 	bl	80081b0 <__mcmp>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dd71      	ble.n	8008e78 <_strtod_l+0x8d0>
 8008d94:	9905      	ldr	r1, [sp, #20]
 8008d96:	464b      	mov	r3, r9
 8008d98:	4a21      	ldr	r2, [pc, #132]	; (8008e20 <_strtod_l+0x878>)
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	f000 808d 	beq.w	8008eba <_strtod_l+0x912>
 8008da0:	ea02 0109 	and.w	r1, r2, r9
 8008da4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008da8:	f300 8087 	bgt.w	8008eba <_strtod_l+0x912>
 8008dac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008db0:	f77f aea9 	ble.w	8008b06 <_strtod_l+0x55e>
 8008db4:	4640      	mov	r0, r8
 8008db6:	4649      	mov	r1, r9
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <_strtod_l+0x87c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f7f7 fb8c 	bl	80004d8 <__aeabi_dmul>
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <_strtod_l+0x878>)
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	4689      	mov	r9, r1
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f47f ae35 	bne.w	8008a38 <_strtod_l+0x490>
 8008dce:	2322      	movs	r3, #34	; 0x22
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	e631      	b.n	8008a38 <_strtod_l+0x490>
 8008dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ddc:	ea03 0808 	and.w	r8, r3, r8
 8008de0:	e6de      	b.n	8008ba0 <_strtod_l+0x5f8>
 8008de2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008de6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008dea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008dee:	37e2      	adds	r7, #226	; 0xe2
 8008df0:	fa01 f307 	lsl.w	r3, r1, r7
 8008df4:	9310      	str	r3, [sp, #64]	; 0x40
 8008df6:	9113      	str	r1, [sp, #76]	; 0x4c
 8008df8:	e745      	b.n	8008c86 <_strtod_l+0x6de>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8008dfe:	2301      	movs	r3, #1
 8008e00:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e02:	e740      	b.n	8008c86 <_strtod_l+0x6de>
 8008e04:	463a      	mov	r2, r7
 8008e06:	4620      	mov	r0, r4
 8008e08:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e0a:	f7ff f965 	bl	80080d8 <__lshift>
 8008e0e:	901a      	str	r0, [sp, #104]	; 0x68
 8008e10:	2800      	cmp	r0, #0
 8008e12:	f47f af68 	bne.w	8008ce6 <_strtod_l+0x73e>
 8008e16:	e605      	b.n	8008a24 <_strtod_l+0x47c>
 8008e18:	0800a778 	.word	0x0800a778
 8008e1c:	fffffc02 	.word	0xfffffc02
 8008e20:	7ff00000 	.word	0x7ff00000
 8008e24:	39500000 	.word	0x39500000
 8008e28:	46ca      	mov	sl, r9
 8008e2a:	d165      	bne.n	8008ef8 <_strtod_l+0x950>
 8008e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e32:	b352      	cbz	r2, 8008e8a <_strtod_l+0x8e2>
 8008e34:	4a9e      	ldr	r2, [pc, #632]	; (80090b0 <_strtod_l+0xb08>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d12a      	bne.n	8008e90 <_strtod_l+0x8e8>
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	b1fb      	cbz	r3, 8008e80 <_strtod_l+0x8d8>
 8008e40:	4b9c      	ldr	r3, [pc, #624]	; (80090b4 <_strtod_l+0xb0c>)
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	ea09 0303 	and.w	r3, r9, r3
 8008e4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e4e:	d81a      	bhi.n	8008e86 <_strtod_l+0x8de>
 8008e50:	0d1b      	lsrs	r3, r3, #20
 8008e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d118      	bne.n	8008e90 <_strtod_l+0x8e8>
 8008e5e:	4b96      	ldr	r3, [pc, #600]	; (80090b8 <_strtod_l+0xb10>)
 8008e60:	459a      	cmp	sl, r3
 8008e62:	d102      	bne.n	8008e6a <_strtod_l+0x8c2>
 8008e64:	3101      	adds	r1, #1
 8008e66:	f43f addd 	beq.w	8008a24 <_strtod_l+0x47c>
 8008e6a:	f04f 0800 	mov.w	r8, #0
 8008e6e:	4b91      	ldr	r3, [pc, #580]	; (80090b4 <_strtod_l+0xb0c>)
 8008e70:	ea0a 0303 	and.w	r3, sl, r3
 8008e74:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008e78:	9b05      	ldr	r3, [sp, #20]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d19a      	bne.n	8008db4 <_strtod_l+0x80c>
 8008e7e:	e5db      	b.n	8008a38 <_strtod_l+0x490>
 8008e80:	f04f 33ff 	mov.w	r3, #4294967295
 8008e84:	e7e9      	b.n	8008e5a <_strtod_l+0x8b2>
 8008e86:	4613      	mov	r3, r2
 8008e88:	e7e7      	b.n	8008e5a <_strtod_l+0x8b2>
 8008e8a:	ea53 0308 	orrs.w	r3, r3, r8
 8008e8e:	d081      	beq.n	8008d94 <_strtod_l+0x7ec>
 8008e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e92:	b1e3      	cbz	r3, 8008ece <_strtod_l+0x926>
 8008e94:	ea13 0f0a 	tst.w	r3, sl
 8008e98:	d0ee      	beq.n	8008e78 <_strtod_l+0x8d0>
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	9a05      	ldr	r2, [sp, #20]
 8008ea2:	b1c3      	cbz	r3, 8008ed6 <_strtod_l+0x92e>
 8008ea4:	f7ff fb5c 	bl	8008560 <sulp>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008eb0:	f7f7 f95c 	bl	800016c <__adddf3>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	e7de      	b.n	8008e78 <_strtod_l+0x8d0>
 8008eba:	4013      	ands	r3, r2
 8008ebc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ec0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008ec4:	f04f 38ff 	mov.w	r8, #4294967295
 8008ec8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ecc:	e7d4      	b.n	8008e78 <_strtod_l+0x8d0>
 8008ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ed0:	ea13 0f08 	tst.w	r3, r8
 8008ed4:	e7e0      	b.n	8008e98 <_strtod_l+0x8f0>
 8008ed6:	f7ff fb43 	bl	8008560 <sulp>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008ee2:	f7f7 f941 	bl	8000168 <__aeabi_dsub>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4680      	mov	r8, r0
 8008eec:	4689      	mov	r9, r1
 8008eee:	f7f7 fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d0c0      	beq.n	8008e78 <_strtod_l+0x8d0>
 8008ef6:	e606      	b.n	8008b06 <_strtod_l+0x55e>
 8008ef8:	4659      	mov	r1, fp
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff fabe 	bl	800847c <__ratio>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f0e:	f7f7 fd5f 	bl	80009d0 <__aeabi_dcmple>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d06f      	beq.n	8008ff6 <_strtod_l+0xa4e>
 8008f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d17c      	bne.n	8009016 <_strtod_l+0xa6e>
 8008f1c:	f1b8 0f00 	cmp.w	r8, #0
 8008f20:	d159      	bne.n	8008fd6 <_strtod_l+0xa2e>
 8008f22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d17b      	bne.n	8009022 <_strtod_l+0xa7a>
 8008f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4b62      	ldr	r3, [pc, #392]	; (80090bc <_strtod_l+0xb14>)
 8008f32:	f7f7 fd43 	bl	80009bc <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d15a      	bne.n	8008ff0 <_strtod_l+0xa48>
 8008f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4b5f      	ldr	r3, [pc, #380]	; (80090c0 <_strtod_l+0xb18>)
 8008f42:	f7f7 fac9 	bl	80004d8 <__aeabi_dmul>
 8008f46:	4605      	mov	r5, r0
 8008f48:	460f      	mov	r7, r1
 8008f4a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008f4e:	9506      	str	r5, [sp, #24]
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f56:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f5a:	4b56      	ldr	r3, [pc, #344]	; (80090b4 <_strtod_l+0xb0c>)
 8008f5c:	4a55      	ldr	r2, [pc, #340]	; (80090b4 <_strtod_l+0xb0c>)
 8008f5e:	ea0a 0303 	and.w	r3, sl, r3
 8008f62:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f64:	4b57      	ldr	r3, [pc, #348]	; (80090c4 <_strtod_l+0xb1c>)
 8008f66:	ea0a 0202 	and.w	r2, sl, r2
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	f040 80b0 	bne.w	80090d0 <_strtod_l+0xb28>
 8008f70:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008f74:	4640      	mov	r0, r8
 8008f76:	4649      	mov	r1, r9
 8008f78:	f7ff f9c2 	bl	8008300 <__ulp>
 8008f7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f80:	f7f7 faaa 	bl	80004d8 <__aeabi_dmul>
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	f7f7 f8f0 	bl	800016c <__adddf3>
 8008f8c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80090b4 <_strtod_l+0xb0c>
 8008f90:	4a4d      	ldr	r2, [pc, #308]	; (80090c8 <_strtod_l+0xb20>)
 8008f92:	ea01 0a0a 	and.w	sl, r1, sl
 8008f96:	4592      	cmp	sl, r2
 8008f98:	4680      	mov	r8, r0
 8008f9a:	d948      	bls.n	800902e <_strtod_l+0xa86>
 8008f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f9e:	4b46      	ldr	r3, [pc, #280]	; (80090b8 <_strtod_l+0xb10>)
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d103      	bne.n	8008fac <_strtod_l+0xa04>
 8008fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f43f ad3c 	beq.w	8008a24 <_strtod_l+0x47c>
 8008fac:	f04f 38ff 	mov.w	r8, #4294967295
 8008fb0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80090b8 <_strtod_l+0xb10>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008fb8:	f7fe fe76 	bl	8007ca8 <_Bfree>
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	9908      	ldr	r1, [sp, #32]
 8008fc0:	f7fe fe72 	bl	8007ca8 <_Bfree>
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7fe fe6e 	bl	8007ca8 <_Bfree>
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7fe fe6a 	bl	8007ca8 <_Bfree>
 8008fd4:	e605      	b.n	8008be2 <_strtod_l+0x63a>
 8008fd6:	f1b8 0f01 	cmp.w	r8, #1
 8008fda:	d103      	bne.n	8008fe4 <_strtod_l+0xa3c>
 8008fdc:	f1b9 0f00 	cmp.w	r9, #0
 8008fe0:	f43f ad91 	beq.w	8008b06 <_strtod_l+0x55e>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <_strtod_l+0xb24>)
 8008fe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008fea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fee:	e016      	b.n	800901e <_strtod_l+0xa76>
 8008ff0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008ff2:	4f33      	ldr	r7, [pc, #204]	; (80090c0 <_strtod_l+0xb18>)
 8008ff4:	e7a9      	b.n	8008f4a <_strtod_l+0x9a2>
 8008ff6:	4b32      	ldr	r3, [pc, #200]	; (80090c0 <_strtod_l+0xb18>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ffe:	f7f7 fa6b 	bl	80004d8 <__aeabi_dmul>
 8009002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009004:	4605      	mov	r5, r0
 8009006:	460f      	mov	r7, r1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d09e      	beq.n	8008f4a <_strtod_l+0x9a2>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009014:	e79d      	b.n	8008f52 <_strtod_l+0x9aa>
 8009016:	2200      	movs	r2, #0
 8009018:	4b28      	ldr	r3, [pc, #160]	; (80090bc <_strtod_l+0xb14>)
 800901a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800901e:	4f27      	ldr	r7, [pc, #156]	; (80090bc <_strtod_l+0xb14>)
 8009020:	e797      	b.n	8008f52 <_strtod_l+0x9aa>
 8009022:	2200      	movs	r2, #0
 8009024:	4b29      	ldr	r3, [pc, #164]	; (80090cc <_strtod_l+0xb24>)
 8009026:	4645      	mov	r5, r8
 8009028:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800902c:	e7f7      	b.n	800901e <_strtod_l+0xa76>
 800902e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009032:	9b05      	ldr	r3, [sp, #20]
 8009034:	46ca      	mov	sl, r9
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1bc      	bne.n	8008fb4 <_strtod_l+0xa0c>
 800903a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800903e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009040:	0d1b      	lsrs	r3, r3, #20
 8009042:	051b      	lsls	r3, r3, #20
 8009044:	429a      	cmp	r2, r3
 8009046:	d1b5      	bne.n	8008fb4 <_strtod_l+0xa0c>
 8009048:	4628      	mov	r0, r5
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd8c 	bl	8000b68 <__aeabi_d2lz>
 8009050:	f7f7 fa14 	bl	800047c <__aeabi_l2d>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4628      	mov	r0, r5
 800905a:	4639      	mov	r1, r7
 800905c:	f7f7 f884 	bl	8000168 <__aeabi_dsub>
 8009060:	460b      	mov	r3, r1
 8009062:	4602      	mov	r2, r0
 8009064:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009068:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800906c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906e:	ea4a 0a08 	orr.w	sl, sl, r8
 8009072:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009076:	d06c      	beq.n	8009152 <_strtod_l+0xbaa>
 8009078:	a309      	add	r3, pc, #36	; (adr r3, 80090a0 <_strtod_l+0xaf8>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 fc9d 	bl	80009bc <__aeabi_dcmplt>
 8009082:	2800      	cmp	r0, #0
 8009084:	f47f acd8 	bne.w	8008a38 <_strtod_l+0x490>
 8009088:	a307      	add	r3, pc, #28	; (adr r3, 80090a8 <_strtod_l+0xb00>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009092:	f7f7 fcb1 	bl	80009f8 <__aeabi_dcmpgt>
 8009096:	2800      	cmp	r0, #0
 8009098:	d08c      	beq.n	8008fb4 <_strtod_l+0xa0c>
 800909a:	e4cd      	b.n	8008a38 <_strtod_l+0x490>
 800909c:	f3af 8000 	nop.w
 80090a0:	94a03595 	.word	0x94a03595
 80090a4:	3fdfffff 	.word	0x3fdfffff
 80090a8:	35afe535 	.word	0x35afe535
 80090ac:	3fe00000 	.word	0x3fe00000
 80090b0:	000fffff 	.word	0x000fffff
 80090b4:	7ff00000 	.word	0x7ff00000
 80090b8:	7fefffff 	.word	0x7fefffff
 80090bc:	3ff00000 	.word	0x3ff00000
 80090c0:	3fe00000 	.word	0x3fe00000
 80090c4:	7fe00000 	.word	0x7fe00000
 80090c8:	7c9fffff 	.word	0x7c9fffff
 80090cc:	bff00000 	.word	0xbff00000
 80090d0:	9b05      	ldr	r3, [sp, #20]
 80090d2:	b333      	cbz	r3, 8009122 <_strtod_l+0xb7a>
 80090d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090da:	d822      	bhi.n	8009122 <_strtod_l+0xb7a>
 80090dc:	a328      	add	r3, pc, #160	; (adr r3, 8009180 <_strtod_l+0xbd8>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	4628      	mov	r0, r5
 80090e4:	4639      	mov	r1, r7
 80090e6:	f7f7 fc73 	bl	80009d0 <__aeabi_dcmple>
 80090ea:	b1a0      	cbz	r0, 8009116 <_strtod_l+0xb6e>
 80090ec:	4639      	mov	r1, r7
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7f7 fcca 	bl	8000a88 <__aeabi_d2uiz>
 80090f4:	2801      	cmp	r0, #1
 80090f6:	bf38      	it	cc
 80090f8:	2001      	movcc	r0, #1
 80090fa:	f7f7 f973 	bl	80003e4 <__aeabi_ui2d>
 80090fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009100:	4605      	mov	r5, r0
 8009102:	460f      	mov	r7, r1
 8009104:	bb03      	cbnz	r3, 8009148 <_strtod_l+0xba0>
 8009106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800910a:	9014      	str	r0, [sp, #80]	; 0x50
 800910c:	9315      	str	r3, [sp, #84]	; 0x54
 800910e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009112:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800911a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	9311      	str	r3, [sp, #68]	; 0x44
 8009122:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009124:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009126:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800912a:	f7ff f8e9 	bl	8008300 <__ulp>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 f9cf 	bl	80004d8 <__aeabi_dmul>
 800913a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800913c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800913e:	f7f7 f815 	bl	800016c <__adddf3>
 8009142:	4680      	mov	r8, r0
 8009144:	4689      	mov	r9, r1
 8009146:	e774      	b.n	8009032 <_strtod_l+0xa8a>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009150:	e7dd      	b.n	800910e <_strtod_l+0xb66>
 8009152:	a30d      	add	r3, pc, #52	; (adr r3, 8009188 <_strtod_l+0xbe0>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 fc30 	bl	80009bc <__aeabi_dcmplt>
 800915c:	e79b      	b.n	8009096 <_strtod_l+0xaee>
 800915e:	2300      	movs	r3, #0
 8009160:	930e      	str	r3, [sp, #56]	; 0x38
 8009162:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009164:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	f7ff ba5b 	b.w	8008622 <_strtod_l+0x7a>
 800916c:	2a65      	cmp	r2, #101	; 0x65
 800916e:	f43f ab52 	beq.w	8008816 <_strtod_l+0x26e>
 8009172:	2a45      	cmp	r2, #69	; 0x45
 8009174:	f43f ab4f 	beq.w	8008816 <_strtod_l+0x26e>
 8009178:	2301      	movs	r3, #1
 800917a:	f7ff bb87 	b.w	800888c <_strtod_l+0x2e4>
 800917e:	bf00      	nop
 8009180:	ffc00000 	.word	0xffc00000
 8009184:	41dfffff 	.word	0x41dfffff
 8009188:	94a03595 	.word	0x94a03595
 800918c:	3fcfffff 	.word	0x3fcfffff

08009190 <_strtod_r>:
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <_strtod_r+0x8>)
 8009192:	f7ff ba09 	b.w	80085a8 <_strtod_l>
 8009196:	bf00      	nop
 8009198:	2000006c 	.word	0x2000006c

0800919c <_strtol_l.constprop.0>:
 800919c:	2b01      	cmp	r3, #1
 800919e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a2:	4686      	mov	lr, r0
 80091a4:	4690      	mov	r8, r2
 80091a6:	d001      	beq.n	80091ac <_strtol_l.constprop.0+0x10>
 80091a8:	2b24      	cmp	r3, #36	; 0x24
 80091aa:	d906      	bls.n	80091ba <_strtol_l.constprop.0+0x1e>
 80091ac:	f7fd fd82 	bl	8006cb4 <__errno>
 80091b0:	2316      	movs	r3, #22
 80091b2:	6003      	str	r3, [r0, #0]
 80091b4:	2000      	movs	r0, #0
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	460d      	mov	r5, r1
 80091bc:	4835      	ldr	r0, [pc, #212]	; (8009294 <_strtol_l.constprop.0+0xf8>)
 80091be:	462a      	mov	r2, r5
 80091c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091c4:	5d06      	ldrb	r6, [r0, r4]
 80091c6:	f016 0608 	ands.w	r6, r6, #8
 80091ca:	d1f8      	bne.n	80091be <_strtol_l.constprop.0+0x22>
 80091cc:	2c2d      	cmp	r4, #45	; 0x2d
 80091ce:	d12e      	bne.n	800922e <_strtol_l.constprop.0+0x92>
 80091d0:	2601      	movs	r6, #1
 80091d2:	782c      	ldrb	r4, [r5, #0]
 80091d4:	1c95      	adds	r5, r2, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d057      	beq.n	800928a <_strtol_l.constprop.0+0xee>
 80091da:	2b10      	cmp	r3, #16
 80091dc:	d109      	bne.n	80091f2 <_strtol_l.constprop.0+0x56>
 80091de:	2c30      	cmp	r4, #48	; 0x30
 80091e0:	d107      	bne.n	80091f2 <_strtol_l.constprop.0+0x56>
 80091e2:	782a      	ldrb	r2, [r5, #0]
 80091e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091e8:	2a58      	cmp	r2, #88	; 0x58
 80091ea:	d149      	bne.n	8009280 <_strtol_l.constprop.0+0xe4>
 80091ec:	2310      	movs	r3, #16
 80091ee:	786c      	ldrb	r4, [r5, #1]
 80091f0:	3502      	adds	r5, #2
 80091f2:	2200      	movs	r2, #0
 80091f4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80091f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091fc:	fbbc f9f3 	udiv	r9, ip, r3
 8009200:	4610      	mov	r0, r2
 8009202:	fb03 ca19 	mls	sl, r3, r9, ip
 8009206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800920a:	2f09      	cmp	r7, #9
 800920c:	d814      	bhi.n	8009238 <_strtol_l.constprop.0+0x9c>
 800920e:	463c      	mov	r4, r7
 8009210:	42a3      	cmp	r3, r4
 8009212:	dd20      	ble.n	8009256 <_strtol_l.constprop.0+0xba>
 8009214:	1c57      	adds	r7, r2, #1
 8009216:	d007      	beq.n	8009228 <_strtol_l.constprop.0+0x8c>
 8009218:	4581      	cmp	r9, r0
 800921a:	d319      	bcc.n	8009250 <_strtol_l.constprop.0+0xb4>
 800921c:	d101      	bne.n	8009222 <_strtol_l.constprop.0+0x86>
 800921e:	45a2      	cmp	sl, r4
 8009220:	db16      	blt.n	8009250 <_strtol_l.constprop.0+0xb4>
 8009222:	2201      	movs	r2, #1
 8009224:	fb00 4003 	mla	r0, r0, r3, r4
 8009228:	f815 4b01 	ldrb.w	r4, [r5], #1
 800922c:	e7eb      	b.n	8009206 <_strtol_l.constprop.0+0x6a>
 800922e:	2c2b      	cmp	r4, #43	; 0x2b
 8009230:	bf04      	itt	eq
 8009232:	782c      	ldrbeq	r4, [r5, #0]
 8009234:	1c95      	addeq	r5, r2, #2
 8009236:	e7ce      	b.n	80091d6 <_strtol_l.constprop.0+0x3a>
 8009238:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800923c:	2f19      	cmp	r7, #25
 800923e:	d801      	bhi.n	8009244 <_strtol_l.constprop.0+0xa8>
 8009240:	3c37      	subs	r4, #55	; 0x37
 8009242:	e7e5      	b.n	8009210 <_strtol_l.constprop.0+0x74>
 8009244:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009248:	2f19      	cmp	r7, #25
 800924a:	d804      	bhi.n	8009256 <_strtol_l.constprop.0+0xba>
 800924c:	3c57      	subs	r4, #87	; 0x57
 800924e:	e7df      	b.n	8009210 <_strtol_l.constprop.0+0x74>
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	e7e8      	b.n	8009228 <_strtol_l.constprop.0+0x8c>
 8009256:	1c53      	adds	r3, r2, #1
 8009258:	d108      	bne.n	800926c <_strtol_l.constprop.0+0xd0>
 800925a:	2322      	movs	r3, #34	; 0x22
 800925c:	4660      	mov	r0, ip
 800925e:	f8ce 3000 	str.w	r3, [lr]
 8009262:	f1b8 0f00 	cmp.w	r8, #0
 8009266:	d0a6      	beq.n	80091b6 <_strtol_l.constprop.0+0x1a>
 8009268:	1e69      	subs	r1, r5, #1
 800926a:	e006      	b.n	800927a <_strtol_l.constprop.0+0xde>
 800926c:	b106      	cbz	r6, 8009270 <_strtol_l.constprop.0+0xd4>
 800926e:	4240      	negs	r0, r0
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	d09f      	beq.n	80091b6 <_strtol_l.constprop.0+0x1a>
 8009276:	2a00      	cmp	r2, #0
 8009278:	d1f6      	bne.n	8009268 <_strtol_l.constprop.0+0xcc>
 800927a:	f8c8 1000 	str.w	r1, [r8]
 800927e:	e79a      	b.n	80091b6 <_strtol_l.constprop.0+0x1a>
 8009280:	2430      	movs	r4, #48	; 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1b5      	bne.n	80091f2 <_strtol_l.constprop.0+0x56>
 8009286:	2308      	movs	r3, #8
 8009288:	e7b3      	b.n	80091f2 <_strtol_l.constprop.0+0x56>
 800928a:	2c30      	cmp	r4, #48	; 0x30
 800928c:	d0a9      	beq.n	80091e2 <_strtol_l.constprop.0+0x46>
 800928e:	230a      	movs	r3, #10
 8009290:	e7af      	b.n	80091f2 <_strtol_l.constprop.0+0x56>
 8009292:	bf00      	nop
 8009294:	0800a7a1 	.word	0x0800a7a1

08009298 <_strtol_r>:
 8009298:	f7ff bf80 	b.w	800919c <_strtol_l.constprop.0>

0800929c <__ssputs_r>:
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	461f      	mov	r7, r3
 80092a2:	688e      	ldr	r6, [r1, #8]
 80092a4:	4682      	mov	sl, r0
 80092a6:	42be      	cmp	r6, r7
 80092a8:	460c      	mov	r4, r1
 80092aa:	4690      	mov	r8, r2
 80092ac:	680b      	ldr	r3, [r1, #0]
 80092ae:	d82c      	bhi.n	800930a <__ssputs_r+0x6e>
 80092b0:	898a      	ldrh	r2, [r1, #12]
 80092b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092b6:	d026      	beq.n	8009306 <__ssputs_r+0x6a>
 80092b8:	6965      	ldr	r5, [r4, #20]
 80092ba:	6909      	ldr	r1, [r1, #16]
 80092bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c0:	eba3 0901 	sub.w	r9, r3, r1
 80092c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092c8:	1c7b      	adds	r3, r7, #1
 80092ca:	444b      	add	r3, r9
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	429d      	cmp	r5, r3
 80092d0:	bf38      	it	cc
 80092d2:	461d      	movcc	r5, r3
 80092d4:	0553      	lsls	r3, r2, #21
 80092d6:	d527      	bpl.n	8009328 <__ssputs_r+0x8c>
 80092d8:	4629      	mov	r1, r5
 80092da:	f7fe fc19 	bl	8007b10 <_malloc_r>
 80092de:	4606      	mov	r6, r0
 80092e0:	b360      	cbz	r0, 800933c <__ssputs_r+0xa0>
 80092e2:	464a      	mov	r2, r9
 80092e4:	6921      	ldr	r1, [r4, #16]
 80092e6:	f7fd fd20 	bl	8006d2a <memcpy>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	81a3      	strh	r3, [r4, #12]
 80092f6:	6126      	str	r6, [r4, #16]
 80092f8:	444e      	add	r6, r9
 80092fa:	6026      	str	r6, [r4, #0]
 80092fc:	463e      	mov	r6, r7
 80092fe:	6165      	str	r5, [r4, #20]
 8009300:	eba5 0509 	sub.w	r5, r5, r9
 8009304:	60a5      	str	r5, [r4, #8]
 8009306:	42be      	cmp	r6, r7
 8009308:	d900      	bls.n	800930c <__ssputs_r+0x70>
 800930a:	463e      	mov	r6, r7
 800930c:	4632      	mov	r2, r6
 800930e:	4641      	mov	r1, r8
 8009310:	6820      	ldr	r0, [r4, #0]
 8009312:	f000 f9c5 	bl	80096a0 <memmove>
 8009316:	2000      	movs	r0, #0
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	1b9b      	subs	r3, r3, r6
 800931c:	60a3      	str	r3, [r4, #8]
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	4433      	add	r3, r6
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009328:	462a      	mov	r2, r5
 800932a:	f000 fd98 	bl	8009e5e <_realloc_r>
 800932e:	4606      	mov	r6, r0
 8009330:	2800      	cmp	r0, #0
 8009332:	d1e0      	bne.n	80092f6 <__ssputs_r+0x5a>
 8009334:	4650      	mov	r0, sl
 8009336:	6921      	ldr	r1, [r4, #16]
 8009338:	f7fe fb7a 	bl	8007a30 <_free_r>
 800933c:	230c      	movs	r3, #12
 800933e:	f8ca 3000 	str.w	r3, [sl]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	e7e9      	b.n	8009324 <__ssputs_r+0x88>

08009350 <_svfiprintf_r>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	4698      	mov	r8, r3
 8009356:	898b      	ldrh	r3, [r1, #12]
 8009358:	4607      	mov	r7, r0
 800935a:	061b      	lsls	r3, r3, #24
 800935c:	460d      	mov	r5, r1
 800935e:	4614      	mov	r4, r2
 8009360:	b09d      	sub	sp, #116	; 0x74
 8009362:	d50e      	bpl.n	8009382 <_svfiprintf_r+0x32>
 8009364:	690b      	ldr	r3, [r1, #16]
 8009366:	b963      	cbnz	r3, 8009382 <_svfiprintf_r+0x32>
 8009368:	2140      	movs	r1, #64	; 0x40
 800936a:	f7fe fbd1 	bl	8007b10 <_malloc_r>
 800936e:	6028      	str	r0, [r5, #0]
 8009370:	6128      	str	r0, [r5, #16]
 8009372:	b920      	cbnz	r0, 800937e <_svfiprintf_r+0x2e>
 8009374:	230c      	movs	r3, #12
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e0d0      	b.n	8009520 <_svfiprintf_r+0x1d0>
 800937e:	2340      	movs	r3, #64	; 0x40
 8009380:	616b      	str	r3, [r5, #20]
 8009382:	2300      	movs	r3, #0
 8009384:	9309      	str	r3, [sp, #36]	; 0x24
 8009386:	2320      	movs	r3, #32
 8009388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938c:	2330      	movs	r3, #48	; 0x30
 800938e:	f04f 0901 	mov.w	r9, #1
 8009392:	f8cd 800c 	str.w	r8, [sp, #12]
 8009396:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009538 <_svfiprintf_r+0x1e8>
 800939a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939e:	4623      	mov	r3, r4
 80093a0:	469a      	mov	sl, r3
 80093a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a6:	b10a      	cbz	r2, 80093ac <_svfiprintf_r+0x5c>
 80093a8:	2a25      	cmp	r2, #37	; 0x25
 80093aa:	d1f9      	bne.n	80093a0 <_svfiprintf_r+0x50>
 80093ac:	ebba 0b04 	subs.w	fp, sl, r4
 80093b0:	d00b      	beq.n	80093ca <_svfiprintf_r+0x7a>
 80093b2:	465b      	mov	r3, fp
 80093b4:	4622      	mov	r2, r4
 80093b6:	4629      	mov	r1, r5
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff ff6f 	bl	800929c <__ssputs_r>
 80093be:	3001      	adds	r0, #1
 80093c0:	f000 80a9 	beq.w	8009516 <_svfiprintf_r+0x1c6>
 80093c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c6:	445a      	add	r2, fp
 80093c8:	9209      	str	r2, [sp, #36]	; 0x24
 80093ca:	f89a 3000 	ldrb.w	r3, [sl]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80a1 	beq.w	8009516 <_svfiprintf_r+0x1c6>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295
 80093da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093de:	f10a 0a01 	add.w	sl, sl, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	9307      	str	r3, [sp, #28]
 80093e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ea:	931a      	str	r3, [sp, #104]	; 0x68
 80093ec:	4654      	mov	r4, sl
 80093ee:	2205      	movs	r2, #5
 80093f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f4:	4850      	ldr	r0, [pc, #320]	; (8009538 <_svfiprintf_r+0x1e8>)
 80093f6:	f7fd fc8a 	bl	8006d0e <memchr>
 80093fa:	9a04      	ldr	r2, [sp, #16]
 80093fc:	b9d8      	cbnz	r0, 8009436 <_svfiprintf_r+0xe6>
 80093fe:	06d0      	lsls	r0, r2, #27
 8009400:	bf44      	itt	mi
 8009402:	2320      	movmi	r3, #32
 8009404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009408:	0711      	lsls	r1, r2, #28
 800940a:	bf44      	itt	mi
 800940c:	232b      	movmi	r3, #43	; 0x2b
 800940e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009412:	f89a 3000 	ldrb.w	r3, [sl]
 8009416:	2b2a      	cmp	r3, #42	; 0x2a
 8009418:	d015      	beq.n	8009446 <_svfiprintf_r+0xf6>
 800941a:	4654      	mov	r4, sl
 800941c:	2000      	movs	r0, #0
 800941e:	f04f 0c0a 	mov.w	ip, #10
 8009422:	9a07      	ldr	r2, [sp, #28]
 8009424:	4621      	mov	r1, r4
 8009426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942a:	3b30      	subs	r3, #48	; 0x30
 800942c:	2b09      	cmp	r3, #9
 800942e:	d94d      	bls.n	80094cc <_svfiprintf_r+0x17c>
 8009430:	b1b0      	cbz	r0, 8009460 <_svfiprintf_r+0x110>
 8009432:	9207      	str	r2, [sp, #28]
 8009434:	e014      	b.n	8009460 <_svfiprintf_r+0x110>
 8009436:	eba0 0308 	sub.w	r3, r0, r8
 800943a:	fa09 f303 	lsl.w	r3, r9, r3
 800943e:	4313      	orrs	r3, r2
 8009440:	46a2      	mov	sl, r4
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	e7d2      	b.n	80093ec <_svfiprintf_r+0x9c>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	1d19      	adds	r1, r3, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	9103      	str	r1, [sp, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfbb      	ittet	lt
 8009452:	425b      	neglt	r3, r3
 8009454:	f042 0202 	orrlt.w	r2, r2, #2
 8009458:	9307      	strge	r3, [sp, #28]
 800945a:	9307      	strlt	r3, [sp, #28]
 800945c:	bfb8      	it	lt
 800945e:	9204      	strlt	r2, [sp, #16]
 8009460:	7823      	ldrb	r3, [r4, #0]
 8009462:	2b2e      	cmp	r3, #46	; 0x2e
 8009464:	d10c      	bne.n	8009480 <_svfiprintf_r+0x130>
 8009466:	7863      	ldrb	r3, [r4, #1]
 8009468:	2b2a      	cmp	r3, #42	; 0x2a
 800946a:	d134      	bne.n	80094d6 <_svfiprintf_r+0x186>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3402      	adds	r4, #2
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	f04f 33ff 	movlt.w	r3, #4294967295
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800953c <_svfiprintf_r+0x1ec>
 8009484:	2203      	movs	r2, #3
 8009486:	4650      	mov	r0, sl
 8009488:	7821      	ldrb	r1, [r4, #0]
 800948a:	f7fd fc40 	bl	8006d0e <memchr>
 800948e:	b138      	cbz	r0, 80094a0 <_svfiprintf_r+0x150>
 8009490:	2240      	movs	r2, #64	; 0x40
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	eba0 000a 	sub.w	r0, r0, sl
 8009498:	4082      	lsls	r2, r0
 800949a:	4313      	orrs	r3, r2
 800949c:	3401      	adds	r4, #1
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a4:	2206      	movs	r2, #6
 80094a6:	4826      	ldr	r0, [pc, #152]	; (8009540 <_svfiprintf_r+0x1f0>)
 80094a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ac:	f7fd fc2f 	bl	8006d0e <memchr>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d038      	beq.n	8009526 <_svfiprintf_r+0x1d6>
 80094b4:	4b23      	ldr	r3, [pc, #140]	; (8009544 <_svfiprintf_r+0x1f4>)
 80094b6:	bb1b      	cbnz	r3, 8009500 <_svfiprintf_r+0x1b0>
 80094b8:	9b03      	ldr	r3, [sp, #12]
 80094ba:	3307      	adds	r3, #7
 80094bc:	f023 0307 	bic.w	r3, r3, #7
 80094c0:	3308      	adds	r3, #8
 80094c2:	9303      	str	r3, [sp, #12]
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c6:	4433      	add	r3, r6
 80094c8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ca:	e768      	b.n	800939e <_svfiprintf_r+0x4e>
 80094cc:	460c      	mov	r4, r1
 80094ce:	2001      	movs	r0, #1
 80094d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d4:	e7a6      	b.n	8009424 <_svfiprintf_r+0xd4>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f04f 0c0a 	mov.w	ip, #10
 80094dc:	4619      	mov	r1, r3
 80094de:	3401      	adds	r4, #1
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	4620      	mov	r0, r4
 80094e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094e8:	3a30      	subs	r2, #48	; 0x30
 80094ea:	2a09      	cmp	r2, #9
 80094ec:	d903      	bls.n	80094f6 <_svfiprintf_r+0x1a6>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0c6      	beq.n	8009480 <_svfiprintf_r+0x130>
 80094f2:	9105      	str	r1, [sp, #20]
 80094f4:	e7c4      	b.n	8009480 <_svfiprintf_r+0x130>
 80094f6:	4604      	mov	r4, r0
 80094f8:	2301      	movs	r3, #1
 80094fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fe:	e7f0      	b.n	80094e2 <_svfiprintf_r+0x192>
 8009500:	ab03      	add	r3, sp, #12
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	462a      	mov	r2, r5
 8009506:	4638      	mov	r0, r7
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <_svfiprintf_r+0x1f8>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	f7fc fc8a 	bl	8005e24 <_printf_float>
 8009510:	1c42      	adds	r2, r0, #1
 8009512:	4606      	mov	r6, r0
 8009514:	d1d6      	bne.n	80094c4 <_svfiprintf_r+0x174>
 8009516:	89ab      	ldrh	r3, [r5, #12]
 8009518:	065b      	lsls	r3, r3, #25
 800951a:	f53f af2d 	bmi.w	8009378 <_svfiprintf_r+0x28>
 800951e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009520:	b01d      	add	sp, #116	; 0x74
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	ab03      	add	r3, sp, #12
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	462a      	mov	r2, r5
 800952c:	4638      	mov	r0, r7
 800952e:	4b06      	ldr	r3, [pc, #24]	; (8009548 <_svfiprintf_r+0x1f8>)
 8009530:	a904      	add	r1, sp, #16
 8009532:	f7fc ff17 	bl	8006364 <_printf_i>
 8009536:	e7eb      	b.n	8009510 <_svfiprintf_r+0x1c0>
 8009538:	0800a8a1 	.word	0x0800a8a1
 800953c:	0800a8a7 	.word	0x0800a8a7
 8009540:	0800a8ab 	.word	0x0800a8ab
 8009544:	08005e25 	.word	0x08005e25
 8009548:	0800929d 	.word	0x0800929d

0800954c <__sflush_r>:
 800954c:	898a      	ldrh	r2, [r1, #12]
 800954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009550:	4605      	mov	r5, r0
 8009552:	0710      	lsls	r0, r2, #28
 8009554:	460c      	mov	r4, r1
 8009556:	d457      	bmi.n	8009608 <__sflush_r+0xbc>
 8009558:	684b      	ldr	r3, [r1, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dc04      	bgt.n	8009568 <__sflush_r+0x1c>
 800955e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009560:	2b00      	cmp	r3, #0
 8009562:	dc01      	bgt.n	8009568 <__sflush_r+0x1c>
 8009564:	2000      	movs	r0, #0
 8009566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956a:	2e00      	cmp	r6, #0
 800956c:	d0fa      	beq.n	8009564 <__sflush_r+0x18>
 800956e:	2300      	movs	r3, #0
 8009570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009574:	682f      	ldr	r7, [r5, #0]
 8009576:	6a21      	ldr	r1, [r4, #32]
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	d032      	beq.n	80095e2 <__sflush_r+0x96>
 800957c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	075a      	lsls	r2, r3, #29
 8009582:	d505      	bpl.n	8009590 <__sflush_r+0x44>
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	1ac0      	subs	r0, r0, r3
 8009588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800958a:	b10b      	cbz	r3, 8009590 <__sflush_r+0x44>
 800958c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800958e:	1ac0      	subs	r0, r0, r3
 8009590:	2300      	movs	r3, #0
 8009592:	4602      	mov	r2, r0
 8009594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009596:	4628      	mov	r0, r5
 8009598:	6a21      	ldr	r1, [r4, #32]
 800959a:	47b0      	blx	r6
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	d106      	bne.n	80095b0 <__sflush_r+0x64>
 80095a2:	6829      	ldr	r1, [r5, #0]
 80095a4:	291d      	cmp	r1, #29
 80095a6:	d82b      	bhi.n	8009600 <__sflush_r+0xb4>
 80095a8:	4a28      	ldr	r2, [pc, #160]	; (800964c <__sflush_r+0x100>)
 80095aa:	410a      	asrs	r2, r1
 80095ac:	07d6      	lsls	r6, r2, #31
 80095ae:	d427      	bmi.n	8009600 <__sflush_r+0xb4>
 80095b0:	2200      	movs	r2, #0
 80095b2:	6062      	str	r2, [r4, #4]
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	04d9      	lsls	r1, r3, #19
 80095b8:	6022      	str	r2, [r4, #0]
 80095ba:	d504      	bpl.n	80095c6 <__sflush_r+0x7a>
 80095bc:	1c42      	adds	r2, r0, #1
 80095be:	d101      	bne.n	80095c4 <__sflush_r+0x78>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b903      	cbnz	r3, 80095c6 <__sflush_r+0x7a>
 80095c4:	6560      	str	r0, [r4, #84]	; 0x54
 80095c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c8:	602f      	str	r7, [r5, #0]
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d0ca      	beq.n	8009564 <__sflush_r+0x18>
 80095ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d2:	4299      	cmp	r1, r3
 80095d4:	d002      	beq.n	80095dc <__sflush_r+0x90>
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7fe fa2a 	bl	8007a30 <_free_r>
 80095dc:	2000      	movs	r0, #0
 80095de:	6360      	str	r0, [r4, #52]	; 0x34
 80095e0:	e7c1      	b.n	8009566 <__sflush_r+0x1a>
 80095e2:	2301      	movs	r3, #1
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	1c41      	adds	r1, r0, #1
 80095ea:	d1c8      	bne.n	800957e <__sflush_r+0x32>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c5      	beq.n	800957e <__sflush_r+0x32>
 80095f2:	2b1d      	cmp	r3, #29
 80095f4:	d001      	beq.n	80095fa <__sflush_r+0xae>
 80095f6:	2b16      	cmp	r3, #22
 80095f8:	d101      	bne.n	80095fe <__sflush_r+0xb2>
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	e7b2      	b.n	8009564 <__sflush_r+0x18>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	e7ae      	b.n	8009566 <__sflush_r+0x1a>
 8009608:	690f      	ldr	r7, [r1, #16]
 800960a:	2f00      	cmp	r7, #0
 800960c:	d0aa      	beq.n	8009564 <__sflush_r+0x18>
 800960e:	0793      	lsls	r3, r2, #30
 8009610:	bf18      	it	ne
 8009612:	2300      	movne	r3, #0
 8009614:	680e      	ldr	r6, [r1, #0]
 8009616:	bf08      	it	eq
 8009618:	694b      	ldreq	r3, [r1, #20]
 800961a:	1bf6      	subs	r6, r6, r7
 800961c:	600f      	str	r7, [r1, #0]
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	2e00      	cmp	r6, #0
 8009622:	dd9f      	ble.n	8009564 <__sflush_r+0x18>
 8009624:	4633      	mov	r3, r6
 8009626:	463a      	mov	r2, r7
 8009628:	4628      	mov	r0, r5
 800962a:	6a21      	ldr	r1, [r4, #32]
 800962c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009630:	47e0      	blx	ip
 8009632:	2800      	cmp	r0, #0
 8009634:	dc06      	bgt.n	8009644 <__sflush_r+0xf8>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	81a3      	strh	r3, [r4, #12]
 8009642:	e790      	b.n	8009566 <__sflush_r+0x1a>
 8009644:	4407      	add	r7, r0
 8009646:	1a36      	subs	r6, r6, r0
 8009648:	e7ea      	b.n	8009620 <__sflush_r+0xd4>
 800964a:	bf00      	nop
 800964c:	dfbffffe 	.word	0xdfbffffe

08009650 <_fflush_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	690b      	ldr	r3, [r1, #16]
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b913      	cbnz	r3, 8009660 <_fflush_r+0x10>
 800965a:	2500      	movs	r5, #0
 800965c:	4628      	mov	r0, r5
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	b118      	cbz	r0, 800966a <_fflush_r+0x1a>
 8009662:	6a03      	ldr	r3, [r0, #32]
 8009664:	b90b      	cbnz	r3, 800966a <_fflush_r+0x1a>
 8009666:	f7fd fa39 	bl	8006adc <__sinit>
 800966a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0f3      	beq.n	800965a <_fflush_r+0xa>
 8009672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009674:	07d0      	lsls	r0, r2, #31
 8009676:	d404      	bmi.n	8009682 <_fflush_r+0x32>
 8009678:	0599      	lsls	r1, r3, #22
 800967a:	d402      	bmi.n	8009682 <_fflush_r+0x32>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f7fd fb44 	bl	8006d0a <__retarget_lock_acquire_recursive>
 8009682:	4628      	mov	r0, r5
 8009684:	4621      	mov	r1, r4
 8009686:	f7ff ff61 	bl	800954c <__sflush_r>
 800968a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800968c:	4605      	mov	r5, r0
 800968e:	07da      	lsls	r2, r3, #31
 8009690:	d4e4      	bmi.n	800965c <_fflush_r+0xc>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	059b      	lsls	r3, r3, #22
 8009696:	d4e1      	bmi.n	800965c <_fflush_r+0xc>
 8009698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969a:	f7fd fb37 	bl	8006d0c <__retarget_lock_release_recursive>
 800969e:	e7dd      	b.n	800965c <_fflush_r+0xc>

080096a0 <memmove>:
 80096a0:	4288      	cmp	r0, r1
 80096a2:	b510      	push	{r4, lr}
 80096a4:	eb01 0402 	add.w	r4, r1, r2
 80096a8:	d902      	bls.n	80096b0 <memmove+0x10>
 80096aa:	4284      	cmp	r4, r0
 80096ac:	4623      	mov	r3, r4
 80096ae:	d807      	bhi.n	80096c0 <memmove+0x20>
 80096b0:	1e43      	subs	r3, r0, #1
 80096b2:	42a1      	cmp	r1, r4
 80096b4:	d008      	beq.n	80096c8 <memmove+0x28>
 80096b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096be:	e7f8      	b.n	80096b2 <memmove+0x12>
 80096c0:	4601      	mov	r1, r0
 80096c2:	4402      	add	r2, r0
 80096c4:	428a      	cmp	r2, r1
 80096c6:	d100      	bne.n	80096ca <memmove+0x2a>
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096d2:	e7f7      	b.n	80096c4 <memmove+0x24>

080096d4 <strncmp>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	b16a      	cbz	r2, 80096f4 <strncmp+0x20>
 80096d8:	3901      	subs	r1, #1
 80096da:	1884      	adds	r4, r0, r2
 80096dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d103      	bne.n	80096f0 <strncmp+0x1c>
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d001      	beq.n	80096f0 <strncmp+0x1c>
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d1f5      	bne.n	80096dc <strncmp+0x8>
 80096f0:	1ad0      	subs	r0, r2, r3
 80096f2:	bd10      	pop	{r4, pc}
 80096f4:	4610      	mov	r0, r2
 80096f6:	e7fc      	b.n	80096f2 <strncmp+0x1e>

080096f8 <_sbrk_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	2300      	movs	r3, #0
 80096fc:	4d05      	ldr	r5, [pc, #20]	; (8009714 <_sbrk_r+0x1c>)
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f7 fd98 	bl	8001238 <_sbrk>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_sbrk_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_sbrk_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20001d38 	.word	0x20001d38

08009718 <nan>:
 8009718:	2000      	movs	r0, #0
 800971a:	4901      	ldr	r1, [pc, #4]	; (8009720 <nan+0x8>)
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	7ff80000 	.word	0x7ff80000

08009724 <__assert_func>:
 8009724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009726:	4614      	mov	r4, r2
 8009728:	461a      	mov	r2, r3
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__assert_func+0x2c>)
 800972c:	4605      	mov	r5, r0
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68d8      	ldr	r0, [r3, #12]
 8009732:	b14c      	cbz	r4, 8009748 <__assert_func+0x24>
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <__assert_func+0x30>)
 8009736:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800973a:	9100      	str	r1, [sp, #0]
 800973c:	462b      	mov	r3, r5
 800973e:	4906      	ldr	r1, [pc, #24]	; (8009758 <__assert_func+0x34>)
 8009740:	f000 fbca 	bl	8009ed8 <fiprintf>
 8009744:	f000 fbda 	bl	8009efc <abort>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__assert_func+0x38>)
 800974a:	461c      	mov	r4, r3
 800974c:	e7f3      	b.n	8009736 <__assert_func+0x12>
 800974e:	bf00      	nop
 8009750:	20000068 	.word	0x20000068
 8009754:	0800a8ba 	.word	0x0800a8ba
 8009758:	0800a8c7 	.word	0x0800a8c7
 800975c:	0800a8f5 	.word	0x0800a8f5

08009760 <_calloc_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	fba1 5402 	umull	r5, r4, r1, r2
 8009766:	b934      	cbnz	r4, 8009776 <_calloc_r+0x16>
 8009768:	4629      	mov	r1, r5
 800976a:	f7fe f9d1 	bl	8007b10 <_malloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	b928      	cbnz	r0, 800977e <_calloc_r+0x1e>
 8009772:	4630      	mov	r0, r6
 8009774:	bd70      	pop	{r4, r5, r6, pc}
 8009776:	220c      	movs	r2, #12
 8009778:	2600      	movs	r6, #0
 800977a:	6002      	str	r2, [r0, #0]
 800977c:	e7f9      	b.n	8009772 <_calloc_r+0x12>
 800977e:	462a      	mov	r2, r5
 8009780:	4621      	mov	r1, r4
 8009782:	f7fd fa44 	bl	8006c0e <memset>
 8009786:	e7f4      	b.n	8009772 <_calloc_r+0x12>

08009788 <rshift>:
 8009788:	6903      	ldr	r3, [r0, #16]
 800978a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800978e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009792:	f100 0414 	add.w	r4, r0, #20
 8009796:	ea4f 1261 	mov.w	r2, r1, asr #5
 800979a:	dd46      	ble.n	800982a <rshift+0xa2>
 800979c:	f011 011f 	ands.w	r1, r1, #31
 80097a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097a8:	d10c      	bne.n	80097c4 <rshift+0x3c>
 80097aa:	4629      	mov	r1, r5
 80097ac:	f100 0710 	add.w	r7, r0, #16
 80097b0:	42b1      	cmp	r1, r6
 80097b2:	d335      	bcc.n	8009820 <rshift+0x98>
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	1eea      	subs	r2, r5, #3
 80097ba:	4296      	cmp	r6, r2
 80097bc:	bf38      	it	cc
 80097be:	2300      	movcc	r3, #0
 80097c0:	4423      	add	r3, r4
 80097c2:	e015      	b.n	80097f0 <rshift+0x68>
 80097c4:	46a1      	mov	r9, r4
 80097c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097ca:	f1c1 0820 	rsb	r8, r1, #32
 80097ce:	40cf      	lsrs	r7, r1
 80097d0:	f105 0e04 	add.w	lr, r5, #4
 80097d4:	4576      	cmp	r6, lr
 80097d6:	46f4      	mov	ip, lr
 80097d8:	d816      	bhi.n	8009808 <rshift+0x80>
 80097da:	1a9a      	subs	r2, r3, r2
 80097dc:	0092      	lsls	r2, r2, #2
 80097de:	3a04      	subs	r2, #4
 80097e0:	3501      	adds	r5, #1
 80097e2:	42ae      	cmp	r6, r5
 80097e4:	bf38      	it	cc
 80097e6:	2200      	movcc	r2, #0
 80097e8:	18a3      	adds	r3, r4, r2
 80097ea:	50a7      	str	r7, [r4, r2]
 80097ec:	b107      	cbz	r7, 80097f0 <rshift+0x68>
 80097ee:	3304      	adds	r3, #4
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	eba3 0204 	sub.w	r2, r3, r4
 80097f6:	bf08      	it	eq
 80097f8:	2300      	moveq	r3, #0
 80097fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097fe:	6102      	str	r2, [r0, #16]
 8009800:	bf08      	it	eq
 8009802:	6143      	streq	r3, [r0, #20]
 8009804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009808:	f8dc c000 	ldr.w	ip, [ip]
 800980c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009810:	ea4c 0707 	orr.w	r7, ip, r7
 8009814:	f849 7b04 	str.w	r7, [r9], #4
 8009818:	f85e 7b04 	ldr.w	r7, [lr], #4
 800981c:	40cf      	lsrs	r7, r1
 800981e:	e7d9      	b.n	80097d4 <rshift+0x4c>
 8009820:	f851 cb04 	ldr.w	ip, [r1], #4
 8009824:	f847 cf04 	str.w	ip, [r7, #4]!
 8009828:	e7c2      	b.n	80097b0 <rshift+0x28>
 800982a:	4623      	mov	r3, r4
 800982c:	e7e0      	b.n	80097f0 <rshift+0x68>

0800982e <__hexdig_fun>:
 800982e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009832:	2b09      	cmp	r3, #9
 8009834:	d802      	bhi.n	800983c <__hexdig_fun+0xe>
 8009836:	3820      	subs	r0, #32
 8009838:	b2c0      	uxtb	r0, r0
 800983a:	4770      	bx	lr
 800983c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009840:	2b05      	cmp	r3, #5
 8009842:	d801      	bhi.n	8009848 <__hexdig_fun+0x1a>
 8009844:	3847      	subs	r0, #71	; 0x47
 8009846:	e7f7      	b.n	8009838 <__hexdig_fun+0xa>
 8009848:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800984c:	2b05      	cmp	r3, #5
 800984e:	d801      	bhi.n	8009854 <__hexdig_fun+0x26>
 8009850:	3827      	subs	r0, #39	; 0x27
 8009852:	e7f1      	b.n	8009838 <__hexdig_fun+0xa>
 8009854:	2000      	movs	r0, #0
 8009856:	4770      	bx	lr

08009858 <__gethex>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	4681      	mov	r9, r0
 800985e:	468a      	mov	sl, r1
 8009860:	4617      	mov	r7, r2
 8009862:	680a      	ldr	r2, [r1, #0]
 8009864:	b085      	sub	sp, #20
 8009866:	f102 0b02 	add.w	fp, r2, #2
 800986a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800986e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009872:	9302      	str	r3, [sp, #8]
 8009874:	32fe      	adds	r2, #254	; 0xfe
 8009876:	eb02 030b 	add.w	r3, r2, fp
 800987a:	46d8      	mov	r8, fp
 800987c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	2830      	cmp	r0, #48	; 0x30
 8009884:	d0f7      	beq.n	8009876 <__gethex+0x1e>
 8009886:	f7ff ffd2 	bl	800982e <__hexdig_fun>
 800988a:	4604      	mov	r4, r0
 800988c:	2800      	cmp	r0, #0
 800988e:	d138      	bne.n	8009902 <__gethex+0xaa>
 8009890:	2201      	movs	r2, #1
 8009892:	4640      	mov	r0, r8
 8009894:	49a7      	ldr	r1, [pc, #668]	; (8009b34 <__gethex+0x2dc>)
 8009896:	f7ff ff1d 	bl	80096d4 <strncmp>
 800989a:	4606      	mov	r6, r0
 800989c:	2800      	cmp	r0, #0
 800989e:	d169      	bne.n	8009974 <__gethex+0x11c>
 80098a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80098a4:	465d      	mov	r5, fp
 80098a6:	f7ff ffc2 	bl	800982e <__hexdig_fun>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d064      	beq.n	8009978 <__gethex+0x120>
 80098ae:	465a      	mov	r2, fp
 80098b0:	7810      	ldrb	r0, [r2, #0]
 80098b2:	4690      	mov	r8, r2
 80098b4:	2830      	cmp	r0, #48	; 0x30
 80098b6:	f102 0201 	add.w	r2, r2, #1
 80098ba:	d0f9      	beq.n	80098b0 <__gethex+0x58>
 80098bc:	f7ff ffb7 	bl	800982e <__hexdig_fun>
 80098c0:	2301      	movs	r3, #1
 80098c2:	fab0 f480 	clz	r4, r0
 80098c6:	465e      	mov	r6, fp
 80098c8:	0964      	lsrs	r4, r4, #5
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	4642      	mov	r2, r8
 80098ce:	4615      	mov	r5, r2
 80098d0:	7828      	ldrb	r0, [r5, #0]
 80098d2:	3201      	adds	r2, #1
 80098d4:	f7ff ffab 	bl	800982e <__hexdig_fun>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1f8      	bne.n	80098ce <__gethex+0x76>
 80098dc:	2201      	movs	r2, #1
 80098de:	4628      	mov	r0, r5
 80098e0:	4994      	ldr	r1, [pc, #592]	; (8009b34 <__gethex+0x2dc>)
 80098e2:	f7ff fef7 	bl	80096d4 <strncmp>
 80098e6:	b978      	cbnz	r0, 8009908 <__gethex+0xb0>
 80098e8:	b946      	cbnz	r6, 80098fc <__gethex+0xa4>
 80098ea:	1c6e      	adds	r6, r5, #1
 80098ec:	4632      	mov	r2, r6
 80098ee:	4615      	mov	r5, r2
 80098f0:	7828      	ldrb	r0, [r5, #0]
 80098f2:	3201      	adds	r2, #1
 80098f4:	f7ff ff9b 	bl	800982e <__hexdig_fun>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d1f8      	bne.n	80098ee <__gethex+0x96>
 80098fc:	1b73      	subs	r3, r6, r5
 80098fe:	009e      	lsls	r6, r3, #2
 8009900:	e004      	b.n	800990c <__gethex+0xb4>
 8009902:	2400      	movs	r4, #0
 8009904:	4626      	mov	r6, r4
 8009906:	e7e1      	b.n	80098cc <__gethex+0x74>
 8009908:	2e00      	cmp	r6, #0
 800990a:	d1f7      	bne.n	80098fc <__gethex+0xa4>
 800990c:	782b      	ldrb	r3, [r5, #0]
 800990e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009912:	2b50      	cmp	r3, #80	; 0x50
 8009914:	d13d      	bne.n	8009992 <__gethex+0x13a>
 8009916:	786b      	ldrb	r3, [r5, #1]
 8009918:	2b2b      	cmp	r3, #43	; 0x2b
 800991a:	d02f      	beq.n	800997c <__gethex+0x124>
 800991c:	2b2d      	cmp	r3, #45	; 0x2d
 800991e:	d031      	beq.n	8009984 <__gethex+0x12c>
 8009920:	f04f 0b00 	mov.w	fp, #0
 8009924:	1c69      	adds	r1, r5, #1
 8009926:	7808      	ldrb	r0, [r1, #0]
 8009928:	f7ff ff81 	bl	800982e <__hexdig_fun>
 800992c:	1e42      	subs	r2, r0, #1
 800992e:	b2d2      	uxtb	r2, r2
 8009930:	2a18      	cmp	r2, #24
 8009932:	d82e      	bhi.n	8009992 <__gethex+0x13a>
 8009934:	f1a0 0210 	sub.w	r2, r0, #16
 8009938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800993c:	f7ff ff77 	bl	800982e <__hexdig_fun>
 8009940:	f100 3cff 	add.w	ip, r0, #4294967295
 8009944:	fa5f fc8c 	uxtb.w	ip, ip
 8009948:	f1bc 0f18 	cmp.w	ip, #24
 800994c:	d91d      	bls.n	800998a <__gethex+0x132>
 800994e:	f1bb 0f00 	cmp.w	fp, #0
 8009952:	d000      	beq.n	8009956 <__gethex+0xfe>
 8009954:	4252      	negs	r2, r2
 8009956:	4416      	add	r6, r2
 8009958:	f8ca 1000 	str.w	r1, [sl]
 800995c:	b1dc      	cbz	r4, 8009996 <__gethex+0x13e>
 800995e:	9b01      	ldr	r3, [sp, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bf14      	ite	ne
 8009964:	f04f 0800 	movne.w	r8, #0
 8009968:	f04f 0806 	moveq.w	r8, #6
 800996c:	4640      	mov	r0, r8
 800996e:	b005      	add	sp, #20
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	4645      	mov	r5, r8
 8009976:	4626      	mov	r6, r4
 8009978:	2401      	movs	r4, #1
 800997a:	e7c7      	b.n	800990c <__gethex+0xb4>
 800997c:	f04f 0b00 	mov.w	fp, #0
 8009980:	1ca9      	adds	r1, r5, #2
 8009982:	e7d0      	b.n	8009926 <__gethex+0xce>
 8009984:	f04f 0b01 	mov.w	fp, #1
 8009988:	e7fa      	b.n	8009980 <__gethex+0x128>
 800998a:	230a      	movs	r3, #10
 800998c:	fb03 0002 	mla	r0, r3, r2, r0
 8009990:	e7d0      	b.n	8009934 <__gethex+0xdc>
 8009992:	4629      	mov	r1, r5
 8009994:	e7e0      	b.n	8009958 <__gethex+0x100>
 8009996:	4621      	mov	r1, r4
 8009998:	eba5 0308 	sub.w	r3, r5, r8
 800999c:	3b01      	subs	r3, #1
 800999e:	2b07      	cmp	r3, #7
 80099a0:	dc0a      	bgt.n	80099b8 <__gethex+0x160>
 80099a2:	4648      	mov	r0, r9
 80099a4:	f7fe f940 	bl	8007c28 <_Balloc>
 80099a8:	4604      	mov	r4, r0
 80099aa:	b940      	cbnz	r0, 80099be <__gethex+0x166>
 80099ac:	4602      	mov	r2, r0
 80099ae:	21e4      	movs	r1, #228	; 0xe4
 80099b0:	4b61      	ldr	r3, [pc, #388]	; (8009b38 <__gethex+0x2e0>)
 80099b2:	4862      	ldr	r0, [pc, #392]	; (8009b3c <__gethex+0x2e4>)
 80099b4:	f7ff feb6 	bl	8009724 <__assert_func>
 80099b8:	3101      	adds	r1, #1
 80099ba:	105b      	asrs	r3, r3, #1
 80099bc:	e7ef      	b.n	800999e <__gethex+0x146>
 80099be:	2300      	movs	r3, #0
 80099c0:	469b      	mov	fp, r3
 80099c2:	f100 0a14 	add.w	sl, r0, #20
 80099c6:	f8cd a004 	str.w	sl, [sp, #4]
 80099ca:	45a8      	cmp	r8, r5
 80099cc:	d344      	bcc.n	8009a58 <__gethex+0x200>
 80099ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099d2:	4658      	mov	r0, fp
 80099d4:	f848 bb04 	str.w	fp, [r8], #4
 80099d8:	eba8 080a 	sub.w	r8, r8, sl
 80099dc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80099e0:	6122      	str	r2, [r4, #16]
 80099e2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80099e6:	f7fe fa11 	bl	8007e0c <__hi0bits>
 80099ea:	683d      	ldr	r5, [r7, #0]
 80099ec:	eba8 0800 	sub.w	r8, r8, r0
 80099f0:	45a8      	cmp	r8, r5
 80099f2:	dd59      	ble.n	8009aa8 <__gethex+0x250>
 80099f4:	eba8 0805 	sub.w	r8, r8, r5
 80099f8:	4641      	mov	r1, r8
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7fe fd8f 	bl	800851e <__any_on>
 8009a00:	4683      	mov	fp, r0
 8009a02:	b1b8      	cbz	r0, 8009a34 <__gethex+0x1dc>
 8009a04:	f04f 0b01 	mov.w	fp, #1
 8009a08:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a0c:	1159      	asrs	r1, r3, #5
 8009a0e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a12:	f003 021f 	and.w	r2, r3, #31
 8009a16:	fa0b f202 	lsl.w	r2, fp, r2
 8009a1a:	420a      	tst	r2, r1
 8009a1c:	d00a      	beq.n	8009a34 <__gethex+0x1dc>
 8009a1e:	455b      	cmp	r3, fp
 8009a20:	dd06      	ble.n	8009a30 <__gethex+0x1d8>
 8009a22:	4620      	mov	r0, r4
 8009a24:	f1a8 0102 	sub.w	r1, r8, #2
 8009a28:	f7fe fd79 	bl	800851e <__any_on>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d138      	bne.n	8009aa2 <__gethex+0x24a>
 8009a30:	f04f 0b02 	mov.w	fp, #2
 8009a34:	4641      	mov	r1, r8
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fea6 	bl	8009788 <rshift>
 8009a3c:	4446      	add	r6, r8
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	42b3      	cmp	r3, r6
 8009a42:	da41      	bge.n	8009ac8 <__gethex+0x270>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4648      	mov	r0, r9
 8009a48:	f7fe f92e 	bl	8007ca8 <_Bfree>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	e789      	b.n	800996c <__gethex+0x114>
 8009a58:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a5c:	2a2e      	cmp	r2, #46	; 0x2e
 8009a5e:	d014      	beq.n	8009a8a <__gethex+0x232>
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	d106      	bne.n	8009a72 <__gethex+0x21a>
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	f843 bb04 	str.w	fp, [r3], #4
 8009a6a:	f04f 0b00 	mov.w	fp, #0
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	465b      	mov	r3, fp
 8009a72:	7828      	ldrb	r0, [r5, #0]
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	f7ff feda 	bl	800982e <__hexdig_fun>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	f000 000f 	and.w	r0, r0, #15
 8009a80:	4098      	lsls	r0, r3
 8009a82:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a86:	3304      	adds	r3, #4
 8009a88:	e79f      	b.n	80099ca <__gethex+0x172>
 8009a8a:	45a8      	cmp	r8, r5
 8009a8c:	d8e8      	bhi.n	8009a60 <__gethex+0x208>
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4628      	mov	r0, r5
 8009a92:	4928      	ldr	r1, [pc, #160]	; (8009b34 <__gethex+0x2dc>)
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	f7ff fe1d 	bl	80096d4 <strncmp>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1df      	bne.n	8009a60 <__gethex+0x208>
 8009aa0:	e793      	b.n	80099ca <__gethex+0x172>
 8009aa2:	f04f 0b03 	mov.w	fp, #3
 8009aa6:	e7c5      	b.n	8009a34 <__gethex+0x1dc>
 8009aa8:	da0b      	bge.n	8009ac2 <__gethex+0x26a>
 8009aaa:	eba5 0808 	sub.w	r8, r5, r8
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f7fe fb10 	bl	80080d8 <__lshift>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	eba6 0608 	sub.w	r6, r6, r8
 8009abe:	f100 0a14 	add.w	sl, r0, #20
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	e7ba      	b.n	8009a3e <__gethex+0x1e6>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	42b3      	cmp	r3, r6
 8009acc:	dd74      	ble.n	8009bb8 <__gethex+0x360>
 8009ace:	1b9e      	subs	r6, r3, r6
 8009ad0:	42b5      	cmp	r5, r6
 8009ad2:	dc35      	bgt.n	8009b40 <__gethex+0x2e8>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d023      	beq.n	8009b22 <__gethex+0x2ca>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d025      	beq.n	8009b2a <__gethex+0x2d2>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d115      	bne.n	8009b0e <__gethex+0x2b6>
 8009ae2:	42b5      	cmp	r5, r6
 8009ae4:	d113      	bne.n	8009b0e <__gethex+0x2b6>
 8009ae6:	2d01      	cmp	r5, #1
 8009ae8:	d10b      	bne.n	8009b02 <__gethex+0x2aa>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	9a02      	ldr	r2, [sp, #8]
 8009aee:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	2301      	movs	r3, #1
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	f8ca 3000 	str.w	r3, [sl]
 8009afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009afe:	601c      	str	r4, [r3, #0]
 8009b00:	e734      	b.n	800996c <__gethex+0x114>
 8009b02:	4620      	mov	r0, r4
 8009b04:	1e69      	subs	r1, r5, #1
 8009b06:	f7fe fd0a 	bl	800851e <__any_on>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d1ed      	bne.n	8009aea <__gethex+0x292>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4648      	mov	r0, r9
 8009b12:	f7fe f8c9 	bl	8007ca8 <_Bfree>
 8009b16:	2300      	movs	r3, #0
 8009b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e724      	b.n	800996c <__gethex+0x114>
 8009b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1f2      	bne.n	8009b0e <__gethex+0x2b6>
 8009b28:	e7df      	b.n	8009aea <__gethex+0x292>
 8009b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1dc      	bne.n	8009aea <__gethex+0x292>
 8009b30:	e7ed      	b.n	8009b0e <__gethex+0x2b6>
 8009b32:	bf00      	nop
 8009b34:	0800a74c 	.word	0x0800a74c
 8009b38:	0800a5e3 	.word	0x0800a5e3
 8009b3c:	0800a8f6 	.word	0x0800a8f6
 8009b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8009b44:	f1bb 0f00 	cmp.w	fp, #0
 8009b48:	d133      	bne.n	8009bb2 <__gethex+0x35a>
 8009b4a:	f1b8 0f00 	cmp.w	r8, #0
 8009b4e:	d004      	beq.n	8009b5a <__gethex+0x302>
 8009b50:	4641      	mov	r1, r8
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7fe fce3 	bl	800851e <__any_on>
 8009b58:	4683      	mov	fp, r0
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b60:	f008 081f 	and.w	r8, r8, #31
 8009b64:	fa03 f308 	lsl.w	r3, r3, r8
 8009b68:	f04f 0802 	mov.w	r8, #2
 8009b6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b70:	4631      	mov	r1, r6
 8009b72:	4213      	tst	r3, r2
 8009b74:	4620      	mov	r0, r4
 8009b76:	bf18      	it	ne
 8009b78:	f04b 0b02 	orrne.w	fp, fp, #2
 8009b7c:	1bad      	subs	r5, r5, r6
 8009b7e:	f7ff fe03 	bl	8009788 <rshift>
 8009b82:	687e      	ldr	r6, [r7, #4]
 8009b84:	f1bb 0f00 	cmp.w	fp, #0
 8009b88:	d04a      	beq.n	8009c20 <__gethex+0x3c8>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d016      	beq.n	8009bbe <__gethex+0x366>
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d018      	beq.n	8009bc6 <__gethex+0x36e>
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d109      	bne.n	8009bac <__gethex+0x354>
 8009b98:	f01b 0f02 	tst.w	fp, #2
 8009b9c:	d006      	beq.n	8009bac <__gethex+0x354>
 8009b9e:	f8da 3000 	ldr.w	r3, [sl]
 8009ba2:	ea4b 0b03 	orr.w	fp, fp, r3
 8009ba6:	f01b 0f01 	tst.w	fp, #1
 8009baa:	d10f      	bne.n	8009bcc <__gethex+0x374>
 8009bac:	f048 0810 	orr.w	r8, r8, #16
 8009bb0:	e036      	b.n	8009c20 <__gethex+0x3c8>
 8009bb2:	f04f 0b01 	mov.w	fp, #1
 8009bb6:	e7d0      	b.n	8009b5a <__gethex+0x302>
 8009bb8:	f04f 0801 	mov.w	r8, #1
 8009bbc:	e7e2      	b.n	8009b84 <__gethex+0x32c>
 8009bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc0:	f1c3 0301 	rsb	r3, r3, #1
 8009bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0ef      	beq.n	8009bac <__gethex+0x354>
 8009bcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bd0:	f104 0214 	add.w	r2, r4, #20
 8009bd4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009be0:	4694      	mov	ip, r2
 8009be2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009be6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009bea:	d01e      	beq.n	8009c2a <__gethex+0x3d2>
 8009bec:	3101      	adds	r1, #1
 8009bee:	f8cc 1000 	str.w	r1, [ip]
 8009bf2:	f1b8 0f02 	cmp.w	r8, #2
 8009bf6:	f104 0214 	add.w	r2, r4, #20
 8009bfa:	d13d      	bne.n	8009c78 <__gethex+0x420>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	42ab      	cmp	r3, r5
 8009c02:	d10b      	bne.n	8009c1c <__gethex+0x3c4>
 8009c04:	2301      	movs	r3, #1
 8009c06:	1169      	asrs	r1, r5, #5
 8009c08:	f005 051f 	and.w	r5, r5, #31
 8009c0c:	fa03 f505 	lsl.w	r5, r3, r5
 8009c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c14:	421d      	tst	r5, r3
 8009c16:	bf18      	it	ne
 8009c18:	f04f 0801 	movne.w	r8, #1
 8009c1c:	f048 0820 	orr.w	r8, r8, #32
 8009c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c22:	601c      	str	r4, [r3, #0]
 8009c24:	9b02      	ldr	r3, [sp, #8]
 8009c26:	601e      	str	r6, [r3, #0]
 8009c28:	e6a0      	b.n	800996c <__gethex+0x114>
 8009c2a:	4290      	cmp	r0, r2
 8009c2c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c30:	d8d6      	bhi.n	8009be0 <__gethex+0x388>
 8009c32:	68a2      	ldr	r2, [r4, #8]
 8009c34:	4593      	cmp	fp, r2
 8009c36:	db17      	blt.n	8009c68 <__gethex+0x410>
 8009c38:	6861      	ldr	r1, [r4, #4]
 8009c3a:	4648      	mov	r0, r9
 8009c3c:	3101      	adds	r1, #1
 8009c3e:	f7fd fff3 	bl	8007c28 <_Balloc>
 8009c42:	4682      	mov	sl, r0
 8009c44:	b918      	cbnz	r0, 8009c4e <__gethex+0x3f6>
 8009c46:	4602      	mov	r2, r0
 8009c48:	2184      	movs	r1, #132	; 0x84
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <__gethex+0x45c>)
 8009c4c:	e6b1      	b.n	80099b2 <__gethex+0x15a>
 8009c4e:	6922      	ldr	r2, [r4, #16]
 8009c50:	f104 010c 	add.w	r1, r4, #12
 8009c54:	3202      	adds	r2, #2
 8009c56:	0092      	lsls	r2, r2, #2
 8009c58:	300c      	adds	r0, #12
 8009c5a:	f7fd f866 	bl	8006d2a <memcpy>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4648      	mov	r0, r9
 8009c62:	f7fe f821 	bl	8007ca8 <_Bfree>
 8009c66:	4654      	mov	r4, sl
 8009c68:	6922      	ldr	r2, [r4, #16]
 8009c6a:	1c51      	adds	r1, r2, #1
 8009c6c:	6121      	str	r1, [r4, #16]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c74:	6151      	str	r1, [r2, #20]
 8009c76:	e7bc      	b.n	8009bf2 <__gethex+0x39a>
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	4559      	cmp	r1, fp
 8009c7c:	dd0b      	ble.n	8009c96 <__gethex+0x43e>
 8009c7e:	2101      	movs	r1, #1
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff fd81 	bl	8009788 <rshift>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	3601      	adds	r6, #1
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	f6ff aeda 	blt.w	8009a44 <__gethex+0x1ec>
 8009c90:	f04f 0801 	mov.w	r8, #1
 8009c94:	e7c2      	b.n	8009c1c <__gethex+0x3c4>
 8009c96:	f015 051f 	ands.w	r5, r5, #31
 8009c9a:	d0f9      	beq.n	8009c90 <__gethex+0x438>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	f1c5 0520 	rsb	r5, r5, #32
 8009ca2:	441a      	add	r2, r3
 8009ca4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009ca8:	f7fe f8b0 	bl	8007e0c <__hi0bits>
 8009cac:	42a8      	cmp	r0, r5
 8009cae:	dbe6      	blt.n	8009c7e <__gethex+0x426>
 8009cb0:	e7ee      	b.n	8009c90 <__gethex+0x438>
 8009cb2:	bf00      	nop
 8009cb4:	0800a5e3 	.word	0x0800a5e3

08009cb8 <L_shift>:
 8009cb8:	f1c2 0208 	rsb	r2, r2, #8
 8009cbc:	0092      	lsls	r2, r2, #2
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	f1c2 0620 	rsb	r6, r2, #32
 8009cc4:	6843      	ldr	r3, [r0, #4]
 8009cc6:	6804      	ldr	r4, [r0, #0]
 8009cc8:	fa03 f506 	lsl.w	r5, r3, r6
 8009ccc:	432c      	orrs	r4, r5
 8009cce:	40d3      	lsrs	r3, r2
 8009cd0:	6004      	str	r4, [r0, #0]
 8009cd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cd6:	4288      	cmp	r0, r1
 8009cd8:	d3f4      	bcc.n	8009cc4 <L_shift+0xc>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}

08009cdc <__match>:
 8009cdc:	b530      	push	{r4, r5, lr}
 8009cde:	6803      	ldr	r3, [r0, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ce6:	b914      	cbnz	r4, 8009cee <__match+0x12>
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	2001      	movs	r0, #1
 8009cec:	bd30      	pop	{r4, r5, pc}
 8009cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cf6:	2d19      	cmp	r5, #25
 8009cf8:	bf98      	it	ls
 8009cfa:	3220      	addls	r2, #32
 8009cfc:	42a2      	cmp	r2, r4
 8009cfe:	d0f0      	beq.n	8009ce2 <__match+0x6>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7f3      	b.n	8009cec <__match+0x10>

08009d04 <__hexnan>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	2500      	movs	r5, #0
 8009d0a:	680b      	ldr	r3, [r1, #0]
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	115e      	asrs	r6, r3, #5
 8009d10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d14:	f013 031f 	ands.w	r3, r3, #31
 8009d18:	bf18      	it	ne
 8009d1a:	3604      	addne	r6, #4
 8009d1c:	1f37      	subs	r7, r6, #4
 8009d1e:	4690      	mov	r8, r2
 8009d20:	46b9      	mov	r9, r7
 8009d22:	463c      	mov	r4, r7
 8009d24:	46ab      	mov	fp, r5
 8009d26:	b087      	sub	sp, #28
 8009d28:	6801      	ldr	r1, [r0, #0]
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d30:	9502      	str	r5, [sp, #8]
 8009d32:	784a      	ldrb	r2, [r1, #1]
 8009d34:	1c4b      	adds	r3, r1, #1
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	b342      	cbz	r2, 8009d8c <__hexnan+0x88>
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	9204      	str	r2, [sp, #16]
 8009d40:	f7ff fd75 	bl	800982e <__hexdig_fun>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d14f      	bne.n	8009de8 <__hexnan+0xe4>
 8009d48:	9a04      	ldr	r2, [sp, #16]
 8009d4a:	9905      	ldr	r1, [sp, #20]
 8009d4c:	2a20      	cmp	r2, #32
 8009d4e:	d818      	bhi.n	8009d82 <__hexnan+0x7e>
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	459b      	cmp	fp, r3
 8009d54:	dd13      	ble.n	8009d7e <__hexnan+0x7a>
 8009d56:	454c      	cmp	r4, r9
 8009d58:	d206      	bcs.n	8009d68 <__hexnan+0x64>
 8009d5a:	2d07      	cmp	r5, #7
 8009d5c:	dc04      	bgt.n	8009d68 <__hexnan+0x64>
 8009d5e:	462a      	mov	r2, r5
 8009d60:	4649      	mov	r1, r9
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff ffa8 	bl	8009cb8 <L_shift>
 8009d68:	4544      	cmp	r4, r8
 8009d6a:	d950      	bls.n	8009e0e <__hexnan+0x10a>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f1a4 0904 	sub.w	r9, r4, #4
 8009d72:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d76:	461d      	mov	r5, r3
 8009d78:	464c      	mov	r4, r9
 8009d7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d7e:	9903      	ldr	r1, [sp, #12]
 8009d80:	e7d7      	b.n	8009d32 <__hexnan+0x2e>
 8009d82:	2a29      	cmp	r2, #41	; 0x29
 8009d84:	d155      	bne.n	8009e32 <__hexnan+0x12e>
 8009d86:	3102      	adds	r1, #2
 8009d88:	f8ca 1000 	str.w	r1, [sl]
 8009d8c:	f1bb 0f00 	cmp.w	fp, #0
 8009d90:	d04f      	beq.n	8009e32 <__hexnan+0x12e>
 8009d92:	454c      	cmp	r4, r9
 8009d94:	d206      	bcs.n	8009da4 <__hexnan+0xa0>
 8009d96:	2d07      	cmp	r5, #7
 8009d98:	dc04      	bgt.n	8009da4 <__hexnan+0xa0>
 8009d9a:	462a      	mov	r2, r5
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7ff ff8a 	bl	8009cb8 <L_shift>
 8009da4:	4544      	cmp	r4, r8
 8009da6:	d934      	bls.n	8009e12 <__hexnan+0x10e>
 8009da8:	4623      	mov	r3, r4
 8009daa:	f1a8 0204 	sub.w	r2, r8, #4
 8009dae:	f853 1b04 	ldr.w	r1, [r3], #4
 8009db2:	429f      	cmp	r7, r3
 8009db4:	f842 1f04 	str.w	r1, [r2, #4]!
 8009db8:	d2f9      	bcs.n	8009dae <__hexnan+0xaa>
 8009dba:	1b3b      	subs	r3, r7, r4
 8009dbc:	f023 0303 	bic.w	r3, r3, #3
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	3e03      	subs	r6, #3
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	42a6      	cmp	r6, r4
 8009dc8:	bf38      	it	cc
 8009dca:	2304      	movcc	r3, #4
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4443      	add	r3, r8
 8009dd0:	f843 2b04 	str.w	r2, [r3], #4
 8009dd4:	429f      	cmp	r7, r3
 8009dd6:	d2fb      	bcs.n	8009dd0 <__hexnan+0xcc>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	b91b      	cbnz	r3, 8009de4 <__hexnan+0xe0>
 8009ddc:	4547      	cmp	r7, r8
 8009dde:	d126      	bne.n	8009e2e <__hexnan+0x12a>
 8009de0:	2301      	movs	r3, #1
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	2005      	movs	r0, #5
 8009de6:	e025      	b.n	8009e34 <__hexnan+0x130>
 8009de8:	3501      	adds	r5, #1
 8009dea:	2d08      	cmp	r5, #8
 8009dec:	f10b 0b01 	add.w	fp, fp, #1
 8009df0:	dd06      	ble.n	8009e00 <__hexnan+0xfc>
 8009df2:	4544      	cmp	r4, r8
 8009df4:	d9c3      	bls.n	8009d7e <__hexnan+0x7a>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2501      	movs	r5, #1
 8009dfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dfe:	3c04      	subs	r4, #4
 8009e00:	6822      	ldr	r2, [r4, #0]
 8009e02:	f000 000f 	and.w	r0, r0, #15
 8009e06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e0a:	6020      	str	r0, [r4, #0]
 8009e0c:	e7b7      	b.n	8009d7e <__hexnan+0x7a>
 8009e0e:	2508      	movs	r5, #8
 8009e10:	e7b5      	b.n	8009d7e <__hexnan+0x7a>
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0df      	beq.n	8009dd8 <__hexnan+0xd4>
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1c:	f1c3 0320 	rsb	r3, r3, #32
 8009e20:	40da      	lsrs	r2, r3
 8009e22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e26:	4013      	ands	r3, r2
 8009e28:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e2c:	e7d4      	b.n	8009dd8 <__hexnan+0xd4>
 8009e2e:	3f04      	subs	r7, #4
 8009e30:	e7d2      	b.n	8009dd8 <__hexnan+0xd4>
 8009e32:	2004      	movs	r0, #4
 8009e34:	b007      	add	sp, #28
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e3a <__ascii_mbtowc>:
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	b901      	cbnz	r1, 8009e40 <__ascii_mbtowc+0x6>
 8009e3e:	a901      	add	r1, sp, #4
 8009e40:	b142      	cbz	r2, 8009e54 <__ascii_mbtowc+0x1a>
 8009e42:	b14b      	cbz	r3, 8009e58 <__ascii_mbtowc+0x1e>
 8009e44:	7813      	ldrb	r3, [r2, #0]
 8009e46:	600b      	str	r3, [r1, #0]
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	1e10      	subs	r0, r2, #0
 8009e4c:	bf18      	it	ne
 8009e4e:	2001      	movne	r0, #1
 8009e50:	b002      	add	sp, #8
 8009e52:	4770      	bx	lr
 8009e54:	4610      	mov	r0, r2
 8009e56:	e7fb      	b.n	8009e50 <__ascii_mbtowc+0x16>
 8009e58:	f06f 0001 	mvn.w	r0, #1
 8009e5c:	e7f8      	b.n	8009e50 <__ascii_mbtowc+0x16>

08009e5e <_realloc_r>:
 8009e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e62:	4680      	mov	r8, r0
 8009e64:	4614      	mov	r4, r2
 8009e66:	460e      	mov	r6, r1
 8009e68:	b921      	cbnz	r1, 8009e74 <_realloc_r+0x16>
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	f7fd be4e 	b.w	8007b10 <_malloc_r>
 8009e74:	b92a      	cbnz	r2, 8009e82 <_realloc_r+0x24>
 8009e76:	f7fd fddb 	bl	8007a30 <_free_r>
 8009e7a:	4625      	mov	r5, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e82:	f000 f842 	bl	8009f0a <_malloc_usable_size_r>
 8009e86:	4284      	cmp	r4, r0
 8009e88:	4607      	mov	r7, r0
 8009e8a:	d802      	bhi.n	8009e92 <_realloc_r+0x34>
 8009e8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e90:	d812      	bhi.n	8009eb8 <_realloc_r+0x5a>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4640      	mov	r0, r8
 8009e96:	f7fd fe3b 	bl	8007b10 <_malloc_r>
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d0ed      	beq.n	8009e7c <_realloc_r+0x1e>
 8009ea0:	42bc      	cmp	r4, r7
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	bf28      	it	cs
 8009ea8:	463a      	movcs	r2, r7
 8009eaa:	f7fc ff3e 	bl	8006d2a <memcpy>
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	f7fd fdbd 	bl	8007a30 <_free_r>
 8009eb6:	e7e1      	b.n	8009e7c <_realloc_r+0x1e>
 8009eb8:	4635      	mov	r5, r6
 8009eba:	e7df      	b.n	8009e7c <_realloc_r+0x1e>

08009ebc <__ascii_wctomb>:
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	b141      	cbz	r1, 8009ed4 <__ascii_wctomb+0x18>
 8009ec2:	2aff      	cmp	r2, #255	; 0xff
 8009ec4:	d904      	bls.n	8009ed0 <__ascii_wctomb+0x14>
 8009ec6:	228a      	movs	r2, #138	; 0x8a
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	601a      	str	r2, [r3, #0]
 8009ece:	4770      	bx	lr
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	700a      	strb	r2, [r1, #0]
 8009ed4:	4770      	bx	lr
	...

08009ed8 <fiprintf>:
 8009ed8:	b40e      	push	{r1, r2, r3}
 8009eda:	b503      	push	{r0, r1, lr}
 8009edc:	4601      	mov	r1, r0
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <fiprintf+0x20>)
 8009ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee6:	6800      	ldr	r0, [r0, #0]
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	f000 f83d 	bl	8009f68 <_vfiprintf_r>
 8009eee:	b002      	add	sp, #8
 8009ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef4:	b003      	add	sp, #12
 8009ef6:	4770      	bx	lr
 8009ef8:	20000068 	.word	0x20000068

08009efc <abort>:
 8009efc:	2006      	movs	r0, #6
 8009efe:	b508      	push	{r3, lr}
 8009f00:	f000 fa0a 	bl	800a318 <raise>
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7f7 f924 	bl	8001152 <_exit>

08009f0a <_malloc_usable_size_r>:
 8009f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0e:	1f18      	subs	r0, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bfbc      	itt	lt
 8009f14:	580b      	ldrlt	r3, [r1, r0]
 8009f16:	18c0      	addlt	r0, r0, r3
 8009f18:	4770      	bx	lr

08009f1a <__sfputc_r>:
 8009f1a:	6893      	ldr	r3, [r2, #8]
 8009f1c:	b410      	push	{r4}
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	6093      	str	r3, [r2, #8]
 8009f24:	da07      	bge.n	8009f36 <__sfputc_r+0x1c>
 8009f26:	6994      	ldr	r4, [r2, #24]
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	db01      	blt.n	8009f30 <__sfputc_r+0x16>
 8009f2c:	290a      	cmp	r1, #10
 8009f2e:	d102      	bne.n	8009f36 <__sfputc_r+0x1c>
 8009f30:	bc10      	pop	{r4}
 8009f32:	f000 b933 	b.w	800a19c <__swbuf_r>
 8009f36:	6813      	ldr	r3, [r2, #0]
 8009f38:	1c58      	adds	r0, r3, #1
 8009f3a:	6010      	str	r0, [r2, #0]
 8009f3c:	7019      	strb	r1, [r3, #0]
 8009f3e:	4608      	mov	r0, r1
 8009f40:	bc10      	pop	{r4}
 8009f42:	4770      	bx	lr

08009f44 <__sfputs_r>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	4606      	mov	r6, r0
 8009f48:	460f      	mov	r7, r1
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	18d5      	adds	r5, r2, r3
 8009f4e:	42ac      	cmp	r4, r5
 8009f50:	d101      	bne.n	8009f56 <__sfputs_r+0x12>
 8009f52:	2000      	movs	r0, #0
 8009f54:	e007      	b.n	8009f66 <__sfputs_r+0x22>
 8009f56:	463a      	mov	r2, r7
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5e:	f7ff ffdc 	bl	8009f1a <__sfputc_r>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d1f3      	bne.n	8009f4e <__sfputs_r+0xa>
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f68 <_vfiprintf_r>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	4614      	mov	r4, r2
 8009f70:	4698      	mov	r8, r3
 8009f72:	4606      	mov	r6, r0
 8009f74:	b09d      	sub	sp, #116	; 0x74
 8009f76:	b118      	cbz	r0, 8009f80 <_vfiprintf_r+0x18>
 8009f78:	6a03      	ldr	r3, [r0, #32]
 8009f7a:	b90b      	cbnz	r3, 8009f80 <_vfiprintf_r+0x18>
 8009f7c:	f7fc fdae 	bl	8006adc <__sinit>
 8009f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_vfiprintf_r+0x2a>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	059a      	lsls	r2, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_vfiprintf_r+0x2a>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f7fc febc 	bl	8006d0a <__retarget_lock_acquire_recursive>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	071b      	lsls	r3, r3, #28
 8009f96:	d501      	bpl.n	8009f9c <_vfiprintf_r+0x34>
 8009f98:	692b      	ldr	r3, [r5, #16]
 8009f9a:	b99b      	cbnz	r3, 8009fc4 <_vfiprintf_r+0x5c>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f000 f93a 	bl	800a218 <__swsetup_r>
 8009fa4:	b170      	cbz	r0, 8009fc4 <_vfiprintf_r+0x5c>
 8009fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa8:	07dc      	lsls	r4, r3, #31
 8009faa:	d504      	bpl.n	8009fb6 <_vfiprintf_r+0x4e>
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	b01d      	add	sp, #116	; 0x74
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	89ab      	ldrh	r3, [r5, #12]
 8009fb8:	0598      	lsls	r0, r3, #22
 8009fba:	d4f7      	bmi.n	8009fac <_vfiprintf_r+0x44>
 8009fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fbe:	f7fc fea5 	bl	8006d0c <__retarget_lock_release_recursive>
 8009fc2:	e7f3      	b.n	8009fac <_vfiprintf_r+0x44>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc8:	2320      	movs	r3, #32
 8009fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fce:	2330      	movs	r3, #48	; 0x30
 8009fd0:	f04f 0901 	mov.w	r9, #1
 8009fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a188 <_vfiprintf_r+0x220>
 8009fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	469a      	mov	sl, r3
 8009fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe8:	b10a      	cbz	r2, 8009fee <_vfiprintf_r+0x86>
 8009fea:	2a25      	cmp	r2, #37	; 0x25
 8009fec:	d1f9      	bne.n	8009fe2 <_vfiprintf_r+0x7a>
 8009fee:	ebba 0b04 	subs.w	fp, sl, r4
 8009ff2:	d00b      	beq.n	800a00c <_vfiprintf_r+0xa4>
 8009ff4:	465b      	mov	r3, fp
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7ff ffa2 	bl	8009f44 <__sfputs_r>
 800a000:	3001      	adds	r0, #1
 800a002:	f000 80a9 	beq.w	800a158 <_vfiprintf_r+0x1f0>
 800a006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a008:	445a      	add	r2, fp
 800a00a:	9209      	str	r2, [sp, #36]	; 0x24
 800a00c:	f89a 3000 	ldrb.w	r3, [sl]
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80a1 	beq.w	800a158 <_vfiprintf_r+0x1f0>
 800a016:	2300      	movs	r3, #0
 800a018:	f04f 32ff 	mov.w	r2, #4294967295
 800a01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a020:	f10a 0a01 	add.w	sl, sl, #1
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	9307      	str	r3, [sp, #28]
 800a028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a02c:	931a      	str	r3, [sp, #104]	; 0x68
 800a02e:	4654      	mov	r4, sl
 800a030:	2205      	movs	r2, #5
 800a032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a036:	4854      	ldr	r0, [pc, #336]	; (800a188 <_vfiprintf_r+0x220>)
 800a038:	f7fc fe69 	bl	8006d0e <memchr>
 800a03c:	9a04      	ldr	r2, [sp, #16]
 800a03e:	b9d8      	cbnz	r0, 800a078 <_vfiprintf_r+0x110>
 800a040:	06d1      	lsls	r1, r2, #27
 800a042:	bf44      	itt	mi
 800a044:	2320      	movmi	r3, #32
 800a046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a04a:	0713      	lsls	r3, r2, #28
 800a04c:	bf44      	itt	mi
 800a04e:	232b      	movmi	r3, #43	; 0x2b
 800a050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a054:	f89a 3000 	ldrb.w	r3, [sl]
 800a058:	2b2a      	cmp	r3, #42	; 0x2a
 800a05a:	d015      	beq.n	800a088 <_vfiprintf_r+0x120>
 800a05c:	4654      	mov	r4, sl
 800a05e:	2000      	movs	r0, #0
 800a060:	f04f 0c0a 	mov.w	ip, #10
 800a064:	9a07      	ldr	r2, [sp, #28]
 800a066:	4621      	mov	r1, r4
 800a068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a06c:	3b30      	subs	r3, #48	; 0x30
 800a06e:	2b09      	cmp	r3, #9
 800a070:	d94d      	bls.n	800a10e <_vfiprintf_r+0x1a6>
 800a072:	b1b0      	cbz	r0, 800a0a2 <_vfiprintf_r+0x13a>
 800a074:	9207      	str	r2, [sp, #28]
 800a076:	e014      	b.n	800a0a2 <_vfiprintf_r+0x13a>
 800a078:	eba0 0308 	sub.w	r3, r0, r8
 800a07c:	fa09 f303 	lsl.w	r3, r9, r3
 800a080:	4313      	orrs	r3, r2
 800a082:	46a2      	mov	sl, r4
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	e7d2      	b.n	800a02e <_vfiprintf_r+0xc6>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	1d19      	adds	r1, r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	9103      	str	r1, [sp, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfbb      	ittet	lt
 800a094:	425b      	neglt	r3, r3
 800a096:	f042 0202 	orrlt.w	r2, r2, #2
 800a09a:	9307      	strge	r3, [sp, #28]
 800a09c:	9307      	strlt	r3, [sp, #28]
 800a09e:	bfb8      	it	lt
 800a0a0:	9204      	strlt	r2, [sp, #16]
 800a0a2:	7823      	ldrb	r3, [r4, #0]
 800a0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a6:	d10c      	bne.n	800a0c2 <_vfiprintf_r+0x15a>
 800a0a8:	7863      	ldrb	r3, [r4, #1]
 800a0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ac:	d134      	bne.n	800a118 <_vfiprintf_r+0x1b0>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	3402      	adds	r4, #2
 800a0b2:	1d1a      	adds	r2, r3, #4
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	9203      	str	r2, [sp, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bfb8      	it	lt
 800a0bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0c0:	9305      	str	r3, [sp, #20]
 800a0c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a18c <_vfiprintf_r+0x224>
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	7821      	ldrb	r1, [r4, #0]
 800a0cc:	f7fc fe1f 	bl	8006d0e <memchr>
 800a0d0:	b138      	cbz	r0, 800a0e2 <_vfiprintf_r+0x17a>
 800a0d2:	2240      	movs	r2, #64	; 0x40
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	eba0 000a 	sub.w	r0, r0, sl
 800a0da:	4082      	lsls	r2, r0
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	3401      	adds	r4, #1
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e6:	2206      	movs	r2, #6
 800a0e8:	4829      	ldr	r0, [pc, #164]	; (800a190 <_vfiprintf_r+0x228>)
 800a0ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ee:	f7fc fe0e 	bl	8006d0e <memchr>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d03f      	beq.n	800a176 <_vfiprintf_r+0x20e>
 800a0f6:	4b27      	ldr	r3, [pc, #156]	; (800a194 <_vfiprintf_r+0x22c>)
 800a0f8:	bb1b      	cbnz	r3, 800a142 <_vfiprintf_r+0x1da>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	3307      	adds	r3, #7
 800a0fe:	f023 0307 	bic.w	r3, r3, #7
 800a102:	3308      	adds	r3, #8
 800a104:	9303      	str	r3, [sp, #12]
 800a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a108:	443b      	add	r3, r7
 800a10a:	9309      	str	r3, [sp, #36]	; 0x24
 800a10c:	e768      	b.n	8009fe0 <_vfiprintf_r+0x78>
 800a10e:	460c      	mov	r4, r1
 800a110:	2001      	movs	r0, #1
 800a112:	fb0c 3202 	mla	r2, ip, r2, r3
 800a116:	e7a6      	b.n	800a066 <_vfiprintf_r+0xfe>
 800a118:	2300      	movs	r3, #0
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4619      	mov	r1, r3
 800a120:	3401      	adds	r4, #1
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	4620      	mov	r0, r4
 800a126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a12a:	3a30      	subs	r2, #48	; 0x30
 800a12c:	2a09      	cmp	r2, #9
 800a12e:	d903      	bls.n	800a138 <_vfiprintf_r+0x1d0>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0c6      	beq.n	800a0c2 <_vfiprintf_r+0x15a>
 800a134:	9105      	str	r1, [sp, #20]
 800a136:	e7c4      	b.n	800a0c2 <_vfiprintf_r+0x15a>
 800a138:	4604      	mov	r4, r0
 800a13a:	2301      	movs	r3, #1
 800a13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a140:	e7f0      	b.n	800a124 <_vfiprintf_r+0x1bc>
 800a142:	ab03      	add	r3, sp, #12
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	462a      	mov	r2, r5
 800a148:	4630      	mov	r0, r6
 800a14a:	4b13      	ldr	r3, [pc, #76]	; (800a198 <_vfiprintf_r+0x230>)
 800a14c:	a904      	add	r1, sp, #16
 800a14e:	f7fb fe69 	bl	8005e24 <_printf_float>
 800a152:	4607      	mov	r7, r0
 800a154:	1c78      	adds	r0, r7, #1
 800a156:	d1d6      	bne.n	800a106 <_vfiprintf_r+0x19e>
 800a158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a15a:	07d9      	lsls	r1, r3, #31
 800a15c:	d405      	bmi.n	800a16a <_vfiprintf_r+0x202>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	059a      	lsls	r2, r3, #22
 800a162:	d402      	bmi.n	800a16a <_vfiprintf_r+0x202>
 800a164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a166:	f7fc fdd1 	bl	8006d0c <__retarget_lock_release_recursive>
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	065b      	lsls	r3, r3, #25
 800a16e:	f53f af1d 	bmi.w	8009fac <_vfiprintf_r+0x44>
 800a172:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a174:	e71c      	b.n	8009fb0 <_vfiprintf_r+0x48>
 800a176:	ab03      	add	r3, sp, #12
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	462a      	mov	r2, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	4b06      	ldr	r3, [pc, #24]	; (800a198 <_vfiprintf_r+0x230>)
 800a180:	a904      	add	r1, sp, #16
 800a182:	f7fc f8ef 	bl	8006364 <_printf_i>
 800a186:	e7e4      	b.n	800a152 <_vfiprintf_r+0x1ea>
 800a188:	0800a8a1 	.word	0x0800a8a1
 800a18c:	0800a8a7 	.word	0x0800a8a7
 800a190:	0800a8ab 	.word	0x0800a8ab
 800a194:	08005e25 	.word	0x08005e25
 800a198:	08009f45 	.word	0x08009f45

0800a19c <__swbuf_r>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	460e      	mov	r6, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	b118      	cbz	r0, 800a1ae <__swbuf_r+0x12>
 800a1a6:	6a03      	ldr	r3, [r0, #32]
 800a1a8:	b90b      	cbnz	r3, 800a1ae <__swbuf_r+0x12>
 800a1aa:	f7fc fc97 	bl	8006adc <__sinit>
 800a1ae:	69a3      	ldr	r3, [r4, #24]
 800a1b0:	60a3      	str	r3, [r4, #8]
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	071a      	lsls	r2, r3, #28
 800a1b6:	d525      	bpl.n	800a204 <__swbuf_r+0x68>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	b31b      	cbz	r3, 800a204 <__swbuf_r+0x68>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	6922      	ldr	r2, [r4, #16]
 800a1c0:	b2f6      	uxtb	r6, r6
 800a1c2:	1a98      	subs	r0, r3, r2
 800a1c4:	6963      	ldr	r3, [r4, #20]
 800a1c6:	4637      	mov	r7, r6
 800a1c8:	4283      	cmp	r3, r0
 800a1ca:	dc04      	bgt.n	800a1d6 <__swbuf_r+0x3a>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f7ff fa3e 	bl	8009650 <_fflush_r>
 800a1d4:	b9e0      	cbnz	r0, 800a210 <__swbuf_r+0x74>
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	60a3      	str	r3, [r4, #8]
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	6022      	str	r2, [r4, #0]
 800a1e2:	701e      	strb	r6, [r3, #0]
 800a1e4:	6962      	ldr	r2, [r4, #20]
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d004      	beq.n	800a1f6 <__swbuf_r+0x5a>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	07db      	lsls	r3, r3, #31
 800a1f0:	d506      	bpl.n	800a200 <__swbuf_r+0x64>
 800a1f2:	2e0a      	cmp	r6, #10
 800a1f4:	d104      	bne.n	800a200 <__swbuf_r+0x64>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7ff fa29 	bl	8009650 <_fflush_r>
 800a1fe:	b938      	cbnz	r0, 800a210 <__swbuf_r+0x74>
 800a200:	4638      	mov	r0, r7
 800a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a204:	4621      	mov	r1, r4
 800a206:	4628      	mov	r0, r5
 800a208:	f000 f806 	bl	800a218 <__swsetup_r>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d0d5      	beq.n	800a1bc <__swbuf_r+0x20>
 800a210:	f04f 37ff 	mov.w	r7, #4294967295
 800a214:	e7f4      	b.n	800a200 <__swbuf_r+0x64>
	...

0800a218 <__swsetup_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <__swsetup_r+0xac>)
 800a21c:	4605      	mov	r5, r0
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	460c      	mov	r4, r1
 800a222:	b118      	cbz	r0, 800a22c <__swsetup_r+0x14>
 800a224:	6a03      	ldr	r3, [r0, #32]
 800a226:	b90b      	cbnz	r3, 800a22c <__swsetup_r+0x14>
 800a228:	f7fc fc58 	bl	8006adc <__sinit>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a232:	0718      	lsls	r0, r3, #28
 800a234:	d422      	bmi.n	800a27c <__swsetup_r+0x64>
 800a236:	06d9      	lsls	r1, r3, #27
 800a238:	d407      	bmi.n	800a24a <__swsetup_r+0x32>
 800a23a:	2309      	movs	r3, #9
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	e034      	b.n	800a2b4 <__swsetup_r+0x9c>
 800a24a:	0758      	lsls	r0, r3, #29
 800a24c:	d512      	bpl.n	800a274 <__swsetup_r+0x5c>
 800a24e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a250:	b141      	cbz	r1, 800a264 <__swsetup_r+0x4c>
 800a252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a256:	4299      	cmp	r1, r3
 800a258:	d002      	beq.n	800a260 <__swsetup_r+0x48>
 800a25a:	4628      	mov	r0, r5
 800a25c:	f7fd fbe8 	bl	8007a30 <_free_r>
 800a260:	2300      	movs	r3, #0
 800a262:	6363      	str	r3, [r4, #52]	; 0x34
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	2300      	movs	r3, #0
 800a26e:	6063      	str	r3, [r4, #4]
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f043 0308 	orr.w	r3, r3, #8
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	b94b      	cbnz	r3, 800a294 <__swsetup_r+0x7c>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a28a:	d003      	beq.n	800a294 <__swsetup_r+0x7c>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 f883 	bl	800a39a <__smakebuf_r>
 800a294:	89a0      	ldrh	r0, [r4, #12]
 800a296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a29a:	f010 0301 	ands.w	r3, r0, #1
 800a29e:	d00a      	beq.n	800a2b6 <__swsetup_r+0x9e>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60a3      	str	r3, [r4, #8]
 800a2a4:	6963      	ldr	r3, [r4, #20]
 800a2a6:	425b      	negs	r3, r3
 800a2a8:	61a3      	str	r3, [r4, #24]
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	b943      	cbnz	r3, 800a2c0 <__swsetup_r+0xa8>
 800a2ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2b2:	d1c4      	bne.n	800a23e <__swsetup_r+0x26>
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	0781      	lsls	r1, r0, #30
 800a2b8:	bf58      	it	pl
 800a2ba:	6963      	ldrpl	r3, [r4, #20]
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	e7f4      	b.n	800a2aa <__swsetup_r+0x92>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7f7      	b.n	800a2b4 <__swsetup_r+0x9c>
 800a2c4:	20000068 	.word	0x20000068

0800a2c8 <_raise_r>:
 800a2c8:	291f      	cmp	r1, #31
 800a2ca:	b538      	push	{r3, r4, r5, lr}
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	d904      	bls.n	800a2dc <_raise_r+0x14>
 800a2d2:	2316      	movs	r3, #22
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a2de:	b112      	cbz	r2, 800a2e6 <_raise_r+0x1e>
 800a2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <_raise_r+0x32>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 f830 	bl	800a34c <_getpid_r>
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f6:	f000 b817 	b.w	800a328 <_kill_r>
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d00a      	beq.n	800a314 <_raise_r+0x4c>
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	d103      	bne.n	800a30a <_raise_r+0x42>
 800a302:	2316      	movs	r3, #22
 800a304:	6003      	str	r3, [r0, #0]
 800a306:	2001      	movs	r0, #1
 800a308:	e7e7      	b.n	800a2da <_raise_r+0x12>
 800a30a:	2400      	movs	r4, #0
 800a30c:	4628      	mov	r0, r5
 800a30e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a312:	4798      	blx	r3
 800a314:	2000      	movs	r0, #0
 800a316:	e7e0      	b.n	800a2da <_raise_r+0x12>

0800a318 <raise>:
 800a318:	4b02      	ldr	r3, [pc, #8]	; (800a324 <raise+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f7ff bfd3 	b.w	800a2c8 <_raise_r>
 800a322:	bf00      	nop
 800a324:	20000068 	.word	0x20000068

0800a328 <_kill_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	2300      	movs	r3, #0
 800a32c:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_kill_r+0x20>)
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f6 fefc 	bl	8001132 <_kill>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_kill_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_kill_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	20001d38 	.word	0x20001d38

0800a34c <_getpid_r>:
 800a34c:	f7f6 beea 	b.w	8001124 <_getpid>

0800a350 <__swhatbuf_r>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	460c      	mov	r4, r1
 800a354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a358:	4615      	mov	r5, r2
 800a35a:	2900      	cmp	r1, #0
 800a35c:	461e      	mov	r6, r3
 800a35e:	b096      	sub	sp, #88	; 0x58
 800a360:	da0c      	bge.n	800a37c <__swhatbuf_r+0x2c>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	2100      	movs	r1, #0
 800a366:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a36a:	bf0c      	ite	eq
 800a36c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a370:	2340      	movne	r3, #64	; 0x40
 800a372:	2000      	movs	r0, #0
 800a374:	6031      	str	r1, [r6, #0]
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	b016      	add	sp, #88	; 0x58
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	466a      	mov	r2, sp
 800a37e:	f000 f849 	bl	800a414 <_fstat_r>
 800a382:	2800      	cmp	r0, #0
 800a384:	dbed      	blt.n	800a362 <__swhatbuf_r+0x12>
 800a386:	9901      	ldr	r1, [sp, #4]
 800a388:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a38c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a390:	4259      	negs	r1, r3
 800a392:	4159      	adcs	r1, r3
 800a394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a398:	e7eb      	b.n	800a372 <__swhatbuf_r+0x22>

0800a39a <__smakebuf_r>:
 800a39a:	898b      	ldrh	r3, [r1, #12]
 800a39c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a39e:	079d      	lsls	r5, r3, #30
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	d507      	bpl.n	800a3b6 <__smakebuf_r+0x1c>
 800a3a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6163      	str	r3, [r4, #20]
 800a3b2:	b002      	add	sp, #8
 800a3b4:	bd70      	pop	{r4, r5, r6, pc}
 800a3b6:	466a      	mov	r2, sp
 800a3b8:	ab01      	add	r3, sp, #4
 800a3ba:	f7ff ffc9 	bl	800a350 <__swhatbuf_r>
 800a3be:	9900      	ldr	r1, [sp, #0]
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7fd fba4 	bl	8007b10 <_malloc_r>
 800a3c8:	b948      	cbnz	r0, 800a3de <__smakebuf_r+0x44>
 800a3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ce:	059a      	lsls	r2, r3, #22
 800a3d0:	d4ef      	bmi.n	800a3b2 <__smakebuf_r+0x18>
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	f043 0302 	orr.w	r3, r3, #2
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	e7e3      	b.n	800a3a6 <__smakebuf_r+0xc>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	6020      	str	r0, [r4, #0]
 800a3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	6120      	str	r0, [r4, #16]
 800a3ec:	6163      	str	r3, [r4, #20]
 800a3ee:	9b01      	ldr	r3, [sp, #4]
 800a3f0:	b15b      	cbz	r3, 800a40a <__smakebuf_r+0x70>
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f8:	f000 f81e 	bl	800a438 <_isatty_r>
 800a3fc:	b128      	cbz	r0, 800a40a <__smakebuf_r+0x70>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	f043 0301 	orr.w	r3, r3, #1
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	431d      	orrs	r5, r3
 800a40e:	81a5      	strh	r5, [r4, #12]
 800a410:	e7cf      	b.n	800a3b2 <__smakebuf_r+0x18>
	...

0800a414 <_fstat_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	2300      	movs	r3, #0
 800a418:	4d06      	ldr	r5, [pc, #24]	; (800a434 <_fstat_r+0x20>)
 800a41a:	4604      	mov	r4, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	4611      	mov	r1, r2
 800a420:	602b      	str	r3, [r5, #0]
 800a422:	f7f6 fee4 	bl	80011ee <_fstat>
 800a426:	1c43      	adds	r3, r0, #1
 800a428:	d102      	bne.n	800a430 <_fstat_r+0x1c>
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	b103      	cbz	r3, 800a430 <_fstat_r+0x1c>
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	bd38      	pop	{r3, r4, r5, pc}
 800a432:	bf00      	nop
 800a434:	20001d38 	.word	0x20001d38

0800a438 <_isatty_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	2300      	movs	r3, #0
 800a43c:	4d05      	ldr	r5, [pc, #20]	; (800a454 <_isatty_r+0x1c>)
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f6 fee2 	bl	800120c <_isatty>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_isatty_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_isatty_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	20001d38 	.word	0x20001d38

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
